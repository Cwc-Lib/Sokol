// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }


  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};




var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but can be required for the LLVM wasm backend, so it is recommended for full portability.');
  }


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 32096,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5274976,
    DYNAMIC_BASE = 5274976,
    DYNAMICTOP_PTR = 31904;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	var possibleSig = '';
	for(var x in debug_tables) {
		var tbl = debug_tables[x];
		if (tbl[ptr]) {
			possibleSig += 'as sig "' + x + '" pointing to function ' + tbl[ptr] + ', ';
		}
	}
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). This pointer might make sense in another type signature: " + possibleSig);
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw what;
}


var memoryInitializer = null;


// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];

function _emsc_async_js_setup(){ WebGPU.initManagers(); navigator.gpu.requestAdapter().then(function(adapter) { console.log("adapter extensions: " + adapter.extensions); adapter.requestDevice().then(function(device) { console.log("device extensions: " + device.extensions); var gpuContext = document.getElementById("canvas").getContext("gpupresent"); gpuContext.getSwapChainPreferredFormat(device).then(function(fmt) { var swapChainDescriptor = { device: device, format: fmt }; var swapChain = gpuContext.configureSwapChain(swapChainDescriptor); var deviceId = WebGPU.mgrDevice.create(device); var swapChainId = WebGPU.mgrSwapChain.create(swapChain); var fmtId = WebGPU.TextureFormat.findIndex(function(elm) { return elm==fmt; }); console.log("device: " + device); console.log("swap chain: " + swapChain); console.log("preferred format: " + fmt + " (" + fmtId + ")"); _emsc_device_ready(deviceId, swapChainId, fmtId); }); }); }); }



// STATICTOP = STATIC_BASE + 32088;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocatei8", ALLOC_NONE, GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = 32080;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      // If demangle has failed before, stop demangling any further function names
      // This avoids an infinite recursion with malloc()->abort()->stackTrace()->demangle()->malloc()->...
      demangle.recursionGuard = (demangle.recursionGuard|0)+1;
      if (demangle.recursionGuard > 1) return func;
      var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
      assert(__cxa_demangle_func);
      var stackTop = stackSave();
      try {
        var s = func;
        if (s.startsWith('__Z'))
          s = s.substr(1);
        var len = lengthBytesUTF8(s)+1;
        var buf = stackAlloc(len);
        stringToUTF8(s, buf, len);
        var status = stackAlloc(4);
        var ret = __cxa_demangle_func(buf, 0, 0, status);
        if (HEAP32[((status)>>2)] === 0 && ret) {
          return UTF8ToString(ret);
        }
        // otherwise, libcxxabi failed
      } catch(e) {
      } finally {
        _free(ret);
        stackRestore(stackTop);
        if (demangle.recursionGuard < 2) --demangle.recursionGuard;
      }
      // failure when using libcxxabi, don't demangle
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___lock() {}

  
    

  
  
   
  
   
  
     

  function ___unlock() {}

  
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function _fd_close(fd) {try {
  
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
              //ensure null termination at one-past-end byte if not present yet
              var endChar = HEAP[(value + 4 + length * charSize) >> shift];
              var endCharSwap = 0;
              if(endChar != 0)
              {
                  endCharSwap = endChar;
                  HEAP[(value + 4 + length * charSize) >> shift] = 0;
              }
  
              var decodeStartPtr = value + 4;
              //looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if(HEAP[currentBytePtr >> shift] == 0)
                  {
                      var stringSegment = decodeString(decodeStartPtr);
                      if(str === undefined)
                          str = stringSegment;
                      else
                      {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              if(endCharSwap != 0)
                  HEAP[(value + 4 + length * charSize) >> shift] = endCharSwap;
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

   

   

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      }};
  
  
  function __maybeCStringToJsString(cString) {
      return cString === cString + 0 ? UTF8ToString(cString) : cString;
    }
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      var domElement = __specialEventTargets[target] || (typeof document !== 'undefined' ? document.querySelector(__maybeCStringToJsString(target)) : undefined);
      return domElement;
    }
  
  function __getBoundingClientRect(e) {
      return e.getBoundingClientRect();
    }function _emscripten_get_element_css_size(target, width, height) {
      target = __findEventTarget(target);
      if (!target) return -4;
  
      var rect = __getBoundingClientRect(target);
      HEAPF64[((width)>>3)]=rect.width;
      HEAPF64[((height)>>3)]=rect.height;
  
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

   

  function _emscripten_request_animation_frame_loop(cb, userData) {
      function tick(timeStamp) {
        if (dynCall_idi(cb, timeStamp, userData)) {
          requestAnimationFrame(tick);
        }
      }
      return requestAnimationFrame(tick);
    }

  
  function _emscripten_get_now() { abort() }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  function __findCanvasEventTarget(target) { return __findEventTarget(target); }function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }

  
  function __registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc( 36 );
  
      target = __findEventTarget(target);
  
      var uiEventHandlerFunc = function(ev) {
        var e = ev || event;
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var uiEvent = JSEvents.uiEvent;
        var b = document.body; // Take document.body to a variable, Closure compiler does not outline access to it on its own.
        HEAP32[((uiEvent)>>2)]=e.detail;
        HEAP32[(((uiEvent)+(4))>>2)]=b.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)]=b.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)]=innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)]=innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)]=outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)]=outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)]=pageXOffset;
        HEAP32[(((uiEvent)+(32))>>2)]=pageYOffset;
        if (dynCall_iiii(callbackfunc, eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
      return 0;
    }



  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  var WebGPU={initManagers:function() {
        if (this["mgrDevice"]) return;
  
        function makeManager() {
          return {
            objects: [undefined],
            create: function(object, wrapper /* = {} */) {
              wrapper = wrapper || {};
  
              var id = this.objects.length;
              assert(typeof this.objects[id] === 'undefined');
              wrapper.refcount = 1;
              wrapper.object = object;
              this.objects[id] = wrapper;
              return id;
            },
            get: function(id) {
              if (id === 0) return undefined;
              var o = this.objects[id];
              assert(typeof o !== "undefined");
              return o.object;
            },
            reference: function(id) {
              var o = this.objects[id];
              assert(typeof o !== "undefined");
              o.refcount++;
            },
            release: function(id) {
              var o = this.objects[id];
              assert(typeof o !== "undefined");
              assert(o.refcount > 0);
              o.refcount--;
              if (o.refcount <= 0) {
                delete this.objects[id];
              }
            },
          };
        }
  
        this.mgrSurface = this.mgrSurface || makeManager();
        this.mgrSwapChain = this.mgrSwapChain || makeManager();
  
        this["mgrDevice"] = this["mgrDevice"] || makeManager();
        this.mgrQueue = this.mgrQueue || makeManager();
        this.mgrFence = this.mgrFence || makeManager();
  
        this.mgrCommandBuffer = this.mgrCommandBuffer || makeManager();
        this.mgrCommandEncoder = this.mgrCommandEncoder || makeManager();
        this.mgrRenderPassEncoder = this.mgrRenderPassEncoder || makeManager();
        this.mgrComputePassEncoder = this.mgrComputePassEncoder || makeManager();
  
        this.mgrBindGroup = this.mgrBindGroup || makeManager();
        this.mgrBuffer = this.mgrBuffer || makeManager();
        this.mgrSampler = this.mgrSampler || makeManager();
        this.mgrTexture = this.mgrTexture || makeManager();
        this.mgrTextureView = this.mgrTextureView || makeManager();
  
        this.mgrBindGroupLayout = this.mgrBindGroupLayout || makeManager();
        this.mgrPipelineLayout = this.mgrPipelineLayout || makeManager();
        this.mgrRenderPipeline = this.mgrRenderPipeline || makeManager();
        this.mgrComputePipeline = this.mgrComputePipeline || makeManager();
        this.mgrShaderModule = this.mgrShaderModule || makeManager();
  
        this.mgrRenderBundleEncoder = this.mgrRenderBundleEncoder || makeManager();
        this.mgrRenderBundle = this.mgrRenderBundle || makeManager();
      },trackMapWrite:function(obj, mapped) {
        var data = _malloc(mapped.byteLength);
        HEAPU8.fill(0, data, mapped.byteLength);
        obj.mapWriteSrc = data;
        obj.mapWriteDst = mapped;
      },trackUnmap:function(obj) {
        if (obj.mapWriteSrc) {
          new Uint8Array(obj.mapWriteDst).set(HEAPU8.subarray(obj.mapWriteSrc, obj.mapWriteSrc + obj.mapWriteDst.byteLength));
          _free(obj.mapWriteSrc);
        }
        obj.mapWriteSrc = undefined;
        obj.mapWriteDst = undefined;
      },makeColor:function(ptr) {
        return {
          "r": HEAPF32[((ptr)>>2)],
          "g": HEAPF32[(((ptr)+(4))>>2)],
          "b": HEAPF32[(((ptr)+(8))>>2)],
          "a": HEAPF32[(((ptr)+(12))>>2)],
        };
      },makeExtent3D:function(ptr) {
        return {
          "width": HEAPU32[((ptr)>>2)],
          "height": HEAPU32[(((ptr)+(4))>>2)],
          "depth": HEAPU32[(((ptr)+(8))>>2)],
        };
      },makeOrigin3D:function(ptr) {
        return {
          "x": HEAPU32[((ptr)>>2)],
          "y": HEAPU32[(((ptr)+(4))>>2)],
          "z": HEAPU32[(((ptr)+(8))>>2)],
        };
      },makeTextureCopyView:function(ptr) {
        assert(ptr);assert(HEAP32[((ptr)>>2)] === 0);
        return {
          "texture": this.mgrTexture.get(
            HEAP32[(((ptr)+(4))>>2)]),
          "mipLevel": HEAPU32[(((ptr)+(8))>>2)],
          "arrayLayer": HEAPU32[(((ptr)+(12))>>2)],
          "origin": WebGPU.makeOrigin3D(ptr + 16),
        };
      },makeBufferCopyView:function(ptr) {
        assert(ptr);assert(HEAP32[((ptr)>>2)] === 0);
        return {
          "buffer": this.mgrBuffer.get(
            HEAP32[(((ptr)+(4))>>2)]),
          "offset": HEAPU32[((((ptr + 4))+(8))>>2)] * 0x100000000 + HEAPU32[(((ptr)+(8))>>2)],
          "rowPitch": HEAPU32[(((ptr)+(16))>>2)],
          "imageHeight": HEAPU32[(((ptr)+(20))>>2)],
        };
      },makeProgrammableStageDescriptor:function(ptr) {
        if (ptr === 0) return undefined;
        assert(ptr);assert(HEAP32[((ptr)>>2)] === 0);
        return {
          "module": WebGPU.mgrShaderModule.get(
            HEAP32[(((ptr)+(4))>>2)]),
          "entryPoint": UTF8ToString(
            HEAP32[(((ptr)+(8))>>2)]),
        };
      },AddressMode:["repeat","mirror-repeat","clamp-to-edge"],BindingType:["uniform-buffer","storage-buffer","readonly-storage-buffer","sampler","sampled-texture","storage-texture"],BlendFactor:["zero","one","src-color","one-minus-src-color","src-alpha","one-minus-src-alpha","dst-color","one-minus-dst-color","dst-alpha","one-minus-dst-alpha","src-alpha-saturated","blend-color","one-minus-blend-color"],BlendOperation:["add","subtract","reverse-subtract","min","max"],BufferMapAsyncStatus:["success","error","unknown","device-lost"],CompareFunction:["never","less","less-equal","greater","greater-equal","equal","not-equal","always"],CullMode:["none","front","back"],ErrorFilter:["none","validation","out-of-memory"],ErrorType:["no-error","validation","out-of-memory","unknown","device-lost"],FenceCompletionStatus:["success","error","unknown","device-lost"],FilterMode:["nearest","linear"],FrontFace:["ccw","cw"],IndexFormat:["uint16","uint32"],InputStepMode:["vertex","instance"],LoadOp:["clear","load"],PresentMode:["no-v-sync","v-sync"],PrimitiveTopology:["point-list","line-list","line-strip","triangle-list","triangle-strip"],StencilOperation:["keep","zero","replace","invert","increment-clamp","decrement-clamp","increment-wrap","decrement-wrap"],StoreOp:["store","clear"],TextureAspect:["all","stencil-only","depth-only"],TextureComponentType:["float","sint","uint"],TextureDimension:["1d","2d","3d"],TextureFormat:[,"r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32float","r32uint","r32sint","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm-srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm-srgb","rgb10a2unorm","rg11b10float","rg32float","rg32uint","rg32sint","rgba16uint","rgba16sint","rgba16float","rgba32float","rgba32uint","rgba32sint","depth32float","depth24plus","depth24plus-stencil8","bc1rgba-unorm","bc1rgba-unorm-srgb","bc2rgba-unorm","bc2rgba-unorm-srgb","bc3rgba-unorm","bc3rgba-unorm-srgb","bc4r-unorm","bc4r-snorm","bc5rg-unorm","bc5rg-snorm","bc6h-rgb-ufloat","bc6h-rgb-sfloat","bc7rgba-unorm","bc7rgba-unorm-srgb"],TextureViewDimension:[,"1d","2d","2d-array","cube","cube-array","3d"],VertexFormat:["uchar2","uchar4","char2","char4","uchar2norm","uchar4norm","char2norm","char4norm","ushort2","ushort4","short2","short4","ushort2norm","ushort4norm","short2norm","short4norm","half2","half4","float","float2","float3","float4","uint","uint2","uint3","uint4","int","int2","int3","int4"]};function _wgpuBindGroupLayoutRelease(id) {
    WebGPU.mgrBindGroupLayout.release(id);
  }

  function _wgpuBindGroupRelease(id) {
    WebGPU.mgrBindGroup.release(id);
  }

  function _wgpuBufferMapWriteAsync(bufferId, callback, userdata) {
      var bufferWrapper = WebGPU.mgrBuffer.objects[bufferId];
      var buffer = bufferWrapper.object;
  
      var WEBGPU_BUFFER_MAP_ASYNC_STATUS_SUCCESS = 0;
      var WEBGPU_BUFFER_MAP_ASYNC_STATUS_ERROR = 1;
      buffer["mapWriteAsync"]().then(function(mapped) {
        WebGPU.trackMapWrite(bufferWrapper, mapped);
  
        var data = bufferWrapper.mapWriteSrc;
        var dataLength_h = (mapped.byteLength / 0x100000000) | 0;
        var dataLength_l = mapped.byteLength | 0;
        // WGPUBufferMapAsyncStatus status, void* data, uint64_t dataLength, void* userdata
        dynCall('viiji', callback, [WEBGPU_BUFFER_MAP_ASYNC_STATUS_SUCCESS, data, dataLength_l, dataLength_h, userdata]);
      }, function() {
        // TODO(kainino0x): Figure out how to pick other error status values.
        dynCall('viiji', callback, [WEBGPU_BUFFER_MAP_ASYNC_STATUS_ERROR, 0, 0, 0, userdata]);
      });
    }

  function _wgpuBufferReference(id) {
    WebGPU.mgrBuffer.reference(id);
  }

  function _wgpuBufferRelease(id) {
    WebGPU.mgrBuffer.release(id);
  }

  function _wgpuBufferUnmap(bufferId) {
      var bufferWrapper = WebGPU.mgrBuffer.objects[bufferId];
      WebGPU.trackUnmap(bufferWrapper);
      bufferWrapper.object["unmap"]();
    }

  function _wgpuCommandBufferRelease(id) {
    WebGPU.mgrCommandBuffer.release(id);
  }

  function _wgpuCommandEncoderBeginRenderPass(encoderId, descriptor) {
      assert(descriptor);
  
      function makeColorAttachment(caPtr) {
        var loadValue = WebGPU.LoadOp[
            HEAPU32[(((caPtr)+(8))>>2)]];
        if (loadValue === 'clear') {
          loadValue = WebGPU.makeColor(caPtr + 16);
        }
  
        return {
          "attachment": WebGPU.mgrTextureView.get(
            HEAPU32[((caPtr)>>2)]),
          "resolveTarget": WebGPU.mgrTextureView.get(
            HEAPU32[(((caPtr)+(4))>>2)]),
          "storeOp": WebGPU.StoreOp[
            HEAPU32[(((caPtr)+(12))>>2)]],
          "loadValue": loadValue,
        };
      }
  
      function makeColorAttachments(count, caPtr) {
        var attachments = [];
        for (var i = 0; i < count; ++i) {
          attachments.push(makeColorAttachment(caPtr + 32 * i));
        }
        return attachments;
      }
  
      function makeDepthStencilAttachment(dsaPtr) {
        if (dsaPtr === 0) return undefined;
  
        var depthLoadValue = WebGPU.LoadOp[
            HEAPU32[(((dsaPtr)+(4))>>2)]];
        if (depthLoadValue === 'clear') {
          depthLoadValue = HEAPF32[(((dsaPtr)+(12))>>2)];
        }
  
        var stencilLoadValue = WebGPU.LoadOp[
            HEAPU32[(((dsaPtr)+(16))>>2)]];
        if (stencilLoadValue === 'clear') {
          stencilLoadValue = HEAPU32[(((dsaPtr)+(24))>>2)];
        }
  
        return {
          "attachment": WebGPU.mgrTextureView.get(
            HEAPU32[((dsaPtr)>>2)]),
          "depthStoreOp": WebGPU.StoreOp[
            HEAPU32[(((dsaPtr)+(8))>>2)]],
          "depthLoadValue": depthLoadValue,
          "stencilStoreOp": WebGPU.StoreOp[
            HEAPU32[(((dsaPtr)+(20))>>2)]],
          "stencilLoadValue": stencilLoadValue,
        };
      }
  
      function makeRenderPassDescriptor(descriptor) {
        assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
        var desc = {
          "label": undefined,
          "colorAttachments": makeColorAttachments(
            HEAPU32[(((descriptor)+(8))>>2)],
            HEAP32[(((descriptor)+(12))>>2)]),
          "depthStencilAttachment": makeDepthStencilAttachment(
            HEAP32[(((descriptor)+(16))>>2)]),
        };
        var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
        if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
        return desc;
      }
  
      var desc = makeRenderPassDescriptor(descriptor);
  
      var commandEncoder = WebGPU.mgrCommandEncoder.get(encoderId);
      return WebGPU.mgrRenderPassEncoder.create(commandEncoder["beginRenderPass"](desc));
    }

  function _wgpuCommandEncoderCopyBufferToBuffer(encoderId, srcId, srcOffset_l, srcOffset_h, dstId, dstOffset_l, dstOffset_h, size_l, size_h) {
      var commandEncoder = WebGPU.mgrCommandEncoder.get(encoderId);
      var src = WebGPU.mgrBuffer.get(srcId);
      var dst = WebGPU.mgrBuffer.get(dstId);
      commandEncoder["copyBufferToBuffer"](
        src, (assert(srcOffset_h < 0x200000), srcOffset_h * 0x100000000 + srcOffset_l)
  ,
        dst, (assert(dstOffset_h < 0x200000), dstOffset_h * 0x100000000 + dstOffset_l)
  ,
        (assert(size_h < 0x200000), size_h * 0x100000000 + size_l)
  );
    }

  function _wgpuCommandEncoderFinish(encoderId) {
      var commandEncoder = WebGPU.mgrCommandEncoder.get(encoderId);
      return WebGPU.mgrCommandBuffer.create(commandEncoder["finish"]());
    }

  function _wgpuCommandEncoderRelease(id) {
    WebGPU.mgrCommandEncoder.release(id);
  }

  function _wgpuDeviceCreateBindGroup(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
  
      function makeBinding(bindingPtr) {
        assert(bindingPtr);
  
        var bufferId = HEAPU32[(((bindingPtr)+(4))>>2)];
        var samplerId = HEAPU32[(((bindingPtr)+(24))>>2)];
        var textureViewId = HEAPU32[(((bindingPtr)+(28))>>2)];
        assert((bufferId != 0) + (samplerId != 0) + (textureViewId != 0) == 1);
  
        var binding = HEAPU32[((bindingPtr)>>2)];
  
        if (bufferId != 0) {
          var size = undefined;
  
          // Handle WGPU_WHOLE_SIZE.
          var sizePart1 = HEAPU32[(((bindingPtr)+(16))>>2)];
          var sizePart2 = HEAPU32[(((bindingPtr)+(20))>>2)];
          if (sizePart1 != 0xFFFFFFFF || sizePart2 != 0xFFFFFFFF) {
            size = HEAPU32[((((bindingPtr + 4))+(16))>>2)] * 0x100000000 + HEAPU32[(((bindingPtr)+(16))>>2)];
          }
  
          return {
            "binding": binding,
            "resource": {
              "buffer": WebGPU.mgrBuffer.get(bufferId),
              "offset": HEAPU32[((((bindingPtr + 4))+(8))>>2)] * 0x100000000 + HEAPU32[(((bindingPtr)+(8))>>2)],
              "size": size,
            },
          };
        } else if (samplerId != 0) {
          return {
            "binding": binding,
            "resource": WebGPU.mgrSampler.get(samplerId),
          };
        } else {
          return {
            "binding": binding,
            "resource": WebGPU.mgrTextureView.get(textureViewId),
          };
        }
      }
  
      function makeBindings(count, bindingsPtrs) {
        var bindings = [];
        for (var i = 0; i < count; ++i) {
          bindings.push(makeBinding(bindingsPtrs +
              32 * i));
        }
        return bindings;
      }
  
      var desc = {
        "label": undefined,
        "layout": WebGPU.mgrBindGroupLayout.get(
          HEAP32[(((descriptor)+(8))>>2)]),
        "bindings": makeBindings(
          HEAPU32[(((descriptor)+(12))>>2)],
          HEAP32[(((descriptor)+(16))>>2)]
        ),
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrBindGroup.create(device["createBindGroup"](desc));
    }

  function _wgpuDeviceCreateBindGroupLayout(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
  
      function makeBinding(bindingPtr) {
        assert(bindingPtr);
  
        return {
          "binding":
            HEAPU32[((bindingPtr)>>2)],
          "visibility":
            HEAPU32[(((bindingPtr)+(4))>>2)],
          "type": WebGPU.BindingType[
            HEAPU32[(((bindingPtr)+(8))>>2)]],
          "textureDimension": WebGPU.TextureViewDimension[
            HEAPU32[(((bindingPtr)+(16))>>2)]],
          "textureComponentType": WebGPU.TextureComponentType[
            HEAPU32[(((bindingPtr)+(20))>>2)]],
          "multisampled":
            (HEAP8[(((bindingPtr)+(13))>>0)] !== 0),
          "hasDynamicOffset":
            (HEAP8[(((bindingPtr)+(12))>>0)] !== 0),
        };
      }
  
      function makeBindings(count, bindingsPtrs) {
        var bindings = [];
        for (var i = 0; i < count; ++i) {
          bindings.push(makeBinding(bindingsPtrs +
              24 * i));
        }
        return bindings;
      }
  
      var desc = {
        "bindings": makeBindings(
          HEAPU32[(((descriptor)+(8))>>2)],
          HEAP32[(((descriptor)+(12))>>2)]
        ),
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrBindGroupLayout.create(device["createBindGroupLayout"](desc));
    }

  function _wgpuDeviceCreateBuffer(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
      var desc = {
        "label": undefined,
        "usage": HEAPU32[(((descriptor)+(8))>>2)],
        "size": HEAPU32[((((descriptor + 4))+(16))>>2)] * 0x100000000 + HEAPU32[(((descriptor)+(16))>>2)],
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrBuffer.create(device["createBuffer"](desc));
    }

  function _wgpuDeviceCreateBufferMapped(returnPtr, deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
      var desc = {
        "usage": HEAPU32[(((descriptor)+(8))>>2)],
        "size": HEAPU32[((((descriptor + 4))+(16))>>2)] * 0x100000000 + HEAPU32[(((descriptor)+(16))>>2)],
      };
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      var bufferMapped = device["createBufferMapped"](desc);
      var buffer = bufferMapped[0];
      var mapped = bufferMapped[1];
  
      var bufferWrapper = {};
      var bufferId = WebGPU.mgrBuffer.create(buffer, bufferWrapper);
      WebGPU.trackMapWrite(bufferWrapper, mapped);
  
      var dataLength_h = (mapped.byteLength / 0x100000000) | 0;
      var dataLength_l = mapped.byteLength | 0;
  
      HEAP32[((returnPtr)>>2)]=bufferId
      HEAP32[(((returnPtr)+(8))>>2)]=dataLength_l
      HEAP32[(((returnPtr)+(12))>>2)]=dataLength_h
      HEAP32[(((returnPtr)+(16))>>2)]=bufferWrapper.mapWriteSrc
    }

  function _wgpuDeviceCreateCommandEncoder(deviceId, descriptor) {
      var desc;
      if (descriptor) {
        assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
        desc = {
          "label": undefined,
        };
        var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
        if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
      }
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrCommandEncoder.create(device["createCommandEncoder"](desc));
    }

  function _wgpuDeviceCreatePipelineLayout(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
      var bglCount = HEAPU32[(((descriptor)+(8))>>2)];
      var bglPtr = HEAP32[(((descriptor)+(12))>>2)];
      var bgls = [];
      for (var i = 0; i < bglCount; ++i) {
        bgls.push(WebGPU.mgrBindGroupLayout.get(
          HEAP32[(((bglPtr)+(4 * i))>>2)]));
      }
      var desc = {
        "label": undefined,
        "bindGroupLayouts": bgls,
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrPipelineLayout.create(device["createPipelineLayout"](desc));
    }

  function _wgpuDeviceCreateQueue(deviceId) {
      assert(WebGPU.mgrQueue.objects.length === 1, 'there is only one queue');
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrQueue.create(device["defaultQueue"]);
    }

  function _wgpuDeviceCreateRenderPipeline(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
  
      function makeRasterizationState(rsPtr) {
        if (rsPtr === 0) return undefined;
        assert(rsPtr);assert(HEAP32[((rsPtr)>>2)] === 0);
        return {
          "frontFace": WebGPU.FrontFace[
            HEAPU32[(((rsPtr)+(4))>>2)]],
          "cullMode": WebGPU.CullMode[
            HEAPU32[(((rsPtr)+(8))>>2)]],
        };
      }
  
      function makeBlendDescriptor(bdPtr) {
        if (bdPtr === 0) return undefined;
        return {
          "operation": WebGPU.BlendOperation[
            HEAPU32[((bdPtr)>>2)]],
          "srcFactor": WebGPU.BlendFactor[
            HEAPU32[(((bdPtr)+(4))>>2)]],
          "dstFactor": WebGPU.BlendFactor[
            HEAPU32[(((bdPtr)+(8))>>2)]],
        };
      }
  
      function makeColorState(csPtr) {
        assert(csPtr);assert(HEAP32[((csPtr)>>2)] === 0);
        return {
          "format": WebGPU.TextureFormat[
            HEAPU32[(((csPtr)+(4))>>2)]],
          "alphaBlend": makeBlendDescriptor(csPtr + 8),
          "colorBlend": makeBlendDescriptor(csPtr + 20),
          "writeMask": HEAPU32[(((csPtr)+(32))>>2)],
        };
      }
  
      function makeColorStates(count, csPtr) {
        if (count === 0) return undefined;
  
        var states = [];
        for (var i = 0; i < count; ++i) {
          states.push(makeColorState(csPtr + 36 * i));
        }
        return states;
      }
  
      function makeStencilStateFace(ssfPtr) {
        assert(ssfPtr);
        return {
          "compare": WebGPU.CompareFunction[
            HEAPU32[((ssfPtr)>>2)]],
          "failOp": WebGPU.StencilOperation[
            HEAPU32[(((ssfPtr)+(4))>>2)]],
          "depthFailOp": WebGPU.StencilOperation[
            HEAPU32[(((ssfPtr)+(8))>>2)]],
          "passOp": WebGPU.StencilOperation[
            HEAPU32[(((ssfPtr)+(12))>>2)]],
        };
      }
  
      function makeDepthStencilState(dssPtr) {
        if (dssPtr === 0) return undefined;
  
        assert(dssPtr);
        return {
          "format": WebGPU.TextureFormat[
            HEAPU32[(((dssPtr)+(4))>>2)]],
          "depthWriteEnabled": (HEAP8[(((dssPtr)+(8))>>0)] !== 0),
          "depthCompare": WebGPU.CompareFunction[
            HEAPU32[(((dssPtr)+(12))>>2)]],
          "stencilFront": makeStencilStateFace(dssPtr + 16),
          "stencilBack": makeStencilStateFace(dssPtr + 32),
          "stencilReadMask": HEAPU32[(((dssPtr)+(48))>>2)],
          "stencilWriteMask": HEAPU32[(((dssPtr)+(52))>>2)],
        };
      }
  
      function makeVertexAttribute(vaPtr) {
        assert(vaPtr);
        return {
          "format": WebGPU.VertexFormat[
            HEAPU32[((vaPtr)>>2)]],
          "offset": HEAPU32[((((vaPtr + 4))+(8))>>2)] * 0x100000000 + HEAPU32[(((vaPtr)+(8))>>2)],
          "shaderLocation": HEAPU32[(((vaPtr)+(16))>>2)],
        };
      }
  
      function makeVertexAttributes(count, vaArrayPtr) {
        var vas = [];
        for (var i = 0; i < count; ++i) {
          vas.push(makeVertexAttribute(vaArrayPtr + i * 24));
        }
        return vas;
      }
  
      function makeVertexBuffer(vbPtr) {
        if (vbPtr === 0) return undefined;
  
        return {
          "arrayStride": HEAPU32[(((vbPtr + 4))>>2)] * 0x100000000 + HEAPU32[((vbPtr)>>2)],
          "stepMode": WebGPU.InputStepMode[
            HEAPU32[(((vbPtr)+(8))>>2)]],
          "attributes": makeVertexAttributes(
            HEAPU32[(((vbPtr)+(12))>>2)],
            HEAP32[(((vbPtr)+(16))>>2)]),
        };
      }
  
      function makeVertexBuffers(count, vbArrayPtr) {
        if (count === 0) return undefined;
  
        var vbs = [];
        for (var i = 0; i < count; ++i) {
          vbs.push(makeVertexBuffer(vbArrayPtr + i * 24));
        }
        return vbs;
      }
  
      function makeVertexState(viPtr) {
        if (viPtr === 0) return undefined;
        assert(viPtr);assert(HEAP32[((viPtr)>>2)] === 0);
        return {
          "indexFormat": WebGPU.IndexFormat[
            HEAPU32[(((viPtr)+(4))>>2)]],
          "vertexBuffers": makeVertexBuffers(
            HEAPU32[(((viPtr)+(8))>>2)],
            HEAP32[(((viPtr)+(12))>>2)]),
        };
      }
  
      var desc = {
        "label": undefined,
        "layout": WebGPU.mgrPipelineLayout.get(
          HEAP32[(((descriptor)+(8))>>2)]),
        "vertexStage": WebGPU.makeProgrammableStageDescriptor(
          descriptor + 12),
        "fragmentStage": WebGPU.makeProgrammableStageDescriptor(
          HEAP32[(((descriptor)+(24))>>2)]),
        "primitiveTopology": WebGPU.PrimitiveTopology[
          HEAPU32[(((descriptor)+(32))>>2)]],
        "rasterizationState": makeRasterizationState(
          HEAP32[(((descriptor)+(36))>>2)]),
        "colorStates": makeColorStates(
          HEAPU32[(((descriptor)+(48))>>2)],
          HEAP32[(((descriptor)+(52))>>2)]),
        "depthStencilState": makeDepthStencilState(
          HEAP32[(((descriptor)+(44))>>2)]),
        "vertexState": makeVertexState(
          HEAP32[(((descriptor)+(28))>>2)]),
        "sampleCount": HEAPU32[(((descriptor)+(40))>>2)],
        "sampleMask": HEAPU32[(((descriptor)+(56))>>2)],
        "alphaToCoverageEnabled": (HEAP8[(((descriptor)+(60))>>0)] !== 0),
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrRenderPipeline.create(device["createRenderPipeline"](desc));
    }

  function _wgpuDeviceCreateShaderModule(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
      var count = HEAPU32[(((descriptor)+(8))>>2)];
      var start = HEAP32[(((descriptor)+(12))>>2)];
      var desc = {
        "label": undefined,
        "code": HEAPU32.subarray(start >> 2, (start >> 2) + count),
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrShaderModule.create(device["createShaderModule"](desc));
    }

  function _wgpuDeviceCreateTexture(deviceId, descriptor) {
      assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
  
      var desc = {
        "label": undefined,
        "size": WebGPU.makeExtent3D(descriptor + 16),
        "arrayLayerCount": HEAPU32[(((descriptor)+(28))>>2)],
        "mipLevelCount": HEAPU32[(((descriptor)+(36))>>2)],
        "sampleCount": HEAPU32[(((descriptor)+(40))>>2)],
        "dimension": WebGPU.TextureDimension[
          HEAPU32[(((descriptor)+(12))>>2)]],
        "format": WebGPU.TextureFormat[
          HEAPU32[(((descriptor)+(32))>>2)]],
        "usage": HEAPU32[(((descriptor)+(8))>>2)],
      };
      var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
      if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
  
      var device = WebGPU["mgrDevice"].get(deviceId);
      return WebGPU.mgrTexture.create(device["createTexture"](desc));
    }

  function _wgpuPipelineLayoutRelease(id) {
    WebGPU.mgrPipelineLayout.release(id);
  }

  function _wgpuQueueRelease(id) {
    WebGPU.mgrQueue.release(id);
  }

  function _wgpuQueueSubmit(queueId, commandCount, commands) {
      assert(commands % 4 === 0);
      var queue = WebGPU.mgrQueue.get(queueId);
      var cmds = Array.from(HEAP32.subarray(commands >> 2, (commands >> 2) + commandCount),
        function(id) { return WebGPU.mgrCommandBuffer.get(id); });
      queue.submit(cmds);
    }

  function _wgpuRenderPassEncoderDraw(passId, vertexCount, instanceCount, firstVertex, firstInstance) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      pass["draw"](vertexCount, instanceCount, firstVertex, firstInstance);
    }

  function _wgpuRenderPassEncoderDrawIndexed(passId, indexCount, instanceCount, firstIndex, baseVertex, firstInstance) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      pass["drawIndexed"](indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
    }

  function _wgpuRenderPassEncoderEndPass(passId) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      pass["endPass"]();
    }

  function _wgpuRenderPassEncoderRelease(id) {
    WebGPU.mgrRenderPassEncoder.release(id);
  }

  function _wgpuRenderPassEncoderSetBindGroup(passId, groupIndex, groupId, dynamicOffsetCount, dynamicOffsetsPtr) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      var group = WebGPU.mgrBindGroup.get(groupId);
      if (dynamicOffsetCount == 0) {
        pass["setBindGroup"](groupIndex, group);
      } else {
        var offsets = [];
        for (var i = 0; i < dynamicOffsetCount; i++, dynamicOffsetsPtr += 4) {
          offsets.push(HEAPU32[((dynamicOffsetsPtr)>>2)]);
        }
        pass["setBindGroup"](groupIndex, group, offsets);
      }
    }

  function _wgpuRenderPassEncoderSetBlendColor(passId, colorPtr) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      var color = WebGPU.makeColor(colorPtr);
      pass["setBlendColor"](color);
    }

  function _wgpuRenderPassEncoderSetIndexBuffer(passId, bufferId, offset) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      var buffer = WebGPU.mgrBuffer.get(bufferId);
      pass["setIndexBuffer"](buffer, offset);
    }

  function _wgpuRenderPassEncoderSetPipeline(passId, pipelineId) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      var pipeline = WebGPU.mgrRenderPipeline.get(pipelineId);
      pass["setPipeline"](pipeline);
    }

  function _wgpuRenderPassEncoderSetStencilReference(passId, reference) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      pass["setStencilReference"](reference);
    }

  function _wgpuRenderPassEncoderSetVertexBuffer(passId, slot, bufferId, offset) {
      var pass = WebGPU.mgrRenderPassEncoder.get(passId);
      pass["setVertexBuffer"](slot, WebGPU.mgrBuffer.get(bufferId), offset);
    }

  function _wgpuRenderPipelineRelease(id) {
    WebGPU.mgrRenderPipeline.release(id);
  }

  function _wgpuSamplerRelease(id) {
    WebGPU.mgrSampler.release(id);
  }

  function _wgpuShaderModuleRelease(id) {
    WebGPU.mgrShaderModule.release(id);
  }

  function _wgpuSwapChainGetCurrentTextureView(swapChainId) {
      var swapChain = WebGPU.mgrSwapChain.get(swapChainId);
      return WebGPU.mgrTextureView.create(swapChain["getCurrentTexture"]()["createView"]());
    }

  function _wgpuTextureCreateView(textureId, descriptor) {
      var desc;
      if (descriptor) {
        assert(descriptor);assert(HEAP32[((descriptor)>>2)] === 0);
        desc = {
          "format": WebGPU.TextureFormat[
            HEAPU32[(((descriptor)+(8))>>2)]],
          "dimension": WebGPU.TextureViewDimension[
            HEAPU32[(((descriptor)+(12))>>2)]],
          "baseMipLevel": HEAPU32[(((descriptor)+(16))>>2)],
          "mipLevelCount": HEAPU32[(((descriptor)+(20))>>2)],
          "baseArrayLayer": HEAPU32[(((descriptor)+(24))>>2)],
          "arrayLayerCount": HEAPU32[(((descriptor)+(28))>>2)],
          "aspect": WebGPU.TextureAspect[
            HEAPU32[(((descriptor)+(32))>>2)]],
        };
        var labelPtr = HEAP32[(((descriptor)+(4))>>2)];
        if (labelPtr) desc["label"] = UTF8ToString(labelPtr);
      }
  
      var texture = WebGPU.mgrTexture.get(textureId);
      return WebGPU.mgrTextureView.create(texture["createView"](desc));
    }

  function _wgpuTextureRelease(id) {
    WebGPU.mgrTexture.release(id);
  }

  function _wgpuTextureViewRelease(id) {
    WebGPU.mgrTextureView.release(id);
  }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance['now'](); };
  ;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array

var debug_table_i = [0];
var debug_table_idi = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'_emsc_frame',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_ii = [0,'___stdio_close',0,0,'___emscripten_stdout_close',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'_wgpu_get_render_view','_wgpu_get_resolve_view','_wgpu_get_depth_stencil_view',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_iidiiii = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'_fmt_fp',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_iii = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE',0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE',0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE',0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE',0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE',0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE',0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE',0,0,0,0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_iiii = [0,0,'___stdio_write',0,0,0,'_sn_write',0,0,0,0,'__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv',0,0,0,0,0,0,0,0,'__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'_emsc_size_changed',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_iiiii = [0,0,0,'___stdio_seek',0,'___emscripten_stdout_seek',0,0];
var debug_table_v = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'___cxa_pure_virtual',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'_init','_frame','_shutdown_',0,0,0,0,0,0,0,0,0,'__ZL28demangling_terminate_handlerv',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_vi = [0,0,0,0,0,0,0,'__ZN10__cxxabiv116__shim_type_infoD2Ev','__ZN10__cxxabiv117__class_type_infoD0Ev','__ZNK10__cxxabiv116__shim_type_info5noop1Ev','__ZNK10__cxxabiv116__shim_type_info5noop2Ev',0,0,0,0,'__ZN10__cxxabiv120__si_class_type_infoD0Ev',0,0,0,'__ZN10__cxxabiv123__fundamental_type_infoD0Ev',0,'__ZN10__cxxabiv121__vmi_class_type_infoD0Ev',0,0,0,0,0,0,0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev','__ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev',0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev',0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev',0,0,0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev',0,0,0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev',0,0,'__ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev',0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev',0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev',0,0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev',0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev',0,0,0,0,'__ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev',0,'__ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_vii = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv',0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE',0,0,'__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE',0,0,'__ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE',0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE',0,0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv',0,'__ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv',0,0,'__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE',0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE',0,0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE',0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE',0,0,0,'__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE','__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE',0,'__ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE',0,0,0,0,0,0,0,0,0,0,0,0,'_pop_arg_long_double',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_viiii = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi',0,0,0,'__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi',0,0,0,0,0,'__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi',0,0,0,0,0,0,0];
var debug_table_viiiii = [0,0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib',0,0,0,'__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib',0,0,0,0,0,'__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'__sg_wgpu_ubpool_mapped_callback','__sg_wgpu_staging_mapped_callback',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var debug_table_viiiiii = [0,0,0,0,0,0,0,0,0,0,0,0,'__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib',0,0,0,'__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib',0,0,0,0,0,'__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib',0,0,0,0,0,0,0,0,0];
var debug_tables = {
  'i': debug_table_i,
  'idi': debug_table_idi,
  'ii': debug_table_ii,
  'iidiiii': debug_table_iidiiii,
  'iii': debug_table_iii,
  'iiii': debug_table_iiii,
  'iiiii': debug_table_iiiii,
  'v': debug_table_v,
  'vi': debug_table_vi,
  'vii': debug_table_vii,
  'viiii': debug_table_viiii,
  'viiiii': debug_table_viiiii,
  'viiiiii': debug_table_viiiiii,
};
function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_idi(x) { abortFnPtrError(x, 'idi'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array };

var asmLibraryArg = { "___assert_fail": ___assert_fail, "___lock": ___lock, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__embind_register_bool": __embind_register_bool, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_register": __emval_register, "__findCanvasEventTarget": __findCanvasEventTarget, "__findEventTarget": __findEventTarget, "__getBoundingClientRect": __getBoundingClientRect, "__maybeCStringToJsString": __maybeCStringToJsString, "__registerUiEventCallback": __registerUiEventCallback, "_abort": _abort, "_embind_repr": _embind_repr, "_emsc_async_js_setup": _emsc_async_js_setup, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_animation_frame_loop": _emscripten_request_animation_frame_loop, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size, "_emscripten_set_resize_callback_on_thread": _emscripten_set_resize_callback_on_thread, "_fd_close": _fd_close, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_llvm_trap": _llvm_trap, "_wgpuBindGroupLayoutRelease": _wgpuBindGroupLayoutRelease, "_wgpuBindGroupRelease": _wgpuBindGroupRelease, "_wgpuBufferMapWriteAsync": _wgpuBufferMapWriteAsync, "_wgpuBufferReference": _wgpuBufferReference, "_wgpuBufferRelease": _wgpuBufferRelease, "_wgpuBufferUnmap": _wgpuBufferUnmap, "_wgpuCommandBufferRelease": _wgpuCommandBufferRelease, "_wgpuCommandEncoderBeginRenderPass": _wgpuCommandEncoderBeginRenderPass, "_wgpuCommandEncoderCopyBufferToBuffer": _wgpuCommandEncoderCopyBufferToBuffer, "_wgpuCommandEncoderFinish": _wgpuCommandEncoderFinish, "_wgpuCommandEncoderRelease": _wgpuCommandEncoderRelease, "_wgpuDeviceCreateBindGroup": _wgpuDeviceCreateBindGroup, "_wgpuDeviceCreateBindGroupLayout": _wgpuDeviceCreateBindGroupLayout, "_wgpuDeviceCreateBuffer": _wgpuDeviceCreateBuffer, "_wgpuDeviceCreateBufferMapped": _wgpuDeviceCreateBufferMapped, "_wgpuDeviceCreateCommandEncoder": _wgpuDeviceCreateCommandEncoder, "_wgpuDeviceCreatePipelineLayout": _wgpuDeviceCreatePipelineLayout, "_wgpuDeviceCreateQueue": _wgpuDeviceCreateQueue, "_wgpuDeviceCreateRenderPipeline": _wgpuDeviceCreateRenderPipeline, "_wgpuDeviceCreateShaderModule": _wgpuDeviceCreateShaderModule, "_wgpuDeviceCreateTexture": _wgpuDeviceCreateTexture, "_wgpuPipelineLayoutRelease": _wgpuPipelineLayoutRelease, "_wgpuQueueRelease": _wgpuQueueRelease, "_wgpuQueueSubmit": _wgpuQueueSubmit, "_wgpuRenderPassEncoderDraw": _wgpuRenderPassEncoderDraw, "_wgpuRenderPassEncoderDrawIndexed": _wgpuRenderPassEncoderDrawIndexed, "_wgpuRenderPassEncoderEndPass": _wgpuRenderPassEncoderEndPass, "_wgpuRenderPassEncoderRelease": _wgpuRenderPassEncoderRelease, "_wgpuRenderPassEncoderSetBindGroup": _wgpuRenderPassEncoderSetBindGroup, "_wgpuRenderPassEncoderSetBlendColor": _wgpuRenderPassEncoderSetBlendColor, "_wgpuRenderPassEncoderSetIndexBuffer": _wgpuRenderPassEncoderSetIndexBuffer, "_wgpuRenderPassEncoderSetPipeline": _wgpuRenderPassEncoderSetPipeline, "_wgpuRenderPassEncoderSetStencilReference": _wgpuRenderPassEncoderSetStencilReference, "_wgpuRenderPassEncoderSetVertexBuffer": _wgpuRenderPassEncoderSetVertexBuffer, "_wgpuRenderPipelineRelease": _wgpuRenderPipelineRelease, "_wgpuSamplerRelease": _wgpuSamplerRelease, "_wgpuShaderModuleRelease": _wgpuShaderModuleRelease, "_wgpuSwapChainGetCurrentTextureView": _wgpuSwapChainGetCurrentTextureView, "_wgpuTextureCreateView": _wgpuTextureCreateView, "_wgpuTextureRelease": _wgpuTextureRelease, "_wgpuTextureViewRelease": _wgpuTextureViewRelease, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "count_emval_handles": count_emval_handles, "createNamedFunction": createNamedFunction, "demangle": demangle, "demangleAll": demangleAll, "embind_init_charCodes": embind_init_charCodes, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "getShiftFromSize": getShiftFromSize, "getTempRet0": getTempRet0, "get_first_emval": get_first_emval, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "jsStackTrace": jsStackTrace, "makeLegalFunctionName": makeLegalFunctionName, "nullFunc_i": nullFunc_i, "nullFunc_idi": nullFunc_idi, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "readLatin1String": readLatin1String, "registerType": registerType, "setTempRet0": setTempRet0, "simpleReadValueFromPointer": simpleReadValueFromPointer, "stackTrace": stackTrace, "tempDoublePtr": tempDoublePtr, "throwBindingError": throwBindingError, "throwInternalError": throwInternalError, "whenDependentTypesAreResolved": whenDependentTypesAreResolved };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_sqrt=global.Math.sqrt,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_tan=global.Math.tan,
  Math_acos=global.Math.acos,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_i=env.nullFunc_i,
  nullFunc_idi=env.nullFunc_idi,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  ___assert_fail=env.___assert_fail,
  ___lock=env.___lock,
  ___unlock=env.___unlock,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emval_decref=env.__emval_decref,
  __emval_register=env.__emval_register,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __getBoundingClientRect=env.__getBoundingClientRect,
  __maybeCStringToJsString=env.__maybeCStringToJsString,
  __registerUiEventCallback=env.__registerUiEventCallback,
  _abort=env._abort,
  _embind_repr=env._embind_repr,
  _emsc_async_js_setup=env._emsc_async_js_setup,
  _emscripten_get_element_css_size=env._emscripten_get_element_css_size,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_get_now=env._emscripten_get_now,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_request_animation_frame_loop=env._emscripten_request_animation_frame_loop,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_resize_callback_on_thread=env._emscripten_set_resize_callback_on_thread,
  _fd_close=env._fd_close,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _llvm_trap=env._llvm_trap,
  _wgpuBindGroupLayoutRelease=env._wgpuBindGroupLayoutRelease,
  _wgpuBindGroupRelease=env._wgpuBindGroupRelease,
  _wgpuBufferMapWriteAsync=env._wgpuBufferMapWriteAsync,
  _wgpuBufferReference=env._wgpuBufferReference,
  _wgpuBufferRelease=env._wgpuBufferRelease,
  _wgpuBufferUnmap=env._wgpuBufferUnmap,
  _wgpuCommandBufferRelease=env._wgpuCommandBufferRelease,
  _wgpuCommandEncoderBeginRenderPass=env._wgpuCommandEncoderBeginRenderPass,
  _wgpuCommandEncoderCopyBufferToBuffer=env._wgpuCommandEncoderCopyBufferToBuffer,
  _wgpuCommandEncoderFinish=env._wgpuCommandEncoderFinish,
  _wgpuCommandEncoderRelease=env._wgpuCommandEncoderRelease,
  _wgpuDeviceCreateBindGroup=env._wgpuDeviceCreateBindGroup,
  _wgpuDeviceCreateBindGroupLayout=env._wgpuDeviceCreateBindGroupLayout,
  _wgpuDeviceCreateBuffer=env._wgpuDeviceCreateBuffer,
  _wgpuDeviceCreateBufferMapped=env._wgpuDeviceCreateBufferMapped,
  _wgpuDeviceCreateCommandEncoder=env._wgpuDeviceCreateCommandEncoder,
  _wgpuDeviceCreatePipelineLayout=env._wgpuDeviceCreatePipelineLayout,
  _wgpuDeviceCreateQueue=env._wgpuDeviceCreateQueue,
  _wgpuDeviceCreateRenderPipeline=env._wgpuDeviceCreateRenderPipeline,
  _wgpuDeviceCreateShaderModule=env._wgpuDeviceCreateShaderModule,
  _wgpuDeviceCreateTexture=env._wgpuDeviceCreateTexture,
  _wgpuPipelineLayoutRelease=env._wgpuPipelineLayoutRelease,
  _wgpuQueueRelease=env._wgpuQueueRelease,
  _wgpuQueueSubmit=env._wgpuQueueSubmit,
  _wgpuRenderPassEncoderDraw=env._wgpuRenderPassEncoderDraw,
  _wgpuRenderPassEncoderDrawIndexed=env._wgpuRenderPassEncoderDrawIndexed,
  _wgpuRenderPassEncoderEndPass=env._wgpuRenderPassEncoderEndPass,
  _wgpuRenderPassEncoderRelease=env._wgpuRenderPassEncoderRelease,
  _wgpuRenderPassEncoderSetBindGroup=env._wgpuRenderPassEncoderSetBindGroup,
  _wgpuRenderPassEncoderSetBlendColor=env._wgpuRenderPassEncoderSetBlendColor,
  _wgpuRenderPassEncoderSetIndexBuffer=env._wgpuRenderPassEncoderSetIndexBuffer,
  _wgpuRenderPassEncoderSetPipeline=env._wgpuRenderPassEncoderSetPipeline,
  _wgpuRenderPassEncoderSetStencilReference=env._wgpuRenderPassEncoderSetStencilReference,
  _wgpuRenderPassEncoderSetVertexBuffer=env._wgpuRenderPassEncoderSetVertexBuffer,
  _wgpuRenderPipelineRelease=env._wgpuRenderPipelineRelease,
  _wgpuSamplerRelease=env._wgpuSamplerRelease,
  _wgpuShaderModuleRelease=env._wgpuShaderModuleRelease,
  _wgpuSwapChainGetCurrentTextureView=env._wgpuSwapChainGetCurrentTextureView,
  _wgpuTextureCreateView=env._wgpuTextureCreateView,
  _wgpuTextureRelease=env._wgpuTextureRelease,
  _wgpuTextureViewRelease=env._wgpuTextureViewRelease,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  count_emval_handles=env.count_emval_handles,
  createNamedFunction=env.createNamedFunction,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  embind_init_charCodes=env.embind_init_charCodes,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM,
  getShiftFromSize=env.getShiftFromSize,
  get_first_emval=env.get_first_emval,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  jsStackTrace=env.jsStackTrace,
  makeLegalFunctionName=env.makeLegalFunctionName,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stackTrace=env.stackTrace,
  throwBindingError=env.throwBindingError,
  throwInternalError=env.throwInternalError,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 32096,
  STACK_MAX = 5274976,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function _HMM_SinF($Angle) {
 $Angle = +$Angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $Angle$addr = 0.0, $Result = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Angle$addr = $Angle;
 $Result = 0.0; //@line 763 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Angle$addr; //@line 765 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = (+Math_sin((+$0))); //@line 765 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $1; //@line 765 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $Result; //@line 766 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$2); //@line 766 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_CosF($Angle) {
 $Angle = +$Angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $Angle$addr = 0.0, $Result = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Angle$addr = $Angle;
 $Result = 0.0; //@line 772 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Angle$addr; //@line 774 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = (+Math_cos((+$0))); //@line 774 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $1; //@line 774 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $Result; //@line 775 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$2); //@line 775 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_TanF($Radians) {
 $Radians = +$Radians;
 var $0 = 0.0, $1 = 0.0, $Radians$addr = 0.0, $Result = 0.0, $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Radians$addr = $Radians;
 $Result = 0.0; //@line 781 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Radians$addr; //@line 783 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+Math_tan((+$0))); //@line 783 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $call; //@line 783 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = $Result; //@line 784 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$1); //@line 784 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_ToRadians($Degrees) {
 $Degrees = +$Degrees;
 var $0 = 0.0, $1 = 0.0, $Degrees$addr = 0.0, $Result = 0.0, $mul = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Degrees$addr = $Degrees;
 $Result = 0.0; //@line 835 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Degrees$addr; //@line 837 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul = $0 * 0.01745329238474369; //@line 837 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $mul; //@line 837 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = $Result; //@line 838 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$1); //@line 838 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_SquareRootF($Value) {
 $Value = +$Value;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $Result = 0.0, $Value$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Value$addr = $Value;
 $Result = 0.0; //@line 844 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Value$addr; //@line 851 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = (+Math_sqrt((+$0))); //@line 851 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $1; //@line 851 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $Result; //@line 854 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$2); //@line 854 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_LengthSquaredVec3($A) {
 $A = $A|0;
 var $0 = 0.0, $A$byval_copy = 0, $A$byval_copy1 = 0, $Result = 0.0, $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $A$byval_copy1 = sp + 16|0;
 $A$byval_copy = sp + 4|0;
 $Result = 0.0; //@line 886 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$A$byval_copy>>2]=HEAP32[$A>>2]|0;HEAP32[$A$byval_copy+4>>2]=HEAP32[$A+4>>2]|0;HEAP32[$A$byval_copy+8>>2]=HEAP32[$A+8>>2]|0; //@line 888 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$A$byval_copy1>>2]=HEAP32[$A>>2]|0;HEAP32[$A$byval_copy1+4>>2]=HEAP32[$A+4>>2]|0;HEAP32[$A$byval_copy1+8>>2]=HEAP32[$A+8>>2]|0; //@line 888 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+_HMM_DotVec3($A$byval_copy,$A$byval_copy1)); //@line 888 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $call; //@line 888 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Result; //@line 890 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$0); //@line 890 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_DotVec3($VecOne,$VecTwo) {
 $VecOne = $VecOne|0;
 $VecTwo = $VecTwo|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $Result = 0.0, $Y = 0, $Y2 = 0, $Z = 0, $Z4 = 0, $add = 0.0, $add6 = 0.0, $mul = 0.0, $mul3 = 0.0, $mul5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Result = 0.0; //@line 1052 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = +HEAPF32[$VecOne>>2]; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = +HEAPF32[$VecTwo>>2]; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul = $0 * $1; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y = ((($VecOne)) + 4|0); //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = +HEAPF32[$Y>>2]; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y2 = ((($VecTwo)) + 4|0); //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = +HEAPF32[$Y2>>2]; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul3 = $2 * $3; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $add = $mul + $mul3; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z = ((($VecOne)) + 8|0); //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = +HEAPF32[$Z>>2]; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z4 = ((($VecTwo)) + 8|0); //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = +HEAPF32[$Z4>>2]; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul5 = $4 * $5; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $add6 = $add + $mul5; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $add6; //@line 1054 "../sokol-samples/wgpu/HandmadeMath.h"
 $6 = $Result; //@line 1056 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$6); //@line 1056 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_LengthVec3($A) {
 $A = $A|0;
 var $0 = 0.0, $A$byval_copy = 0, $Result = 0.0, $call = 0.0, $call1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $A$byval_copy = sp + 4|0;
 $Result = 0.0; //@line 916 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$A$byval_copy>>2]=HEAP32[$A>>2]|0;HEAP32[$A$byval_copy+4>>2]=HEAP32[$A+4>>2]|0;HEAP32[$A$byval_copy+8>>2]=HEAP32[$A+8>>2]|0; //@line 918 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+_HMM_LengthSquaredVec3($A$byval_copy)); //@line 918 "../sokol-samples/wgpu/HandmadeMath.h"
 $call1 = (+_HMM_SquareRootF($call)); //@line 918 "../sokol-samples/wgpu/HandmadeMath.h"
 $Result = $call1; //@line 918 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Result; //@line 920 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return (+$0); //@line 920 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_NormalizeVec3($agg$result,$A) {
 $agg$result = $agg$result|0;
 $A = $A|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $A$byval_copy = 0, $Result = 0, $VectorLength = 0.0, $Y = 0, $Y4 = 0, $Z = 0, $Z7 = 0, $call = 0.0, $cmp = 0, $div = 0.0, $div2 = 0.0, $div5 = 0.0, $mul = 0.0;
 var $mul3 = 0.0, $mul6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $A$byval_copy = sp + 16|0;
 $Result = sp + 4|0;
 ;HEAP32[$Result>>2]=0|0;HEAP32[$Result+4>>2]=0|0;HEAP32[$Result+8>>2]=0|0; //@line 1005 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$A$byval_copy>>2]=HEAP32[$A>>2]|0;HEAP32[$A$byval_copy+4>>2]=HEAP32[$A+4>>2]|0;HEAP32[$A$byval_copy+8>>2]=HEAP32[$A+8>>2]|0; //@line 1007 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+_HMM_LengthVec3($A$byval_copy)); //@line 1007 "../sokol-samples/wgpu/HandmadeMath.h"
 $VectorLength = $call; //@line 1007 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $VectorLength; //@line 1010 "../sokol-samples/wgpu/HandmadeMath.h"
 $cmp = $0 != 0.0; //@line 1010 "../sokol-samples/wgpu/HandmadeMath.h"
 if (!($cmp)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$Result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$Result+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$Result+8>>2]|0; //@line 1017 "../sokol-samples/wgpu/HandmadeMath.h"
  STACKTOP = sp;return; //@line 1017 "../sokol-samples/wgpu/HandmadeMath.h"
 }
 $1 = +HEAPF32[$A>>2]; //@line 1012 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $VectorLength; //@line 1012 "../sokol-samples/wgpu/HandmadeMath.h"
 $div = 1.0 / $2; //@line 1012 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul = $1 * $div; //@line 1012 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $mul; //@line 1012 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y = ((($A)) + 4|0); //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = +HEAPF32[$Y>>2]; //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = $VectorLength; //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 $div2 = 1.0 / $4; //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul3 = $3 * $div2; //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y4 = ((($Result)) + 4|0); //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Y4>>2] = $mul3; //@line 1013 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z = ((($A)) + 8|0); //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = +HEAPF32[$Z>>2]; //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 $6 = $VectorLength; //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 $div5 = 1.0 / $6; //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul6 = $5 * $div5; //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z7 = ((($Result)) + 8|0); //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Z7>>2] = $mul6; //@line 1014 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$agg$result>>2]=HEAP32[$Result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$Result+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$Result+8>>2]|0; //@line 1017 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1017 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_Cross($agg$result,$VecOne,$VecTwo) {
 $agg$result = $agg$result|0;
 $VecOne = $VecOne|0;
 $VecTwo = $VecTwo|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $Result = 0, $Y = 0, $Y11 = 0, $Y13 = 0, $Y15 = 0, $Y2 = 0, $Z = 0, $Z1 = 0;
 var $Z19 = 0, $Z4 = 0, $Z8 = 0, $mul = 0.0, $mul14 = 0.0, $mul17 = 0.0, $mul3 = 0.0, $mul6 = 0.0, $mul9 = 0.0, $sub = 0.0, $sub10 = 0.0, $sub18 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Result = sp;
 ;HEAP32[$Result>>2]=0|0;HEAP32[$Result+4>>2]=0|0;HEAP32[$Result+8>>2]=0|0; //@line 1072 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y = ((($VecOne)) + 4|0); //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = +HEAPF32[$Y>>2]; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z = ((($VecTwo)) + 8|0); //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = +HEAPF32[$Z>>2]; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul = $0 * $1; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z1 = ((($VecOne)) + 8|0); //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = +HEAPF32[$Z1>>2]; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y2 = ((($VecTwo)) + 4|0); //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = +HEAPF32[$Y2>>2]; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul3 = $2 * $3; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub = $mul - $mul3; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $sub; //@line 1074 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z4 = ((($VecOne)) + 8|0); //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = +HEAPF32[$Z4>>2]; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = +HEAPF32[$VecTwo>>2]; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul6 = $4 * $5; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $6 = +HEAPF32[$VecOne>>2]; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z8 = ((($VecTwo)) + 8|0); //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $7 = +HEAPF32[$Z8>>2]; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul9 = $6 * $7; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub10 = $mul6 - $mul9; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y11 = ((($Result)) + 4|0); //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Y11>>2] = $sub10; //@line 1075 "../sokol-samples/wgpu/HandmadeMath.h"
 $8 = +HEAPF32[$VecOne>>2]; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y13 = ((($VecTwo)) + 4|0); //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $9 = +HEAPF32[$Y13>>2]; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul14 = $8 * $9; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y15 = ((($VecOne)) + 4|0); //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $10 = +HEAPF32[$Y15>>2]; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $11 = +HEAPF32[$VecTwo>>2]; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul17 = $10 * $11; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub18 = $mul14 - $mul17; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z19 = ((($Result)) + 8|0); //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Z19>>2] = $sub18; //@line 1076 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$agg$result>>2]=HEAP32[$Result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$Result+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$Result+8>>2]|0; //@line 1078 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1078 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_Vec3($agg$result,$X,$Y,$Z) {
 $agg$result = $agg$result|0;
 $X = +$X;
 $Y = +$Y;
 $Z = +$Z;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $Result = 0, $X$addr = 0.0, $Y$addr = 0.0, $Y2 = 0, $Z$addr = 0.0, $Z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Result = sp;
 $X$addr = $X;
 $Y$addr = $Y;
 $Z$addr = $Z;
 ;HEAP32[$Result>>2]=0|0;HEAP32[$Result+4>>2]=0|0;HEAP32[$Result+8>>2]=0|0; //@line 1106 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $X$addr; //@line 1108 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $0; //@line 1108 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = $Y$addr; //@line 1109 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y2 = ((($Result)) + 4|0); //@line 1109 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Y2>>2] = $1; //@line 1109 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $Z$addr; //@line 1110 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z3 = ((($Result)) + 8|0); //@line 1110 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Z3>>2] = $2; //@line 1110 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$agg$result>>2]=HEAP32[$Result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$Result+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$Result+8>>2]|0; //@line 1112 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1112 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_SubtractVec3($agg$result,$Left,$Right) {
 $agg$result = $agg$result|0;
 $Left = $Left|0;
 $Right = $Right|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $Result = 0, $Y = 0, $Y3 = 0, $Y5 = 0, $Z = 0, $Z6 = 0, $Z8 = 0, $sub = 0.0, $sub4 = 0.0, $sub7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Result = sp;
 ;HEAP32[$Result>>2]=0|0;HEAP32[$Result+4>>2]=0|0;HEAP32[$Result+8>>2]=0|0; //@line 1214 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = +HEAPF32[$Left>>2]; //@line 1216 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = +HEAPF32[$Right>>2]; //@line 1216 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub = $0 - $1; //@line 1216 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $sub; //@line 1216 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y = ((($Left)) + 4|0); //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = +HEAPF32[$Y>>2]; //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y3 = ((($Right)) + 4|0); //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = +HEAPF32[$Y3>>2]; //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub4 = $2 - $3; //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y5 = ((($Result)) + 4|0); //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Y5>>2] = $sub4; //@line 1217 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z = ((($Left)) + 8|0); //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = +HEAPF32[$Z>>2]; //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z6 = ((($Right)) + 8|0); //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = +HEAPF32[$Z6>>2]; //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub7 = $4 - $5; //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z8 = ((($Result)) + 8|0); //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Z8>>2] = $sub7; //@line 1218 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$agg$result>>2]=HEAP32[$Result>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$Result+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$Result+8>>2]|0; //@line 1220 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1220 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_Mat4($agg$result) {
 $agg$result = $agg$result|0;
 var $Result = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $Result = sp;
 dest=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 1413 "../sokol-samples/wgpu/HandmadeMath.h"
 dest=$agg$result; src=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 1415 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1415 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_Mat4d($agg$result,$Diagonal) {
 $agg$result = $agg$result|0;
 $Diagonal = +$Diagonal;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $Diagonal$addr = 0.0, $Result = 0, $arrayidx10 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $Result = sp;
 $Diagonal$addr = $Diagonal;
 _HMM_Mat4($Result); //@line 1421 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Diagonal$addr; //@line 1423 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $0; //@line 1423 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = $Diagonal$addr; //@line 1424 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx3 = ((($Result)) + 16|0); //@line 1424 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx4 = ((($arrayidx3)) + 4|0); //@line 1424 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx4>>2] = $1; //@line 1424 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $Diagonal$addr; //@line 1425 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx6 = ((($Result)) + 32|0); //@line 1425 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx7 = ((($arrayidx6)) + 8|0); //@line 1425 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx7>>2] = $2; //@line 1425 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = $Diagonal$addr; //@line 1426 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx9 = ((($Result)) + 48|0); //@line 1426 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx10 = ((($arrayidx9)) + 12|0); //@line 1426 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx10>>2] = $3; //@line 1426 "../sokol-samples/wgpu/HandmadeMath.h"
 dest=$agg$result; src=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 1428 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1428 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_MultiplyMat4($agg$result,$Left,$Right) {
 $agg$result = $agg$result|0;
 $Left = $Left|0;
 $Right = $Right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $Columns = 0, $CurrentMatrice = 0, $Result = 0, $Rows = 0;
 var $Sum = 0.0, $add = 0.0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx7 = 0, $arrayidx9 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $inc = 0, $inc15 = 0, $inc18 = 0, $mul = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $Result = sp + 16|0;
 _HMM_Mat4($Result); //@line 1484 "../sokol-samples/wgpu/HandmadeMath.h"
 $Columns = 0; //@line 1500 "../sokol-samples/wgpu/HandmadeMath.h"
 while(1) {
  $0 = $Columns; //@line 1500 "../sokol-samples/wgpu/HandmadeMath.h"
  $cmp = ($0|0)<(4); //@line 1500 "../sokol-samples/wgpu/HandmadeMath.h"
  if (!($cmp)) {
   break;
  }
  $Rows = 0; //@line 1503 "../sokol-samples/wgpu/HandmadeMath.h"
  while(1) {
   $1 = $Rows; //@line 1503 "../sokol-samples/wgpu/HandmadeMath.h"
   $cmp2 = ($1|0)<(4); //@line 1503 "../sokol-samples/wgpu/HandmadeMath.h"
   if (!($cmp2)) {
    break;
   }
   $Sum = 0.0; //@line 1505 "../sokol-samples/wgpu/HandmadeMath.h"
   $CurrentMatrice = 0; //@line 1507 "../sokol-samples/wgpu/HandmadeMath.h"
   while(1) {
    $2 = $CurrentMatrice; //@line 1507 "../sokol-samples/wgpu/HandmadeMath.h"
    $cmp5 = ($2|0)<(4); //@line 1507 "../sokol-samples/wgpu/HandmadeMath.h"
    if (!($cmp5)) {
     break;
    }
    $3 = $CurrentMatrice; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $arrayidx = (($Left) + ($3<<4)|0); //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $4 = $Rows; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $arrayidx7 = (($arrayidx) + ($4<<2)|0); //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $5 = +HEAPF32[$arrayidx7>>2]; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $6 = $Columns; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $arrayidx9 = (($Right) + ($6<<4)|0); //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $7 = $CurrentMatrice; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $arrayidx10 = (($arrayidx9) + ($7<<2)|0); //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $8 = +HEAPF32[$arrayidx10>>2]; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $mul = $5 * $8; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $9 = $Sum; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $add = $9 + $mul; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $Sum = $add; //@line 1509 "../sokol-samples/wgpu/HandmadeMath.h"
    $10 = $CurrentMatrice; //@line 1507 "../sokol-samples/wgpu/HandmadeMath.h"
    $inc = (($10) + 1)|0; //@line 1507 "../sokol-samples/wgpu/HandmadeMath.h"
    $CurrentMatrice = $inc; //@line 1507 "../sokol-samples/wgpu/HandmadeMath.h"
   }
   $11 = $Sum; //@line 1512 "../sokol-samples/wgpu/HandmadeMath.h"
   $12 = $Columns; //@line 1512 "../sokol-samples/wgpu/HandmadeMath.h"
   $arrayidx12 = (($Result) + ($12<<4)|0); //@line 1512 "../sokol-samples/wgpu/HandmadeMath.h"
   $13 = $Rows; //@line 1512 "../sokol-samples/wgpu/HandmadeMath.h"
   $arrayidx13 = (($arrayidx12) + ($13<<2)|0); //@line 1512 "../sokol-samples/wgpu/HandmadeMath.h"
   HEAPF32[$arrayidx13>>2] = $11; //@line 1512 "../sokol-samples/wgpu/HandmadeMath.h"
   $14 = $Rows; //@line 1503 "../sokol-samples/wgpu/HandmadeMath.h"
   $inc15 = (($14) + 1)|0; //@line 1503 "../sokol-samples/wgpu/HandmadeMath.h"
   $Rows = $inc15; //@line 1503 "../sokol-samples/wgpu/HandmadeMath.h"
  }
  $15 = $Columns; //@line 1500 "../sokol-samples/wgpu/HandmadeMath.h"
  $inc18 = (($15) + 1)|0; //@line 1500 "../sokol-samples/wgpu/HandmadeMath.h"
  $Columns = $inc18; //@line 1500 "../sokol-samples/wgpu/HandmadeMath.h"
 }
 dest=$agg$result; src=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 1516 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1516 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_Perspective($agg$result,$FOV,$AspectRatio,$Near,$Far) {
 $agg$result = $agg$result|0;
 $FOV = +$FOV;
 $AspectRatio = +$AspectRatio;
 $Near = +$Near;
 $Far = +$Far;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $AspectRatio$addr = 0.0, $FOV$addr = 0.0, $Far$addr = 0.0, $Near$addr = 0.0, $Result = 0, $TanThetaOver2 = 0.0, $add = 0.0, $arrayidx11 = 0;
 var $arrayidx12 = 0, $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx21 = 0, $arrayidx22 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $call = 0.0, $div = 0.0, $div16 = 0.0, $div2 = 0.0, $div9 = 0.0, $mul = 0.0, $mul13 = 0.0, $mul14 = 0.0, $sub = 0.0, $sub15 = 0.0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $Result = sp + 8|0;
 $FOV$addr = $FOV;
 $AspectRatio$addr = $AspectRatio;
 $Near$addr = $Near;
 $Far$addr = $Far;
 _HMM_Mat4d($Result,1.0); //@line 1618 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $FOV$addr; //@line 1620 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul = $0 * 0.0087266461923718452; //@line 1620 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+_HMM_TanF($mul)); //@line 1620 "../sokol-samples/wgpu/HandmadeMath.h"
 $TanThetaOver2 = $call; //@line 1620 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = $TanThetaOver2; //@line 1622 "../sokol-samples/wgpu/HandmadeMath.h"
 $div = 1.0 / $1; //@line 1622 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $div; //@line 1622 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $AspectRatio$addr; //@line 1623 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = $TanThetaOver2; //@line 1623 "../sokol-samples/wgpu/HandmadeMath.h"
 $div2 = $2 / $3; //@line 1623 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx4 = ((($Result)) + 16|0); //@line 1623 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx5 = ((($arrayidx4)) + 4|0); //@line 1623 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx5>>2] = $div2; //@line 1623 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx7 = ((($Result)) + 32|0); //@line 1624 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx8 = ((($arrayidx7)) + 12|0); //@line 1624 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx8>>2] = -1.0; //@line 1624 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = $Near$addr; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = $Far$addr; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $add = $4 + $5; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $6 = $Near$addr; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $7 = $Far$addr; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub = $6 - $7; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $div9 = $add / $sub; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx11 = ((($Result)) + 32|0); //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx12 = ((($arrayidx11)) + 8|0); //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx12>>2] = $div9; //@line 1625 "../sokol-samples/wgpu/HandmadeMath.h"
 $8 = $Near$addr; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul13 = 2.0 * $8; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $9 = $Far$addr; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul14 = $mul13 * $9; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $10 = $Near$addr; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $11 = $Far$addr; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub15 = $10 - $11; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $div16 = $mul14 / $sub15; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx18 = ((($Result)) + 48|0); //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx19 = ((($arrayidx18)) + 8|0); //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx19>>2] = $div16; //@line 1626 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx21 = ((($Result)) + 48|0); //@line 1627 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx22 = ((($arrayidx21)) + 12|0); //@line 1627 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx22>>2] = 0.0; //@line 1627 "../sokol-samples/wgpu/HandmadeMath.h"
 dest=$agg$result; src=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 1629 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1629 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_Rotate($agg$result,$Angle,$Axis) {
 $agg$result = $agg$result|0;
 $Angle = +$Angle;
 $Axis = $Axis|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $Angle$addr = 0.0, $Axis$byval_copy = 0, $CosTheta = 0.0, $CosValue = 0.0, $Result = 0, $SinTheta = 0.0, $Y = 0, $Y19 = 0, $Y25 = 0, $Y35 = 0, $Y36 = 0, $Y43 = 0, $Y57 = 0, $Y64 = 0, $Z = 0;
 var $Z16 = 0, $Z29 = 0, $Z44 = 0, $Z53 = 0, $Z63 = 0, $Z73 = 0, $Z74 = 0, $add = 0.0, $add11 = 0.0, $add39 = 0.0, $add49 = 0.0, $add59 = 0.0, $add77 = 0.0, $arrayidx14 = 0, $arrayidx24 = 0, $arrayidx33 = 0, $arrayidx41 = 0, $arrayidx42 = 0, $arrayidx51 = 0, $arrayidx52 = 0;
 var $arrayidx61 = 0, $arrayidx71 = 0, $arrayidx72 = 0, $arrayidx79 = 0, $arrayidx80 = 0, $call = 0.0, $call1 = 0.0, $call2 = 0.0, $call3 = 0.0, $mul = 0.0, $mul10 = 0.0, $mul17 = 0.0, $mul18 = 0.0, $mul20 = 0.0, $mul27 = 0.0, $mul28 = 0.0, $mul30 = 0.0, $mul37 = 0.0, $mul38 = 0.0, $mul45 = 0.0;
 var $mul46 = 0.0, $mul48 = 0.0, $mul5 = 0.0, $mul55 = 0.0, $mul56 = 0.0, $mul58 = 0.0, $mul65 = 0.0, $mul66 = 0.0, $mul68 = 0.0, $mul75 = 0.0, $mul76 = 0.0, $mul8 = 0.0, $mul9 = 0.0, $sub = 0.0, $sub21 = 0.0, $sub31 = 0.0, $sub69 = 0.0, $tmp = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $Axis$byval_copy = sp + 92|0;
 $Result = sp + 24|0;
 $tmp = sp + 12|0;
 $Angle$addr = $Angle;
 _HMM_Mat4d($Result,1.0); //@line 1647 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Axis$byval_copy>>2]=HEAP32[$Axis>>2]|0;HEAP32[$Axis$byval_copy+4>>2]=HEAP32[$Axis+4>>2]|0;HEAP32[$Axis$byval_copy+8>>2]=HEAP32[$Axis+8>>2]|0; //@line 1649 "../sokol-samples/wgpu/HandmadeMath.h"
 _HMM_NormalizeVec3($tmp,$Axis$byval_copy); //@line 1649 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Axis>>2]=HEAP32[$tmp>>2]|0;HEAP32[$Axis+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$Axis+8>>2]=HEAP32[$tmp+8>>2]|0; //@line 1649 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = $Angle$addr; //@line 1651 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+_HMM_ToRadians($0)); //@line 1651 "../sokol-samples/wgpu/HandmadeMath.h"
 $call1 = (+_HMM_SinF($call)); //@line 1651 "../sokol-samples/wgpu/HandmadeMath.h"
 $SinTheta = $call1; //@line 1651 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = $Angle$addr; //@line 1652 "../sokol-samples/wgpu/HandmadeMath.h"
 $call2 = (+_HMM_ToRadians($1)); //@line 1652 "../sokol-samples/wgpu/HandmadeMath.h"
 $call3 = (+_HMM_CosF($call2)); //@line 1652 "../sokol-samples/wgpu/HandmadeMath.h"
 $CosTheta = $call3; //@line 1652 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = $CosTheta; //@line 1653 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub = 1.0 - $2; //@line 1653 "../sokol-samples/wgpu/HandmadeMath.h"
 $CosValue = $sub; //@line 1653 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = +HEAPF32[$Axis>>2]; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = +HEAPF32[$Axis>>2]; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul = $3 * $4; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = $CosValue; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul5 = $mul * $5; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $6 = $CosTheta; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $add = $mul5 + $6; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $add; //@line 1655 "../sokol-samples/wgpu/HandmadeMath.h"
 $7 = +HEAPF32[$Axis>>2]; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y = ((($Axis)) + 4|0); //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $8 = +HEAPF32[$Y>>2]; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul8 = $7 * $8; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $9 = $CosValue; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul9 = $mul8 * $9; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z = ((($Axis)) + 8|0); //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $10 = +HEAPF32[$Z>>2]; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $11 = $SinTheta; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul10 = $10 * $11; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $add11 = $mul9 + $mul10; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx14 = ((($Result)) + 4|0); //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx14>>2] = $add11; //@line 1656 "../sokol-samples/wgpu/HandmadeMath.h"
 $12 = +HEAPF32[$Axis>>2]; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z16 = ((($Axis)) + 8|0); //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $13 = +HEAPF32[$Z16>>2]; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul17 = $12 * $13; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $14 = $CosValue; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul18 = $mul17 * $14; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y19 = ((($Axis)) + 4|0); //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $15 = +HEAPF32[$Y19>>2]; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $16 = $SinTheta; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul20 = $15 * $16; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub21 = $mul18 - $mul20; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx24 = ((($Result)) + 8|0); //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx24>>2] = $sub21; //@line 1657 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y25 = ((($Axis)) + 4|0); //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $17 = +HEAPF32[$Y25>>2]; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $18 = +HEAPF32[$Axis>>2]; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul27 = $17 * $18; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $19 = $CosValue; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul28 = $mul27 * $19; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z29 = ((($Axis)) + 8|0); //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $20 = +HEAPF32[$Z29>>2]; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $21 = $SinTheta; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul30 = $20 * $21; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub31 = $mul28 - $mul30; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx33 = ((($Result)) + 16|0); //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx33>>2] = $sub31; //@line 1659 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y35 = ((($Axis)) + 4|0); //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $22 = +HEAPF32[$Y35>>2]; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y36 = ((($Axis)) + 4|0); //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $23 = +HEAPF32[$Y36>>2]; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul37 = $22 * $23; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $24 = $CosValue; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul38 = $mul37 * $24; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $25 = $CosTheta; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $add39 = $mul38 + $25; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx41 = ((($Result)) + 16|0); //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx42 = ((($arrayidx41)) + 4|0); //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx42>>2] = $add39; //@line 1660 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y43 = ((($Axis)) + 4|0); //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $26 = +HEAPF32[$Y43>>2]; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z44 = ((($Axis)) + 8|0); //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $27 = +HEAPF32[$Z44>>2]; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul45 = $26 * $27; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $28 = $CosValue; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul46 = $mul45 * $28; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $29 = +HEAPF32[$Axis>>2]; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $30 = $SinTheta; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul48 = $29 * $30; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $add49 = $mul46 + $mul48; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx51 = ((($Result)) + 16|0); //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx52 = ((($arrayidx51)) + 8|0); //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx52>>2] = $add49; //@line 1661 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z53 = ((($Axis)) + 8|0); //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $31 = +HEAPF32[$Z53>>2]; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $32 = +HEAPF32[$Axis>>2]; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul55 = $31 * $32; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $33 = $CosValue; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul56 = $mul55 * $33; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y57 = ((($Axis)) + 4|0); //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $34 = +HEAPF32[$Y57>>2]; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $35 = $SinTheta; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul58 = $34 * $35; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $add59 = $mul56 + $mul58; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx61 = ((($Result)) + 32|0); //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx61>>2] = $add59; //@line 1663 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z63 = ((($Axis)) + 8|0); //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $36 = +HEAPF32[$Z63>>2]; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y64 = ((($Axis)) + 4|0); //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $37 = +HEAPF32[$Y64>>2]; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul65 = $36 * $37; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $38 = $CosValue; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul66 = $mul65 * $38; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $39 = +HEAPF32[$Axis>>2]; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $40 = $SinTheta; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul68 = $39 * $40; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub69 = $mul66 - $mul68; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx71 = ((($Result)) + 32|0); //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx72 = ((($arrayidx71)) + 4|0); //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx72>>2] = $sub69; //@line 1664 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z73 = ((($Axis)) + 8|0); //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $41 = +HEAPF32[$Z73>>2]; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z74 = ((($Axis)) + 8|0); //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $42 = +HEAPF32[$Z74>>2]; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul75 = $41 * $42; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $43 = $CosValue; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $mul76 = $mul75 * $43; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $44 = $CosTheta; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $add77 = $mul76 + $44; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx79 = ((($Result)) + 32|0); //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx80 = ((($arrayidx79)) + 8|0); //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx80>>2] = $add77; //@line 1665 "../sokol-samples/wgpu/HandmadeMath.h"
 dest=$agg$result; src=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 1667 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1667 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _HMM_LookAt($agg$result,$Eye,$Center,$Up) {
 $agg$result = $agg$result|0;
 $Eye = $Eye|0;
 $Center = $Center|0;
 $Up = $Up|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $Center$byval_copy = 0, $Eye$byval_copy = 0, $Eye$byval_copy3 = 0, $Eye$byval_copy4 = 0, $Eye$byval_copy6 = 0, $F = 0, $F$byval_copy = 0, $F$byval_copy1 = 0, $F$byval_copy5 = 0, $Result = 0, $S = 0;
 var $S$byval_copy = 0, $S$byval_copy2 = 0, $U = 0, $U$byval_copy = 0, $Up$byval_copy = 0, $Y = 0, $Y14 = 0, $Y18 = 0, $Z = 0, $Z26 = 0, $Z30 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp1 = 0, $agg$tmp1$byval_copy = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx21 = 0;
 var $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx29 = 0, $arrayidx33 = 0, $arrayidx34 = 0, $arrayidx37 = 0, $arrayidx42 = 0, $arrayidx43 = 0, $arrayidx46 = 0, $arrayidx47 = 0, $arrayidx49 = 0, $arrayidx50 = 0, $arrayidx6 = 0, $call = 0.0, $call39 = 0.0, $call44 = 0.0, $sub = 0.0, $sub19 = 0.0, $sub31 = 0.0;
 var $sub35 = 0.0, $sub40 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $Eye$byval_copy6 = sp + 284|0;
 $F$byval_copy5 = sp + 272|0;
 $Eye$byval_copy4 = sp + 260|0;
 $U$byval_copy = sp + 248|0;
 $Eye$byval_copy3 = sp + 236|0;
 $S$byval_copy2 = sp + 224|0;
 $F$byval_copy1 = sp + 212|0;
 $S$byval_copy = sp + 200|0;
 $agg$tmp1$byval_copy = sp + 188|0;
 $Up$byval_copy = sp + 176|0;
 $F$byval_copy = sp + 164|0;
 $agg$tmp$byval_copy = sp + 152|0;
 $Eye$byval_copy = sp + 140|0;
 $Center$byval_copy = sp + 128|0;
 $Result = sp + 64|0;
 $F = sp + 48|0;
 $agg$tmp = sp + 36|0;
 $S = sp + 24|0;
 $agg$tmp1 = sp + 12|0;
 $U = sp;
 dest=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 1685 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Center$byval_copy>>2]=HEAP32[$Center>>2]|0;HEAP32[$Center$byval_copy+4>>2]=HEAP32[$Center+4>>2]|0;HEAP32[$Center$byval_copy+8>>2]=HEAP32[$Center+8>>2]|0; //@line 1687 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Eye$byval_copy>>2]=HEAP32[$Eye>>2]|0;HEAP32[$Eye$byval_copy+4>>2]=HEAP32[$Eye+4>>2]|0;HEAP32[$Eye$byval_copy+8>>2]=HEAP32[$Eye+8>>2]|0; //@line 1687 "../sokol-samples/wgpu/HandmadeMath.h"
 _HMM_SubtractVec3($agg$tmp,$Center$byval_copy,$Eye$byval_copy); //@line 1687 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;HEAP32[$agg$tmp$byval_copy+8>>2]=HEAP32[$agg$tmp+8>>2]|0; //@line 1687 "../sokol-samples/wgpu/HandmadeMath.h"
 _HMM_NormalizeVec3($F,$agg$tmp$byval_copy); //@line 1687 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$F$byval_copy>>2]=HEAP32[$F>>2]|0;HEAP32[$F$byval_copy+4>>2]=HEAP32[$F+4>>2]|0;HEAP32[$F$byval_copy+8>>2]=HEAP32[$F+8>>2]|0; //@line 1688 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Up$byval_copy>>2]=HEAP32[$Up>>2]|0;HEAP32[$Up$byval_copy+4>>2]=HEAP32[$Up+4>>2]|0;HEAP32[$Up$byval_copy+8>>2]=HEAP32[$Up+8>>2]|0; //@line 1688 "../sokol-samples/wgpu/HandmadeMath.h"
 _HMM_Cross($agg$tmp1,$F$byval_copy,$Up$byval_copy); //@line 1688 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$agg$tmp1$byval_copy>>2]=HEAP32[$agg$tmp1>>2]|0;HEAP32[$agg$tmp1$byval_copy+4>>2]=HEAP32[$agg$tmp1+4>>2]|0;HEAP32[$agg$tmp1$byval_copy+8>>2]=HEAP32[$agg$tmp1+8>>2]|0; //@line 1688 "../sokol-samples/wgpu/HandmadeMath.h"
 _HMM_NormalizeVec3($S,$agg$tmp1$byval_copy); //@line 1688 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$S$byval_copy>>2]=HEAP32[$S>>2]|0;HEAP32[$S$byval_copy+4>>2]=HEAP32[$S+4>>2]|0;HEAP32[$S$byval_copy+8>>2]=HEAP32[$S+8>>2]|0; //@line 1689 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$F$byval_copy1>>2]=HEAP32[$F>>2]|0;HEAP32[$F$byval_copy1+4>>2]=HEAP32[$F+4>>2]|0;HEAP32[$F$byval_copy1+8>>2]=HEAP32[$F+8>>2]|0; //@line 1689 "../sokol-samples/wgpu/HandmadeMath.h"
 _HMM_Cross($U,$S$byval_copy,$F$byval_copy1); //@line 1689 "../sokol-samples/wgpu/HandmadeMath.h"
 $0 = +HEAPF32[$S>>2]; //@line 1691 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$Result>>2] = $0; //@line 1691 "../sokol-samples/wgpu/HandmadeMath.h"
 $1 = +HEAPF32[$U>>2]; //@line 1692 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx6 = ((($Result)) + 4|0); //@line 1692 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx6>>2] = $1; //@line 1692 "../sokol-samples/wgpu/HandmadeMath.h"
 $2 = +HEAPF32[$F>>2]; //@line 1693 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub = - $2; //@line 1693 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx10 = ((($Result)) + 8|0); //@line 1693 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx10>>2] = $sub; //@line 1693 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y = ((($S)) + 4|0); //@line 1695 "../sokol-samples/wgpu/HandmadeMath.h"
 $3 = +HEAPF32[$Y>>2]; //@line 1695 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx12 = ((($Result)) + 16|0); //@line 1695 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx12>>2] = $3; //@line 1695 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y14 = ((($U)) + 4|0); //@line 1696 "../sokol-samples/wgpu/HandmadeMath.h"
 $4 = +HEAPF32[$Y14>>2]; //@line 1696 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx16 = ((($Result)) + 16|0); //@line 1696 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx17 = ((($arrayidx16)) + 4|0); //@line 1696 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx17>>2] = $4; //@line 1696 "../sokol-samples/wgpu/HandmadeMath.h"
 $Y18 = ((($F)) + 4|0); //@line 1697 "../sokol-samples/wgpu/HandmadeMath.h"
 $5 = +HEAPF32[$Y18>>2]; //@line 1697 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub19 = - $5; //@line 1697 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx21 = ((($Result)) + 16|0); //@line 1697 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx22 = ((($arrayidx21)) + 8|0); //@line 1697 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx22>>2] = $sub19; //@line 1697 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z = ((($S)) + 8|0); //@line 1699 "../sokol-samples/wgpu/HandmadeMath.h"
 $6 = +HEAPF32[$Z>>2]; //@line 1699 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx24 = ((($Result)) + 32|0); //@line 1699 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx24>>2] = $6; //@line 1699 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z26 = ((($U)) + 8|0); //@line 1700 "../sokol-samples/wgpu/HandmadeMath.h"
 $7 = +HEAPF32[$Z26>>2]; //@line 1700 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx28 = ((($Result)) + 32|0); //@line 1700 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx29 = ((($arrayidx28)) + 4|0); //@line 1700 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx29>>2] = $7; //@line 1700 "../sokol-samples/wgpu/HandmadeMath.h"
 $Z30 = ((($F)) + 8|0); //@line 1701 "../sokol-samples/wgpu/HandmadeMath.h"
 $8 = +HEAPF32[$Z30>>2]; //@line 1701 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub31 = - $8; //@line 1701 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx33 = ((($Result)) + 32|0); //@line 1701 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx34 = ((($arrayidx33)) + 8|0); //@line 1701 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx34>>2] = $sub31; //@line 1701 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$S$byval_copy2>>2]=HEAP32[$S>>2]|0;HEAP32[$S$byval_copy2+4>>2]=HEAP32[$S+4>>2]|0;HEAP32[$S$byval_copy2+8>>2]=HEAP32[$S+8>>2]|0; //@line 1703 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Eye$byval_copy3>>2]=HEAP32[$Eye>>2]|0;HEAP32[$Eye$byval_copy3+4>>2]=HEAP32[$Eye+4>>2]|0;HEAP32[$Eye$byval_copy3+8>>2]=HEAP32[$Eye+8>>2]|0; //@line 1703 "../sokol-samples/wgpu/HandmadeMath.h"
 $call = (+_HMM_DotVec3($S$byval_copy2,$Eye$byval_copy3)); //@line 1703 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub35 = - $call; //@line 1703 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx37 = ((($Result)) + 48|0); //@line 1703 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx37>>2] = $sub35; //@line 1703 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$U$byval_copy>>2]=HEAP32[$U>>2]|0;HEAP32[$U$byval_copy+4>>2]=HEAP32[$U+4>>2]|0;HEAP32[$U$byval_copy+8>>2]=HEAP32[$U+8>>2]|0; //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Eye$byval_copy4>>2]=HEAP32[$Eye>>2]|0;HEAP32[$Eye$byval_copy4+4>>2]=HEAP32[$Eye+4>>2]|0;HEAP32[$Eye$byval_copy4+8>>2]=HEAP32[$Eye+8>>2]|0; //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 $call39 = (+_HMM_DotVec3($U$byval_copy,$Eye$byval_copy4)); //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 $sub40 = - $call39; //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx42 = ((($Result)) + 48|0); //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx43 = ((($arrayidx42)) + 4|0); //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx43>>2] = $sub40; //@line 1704 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$F$byval_copy5>>2]=HEAP32[$F>>2]|0;HEAP32[$F$byval_copy5+4>>2]=HEAP32[$F+4>>2]|0;HEAP32[$F$byval_copy5+8>>2]=HEAP32[$F+8>>2]|0; //@line 1705 "../sokol-samples/wgpu/HandmadeMath.h"
 ;HEAP32[$Eye$byval_copy6>>2]=HEAP32[$Eye>>2]|0;HEAP32[$Eye$byval_copy6+4>>2]=HEAP32[$Eye+4>>2]|0;HEAP32[$Eye$byval_copy6+8>>2]=HEAP32[$Eye+8>>2]|0; //@line 1705 "../sokol-samples/wgpu/HandmadeMath.h"
 $call44 = (+_HMM_DotVec3($F$byval_copy5,$Eye$byval_copy6)); //@line 1705 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx46 = ((($Result)) + 48|0); //@line 1705 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx47 = ((($arrayidx46)) + 8|0); //@line 1705 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx47>>2] = $call44; //@line 1705 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx49 = ((($Result)) + 48|0); //@line 1706 "../sokol-samples/wgpu/HandmadeMath.h"
 $arrayidx50 = ((($arrayidx49)) + 12|0); //@line 1706 "../sokol-samples/wgpu/HandmadeMath.h"
 HEAPF32[$arrayidx50>>2] = 1.0; //@line 1706 "../sokol-samples/wgpu/HandmadeMath.h"
 dest=$agg$result; src=$Result; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 1708 "../sokol-samples/wgpu/HandmadeMath.h"
 STACKTOP = sp;return; //@line 1708 "../sokol-samples/wgpu/HandmadeMath.h"
}
function _sg_setup($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_end_canary = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp15 = 0, $cmp20 = 0, $cmp25 = 0, $cmp30 = 0, $cmp35 = 0, $cmp40 = 0;
 var $cmp45 = 0, $cmp5 = 0, $cmp50 = 0, $cmp55 = 0, $cmp9 = 0, $coerce = 0, $cond = 0, $cond14 = 0, $cond19 = 0, $cond24 = 0, $cond29 = 0, $cond34 = 0, $cond39 = 0, $cond44 = 0, $cond49 = 0, $cond54 = 0, $cond59 = 0, $desc$addr = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $coerce = sp;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13937 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 13937 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((20040|0),(6868|0),13937,(6889|0)); //@line 13937 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13937 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 13938 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$1>>2]|0; //@line 13938 "../sokol\sokol_gfx.h"
 $cmp = ($2|0)==(0); //@line 13938 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((6898|0),(6868|0),13938,(6889|0)); //@line 13938 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13938 "../sokol\sokol_gfx.h"
 }
 $3 = $desc$addr; //@line 13938 "../sokol\sokol_gfx.h"
 $_end_canary = ((($3)) + 140|0); //@line 13938 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$_end_canary>>2]|0; //@line 13938 "../sokol\sokol_gfx.h"
 $cmp1 = ($4|0)==(0); //@line 13938 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((6898|0),(6868|0),13938,(6889|0)); //@line 13938 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13938 "../sokol\sokol_gfx.h"
 }
 _memset((30192|0),0,988)|0; //@line 13939 "../sokol\sokol_gfx.h"
 $5 = $desc$addr; //@line 13940 "../sokol\sokol_gfx.h"
 _memcpy(((30196)|0),($5|0),144)|0; //@line 13940 "../sokol\sokol_gfx.h"
 $6 = HEAP32[(30236)>>2]|0; //@line 13947 "../sokol\sokol_gfx.h"
 $cmp5 = (1)!=($6|0); //@line 13947 "../sokol\sokol_gfx.h"
 if ($cmp5) {
  $7 = HEAP32[(30240)>>2]|0; //@line 13953 "../sokol\sokol_gfx.h"
  $cmp9 = ($7|0)==(0); //@line 13953 "../sokol\sokol_gfx.h"
  $8 = HEAP32[(30240)>>2]|0; //@line 13953 "../sokol\sokol_gfx.h"
  $cond = $cmp9 ? 42 : $8; //@line 13953 "../sokol\sokol_gfx.h"
  HEAP32[(30240)>>2] = $cond; //@line 13953 "../sokol\sokol_gfx.h"
  $9 = HEAP32[(30244)>>2]|0; //@line 13954 "../sokol\sokol_gfx.h"
  $cmp10 = ($9|0)==(0); //@line 13954 "../sokol\sokol_gfx.h"
  $10 = HEAP32[(30244)>>2]|0; //@line 13954 "../sokol\sokol_gfx.h"
  $cond14 = $cmp10 ? 1 : $10; //@line 13954 "../sokol\sokol_gfx.h"
  HEAP32[(30244)>>2] = $cond14; //@line 13954 "../sokol\sokol_gfx.h"
  $11 = HEAP32[(30200)>>2]|0; //@line 13955 "../sokol\sokol_gfx.h"
  $cmp15 = ($11|0)==(0); //@line 13955 "../sokol\sokol_gfx.h"
  $12 = HEAP32[(30200)>>2]|0; //@line 13955 "../sokol\sokol_gfx.h"
  $cond19 = $cmp15 ? 128 : $12; //@line 13955 "../sokol\sokol_gfx.h"
  HEAP32[(30200)>>2] = $cond19; //@line 13955 "../sokol\sokol_gfx.h"
  $13 = HEAP32[(30204)>>2]|0; //@line 13956 "../sokol\sokol_gfx.h"
  $cmp20 = ($13|0)==(0); //@line 13956 "../sokol\sokol_gfx.h"
  $14 = HEAP32[(30204)>>2]|0; //@line 13956 "../sokol\sokol_gfx.h"
  $cond24 = $cmp20 ? 128 : $14; //@line 13956 "../sokol\sokol_gfx.h"
  HEAP32[(30204)>>2] = $cond24; //@line 13956 "../sokol\sokol_gfx.h"
  $15 = HEAP32[(30208)>>2]|0; //@line 13957 "../sokol\sokol_gfx.h"
  $cmp25 = ($15|0)==(0); //@line 13957 "../sokol\sokol_gfx.h"
  $16 = HEAP32[(30208)>>2]|0; //@line 13957 "../sokol\sokol_gfx.h"
  $cond29 = $cmp25 ? 32 : $16; //@line 13957 "../sokol\sokol_gfx.h"
  HEAP32[(30208)>>2] = $cond29; //@line 13957 "../sokol\sokol_gfx.h"
  $17 = HEAP32[(30212)>>2]|0; //@line 13958 "../sokol\sokol_gfx.h"
  $cmp30 = ($17|0)==(0); //@line 13958 "../sokol\sokol_gfx.h"
  $18 = HEAP32[(30212)>>2]|0; //@line 13958 "../sokol\sokol_gfx.h"
  $cond34 = $cmp30 ? 64 : $18; //@line 13958 "../sokol\sokol_gfx.h"
  HEAP32[(30212)>>2] = $cond34; //@line 13958 "../sokol\sokol_gfx.h"
  $19 = HEAP32[(30216)>>2]|0; //@line 13959 "../sokol\sokol_gfx.h"
  $cmp35 = ($19|0)==(0); //@line 13959 "../sokol\sokol_gfx.h"
  $20 = HEAP32[(30216)>>2]|0; //@line 13959 "../sokol\sokol_gfx.h"
  $cond39 = $cmp35 ? 16 : $20; //@line 13959 "../sokol\sokol_gfx.h"
  HEAP32[(30216)>>2] = $cond39; //@line 13959 "../sokol\sokol_gfx.h"
  $21 = HEAP32[(30220)>>2]|0; //@line 13960 "../sokol\sokol_gfx.h"
  $cmp40 = ($21|0)==(0); //@line 13960 "../sokol\sokol_gfx.h"
  $22 = HEAP32[(30220)>>2]|0; //@line 13960 "../sokol\sokol_gfx.h"
  $cond44 = $cmp40 ? 16 : $22; //@line 13960 "../sokol\sokol_gfx.h"
  HEAP32[(30220)>>2] = $cond44; //@line 13960 "../sokol\sokol_gfx.h"
  $23 = HEAP32[(30224)>>2]|0; //@line 13961 "../sokol\sokol_gfx.h"
  $cmp45 = ($23|0)==(0); //@line 13961 "../sokol\sokol_gfx.h"
  $24 = HEAP32[(30224)>>2]|0; //@line 13961 "../sokol\sokol_gfx.h"
  $cond49 = $cmp45 ? 4194304 : $24; //@line 13961 "../sokol\sokol_gfx.h"
  HEAP32[(30224)>>2] = $cond49; //@line 13961 "../sokol\sokol_gfx.h"
  $25 = HEAP32[(30228)>>2]|0; //@line 13962 "../sokol\sokol_gfx.h"
  $cmp50 = ($25|0)==(0); //@line 13962 "../sokol\sokol_gfx.h"
  $26 = HEAP32[(30228)>>2]|0; //@line 13962 "../sokol\sokol_gfx.h"
  $cond54 = $cmp50 ? 8388608 : $26; //@line 13962 "../sokol\sokol_gfx.h"
  HEAP32[(30228)>>2] = $cond54; //@line 13962 "../sokol\sokol_gfx.h"
  $27 = HEAP32[(30232)>>2]|0; //@line 13963 "../sokol\sokol_gfx.h"
  $cmp55 = ($27|0)==(0); //@line 13963 "../sokol\sokol_gfx.h"
  $28 = HEAP32[(30232)>>2]|0; //@line 13963 "../sokol\sokol_gfx.h"
  $cond59 = $cmp55 ? 64 : $28; //@line 13963 "../sokol\sokol_gfx.h"
  HEAP32[(30232)>>2] = $cond59; //@line 13963 "../sokol\sokol_gfx.h"
  __sg_setup_pools((30364),(30196)); //@line 13965 "../sokol\sokol_gfx.h"
  HEAP32[(30340)>>2] = 1; //@line 13966 "../sokol\sokol_gfx.h"
  __sg_setup_backend((30196)); //@line 13967 "../sokol\sokol_gfx.h"
  HEAP8[30192] = 1; //@line 13968 "../sokol\sokol_gfx.h"
  $call = (_sg_setup_context()|0); //@line 13969 "../sokol\sokol_gfx.h"
  HEAP32[$coerce>>2] = $call; //@line 13969 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 13970 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((6953|0),(6868|0),13947,(6889|0)); //@line 13947 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13947 "../sokol\sokol_gfx.h"
 }
}
function __sg_setup_pools($p,$desc) {
 $p = $p|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $buffer_pool_byte_size = 0, $buffer_pool_size = 0;
 var $buffer_pool_size10 = 0, $buffer_pool_size5 = 0, $buffers = 0, $buffers12 = 0, $buffers17 = 0, $call = 0, $call101 = 0, $call29 = 0, $call47 = 0, $call65 = 0, $call83 = 0, $cmp = 0, $cmp18 = 0, $cmp21 = 0, $cmp36 = 0, $cmp39 = 0, $cmp54 = 0, $cmp57 = 0, $cmp6 = 0, $cmp72 = 0;
 var $cmp75 = 0, $cmp90 = 0, $cmp93 = 0, $context_pool = 0, $context_pool98 = 0, $context_pool_byte_size = 0, $context_pool_size = 0, $context_pool_size92 = 0, $context_pool_size97 = 0, $contexts = 0, $contexts102 = 0, $contexts107 = 0, $desc$addr = 0, $image_pool = 0, $image_pool26 = 0, $image_pool_byte_size = 0, $image_pool_size = 0, $image_pool_size20 = 0, $image_pool_size25 = 0, $images = 0;
 var $images30 = 0, $images35 = 0, $mul = 0, $mul100 = 0, $mul28 = 0, $mul46 = 0, $mul64 = 0, $mul82 = 0, $p$addr = 0, $pass_pool = 0, $pass_pool80 = 0, $pass_pool_byte_size = 0, $pass_pool_size = 0, $pass_pool_size74 = 0, $pass_pool_size79 = 0, $passes = 0, $passes84 = 0, $passes89 = 0, $pipeline_pool = 0, $pipeline_pool62 = 0;
 var $pipeline_pool_byte_size = 0, $pipeline_pool_size = 0, $pipeline_pool_size56 = 0, $pipeline_pool_size61 = 0, $pipelines = 0, $pipelines66 = 0, $pipelines71 = 0, $shader_pool = 0, $shader_pool44 = 0, $shader_pool_byte_size = 0, $shader_pool_size = 0, $shader_pool_size38 = 0, $shader_pool_size43 = 0, $shaders = 0, $shaders48 = 0, $shaders53 = 0, $tobool = 0, $tobool1 = 0, $tobool103 = 0, $tobool13 = 0;
 var $tobool31 = 0, $tobool49 = 0, $tobool67 = 0, $tobool85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $p$addr = $p;
 $desc$addr = $desc;
 $0 = $p$addr; //@line 12651 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12651 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7936|0),(6868|0),12651,(7938|0)); //@line 12651 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12651 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 12652 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 12652 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((20040|0),(6868|0),12652,(7938|0)); //@line 12652 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12652 "../sokol\sokol_gfx.h"
 }
 $2 = $desc$addr; //@line 12654 "../sokol\sokol_gfx.h"
 $buffer_pool_size = ((($2)) + 4|0); //@line 12654 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$buffer_pool_size>>2]|0; //@line 12654 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)>(0); //@line 12654 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((7954|0),(6868|0),12654,(7938|0)); //@line 12654 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12654 "../sokol\sokol_gfx.h"
 }
 $4 = $desc$addr; //@line 12654 "../sokol\sokol_gfx.h"
 $buffer_pool_size5 = ((($4)) + 4|0); //@line 12654 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$buffer_pool_size5>>2]|0; //@line 12654 "../sokol\sokol_gfx.h"
 $cmp6 = ($5|0)<(65536); //@line 12654 "../sokol\sokol_gfx.h"
 if (!($cmp6)) {
  ___assert_fail((7954|0),(6868|0),12654,(7938|0)); //@line 12654 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12654 "../sokol\sokol_gfx.h"
 }
 $6 = $p$addr; //@line 12655 "../sokol\sokol_gfx.h"
 $7 = $desc$addr; //@line 12655 "../sokol\sokol_gfx.h"
 $buffer_pool_size10 = ((($7)) + 4|0); //@line 12655 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$buffer_pool_size10>>2]|0; //@line 12655 "../sokol\sokol_gfx.h"
 __sg_init_pool($6,$8); //@line 12655 "../sokol\sokol_gfx.h"
 $9 = $p$addr; //@line 12656 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$9>>2]|0; //@line 12656 "../sokol\sokol_gfx.h"
 $mul = ($10*52)|0; //@line 12656 "../sokol\sokol_gfx.h"
 $buffer_pool_byte_size = $mul; //@line 12656 "../sokol\sokol_gfx.h"
 $11 = $buffer_pool_byte_size; //@line 12657 "../sokol\sokol_gfx.h"
 $call = (_malloc($11)|0); //@line 12657 "../sokol\sokol_gfx.h"
 $12 = $p$addr; //@line 12657 "../sokol\sokol_gfx.h"
 $buffers = ((($12)) + 96|0); //@line 12657 "../sokol\sokol_gfx.h"
 HEAP32[$buffers>>2] = $call; //@line 12657 "../sokol\sokol_gfx.h"
 $13 = $p$addr; //@line 12658 "../sokol\sokol_gfx.h"
 $buffers12 = ((($13)) + 96|0); //@line 12658 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$buffers12>>2]|0; //@line 12658 "../sokol\sokol_gfx.h"
 $tobool13 = ($14|0)!=(0|0); //@line 12658 "../sokol\sokol_gfx.h"
 if (!($tobool13)) {
  ___assert_fail((8031|0),(6868|0),12658,(7938|0)); //@line 12658 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12658 "../sokol\sokol_gfx.h"
 }
 $15 = $p$addr; //@line 12659 "../sokol\sokol_gfx.h"
 $buffers17 = ((($15)) + 96|0); //@line 12659 "../sokol\sokol_gfx.h"
 $16 = HEAP32[$buffers17>>2]|0; //@line 12659 "../sokol\sokol_gfx.h"
 $17 = $buffer_pool_byte_size; //@line 12659 "../sokol\sokol_gfx.h"
 _memset(($16|0),0,($17|0))|0; //@line 12659 "../sokol\sokol_gfx.h"
 $18 = $desc$addr; //@line 12661 "../sokol\sokol_gfx.h"
 $image_pool_size = ((($18)) + 8|0); //@line 12661 "../sokol\sokol_gfx.h"
 $19 = HEAP32[$image_pool_size>>2]|0; //@line 12661 "../sokol\sokol_gfx.h"
 $cmp18 = ($19|0)>(0); //@line 12661 "../sokol\sokol_gfx.h"
 if (!($cmp18)) {
  ___assert_fail((8042|0),(6868|0),12661,(7938|0)); //@line 12661 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12661 "../sokol\sokol_gfx.h"
 }
 $20 = $desc$addr; //@line 12661 "../sokol\sokol_gfx.h"
 $image_pool_size20 = ((($20)) + 8|0); //@line 12661 "../sokol\sokol_gfx.h"
 $21 = HEAP32[$image_pool_size20>>2]|0; //@line 12661 "../sokol\sokol_gfx.h"
 $cmp21 = ($21|0)<(65536); //@line 12661 "../sokol\sokol_gfx.h"
 if (!($cmp21)) {
  ___assert_fail((8042|0),(6868|0),12661,(7938|0)); //@line 12661 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12661 "../sokol\sokol_gfx.h"
 }
 $22 = $p$addr; //@line 12662 "../sokol\sokol_gfx.h"
 $image_pool = ((($22)) + 16|0); //@line 12662 "../sokol\sokol_gfx.h"
 $23 = $desc$addr; //@line 12662 "../sokol\sokol_gfx.h"
 $image_pool_size25 = ((($23)) + 8|0); //@line 12662 "../sokol\sokol_gfx.h"
 $24 = HEAP32[$image_pool_size25>>2]|0; //@line 12662 "../sokol\sokol_gfx.h"
 __sg_init_pool($image_pool,$24); //@line 12662 "../sokol\sokol_gfx.h"
 $25 = $p$addr; //@line 12663 "../sokol\sokol_gfx.h"
 $image_pool26 = ((($25)) + 16|0); //@line 12663 "../sokol\sokol_gfx.h"
 $26 = HEAP32[$image_pool26>>2]|0; //@line 12663 "../sokol\sokol_gfx.h"
 $mul28 = ($26*104)|0; //@line 12663 "../sokol\sokol_gfx.h"
 $image_pool_byte_size = $mul28; //@line 12663 "../sokol\sokol_gfx.h"
 $27 = $image_pool_byte_size; //@line 12664 "../sokol\sokol_gfx.h"
 $call29 = (_malloc($27)|0); //@line 12664 "../sokol\sokol_gfx.h"
 $28 = $p$addr; //@line 12664 "../sokol\sokol_gfx.h"
 $images = ((($28)) + 100|0); //@line 12664 "../sokol\sokol_gfx.h"
 HEAP32[$images>>2] = $call29; //@line 12664 "../sokol\sokol_gfx.h"
 $29 = $p$addr; //@line 12665 "../sokol\sokol_gfx.h"
 $images30 = ((($29)) + 100|0); //@line 12665 "../sokol\sokol_gfx.h"
 $30 = HEAP32[$images30>>2]|0; //@line 12665 "../sokol\sokol_gfx.h"
 $tobool31 = ($30|0)!=(0|0); //@line 12665 "../sokol\sokol_gfx.h"
 if (!($tobool31)) {
  ___assert_fail((8117|0),(6868|0),12665,(7938|0)); //@line 12665 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12665 "../sokol\sokol_gfx.h"
 }
 $31 = $p$addr; //@line 12666 "../sokol\sokol_gfx.h"
 $images35 = ((($31)) + 100|0); //@line 12666 "../sokol\sokol_gfx.h"
 $32 = HEAP32[$images35>>2]|0; //@line 12666 "../sokol\sokol_gfx.h"
 $33 = $image_pool_byte_size; //@line 12666 "../sokol\sokol_gfx.h"
 _memset(($32|0),0,($33|0))|0; //@line 12666 "../sokol\sokol_gfx.h"
 $34 = $desc$addr; //@line 12668 "../sokol\sokol_gfx.h"
 $shader_pool_size = ((($34)) + 12|0); //@line 12668 "../sokol\sokol_gfx.h"
 $35 = HEAP32[$shader_pool_size>>2]|0; //@line 12668 "../sokol\sokol_gfx.h"
 $cmp36 = ($35|0)>(0); //@line 12668 "../sokol\sokol_gfx.h"
 if (!($cmp36)) {
  ___assert_fail((8127|0),(6868|0),12668,(7938|0)); //@line 12668 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12668 "../sokol\sokol_gfx.h"
 }
 $36 = $desc$addr; //@line 12668 "../sokol\sokol_gfx.h"
 $shader_pool_size38 = ((($36)) + 12|0); //@line 12668 "../sokol\sokol_gfx.h"
 $37 = HEAP32[$shader_pool_size38>>2]|0; //@line 12668 "../sokol\sokol_gfx.h"
 $cmp39 = ($37|0)<(65536); //@line 12668 "../sokol\sokol_gfx.h"
 if (!($cmp39)) {
  ___assert_fail((8127|0),(6868|0),12668,(7938|0)); //@line 12668 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12668 "../sokol\sokol_gfx.h"
 }
 $38 = $p$addr; //@line 12669 "../sokol\sokol_gfx.h"
 $shader_pool = ((($38)) + 32|0); //@line 12669 "../sokol\sokol_gfx.h"
 $39 = $desc$addr; //@line 12669 "../sokol\sokol_gfx.h"
 $shader_pool_size43 = ((($39)) + 12|0); //@line 12669 "../sokol\sokol_gfx.h"
 $40 = HEAP32[$shader_pool_size43>>2]|0; //@line 12669 "../sokol\sokol_gfx.h"
 __sg_init_pool($shader_pool,$40); //@line 12669 "../sokol\sokol_gfx.h"
 $41 = $p$addr; //@line 12670 "../sokol\sokol_gfx.h"
 $shader_pool44 = ((($41)) + 32|0); //@line 12670 "../sokol\sokol_gfx.h"
 $42 = HEAP32[$shader_pool44>>2]|0; //@line 12670 "../sokol\sokol_gfx.h"
 $mul46 = ($42*300)|0; //@line 12670 "../sokol\sokol_gfx.h"
 $shader_pool_byte_size = $mul46; //@line 12670 "../sokol\sokol_gfx.h"
 $43 = $shader_pool_byte_size; //@line 12671 "../sokol\sokol_gfx.h"
 $call47 = (_malloc($43)|0); //@line 12671 "../sokol\sokol_gfx.h"
 $44 = $p$addr; //@line 12671 "../sokol\sokol_gfx.h"
 $shaders = ((($44)) + 104|0); //@line 12671 "../sokol\sokol_gfx.h"
 HEAP32[$shaders>>2] = $call47; //@line 12671 "../sokol\sokol_gfx.h"
 $45 = $p$addr; //@line 12672 "../sokol\sokol_gfx.h"
 $shaders48 = ((($45)) + 104|0); //@line 12672 "../sokol\sokol_gfx.h"
 $46 = HEAP32[$shaders48>>2]|0; //@line 12672 "../sokol\sokol_gfx.h"
 $tobool49 = ($46|0)!=(0|0); //@line 12672 "../sokol\sokol_gfx.h"
 if (!($tobool49)) {
  ___assert_fail((8204|0),(6868|0),12672,(7938|0)); //@line 12672 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12672 "../sokol\sokol_gfx.h"
 }
 $47 = $p$addr; //@line 12673 "../sokol\sokol_gfx.h"
 $shaders53 = ((($47)) + 104|0); //@line 12673 "../sokol\sokol_gfx.h"
 $48 = HEAP32[$shaders53>>2]|0; //@line 12673 "../sokol\sokol_gfx.h"
 $49 = $shader_pool_byte_size; //@line 12673 "../sokol\sokol_gfx.h"
 _memset(($48|0),0,($49|0))|0; //@line 12673 "../sokol\sokol_gfx.h"
 $50 = $desc$addr; //@line 12675 "../sokol\sokol_gfx.h"
 $pipeline_pool_size = ((($50)) + 16|0); //@line 12675 "../sokol\sokol_gfx.h"
 $51 = HEAP32[$pipeline_pool_size>>2]|0; //@line 12675 "../sokol\sokol_gfx.h"
 $cmp54 = ($51|0)>(0); //@line 12675 "../sokol\sokol_gfx.h"
 if (!($cmp54)) {
  ___assert_fail((8215|0),(6868|0),12675,(7938|0)); //@line 12675 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12675 "../sokol\sokol_gfx.h"
 }
 $52 = $desc$addr; //@line 12675 "../sokol\sokol_gfx.h"
 $pipeline_pool_size56 = ((($52)) + 16|0); //@line 12675 "../sokol\sokol_gfx.h"
 $53 = HEAP32[$pipeline_pool_size56>>2]|0; //@line 12675 "../sokol\sokol_gfx.h"
 $cmp57 = ($53|0)<(65536); //@line 12675 "../sokol\sokol_gfx.h"
 if (!($cmp57)) {
  ___assert_fail((8215|0),(6868|0),12675,(7938|0)); //@line 12675 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12675 "../sokol\sokol_gfx.h"
 }
 $54 = $p$addr; //@line 12676 "../sokol\sokol_gfx.h"
 $pipeline_pool = ((($54)) + 48|0); //@line 12676 "../sokol\sokol_gfx.h"
 $55 = $desc$addr; //@line 12676 "../sokol\sokol_gfx.h"
 $pipeline_pool_size61 = ((($55)) + 16|0); //@line 12676 "../sokol\sokol_gfx.h"
 $56 = HEAP32[$pipeline_pool_size61>>2]|0; //@line 12676 "../sokol\sokol_gfx.h"
 __sg_init_pool($pipeline_pool,$56); //@line 12676 "../sokol\sokol_gfx.h"
 $57 = $p$addr; //@line 12677 "../sokol\sokol_gfx.h"
 $pipeline_pool62 = ((($57)) + 48|0); //@line 12677 "../sokol\sokol_gfx.h"
 $58 = HEAP32[$pipeline_pool62>>2]|0; //@line 12677 "../sokol\sokol_gfx.h"
 $mul64 = ($58*84)|0; //@line 12677 "../sokol\sokol_gfx.h"
 $pipeline_pool_byte_size = $mul64; //@line 12677 "../sokol\sokol_gfx.h"
 $59 = $pipeline_pool_byte_size; //@line 12678 "../sokol\sokol_gfx.h"
 $call65 = (_malloc($59)|0); //@line 12678 "../sokol\sokol_gfx.h"
 $60 = $p$addr; //@line 12678 "../sokol\sokol_gfx.h"
 $pipelines = ((($60)) + 108|0); //@line 12678 "../sokol\sokol_gfx.h"
 HEAP32[$pipelines>>2] = $call65; //@line 12678 "../sokol\sokol_gfx.h"
 $61 = $p$addr; //@line 12679 "../sokol\sokol_gfx.h"
 $pipelines66 = ((($61)) + 108|0); //@line 12679 "../sokol\sokol_gfx.h"
 $62 = HEAP32[$pipelines66>>2]|0; //@line 12679 "../sokol\sokol_gfx.h"
 $tobool67 = ($62|0)!=(0|0); //@line 12679 "../sokol\sokol_gfx.h"
 if (!($tobool67)) {
  ___assert_fail((8296|0),(6868|0),12679,(7938|0)); //@line 12679 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12679 "../sokol\sokol_gfx.h"
 }
 $63 = $p$addr; //@line 12680 "../sokol\sokol_gfx.h"
 $pipelines71 = ((($63)) + 108|0); //@line 12680 "../sokol\sokol_gfx.h"
 $64 = HEAP32[$pipelines71>>2]|0; //@line 12680 "../sokol\sokol_gfx.h"
 $65 = $pipeline_pool_byte_size; //@line 12680 "../sokol\sokol_gfx.h"
 _memset(($64|0),0,($65|0))|0; //@line 12680 "../sokol\sokol_gfx.h"
 $66 = $desc$addr; //@line 12682 "../sokol\sokol_gfx.h"
 $pass_pool_size = ((($66)) + 20|0); //@line 12682 "../sokol\sokol_gfx.h"
 $67 = HEAP32[$pass_pool_size>>2]|0; //@line 12682 "../sokol\sokol_gfx.h"
 $cmp72 = ($67|0)>(0); //@line 12682 "../sokol\sokol_gfx.h"
 if (!($cmp72)) {
  ___assert_fail((8309|0),(6868|0),12682,(7938|0)); //@line 12682 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12682 "../sokol\sokol_gfx.h"
 }
 $68 = $desc$addr; //@line 12682 "../sokol\sokol_gfx.h"
 $pass_pool_size74 = ((($68)) + 20|0); //@line 12682 "../sokol\sokol_gfx.h"
 $69 = HEAP32[$pass_pool_size74>>2]|0; //@line 12682 "../sokol\sokol_gfx.h"
 $cmp75 = ($69|0)<(65536); //@line 12682 "../sokol\sokol_gfx.h"
 if (!($cmp75)) {
  ___assert_fail((8309|0),(6868|0),12682,(7938|0)); //@line 12682 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12682 "../sokol\sokol_gfx.h"
 }
 $70 = $p$addr; //@line 12683 "../sokol\sokol_gfx.h"
 $pass_pool = ((($70)) + 64|0); //@line 12683 "../sokol\sokol_gfx.h"
 $71 = $desc$addr; //@line 12683 "../sokol\sokol_gfx.h"
 $pass_pool_size79 = ((($71)) + 20|0); //@line 12683 "../sokol\sokol_gfx.h"
 $72 = HEAP32[$pass_pool_size79>>2]|0; //@line 12683 "../sokol\sokol_gfx.h"
 __sg_init_pool($pass_pool,$72); //@line 12683 "../sokol\sokol_gfx.h"
 $73 = $p$addr; //@line 12684 "../sokol\sokol_gfx.h"
 $pass_pool80 = ((($73)) + 64|0); //@line 12684 "../sokol\sokol_gfx.h"
 $74 = HEAP32[$pass_pool80>>2]|0; //@line 12684 "../sokol\sokol_gfx.h"
 $mul82 = ($74*136)|0; //@line 12684 "../sokol\sokol_gfx.h"
 $pass_pool_byte_size = $mul82; //@line 12684 "../sokol\sokol_gfx.h"
 $75 = $pass_pool_byte_size; //@line 12685 "../sokol\sokol_gfx.h"
 $call83 = (_malloc($75)|0); //@line 12685 "../sokol\sokol_gfx.h"
 $76 = $p$addr; //@line 12685 "../sokol\sokol_gfx.h"
 $passes = ((($76)) + 112|0); //@line 12685 "../sokol\sokol_gfx.h"
 HEAP32[$passes>>2] = $call83; //@line 12685 "../sokol\sokol_gfx.h"
 $77 = $p$addr; //@line 12686 "../sokol\sokol_gfx.h"
 $passes84 = ((($77)) + 112|0); //@line 12686 "../sokol\sokol_gfx.h"
 $78 = HEAP32[$passes84>>2]|0; //@line 12686 "../sokol\sokol_gfx.h"
 $tobool85 = ($78|0)!=(0|0); //@line 12686 "../sokol\sokol_gfx.h"
 if (!($tobool85)) {
  ___assert_fail((8382|0),(6868|0),12686,(7938|0)); //@line 12686 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12686 "../sokol\sokol_gfx.h"
 }
 $79 = $p$addr; //@line 12687 "../sokol\sokol_gfx.h"
 $passes89 = ((($79)) + 112|0); //@line 12687 "../sokol\sokol_gfx.h"
 $80 = HEAP32[$passes89>>2]|0; //@line 12687 "../sokol\sokol_gfx.h"
 $81 = $pass_pool_byte_size; //@line 12687 "../sokol\sokol_gfx.h"
 _memset(($80|0),0,($81|0))|0; //@line 12687 "../sokol\sokol_gfx.h"
 $82 = $desc$addr; //@line 12689 "../sokol\sokol_gfx.h"
 $context_pool_size = ((($82)) + 24|0); //@line 12689 "../sokol\sokol_gfx.h"
 $83 = HEAP32[$context_pool_size>>2]|0; //@line 12689 "../sokol\sokol_gfx.h"
 $cmp90 = ($83|0)>(0); //@line 12689 "../sokol\sokol_gfx.h"
 if (!($cmp90)) {
  ___assert_fail((8392|0),(6868|0),12689,(7938|0)); //@line 12689 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12689 "../sokol\sokol_gfx.h"
 }
 $84 = $desc$addr; //@line 12689 "../sokol\sokol_gfx.h"
 $context_pool_size92 = ((($84)) + 24|0); //@line 12689 "../sokol\sokol_gfx.h"
 $85 = HEAP32[$context_pool_size92>>2]|0; //@line 12689 "../sokol\sokol_gfx.h"
 $cmp93 = ($85|0)<(65536); //@line 12689 "../sokol\sokol_gfx.h"
 if (!($cmp93)) {
  ___assert_fail((8392|0),(6868|0),12689,(7938|0)); //@line 12689 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12689 "../sokol\sokol_gfx.h"
 }
 $86 = $p$addr; //@line 12690 "../sokol\sokol_gfx.h"
 $context_pool = ((($86)) + 80|0); //@line 12690 "../sokol\sokol_gfx.h"
 $87 = $desc$addr; //@line 12690 "../sokol\sokol_gfx.h"
 $context_pool_size97 = ((($87)) + 24|0); //@line 12690 "../sokol\sokol_gfx.h"
 $88 = HEAP32[$context_pool_size97>>2]|0; //@line 12690 "../sokol\sokol_gfx.h"
 __sg_init_pool($context_pool,$88); //@line 12690 "../sokol\sokol_gfx.h"
 $89 = $p$addr; //@line 12691 "../sokol\sokol_gfx.h"
 $context_pool98 = ((($89)) + 80|0); //@line 12691 "../sokol\sokol_gfx.h"
 $90 = HEAP32[$context_pool98>>2]|0; //@line 12691 "../sokol\sokol_gfx.h"
 $mul100 = ($90*12)|0; //@line 12691 "../sokol\sokol_gfx.h"
 $context_pool_byte_size = $mul100; //@line 12691 "../sokol\sokol_gfx.h"
 $91 = $context_pool_byte_size; //@line 12692 "../sokol\sokol_gfx.h"
 $call101 = (_malloc($91)|0); //@line 12692 "../sokol\sokol_gfx.h"
 $92 = $p$addr; //@line 12692 "../sokol\sokol_gfx.h"
 $contexts = ((($92)) + 116|0); //@line 12692 "../sokol\sokol_gfx.h"
 HEAP32[$contexts>>2] = $call101; //@line 12692 "../sokol\sokol_gfx.h"
 $93 = $p$addr; //@line 12693 "../sokol\sokol_gfx.h"
 $contexts102 = ((($93)) + 116|0); //@line 12693 "../sokol\sokol_gfx.h"
 $94 = HEAP32[$contexts102>>2]|0; //@line 12693 "../sokol\sokol_gfx.h"
 $tobool103 = ($94|0)!=(0|0); //@line 12693 "../sokol\sokol_gfx.h"
 if ($tobool103) {
  $95 = $p$addr; //@line 12694 "../sokol\sokol_gfx.h"
  $contexts107 = ((($95)) + 116|0); //@line 12694 "../sokol\sokol_gfx.h"
  $96 = HEAP32[$contexts107>>2]|0; //@line 12694 "../sokol\sokol_gfx.h"
  $97 = $context_pool_byte_size; //@line 12694 "../sokol\sokol_gfx.h"
  _memset(($96|0),0,($97|0))|0; //@line 12694 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12695 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((8471|0),(6868|0),12693,(7938|0)); //@line 12693 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12693 "../sokol\sokol_gfx.h"
 }
}
function __sg_setup_backend($desc) {
 $desc = $desc|0;
 var $0 = 0, $desc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 12080 "../sokol\sokol_gfx.h"
 __sg_wgpu_setup_backend($0); //@line 12080 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12086 "../sokol\sokol_gfx.h"
}
function _sg_setup_context() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp8 = 0, $ctx = 0;
 var $res = 0, $retval = 0, $slot_index = 0, $state = 0, $state7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 12|0;
 $res = sp + 8|0;
 $0 = HEAP8[30192]|0; //@line 14021 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14021 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14021,(7016|0)); //@line 14021 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14021 "../sokol\sokol_gfx.h"
 }
 $call = (__sg_pool_alloc_index((30444))|0); //@line 14023 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 14023 "../sokol\sokol_gfx.h"
 $1 = $slot_index; //@line 14024 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 14024 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  HEAP32[$res>>2] = 0; //@line 14033 "../sokol\sokol_gfx.h"
  ;HEAP32[(30344)>>2]=HEAP32[$res>>2]|0; //@line 14035 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$res>>2]|0; //@line 14036 "../sokol\sokol_gfx.h"
  $11 = HEAP32[$retval>>2]|0; //@line 14036 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($11|0); //@line 14036 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[(30480)>>2]|0; //@line 14025 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 14025 "../sokol\sokol_gfx.h"
 $arrayidx = (($2) + (($3*12)|0)|0); //@line 14025 "../sokol\sokol_gfx.h"
 $4 = $slot_index; //@line 14025 "../sokol\sokol_gfx.h"
 $call1 = (__sg_slot_alloc((30444),$arrayidx,$4)|0); //@line 14025 "../sokol\sokol_gfx.h"
 HEAP32[$res>>2] = $call1; //@line 14025 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$res>>2]|0; //@line 14026 "../sokol\sokol_gfx.h"
 $call3 = (__sg_context_at((30364),$5)|0); //@line 14026 "../sokol\sokol_gfx.h"
 $ctx = $call3; //@line 14026 "../sokol\sokol_gfx.h"
 $6 = $ctx; //@line 14027 "../sokol\sokol_gfx.h"
 $call4 = (__sg_create_context($6)|0); //@line 14027 "../sokol\sokol_gfx.h"
 $7 = $ctx; //@line 14027 "../sokol\sokol_gfx.h"
 $state = ((($7)) + 8|0); //@line 14027 "../sokol\sokol_gfx.h"
 HEAP32[$state>>2] = $call4; //@line 14027 "../sokol\sokol_gfx.h"
 $8 = $ctx; //@line 14028 "../sokol\sokol_gfx.h"
 $state7 = ((($8)) + 8|0); //@line 14028 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$state7>>2]|0; //@line 14028 "../sokol\sokol_gfx.h"
 $cmp8 = ($9|0)==(2); //@line 14028 "../sokol\sokol_gfx.h"
 if (!($cmp8)) {
  ___assert_fail((7033|0),(6868|0),14028,(7016|0)); //@line 14028 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14028 "../sokol\sokol_gfx.h"
 }
 $10 = $ctx; //@line 14029 "../sokol\sokol_gfx.h"
 __sg_activate_context($10); //@line 14029 "../sokol\sokol_gfx.h"
 ;HEAP32[(30344)>>2]=HEAP32[$res>>2]|0; //@line 14035 "../sokol\sokol_gfx.h"
 ;HEAP32[$retval>>2]=HEAP32[$res>>2]|0; //@line 14036 "../sokol\sokol_gfx.h"
 $11 = HEAP32[$retval>>2]|0; //@line 14036 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($11|0); //@line 14036 "../sokol\sokol_gfx.h"
}
function _sg_shutdown() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $ctx = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(30344)>>2]|0; //@line 13977 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13977 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = HEAP32[(30344)>>2]|0; //@line 13978 "../sokol\sokol_gfx.h"
  $call = (__sg_lookup_context((30364),$1)|0); //@line 13978 "../sokol\sokol_gfx.h"
  $ctx = $call; //@line 13978 "../sokol\sokol_gfx.h"
  $2 = $ctx; //@line 13979 "../sokol\sokol_gfx.h"
  $tobool = ($2|0)!=(0|0); //@line 13979 "../sokol\sokol_gfx.h"
  if ($tobool) {
   $3 = HEAP32[(30344)>>2]|0; //@line 13980 "../sokol\sokol_gfx.h"
   __sg_destroy_all_resources((30364),$3); //@line 13980 "../sokol\sokol_gfx.h"
   $4 = $ctx; //@line 13981 "../sokol\sokol_gfx.h"
   __sg_destroy_context($4); //@line 13981 "../sokol\sokol_gfx.h"
  }
 }
 __sg_discard_backend(); //@line 13984 "../sokol\sokol_gfx.h"
 __sg_discard_pools((30364)); //@line 13985 "../sokol\sokol_gfx.h"
 HEAP8[30192] = 0; //@line 13986 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 13987 "../sokol\sokol_gfx.h"
}
function __sg_lookup_context($p,$ctx_id) {
 $p = $p|0;
 $ctx_id = $ctx_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $ctx = 0, $ctx_id$addr = 0, $p$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $ctx_id$addr = $ctx_id;
 $0 = $p$addr; //@line 12839 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12839 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7936|0),(6868|0),12839,(9881|0)); //@line 12839 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12839 "../sokol\sokol_gfx.h"
 }
 $1 = $ctx_id$addr; //@line 12840 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12840 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $2 = $p$addr; //@line 12841 "../sokol\sokol_gfx.h"
  $3 = $ctx_id$addr; //@line 12841 "../sokol\sokol_gfx.h"
  $call = (__sg_context_at($2,$3)|0); //@line 12841 "../sokol\sokol_gfx.h"
  $ctx = $call; //@line 12841 "../sokol\sokol_gfx.h"
  $4 = $ctx; //@line 12842 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$4>>2]|0; //@line 12842 "../sokol\sokol_gfx.h"
  $6 = $ctx_id$addr; //@line 12842 "../sokol\sokol_gfx.h"
  $cmp1 = ($5|0)==($6|0); //@line 12842 "../sokol\sokol_gfx.h"
  if ($cmp1) {
   $7 = $ctx; //@line 12843 "../sokol\sokol_gfx.h"
   $retval = $7; //@line 12843 "../sokol\sokol_gfx.h"
   $8 = $retval; //@line 12847 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($8|0); //@line 12847 "../sokol\sokol_gfx.h"
  }
 }
 $retval = 0; //@line 12846 "../sokol\sokol_gfx.h"
 $8 = $retval; //@line 12847 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($8|0); //@line 12847 "../sokol\sokol_gfx.h"
}
function __sg_destroy_all_resources($p,$ctx_id) {
 $p = $p|0;
 $ctx_id = $ctx_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $arrayidx = 0, $arrayidx103 = 0, $arrayidx11 = 0, $arrayidx111 = 0, $arrayidx18 = 0, $arrayidx25 = 0, $arrayidx33 = 0, $arrayidx4 = 0, $arrayidx44 = 0, $arrayidx51 = 0;
 var $arrayidx59 = 0, $arrayidx70 = 0, $arrayidx77 = 0, $arrayidx85 = 0, $arrayidx96 = 0, $buffers = 0, $buffers10 = 0, $buffers3 = 0, $cmp = 0, $cmp106 = 0, $cmp108 = 0, $cmp16 = 0, $cmp2 = 0, $cmp21 = 0, $cmp28 = 0, $cmp30 = 0, $cmp42 = 0, $cmp47 = 0, $cmp54 = 0, $cmp56 = 0;
 var $cmp68 = 0, $cmp7 = 0, $cmp73 = 0, $cmp8 = 0, $cmp80 = 0, $cmp82 = 0, $cmp94 = 0, $cmp99 = 0, $ctx_id$addr = 0, $ctx_id1 = 0, $ctx_id20 = 0, $ctx_id46 = 0, $ctx_id72 = 0, $ctx_id98 = 0, $i = 0, $i13 = 0, $i39 = 0, $i65 = 0, $i91 = 0, $image_pool = 0;
 var $images = 0, $images24 = 0, $images32 = 0, $inc = 0, $inc115 = 0, $inc37 = 0, $inc63 = 0, $inc89 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $p$addr = 0, $pass_pool = 0, $passes = 0, $passes102 = 0, $passes110 = 0, $pipeline_pool = 0, $pipelines = 0;
 var $pipelines76 = 0, $pipelines84 = 0, $shader_pool = 0, $shaders = 0, $shaders50 = 0, $shaders58 = 0, $state = 0, $state101 = 0, $state105 = 0, $state23 = 0, $state27 = 0, $state49 = 0, $state53 = 0, $state6 = 0, $state75 = 0, $state79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $p$addr = $p;
 $ctx_id$addr = $ctx_id;
 $i = 1; //@line 12857 "../sokol\sokol_gfx.h"
 while(1) {
  $0 = $i; //@line 12857 "../sokol\sokol_gfx.h"
  $1 = $p$addr; //@line 12857 "../sokol\sokol_gfx.h"
  $2 = HEAP32[$1>>2]|0; //@line 12857 "../sokol\sokol_gfx.h"
  $cmp = ($0|0)<($2|0); //@line 12857 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $3 = $p$addr; //@line 12858 "../sokol\sokol_gfx.h"
  $buffers = ((($3)) + 96|0); //@line 12858 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$buffers>>2]|0; //@line 12858 "../sokol\sokol_gfx.h"
  $5 = $i; //@line 12858 "../sokol\sokol_gfx.h"
  $arrayidx = (($4) + (($5*52)|0)|0); //@line 12858 "../sokol\sokol_gfx.h"
  $ctx_id1 = ((($arrayidx)) + 4|0); //@line 12858 "../sokol\sokol_gfx.h"
  $6 = HEAP32[$ctx_id1>>2]|0; //@line 12858 "../sokol\sokol_gfx.h"
  $7 = $ctx_id$addr; //@line 12858 "../sokol\sokol_gfx.h"
  $cmp2 = ($6|0)==($7|0); //@line 12858 "../sokol\sokol_gfx.h"
  if ($cmp2) {
   $8 = $p$addr; //@line 12859 "../sokol\sokol_gfx.h"
   $buffers3 = ((($8)) + 96|0); //@line 12859 "../sokol\sokol_gfx.h"
   $9 = HEAP32[$buffers3>>2]|0; //@line 12859 "../sokol\sokol_gfx.h"
   $10 = $i; //@line 12859 "../sokol\sokol_gfx.h"
   $arrayidx4 = (($9) + (($10*52)|0)|0); //@line 12859 "../sokol\sokol_gfx.h"
   $state6 = ((($arrayidx4)) + 8|0); //@line 12859 "../sokol\sokol_gfx.h"
   $11 = HEAP32[$state6>>2]|0; //@line 12859 "../sokol\sokol_gfx.h"
   $state = $11; //@line 12859 "../sokol\sokol_gfx.h"
   $12 = $state; //@line 12860 "../sokol\sokol_gfx.h"
   $cmp7 = ($12|0)==(2); //@line 12860 "../sokol\sokol_gfx.h"
   $13 = $state; //@line 12860 "../sokol\sokol_gfx.h"
   $cmp8 = ($13|0)==(3); //@line 12860 "../sokol\sokol_gfx.h"
   $or$cond = $cmp7 | $cmp8; //@line 12860 "../sokol\sokol_gfx.h"
   if ($or$cond) {
    $14 = $p$addr; //@line 12861 "../sokol\sokol_gfx.h"
    $buffers10 = ((($14)) + 96|0); //@line 12861 "../sokol\sokol_gfx.h"
    $15 = HEAP32[$buffers10>>2]|0; //@line 12861 "../sokol\sokol_gfx.h"
    $16 = $i; //@line 12861 "../sokol\sokol_gfx.h"
    $arrayidx11 = (($15) + (($16*52)|0)|0); //@line 12861 "../sokol\sokol_gfx.h"
    __sg_destroy_buffer($arrayidx11); //@line 12861 "../sokol\sokol_gfx.h"
   }
  }
  $17 = $i; //@line 12857 "../sokol\sokol_gfx.h"
  $inc = (($17) + 1)|0; //@line 12857 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 12857 "../sokol\sokol_gfx.h"
 }
 $i13 = 1; //@line 12865 "../sokol\sokol_gfx.h"
 while(1) {
  $18 = $i13; //@line 12865 "../sokol\sokol_gfx.h"
  $19 = $p$addr; //@line 12865 "../sokol\sokol_gfx.h"
  $image_pool = ((($19)) + 16|0); //@line 12865 "../sokol\sokol_gfx.h"
  $20 = HEAP32[$image_pool>>2]|0; //@line 12865 "../sokol\sokol_gfx.h"
  $cmp16 = ($18|0)<($20|0); //@line 12865 "../sokol\sokol_gfx.h"
  if (!($cmp16)) {
   break;
  }
  $21 = $p$addr; //@line 12866 "../sokol\sokol_gfx.h"
  $images = ((($21)) + 100|0); //@line 12866 "../sokol\sokol_gfx.h"
  $22 = HEAP32[$images>>2]|0; //@line 12866 "../sokol\sokol_gfx.h"
  $23 = $i13; //@line 12866 "../sokol\sokol_gfx.h"
  $arrayidx18 = (($22) + (($23*104)|0)|0); //@line 12866 "../sokol\sokol_gfx.h"
  $ctx_id20 = ((($arrayidx18)) + 4|0); //@line 12866 "../sokol\sokol_gfx.h"
  $24 = HEAP32[$ctx_id20>>2]|0; //@line 12866 "../sokol\sokol_gfx.h"
  $25 = $ctx_id$addr; //@line 12866 "../sokol\sokol_gfx.h"
  $cmp21 = ($24|0)==($25|0); //@line 12866 "../sokol\sokol_gfx.h"
  if ($cmp21) {
   $26 = $p$addr; //@line 12867 "../sokol\sokol_gfx.h"
   $images24 = ((($26)) + 100|0); //@line 12867 "../sokol\sokol_gfx.h"
   $27 = HEAP32[$images24>>2]|0; //@line 12867 "../sokol\sokol_gfx.h"
   $28 = $i13; //@line 12867 "../sokol\sokol_gfx.h"
   $arrayidx25 = (($27) + (($28*104)|0)|0); //@line 12867 "../sokol\sokol_gfx.h"
   $state27 = ((($arrayidx25)) + 8|0); //@line 12867 "../sokol\sokol_gfx.h"
   $29 = HEAP32[$state27>>2]|0; //@line 12867 "../sokol\sokol_gfx.h"
   $state23 = $29; //@line 12867 "../sokol\sokol_gfx.h"
   $30 = $state23; //@line 12868 "../sokol\sokol_gfx.h"
   $cmp28 = ($30|0)==(2); //@line 12868 "../sokol\sokol_gfx.h"
   $31 = $state23; //@line 12868 "../sokol\sokol_gfx.h"
   $cmp30 = ($31|0)==(3); //@line 12868 "../sokol\sokol_gfx.h"
   $or$cond1 = $cmp28 | $cmp30; //@line 12868 "../sokol\sokol_gfx.h"
   if ($or$cond1) {
    $32 = $p$addr; //@line 12869 "../sokol\sokol_gfx.h"
    $images32 = ((($32)) + 100|0); //@line 12869 "../sokol\sokol_gfx.h"
    $33 = HEAP32[$images32>>2]|0; //@line 12869 "../sokol\sokol_gfx.h"
    $34 = $i13; //@line 12869 "../sokol\sokol_gfx.h"
    $arrayidx33 = (($33) + (($34*104)|0)|0); //@line 12869 "../sokol\sokol_gfx.h"
    __sg_destroy_image($arrayidx33); //@line 12869 "../sokol\sokol_gfx.h"
   }
  }
  $35 = $i13; //@line 12865 "../sokol\sokol_gfx.h"
  $inc37 = (($35) + 1)|0; //@line 12865 "../sokol\sokol_gfx.h"
  $i13 = $inc37; //@line 12865 "../sokol\sokol_gfx.h"
 }
 $i39 = 1; //@line 12873 "../sokol\sokol_gfx.h"
 while(1) {
  $36 = $i39; //@line 12873 "../sokol\sokol_gfx.h"
  $37 = $p$addr; //@line 12873 "../sokol\sokol_gfx.h"
  $shader_pool = ((($37)) + 32|0); //@line 12873 "../sokol\sokol_gfx.h"
  $38 = HEAP32[$shader_pool>>2]|0; //@line 12873 "../sokol\sokol_gfx.h"
  $cmp42 = ($36|0)<($38|0); //@line 12873 "../sokol\sokol_gfx.h"
  if (!($cmp42)) {
   break;
  }
  $39 = $p$addr; //@line 12874 "../sokol\sokol_gfx.h"
  $shaders = ((($39)) + 104|0); //@line 12874 "../sokol\sokol_gfx.h"
  $40 = HEAP32[$shaders>>2]|0; //@line 12874 "../sokol\sokol_gfx.h"
  $41 = $i39; //@line 12874 "../sokol\sokol_gfx.h"
  $arrayidx44 = (($40) + (($41*300)|0)|0); //@line 12874 "../sokol\sokol_gfx.h"
  $ctx_id46 = ((($arrayidx44)) + 4|0); //@line 12874 "../sokol\sokol_gfx.h"
  $42 = HEAP32[$ctx_id46>>2]|0; //@line 12874 "../sokol\sokol_gfx.h"
  $43 = $ctx_id$addr; //@line 12874 "../sokol\sokol_gfx.h"
  $cmp47 = ($42|0)==($43|0); //@line 12874 "../sokol\sokol_gfx.h"
  if ($cmp47) {
   $44 = $p$addr; //@line 12875 "../sokol\sokol_gfx.h"
   $shaders50 = ((($44)) + 104|0); //@line 12875 "../sokol\sokol_gfx.h"
   $45 = HEAP32[$shaders50>>2]|0; //@line 12875 "../sokol\sokol_gfx.h"
   $46 = $i39; //@line 12875 "../sokol\sokol_gfx.h"
   $arrayidx51 = (($45) + (($46*300)|0)|0); //@line 12875 "../sokol\sokol_gfx.h"
   $state53 = ((($arrayidx51)) + 8|0); //@line 12875 "../sokol\sokol_gfx.h"
   $47 = HEAP32[$state53>>2]|0; //@line 12875 "../sokol\sokol_gfx.h"
   $state49 = $47; //@line 12875 "../sokol\sokol_gfx.h"
   $48 = $state49; //@line 12876 "../sokol\sokol_gfx.h"
   $cmp54 = ($48|0)==(2); //@line 12876 "../sokol\sokol_gfx.h"
   $49 = $state49; //@line 12876 "../sokol\sokol_gfx.h"
   $cmp56 = ($49|0)==(3); //@line 12876 "../sokol\sokol_gfx.h"
   $or$cond2 = $cmp54 | $cmp56; //@line 12876 "../sokol\sokol_gfx.h"
   if ($or$cond2) {
    $50 = $p$addr; //@line 12877 "../sokol\sokol_gfx.h"
    $shaders58 = ((($50)) + 104|0); //@line 12877 "../sokol\sokol_gfx.h"
    $51 = HEAP32[$shaders58>>2]|0; //@line 12877 "../sokol\sokol_gfx.h"
    $52 = $i39; //@line 12877 "../sokol\sokol_gfx.h"
    $arrayidx59 = (($51) + (($52*300)|0)|0); //@line 12877 "../sokol\sokol_gfx.h"
    __sg_destroy_shader($arrayidx59); //@line 12877 "../sokol\sokol_gfx.h"
   }
  }
  $53 = $i39; //@line 12873 "../sokol\sokol_gfx.h"
  $inc63 = (($53) + 1)|0; //@line 12873 "../sokol\sokol_gfx.h"
  $i39 = $inc63; //@line 12873 "../sokol\sokol_gfx.h"
 }
 $i65 = 1; //@line 12881 "../sokol\sokol_gfx.h"
 while(1) {
  $54 = $i65; //@line 12881 "../sokol\sokol_gfx.h"
  $55 = $p$addr; //@line 12881 "../sokol\sokol_gfx.h"
  $pipeline_pool = ((($55)) + 48|0); //@line 12881 "../sokol\sokol_gfx.h"
  $56 = HEAP32[$pipeline_pool>>2]|0; //@line 12881 "../sokol\sokol_gfx.h"
  $cmp68 = ($54|0)<($56|0); //@line 12881 "../sokol\sokol_gfx.h"
  if (!($cmp68)) {
   break;
  }
  $57 = $p$addr; //@line 12882 "../sokol\sokol_gfx.h"
  $pipelines = ((($57)) + 108|0); //@line 12882 "../sokol\sokol_gfx.h"
  $58 = HEAP32[$pipelines>>2]|0; //@line 12882 "../sokol\sokol_gfx.h"
  $59 = $i65; //@line 12882 "../sokol\sokol_gfx.h"
  $arrayidx70 = (($58) + (($59*84)|0)|0); //@line 12882 "../sokol\sokol_gfx.h"
  $ctx_id72 = ((($arrayidx70)) + 4|0); //@line 12882 "../sokol\sokol_gfx.h"
  $60 = HEAP32[$ctx_id72>>2]|0; //@line 12882 "../sokol\sokol_gfx.h"
  $61 = $ctx_id$addr; //@line 12882 "../sokol\sokol_gfx.h"
  $cmp73 = ($60|0)==($61|0); //@line 12882 "../sokol\sokol_gfx.h"
  if ($cmp73) {
   $62 = $p$addr; //@line 12883 "../sokol\sokol_gfx.h"
   $pipelines76 = ((($62)) + 108|0); //@line 12883 "../sokol\sokol_gfx.h"
   $63 = HEAP32[$pipelines76>>2]|0; //@line 12883 "../sokol\sokol_gfx.h"
   $64 = $i65; //@line 12883 "../sokol\sokol_gfx.h"
   $arrayidx77 = (($63) + (($64*84)|0)|0); //@line 12883 "../sokol\sokol_gfx.h"
   $state79 = ((($arrayidx77)) + 8|0); //@line 12883 "../sokol\sokol_gfx.h"
   $65 = HEAP32[$state79>>2]|0; //@line 12883 "../sokol\sokol_gfx.h"
   $state75 = $65; //@line 12883 "../sokol\sokol_gfx.h"
   $66 = $state75; //@line 12884 "../sokol\sokol_gfx.h"
   $cmp80 = ($66|0)==(2); //@line 12884 "../sokol\sokol_gfx.h"
   $67 = $state75; //@line 12884 "../sokol\sokol_gfx.h"
   $cmp82 = ($67|0)==(3); //@line 12884 "../sokol\sokol_gfx.h"
   $or$cond3 = $cmp80 | $cmp82; //@line 12884 "../sokol\sokol_gfx.h"
   if ($or$cond3) {
    $68 = $p$addr; //@line 12885 "../sokol\sokol_gfx.h"
    $pipelines84 = ((($68)) + 108|0); //@line 12885 "../sokol\sokol_gfx.h"
    $69 = HEAP32[$pipelines84>>2]|0; //@line 12885 "../sokol\sokol_gfx.h"
    $70 = $i65; //@line 12885 "../sokol\sokol_gfx.h"
    $arrayidx85 = (($69) + (($70*84)|0)|0); //@line 12885 "../sokol\sokol_gfx.h"
    __sg_destroy_pipeline($arrayidx85); //@line 12885 "../sokol\sokol_gfx.h"
   }
  }
  $71 = $i65; //@line 12881 "../sokol\sokol_gfx.h"
  $inc89 = (($71) + 1)|0; //@line 12881 "../sokol\sokol_gfx.h"
  $i65 = $inc89; //@line 12881 "../sokol\sokol_gfx.h"
 }
 $i91 = 1; //@line 12889 "../sokol\sokol_gfx.h"
 while(1) {
  $72 = $i91; //@line 12889 "../sokol\sokol_gfx.h"
  $73 = $p$addr; //@line 12889 "../sokol\sokol_gfx.h"
  $pass_pool = ((($73)) + 64|0); //@line 12889 "../sokol\sokol_gfx.h"
  $74 = HEAP32[$pass_pool>>2]|0; //@line 12889 "../sokol\sokol_gfx.h"
  $cmp94 = ($72|0)<($74|0); //@line 12889 "../sokol\sokol_gfx.h"
  if (!($cmp94)) {
   break;
  }
  $75 = $p$addr; //@line 12890 "../sokol\sokol_gfx.h"
  $passes = ((($75)) + 112|0); //@line 12890 "../sokol\sokol_gfx.h"
  $76 = HEAP32[$passes>>2]|0; //@line 12890 "../sokol\sokol_gfx.h"
  $77 = $i91; //@line 12890 "../sokol\sokol_gfx.h"
  $arrayidx96 = (($76) + (($77*136)|0)|0); //@line 12890 "../sokol\sokol_gfx.h"
  $ctx_id98 = ((($arrayidx96)) + 4|0); //@line 12890 "../sokol\sokol_gfx.h"
  $78 = HEAP32[$ctx_id98>>2]|0; //@line 12890 "../sokol\sokol_gfx.h"
  $79 = $ctx_id$addr; //@line 12890 "../sokol\sokol_gfx.h"
  $cmp99 = ($78|0)==($79|0); //@line 12890 "../sokol\sokol_gfx.h"
  if ($cmp99) {
   $80 = $p$addr; //@line 12891 "../sokol\sokol_gfx.h"
   $passes102 = ((($80)) + 112|0); //@line 12891 "../sokol\sokol_gfx.h"
   $81 = HEAP32[$passes102>>2]|0; //@line 12891 "../sokol\sokol_gfx.h"
   $82 = $i91; //@line 12891 "../sokol\sokol_gfx.h"
   $arrayidx103 = (($81) + (($82*136)|0)|0); //@line 12891 "../sokol\sokol_gfx.h"
   $state105 = ((($arrayidx103)) + 8|0); //@line 12891 "../sokol\sokol_gfx.h"
   $83 = HEAP32[$state105>>2]|0; //@line 12891 "../sokol\sokol_gfx.h"
   $state101 = $83; //@line 12891 "../sokol\sokol_gfx.h"
   $84 = $state101; //@line 12892 "../sokol\sokol_gfx.h"
   $cmp106 = ($84|0)==(2); //@line 12892 "../sokol\sokol_gfx.h"
   $85 = $state101; //@line 12892 "../sokol\sokol_gfx.h"
   $cmp108 = ($85|0)==(3); //@line 12892 "../sokol\sokol_gfx.h"
   $or$cond4 = $cmp106 | $cmp108; //@line 12892 "../sokol\sokol_gfx.h"
   if ($or$cond4) {
    $86 = $p$addr; //@line 12893 "../sokol\sokol_gfx.h"
    $passes110 = ((($86)) + 112|0); //@line 12893 "../sokol\sokol_gfx.h"
    $87 = HEAP32[$passes110>>2]|0; //@line 12893 "../sokol\sokol_gfx.h"
    $88 = $i91; //@line 12893 "../sokol\sokol_gfx.h"
    $arrayidx111 = (($87) + (($88*136)|0)|0); //@line 12893 "../sokol\sokol_gfx.h"
    __sg_destroy_pass($arrayidx111); //@line 12893 "../sokol\sokol_gfx.h"
   }
  }
  $89 = $i91; //@line 12889 "../sokol\sokol_gfx.h"
  $inc115 = (($89) + 1)|0; //@line 12889 "../sokol\sokol_gfx.h"
  $i91 = $inc115; //@line 12889 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 12897 "../sokol\sokol_gfx.h"
}
function __sg_destroy_context($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $ctx$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr; //@line 12160 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_context($0); //@line 12160 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12166 "../sokol\sokol_gfx.h"
}
function __sg_discard_backend() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __sg_wgpu_discard_backend(); //@line 12096 "../sokol\sokol_gfx.h"
 return; //@line 12102 "../sokol\sokol_gfx.h"
}
function __sg_discard_pools($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffers = 0, $buffers6 = 0, $context_pool = 0, $contexts = 0, $contexts1 = 0, $image_pool = 0, $images = 0, $images5 = 0, $p$addr = 0, $pass_pool = 0, $passes = 0, $passes2 = 0, $pipeline_pool = 0, $pipelines = 0, $pipelines3 = 0;
 var $shader_pool = 0, $shaders = 0, $shaders4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $0 = $p$addr; //@line 12698 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12698 "../sokol\sokol_gfx.h"
 if ($tobool) {
  $1 = $p$addr; //@line 12699 "../sokol\sokol_gfx.h"
  $contexts = ((($1)) + 116|0); //@line 12699 "../sokol\sokol_gfx.h"
  $2 = HEAP32[$contexts>>2]|0; //@line 12699 "../sokol\sokol_gfx.h"
  _free($2); //@line 12699 "../sokol\sokol_gfx.h"
  $3 = $p$addr; //@line 12699 "../sokol\sokol_gfx.h"
  $contexts1 = ((($3)) + 116|0); //@line 12699 "../sokol\sokol_gfx.h"
  HEAP32[$contexts1>>2] = 0; //@line 12699 "../sokol\sokol_gfx.h"
  $4 = $p$addr; //@line 12700 "../sokol\sokol_gfx.h"
  $passes = ((($4)) + 112|0); //@line 12700 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$passes>>2]|0; //@line 12700 "../sokol\sokol_gfx.h"
  _free($5); //@line 12700 "../sokol\sokol_gfx.h"
  $6 = $p$addr; //@line 12700 "../sokol\sokol_gfx.h"
  $passes2 = ((($6)) + 112|0); //@line 12700 "../sokol\sokol_gfx.h"
  HEAP32[$passes2>>2] = 0; //@line 12700 "../sokol\sokol_gfx.h"
  $7 = $p$addr; //@line 12701 "../sokol\sokol_gfx.h"
  $pipelines = ((($7)) + 108|0); //@line 12701 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$pipelines>>2]|0; //@line 12701 "../sokol\sokol_gfx.h"
  _free($8); //@line 12701 "../sokol\sokol_gfx.h"
  $9 = $p$addr; //@line 12701 "../sokol\sokol_gfx.h"
  $pipelines3 = ((($9)) + 108|0); //@line 12701 "../sokol\sokol_gfx.h"
  HEAP32[$pipelines3>>2] = 0; //@line 12701 "../sokol\sokol_gfx.h"
  $10 = $p$addr; //@line 12702 "../sokol\sokol_gfx.h"
  $shaders = ((($10)) + 104|0); //@line 12702 "../sokol\sokol_gfx.h"
  $11 = HEAP32[$shaders>>2]|0; //@line 12702 "../sokol\sokol_gfx.h"
  _free($11); //@line 12702 "../sokol\sokol_gfx.h"
  $12 = $p$addr; //@line 12702 "../sokol\sokol_gfx.h"
  $shaders4 = ((($12)) + 104|0); //@line 12702 "../sokol\sokol_gfx.h"
  HEAP32[$shaders4>>2] = 0; //@line 12702 "../sokol\sokol_gfx.h"
  $13 = $p$addr; //@line 12703 "../sokol\sokol_gfx.h"
  $images = ((($13)) + 100|0); //@line 12703 "../sokol\sokol_gfx.h"
  $14 = HEAP32[$images>>2]|0; //@line 12703 "../sokol\sokol_gfx.h"
  _free($14); //@line 12703 "../sokol\sokol_gfx.h"
  $15 = $p$addr; //@line 12703 "../sokol\sokol_gfx.h"
  $images5 = ((($15)) + 100|0); //@line 12703 "../sokol\sokol_gfx.h"
  HEAP32[$images5>>2] = 0; //@line 12703 "../sokol\sokol_gfx.h"
  $16 = $p$addr; //@line 12704 "../sokol\sokol_gfx.h"
  $buffers = ((($16)) + 96|0); //@line 12704 "../sokol\sokol_gfx.h"
  $17 = HEAP32[$buffers>>2]|0; //@line 12704 "../sokol\sokol_gfx.h"
  _free($17); //@line 12704 "../sokol\sokol_gfx.h"
  $18 = $p$addr; //@line 12704 "../sokol\sokol_gfx.h"
  $buffers6 = ((($18)) + 96|0); //@line 12704 "../sokol\sokol_gfx.h"
  HEAP32[$buffers6>>2] = 0; //@line 12704 "../sokol\sokol_gfx.h"
  $19 = $p$addr; //@line 12705 "../sokol\sokol_gfx.h"
  $context_pool = ((($19)) + 80|0); //@line 12705 "../sokol\sokol_gfx.h"
  __sg_discard_pool($context_pool); //@line 12705 "../sokol\sokol_gfx.h"
  $20 = $p$addr; //@line 12706 "../sokol\sokol_gfx.h"
  $pass_pool = ((($20)) + 64|0); //@line 12706 "../sokol\sokol_gfx.h"
  __sg_discard_pool($pass_pool); //@line 12706 "../sokol\sokol_gfx.h"
  $21 = $p$addr; //@line 12707 "../sokol\sokol_gfx.h"
  $pipeline_pool = ((($21)) + 48|0); //@line 12707 "../sokol\sokol_gfx.h"
  __sg_discard_pool($pipeline_pool); //@line 12707 "../sokol\sokol_gfx.h"
  $22 = $p$addr; //@line 12708 "../sokol\sokol_gfx.h"
  $shader_pool = ((($22)) + 32|0); //@line 12708 "../sokol\sokol_gfx.h"
  __sg_discard_pool($shader_pool); //@line 12708 "../sokol\sokol_gfx.h"
  $23 = $p$addr; //@line 12709 "../sokol\sokol_gfx.h"
  $image_pool = ((($23)) + 16|0); //@line 12709 "../sokol\sokol_gfx.h"
  __sg_discard_pool($image_pool); //@line 12709 "../sokol\sokol_gfx.h"
  $24 = $p$addr; //@line 12710 "../sokol\sokol_gfx.h"
  __sg_discard_pool($24); //@line 12710 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12711 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((7936|0),(6868|0),12698,(10214|0)); //@line 12698 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12698 "../sokol\sokol_gfx.h"
 }
}
function __sg_pool_alloc_index($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp7 = 0, $cmp8 = 0;
 var $dec = 0, $free_queue = 0, $free_queue5 = 0, $pool$addr = 0, $queue_top = 0, $queue_top6 = 0, $retval = 0, $slot_index = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $0 = $pool$addr; //@line 12592 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12592 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((10232|0),(6868|0),12592,(10254|0)); //@line 12592 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12592 "../sokol\sokol_gfx.h"
 }
 $1 = $pool$addr; //@line 12593 "../sokol\sokol_gfx.h"
 $free_queue = ((($1)) + 12|0); //@line 12593 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$free_queue>>2]|0; //@line 12593 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 12593 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((8531|0),(6868|0),12593,(10254|0)); //@line 12593 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12593 "../sokol\sokol_gfx.h"
 }
 $3 = $pool$addr; //@line 12594 "../sokol\sokol_gfx.h"
 $queue_top = ((($3)) + 4|0); //@line 12594 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$queue_top>>2]|0; //@line 12594 "../sokol\sokol_gfx.h"
 $cmp = ($4|0)>(0); //@line 12594 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  $retval = 0; //@line 12601 "../sokol\sokol_gfx.h"
  $15 = $retval; //@line 12603 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($15|0); //@line 12603 "../sokol\sokol_gfx.h"
 }
 $5 = $pool$addr; //@line 12595 "../sokol\sokol_gfx.h"
 $free_queue5 = ((($5)) + 12|0); //@line 12595 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$free_queue5>>2]|0; //@line 12595 "../sokol\sokol_gfx.h"
 $7 = $pool$addr; //@line 12595 "../sokol\sokol_gfx.h"
 $queue_top6 = ((($7)) + 4|0); //@line 12595 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$queue_top6>>2]|0; //@line 12595 "../sokol\sokol_gfx.h"
 $dec = (($8) + -1)|0; //@line 12595 "../sokol\sokol_gfx.h"
 HEAP32[$queue_top6>>2] = $dec; //@line 12595 "../sokol\sokol_gfx.h"
 $arrayidx = (($6) + ($dec<<2)|0); //@line 12595 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$arrayidx>>2]|0; //@line 12595 "../sokol\sokol_gfx.h"
 $slot_index = $9; //@line 12595 "../sokol\sokol_gfx.h"
 $10 = $slot_index; //@line 12596 "../sokol\sokol_gfx.h"
 $cmp7 = ($10|0)>(0); //@line 12596 "../sokol\sokol_gfx.h"
 if (!($cmp7)) {
  ___assert_fail((10275|0),(6868|0),12596,(10254|0)); //@line 12596 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12596 "../sokol\sokol_gfx.h"
 }
 $11 = $slot_index; //@line 12596 "../sokol\sokol_gfx.h"
 $12 = $pool$addr; //@line 12596 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$12>>2]|0; //@line 12596 "../sokol\sokol_gfx.h"
 $cmp8 = ($11|0)<($13|0); //@line 12596 "../sokol\sokol_gfx.h"
 if (!($cmp8)) {
  ___assert_fail((10275|0),(6868|0),12596,(10254|0)); //@line 12596 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12596 "../sokol\sokol_gfx.h"
 }
 $14 = $slot_index; //@line 12597 "../sokol\sokol_gfx.h"
 $retval = $14; //@line 12597 "../sokol\sokol_gfx.h"
 $15 = $retval; //@line 12603 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($15|0); //@line 12603 "../sokol\sokol_gfx.h"
}
function __sg_slot_alloc($pool,$slot,$slot_index) {
 $pool = $pool|0;
 $slot = $slot|0;
 $slot_index = $slot_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $and = 0, $arrayidx = 0, $cmp = 0, $cmp3 = 0, $cmp7 = 0, $cmp9 = 0, $ctr = 0, $gen_ctrs = 0, $gen_ctrs13 = 0, $inc = 0, $or = 0, $pool$addr = 0, $shl = 0, $slot$addr = 0, $slot_index$addr = 0, $state = 0, $state15 = 0, $tobool = 0, $tobool1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $slot$addr = $slot;
 $slot_index$addr = $slot_index;
 $0 = $pool$addr; //@line 12725 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12725 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((10321|0),(6868|0),12725,(10344|0)); //@line 12725 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12725 "../sokol\sokol_gfx.h"
 }
 $1 = $pool$addr; //@line 12725 "../sokol\sokol_gfx.h"
 $gen_ctrs = ((($1)) + 8|0); //@line 12725 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$gen_ctrs>>2]|0; //@line 12725 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 12725 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((10321|0),(6868|0),12725,(10344|0)); //@line 12725 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12725 "../sokol\sokol_gfx.h"
 }
 $3 = $slot_index$addr; //@line 12726 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)>(0); //@line 12726 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((10359|0),(6868|0),12726,(10344|0)); //@line 12726 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12726 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index$addr; //@line 12726 "../sokol\sokol_gfx.h"
 $5 = $pool$addr; //@line 12726 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$5>>2]|0; //@line 12726 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12726 "../sokol\sokol_gfx.h"
 if (!($cmp3)) {
  ___assert_fail((10359|0),(6868|0),12726,(10344|0)); //@line 12726 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12726 "../sokol\sokol_gfx.h"
 }
 $7 = $slot$addr; //@line 12727 "../sokol\sokol_gfx.h"
 $state = ((($7)) + 8|0); //@line 12727 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$state>>2]|0; //@line 12727 "../sokol\sokol_gfx.h"
 $cmp7 = ($8|0)==(0); //@line 12727 "../sokol\sokol_gfx.h"
 if (!($cmp7)) {
  ___assert_fail((10407|0),(6868|0),12727,(10344|0)); //@line 12727 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12727 "../sokol\sokol_gfx.h"
 }
 $9 = $slot$addr; //@line 12727 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$9>>2]|0; //@line 12727 "../sokol\sokol_gfx.h"
 $cmp9 = ($10|0)==(0); //@line 12727 "../sokol\sokol_gfx.h"
 if ($cmp9) {
  $11 = $pool$addr; //@line 12728 "../sokol\sokol_gfx.h"
  $gen_ctrs13 = ((($11)) + 8|0); //@line 12728 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$gen_ctrs13>>2]|0; //@line 12728 "../sokol\sokol_gfx.h"
  $13 = $slot_index$addr; //@line 12728 "../sokol\sokol_gfx.h"
  $arrayidx = (($12) + ($13<<2)|0); //@line 12728 "../sokol\sokol_gfx.h"
  $14 = HEAP32[$arrayidx>>2]|0; //@line 12728 "../sokol\sokol_gfx.h"
  $inc = (($14) + 1)|0; //@line 12728 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx>>2] = $inc; //@line 12728 "../sokol\sokol_gfx.h"
  $ctr = $inc; //@line 12728 "../sokol\sokol_gfx.h"
  $15 = $ctr; //@line 12729 "../sokol\sokol_gfx.h"
  $shl = $15 << 16; //@line 12729 "../sokol\sokol_gfx.h"
  $16 = $slot_index$addr; //@line 12729 "../sokol\sokol_gfx.h"
  $and = $16 & 65535; //@line 12729 "../sokol\sokol_gfx.h"
  $or = $shl | $and; //@line 12729 "../sokol\sokol_gfx.h"
  $17 = $slot$addr; //@line 12729 "../sokol\sokol_gfx.h"
  HEAP32[$17>>2] = $or; //@line 12729 "../sokol\sokol_gfx.h"
  $18 = $slot$addr; //@line 12730 "../sokol\sokol_gfx.h"
  $state15 = ((($18)) + 8|0); //@line 12730 "../sokol\sokol_gfx.h"
  HEAP32[$state15>>2] = 1; //@line 12730 "../sokol\sokol_gfx.h"
  $19 = $slot$addr; //@line 12731 "../sokol\sokol_gfx.h"
  $20 = HEAP32[$19>>2]|0; //@line 12731 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($20|0); //@line 12731 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((10407|0),(6868|0),12727,(10344|0)); //@line 12727 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12727 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_context_at($p,$context_id) {
 $p = $p|0;
 $context_id = $context_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $context_id$addr = 0, $context_pool = 0, $contexts = 0, $or$cond = 0, $p$addr = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $context_id$addr = $context_id;
 $0 = $p$addr; //@line 12778 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12778 "../sokol\sokol_gfx.h"
 $1 = $context_id$addr; //@line 12778 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12778 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12778 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((10480|0),(6868|0),12778,(10515|0)); //@line 12778 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12778 "../sokol\sokol_gfx.h"
 }
 $2 = $context_id$addr; //@line 12779 "../sokol\sokol_gfx.h"
 $call = (__sg_slot_index($2)|0); //@line 12779 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 12779 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 12780 "../sokol\sokol_gfx.h"
 $cmp1 = ($3|0)>(0); //@line 12780 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((10530|0),(6868|0),12780,(10515|0)); //@line 12780 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12780 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index; //@line 12780 "../sokol\sokol_gfx.h"
 $5 = $p$addr; //@line 12780 "../sokol\sokol_gfx.h"
 $context_pool = ((($5)) + 80|0); //@line 12780 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$context_pool>>2]|0; //@line 12780 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12780 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $p$addr; //@line 12781 "../sokol\sokol_gfx.h"
  $contexts = ((($7)) + 116|0); //@line 12781 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$contexts>>2]|0; //@line 12781 "../sokol\sokol_gfx.h"
  $9 = $slot_index; //@line 12781 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*12)|0)|0); //@line 12781 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($arrayidx|0); //@line 12781 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((10530|0),(6868|0),12780,(10515|0)); //@line 12780 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12780 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_create_context($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $call = 0, $ctx$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr; //@line 12144 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_create_context($0)|0); //@line 12144 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 12144 "../sokol\sokol_gfx.h"
}
function __sg_activate_context($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $ctx$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr; //@line 12128 "../sokol\sokol_gfx.h"
 __sg_wgpu_activate_context($0); //@line 12128 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12134 "../sokol\sokol_gfx.h"
}
function __sg_slot_index($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $id$addr = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $id$addr = $id;
 $0 = $id$addr; //@line 12736 "../sokol\sokol_gfx.h"
 $and = $0 & 65535; //@line 12736 "../sokol\sokol_gfx.h"
 $slot_index = $and; //@line 12736 "../sokol\sokol_gfx.h"
 $1 = $slot_index; //@line 12737 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12737 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $2 = $slot_index; //@line 12738 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($2|0); //@line 12738 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((10646|0),(6868|0),12737,(10664|0)); //@line 12737 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12737 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_alloc_buffer() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $res = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 8|0;
 $res = sp + 4|0;
 $call = (__sg_pool_alloc_index((30364))|0); //@line 13763 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 13763 "../sokol\sokol_gfx.h"
 $0 = $slot_index; //@line 13764 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($0|0); //@line 13764 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = HEAP32[(30460)>>2]|0; //@line 13765 "../sokol\sokol_gfx.h"
  $2 = $slot_index; //@line 13765 "../sokol\sokol_gfx.h"
  $arrayidx = (($1) + (($2*52)|0)|0); //@line 13765 "../sokol\sokol_gfx.h"
  $3 = $slot_index; //@line 13765 "../sokol\sokol_gfx.h"
  $call1 = (__sg_slot_alloc((30364),$arrayidx,$3)|0); //@line 13765 "../sokol\sokol_gfx.h"
  HEAP32[$res>>2] = $call1; //@line 13765 "../sokol\sokol_gfx.h"
 } else {
  HEAP32[$res>>2] = 0; //@line 13769 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$retval>>2]=HEAP32[$res>>2]|0; //@line 13771 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$retval>>2]|0; //@line 13771 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($4|0); //@line 13771 "../sokol\sokol_gfx.h"
}
function __sg_alloc_shader() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $res = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 8|0;
 $res = sp + 4|0;
 $call = (__sg_pool_alloc_index((30396))|0); //@line 13789 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 13789 "../sokol\sokol_gfx.h"
 $0 = $slot_index; //@line 13790 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($0|0); //@line 13790 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = HEAP32[(30468)>>2]|0; //@line 13791 "../sokol\sokol_gfx.h"
  $2 = $slot_index; //@line 13791 "../sokol\sokol_gfx.h"
  $arrayidx = (($1) + (($2*300)|0)|0); //@line 13791 "../sokol\sokol_gfx.h"
  $3 = $slot_index; //@line 13791 "../sokol\sokol_gfx.h"
  $call1 = (__sg_slot_alloc((30396),$arrayidx,$3)|0); //@line 13791 "../sokol\sokol_gfx.h"
  HEAP32[$res>>2] = $call1; //@line 13791 "../sokol\sokol_gfx.h"
 } else {
  HEAP32[$res>>2] = 0; //@line 13795 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$retval>>2]=HEAP32[$res>>2]|0; //@line 13797 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$retval>>2]|0; //@line 13797 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($4|0); //@line 13797 "../sokol\sokol_gfx.h"
}
function __sg_alloc_pipeline() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $res = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 8|0;
 $res = sp + 4|0;
 $call = (__sg_pool_alloc_index((30412))|0); //@line 13802 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 13802 "../sokol\sokol_gfx.h"
 $0 = $slot_index; //@line 13803 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($0|0); //@line 13803 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = HEAP32[(30472)>>2]|0; //@line 13804 "../sokol\sokol_gfx.h"
  $2 = $slot_index; //@line 13804 "../sokol\sokol_gfx.h"
  $arrayidx = (($1) + (($2*84)|0)|0); //@line 13804 "../sokol\sokol_gfx.h"
  $3 = $slot_index; //@line 13804 "../sokol\sokol_gfx.h"
  $call1 = (__sg_slot_alloc((30412),$arrayidx,$3)|0); //@line 13804 "../sokol\sokol_gfx.h"
  HEAP32[$res>>2] = $call1; //@line 13804 "../sokol\sokol_gfx.h"
 } else {
  HEAP32[$res>>2] = 0; //@line 13808 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$retval>>2]=HEAP32[$res>>2]|0; //@line 13810 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$retval>>2]|0; //@line 13810 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($4|0); //@line 13810 "../sokol\sokol_gfx.h"
}
function __sg_buffer_desc_defaults($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp3 = 0, $cond = 0, $cond8 = 0, $def = 0, $desc$addr = 0, $type = 0, $type1 = 0, $type2 = 0, $usage = 0, $usage6 = 0, $usage9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $def = sp;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13601 "../sokol\sokol_gfx.h"
 dest=$def; src=$0; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 13601 "../sokol\sokol_gfx.h"
 $type = ((($def)) + 8|0); //@line 13602 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$type>>2]|0; //@line 13602 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)==(0); //@line 13602 "../sokol\sokol_gfx.h"
 $type1 = ((($def)) + 8|0); //@line 13602 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$type1>>2]|0; //@line 13602 "../sokol\sokol_gfx.h"
 $cond = $cmp ? 1 : $2; //@line 13602 "../sokol\sokol_gfx.h"
 $type2 = ((($def)) + 8|0); //@line 13602 "../sokol\sokol_gfx.h"
 HEAP32[$type2>>2] = $cond; //@line 13602 "../sokol\sokol_gfx.h"
 $usage = ((($def)) + 12|0); //@line 13603 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$usage>>2]|0; //@line 13603 "../sokol\sokol_gfx.h"
 $cmp3 = ($3|0)==(0); //@line 13603 "../sokol\sokol_gfx.h"
 $usage6 = ((($def)) + 12|0); //@line 13603 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$usage6>>2]|0; //@line 13603 "../sokol\sokol_gfx.h"
 $cond8 = $cmp3 ? 1 : $4; //@line 13603 "../sokol\sokol_gfx.h"
 $usage9 = ((($def)) + 12|0); //@line 13603 "../sokol\sokol_gfx.h"
 HEAP32[$usage9>>2] = $cond8; //@line 13603 "../sokol\sokol_gfx.h"
 dest=$agg$result; src=$def; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 13604 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 13604 "../sokol\sokol_gfx.h"
}
function __sg_init_buffer($buf_id,$desc) {
 $buf_id = $buf_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $call = 0, $call10 = 0, $call9 = 0;
 var $cmp = 0, $cmp17 = 0, $cmp20 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $or$cond = 0, $state = 0, $state12 = 0, $state14 = 0, $state16 = 0, $state19 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$buf_id>>2]|0; //@line 13827 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13827 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 13827 "../sokol\sokol_gfx.h"
 $tobool = ($1|0)!=(0|0); //@line 13827 "../sokol\sokol_gfx.h"
 $or$cond = $cmp & $tobool; //@line 13827 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((10679|0),(6868|0),13827,(10714|0)); //@line 13827 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13827 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[$buf_id>>2]|0; //@line 13828 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_buffer((30364),$2)|0); //@line 13828 "../sokol\sokol_gfx.h"
 $buf = $call; //@line 13828 "../sokol\sokol_gfx.h"
 $3 = $buf; //@line 13829 "../sokol\sokol_gfx.h"
 $tobool2 = ($3|0)!=(0|0); //@line 13829 "../sokol\sokol_gfx.h"
 if (!($tobool2)) {
  ___assert_fail((7075|0),(6868|0),13829,(10714|0)); //@line 13829 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13829 "../sokol\sokol_gfx.h"
 }
 $4 = $buf; //@line 13829 "../sokol\sokol_gfx.h"
 $state = ((($4)) + 8|0); //@line 13829 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$state>>2]|0; //@line 13829 "../sokol\sokol_gfx.h"
 $cmp4 = ($5|0)==(1); //@line 13829 "../sokol\sokol_gfx.h"
 if (!($cmp4)) {
  ___assert_fail((7075|0),(6868|0),13829,(10714|0)); //@line 13829 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13829 "../sokol\sokol_gfx.h"
 }
 $6 = HEAP32[(30344)>>2]|0; //@line 13830 "../sokol\sokol_gfx.h"
 $7 = $buf; //@line 13830 "../sokol\sokol_gfx.h"
 $ctx_id = ((($7)) + 4|0); //@line 13830 "../sokol\sokol_gfx.h"
 HEAP32[$ctx_id>>2] = $6; //@line 13830 "../sokol\sokol_gfx.h"
 $8 = $desc$addr; //@line 13831 "../sokol\sokol_gfx.h"
 $call9 = (__sg_validate_buffer_desc($8)|0); //@line 13831 "../sokol\sokol_gfx.h"
 $9 = $buf;
 if ($call9) {
  $10 = $desc$addr; //@line 13832 "../sokol\sokol_gfx.h"
  $call10 = (__sg_create_buffer($9,$10)|0); //@line 13832 "../sokol\sokol_gfx.h"
  $11 = $buf; //@line 13832 "../sokol\sokol_gfx.h"
  $state12 = ((($11)) + 8|0); //@line 13832 "../sokol\sokol_gfx.h"
  HEAP32[$state12>>2] = $call10; //@line 13832 "../sokol\sokol_gfx.h"
 } else {
  $state14 = ((($9)) + 8|0); //@line 13835 "../sokol\sokol_gfx.h"
  HEAP32[$state14>>2] = 3; //@line 13835 "../sokol\sokol_gfx.h"
 }
 $12 = $buf; //@line 13837 "../sokol\sokol_gfx.h"
 $state16 = ((($12)) + 8|0); //@line 13837 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$state16>>2]|0; //@line 13837 "../sokol\sokol_gfx.h"
 $cmp17 = ($13|0)==(2); //@line 13837 "../sokol\sokol_gfx.h"
 if ($cmp17) {
  STACKTOP = sp;return; //@line 13838 "../sokol\sokol_gfx.h"
 }
 $14 = $buf; //@line 13837 "../sokol\sokol_gfx.h"
 $state19 = ((($14)) + 8|0); //@line 13837 "../sokol\sokol_gfx.h"
 $15 = HEAP32[$state19>>2]|0; //@line 13837 "../sokol\sokol_gfx.h"
 $cmp20 = ($15|0)==(3); //@line 13837 "../sokol\sokol_gfx.h"
 if ($cmp20) {
  STACKTOP = sp;return; //@line 13838 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((10730|0),(6868|0),13837,(10714|0)); //@line 13837 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13837 "../sokol\sokol_gfx.h"
 }
}
function __sg_shader_desc_defaults($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $array_count = 0, $array_count38 = 0, $array_count41 = 0, $arrayidx = 0;
 var $arrayidx31 = 0, $arrayidx48 = 0, $cmp = 0, $cmp16 = 0, $cmp17 = 0, $cmp25 = 0, $cmp27 = 0, $cmp29 = 0, $cmp32 = 0, $cmp35 = 0, $cmp46 = 0, $cmp50 = 0, $cmp53 = 0, $cmp7 = 0, $cond = 0, $cond13 = 0, $cond23 = 0, $cond40 = 0, $cond58 = 0, $def = 0;
 var $desc$addr = 0, $entry1 = 0, $entry11 = 0, $entry15 = 0, $entry3 = 0, $entry5 = 0, $entry6 = 0, $fs = 0, $fs10 = 0, $fs14 = 0, $fs21 = 0, $images = 0, $img_desc = 0, $img_index = 0, $inc = 0, $inc43 = 0, $inc61 = 0, $inc64 = 0, $sampler_type = 0, $sampler_type56 = 0;
 var $sampler_type59 = 0, $stage_desc = 0, $stage_index = 0, $type = 0, $type49 = 0, $u_desc = 0, $u_index = 0, $ub_desc = 0, $ub_index = 0, $uniform_blocks = 0, $uniforms = 0, $vs = 0, $vs19 = 0, $vs2 = 0, $vs4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2144|0);
 $def = sp + 32|0;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13633 "../sokol\sokol_gfx.h"
 _memcpy(($def|0),($0|0),2100)|0; //@line 13633 "../sokol\sokol_gfx.h"
 $vs = ((($def)) + 196|0); //@line 13638 "../sokol\sokol_gfx.h"
 $entry1 = ((($vs)) + 12|0); //@line 13638 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$entry1>>2]|0; //@line 13638 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)==(0|0); //@line 13638 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $cond = 16471;
 } else {
  $vs2 = ((($def)) + 196|0); //@line 13638 "../sokol\sokol_gfx.h"
  $entry3 = ((($vs2)) + 12|0); //@line 13638 "../sokol\sokol_gfx.h"
  $2 = HEAP32[$entry3>>2]|0; //@line 13638 "../sokol\sokol_gfx.h"
  $cond = $2;
 }
 $vs4 = ((($def)) + 196|0); //@line 13638 "../sokol\sokol_gfx.h"
 $entry5 = ((($vs4)) + 12|0); //@line 13638 "../sokol\sokol_gfx.h"
 HEAP32[$entry5>>2] = $cond; //@line 13638 "../sokol\sokol_gfx.h"
 $fs = ((($def)) + 1144|0); //@line 13639 "../sokol\sokol_gfx.h"
 $entry6 = ((($fs)) + 12|0); //@line 13639 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$entry6>>2]|0; //@line 13639 "../sokol\sokol_gfx.h"
 $cmp7 = ($3|0)==(0|0); //@line 13639 "../sokol\sokol_gfx.h"
 if ($cmp7) {
  $cond13 = 16471;
 } else {
  $fs10 = ((($def)) + 1144|0); //@line 13639 "../sokol\sokol_gfx.h"
  $entry11 = ((($fs10)) + 12|0); //@line 13639 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$entry11>>2]|0; //@line 13639 "../sokol\sokol_gfx.h"
  $cond13 = $4;
 }
 $fs14 = ((($def)) + 1144|0); //@line 13639 "../sokol\sokol_gfx.h"
 $entry15 = ((($fs14)) + 12|0); //@line 13639 "../sokol\sokol_gfx.h"
 HEAP32[$entry15>>2] = $cond13; //@line 13639 "../sokol\sokol_gfx.h"
 $stage_index = 0; //@line 13649 "../sokol\sokol_gfx.h"
 while(1) {
  $5 = $stage_index; //@line 13649 "../sokol\sokol_gfx.h"
  $cmp16 = ($5|0)<(2); //@line 13649 "../sokol\sokol_gfx.h"
  if (!($cmp16)) {
   break;
  }
  $6 = $stage_index; //@line 13650 "../sokol\sokol_gfx.h"
  $cmp17 = ($6|0)==(0); //@line 13650 "../sokol\sokol_gfx.h"
  $vs19 = ((($def)) + 196|0); //@line 13650 "../sokol\sokol_gfx.h"
  $fs21 = ((($def)) + 1144|0); //@line 13650 "../sokol\sokol_gfx.h"
  $cond23 = $cmp17 ? $vs19 : $fs21; //@line 13650 "../sokol\sokol_gfx.h"
  $stage_desc = $cond23; //@line 13650 "../sokol\sokol_gfx.h"
  $ub_index = 0; //@line 13651 "../sokol\sokol_gfx.h"
  while(1) {
   $7 = $ub_index; //@line 13651 "../sokol\sokol_gfx.h"
   $cmp25 = ($7|0)<(4); //@line 13651 "../sokol\sokol_gfx.h"
   if (!($cmp25)) {
    break;
   }
   $8 = $stage_desc; //@line 13652 "../sokol\sokol_gfx.h"
   $uniform_blocks = ((($8)) + 20|0); //@line 13652 "../sokol\sokol_gfx.h"
   $9 = $ub_index; //@line 13652 "../sokol\sokol_gfx.h"
   $arrayidx = (($uniform_blocks) + (($9*196)|0)|0); //@line 13652 "../sokol\sokol_gfx.h"
   $ub_desc = $arrayidx; //@line 13652 "../sokol\sokol_gfx.h"
   $10 = $ub_desc; //@line 13653 "../sokol\sokol_gfx.h"
   $11 = HEAP32[$10>>2]|0; //@line 13653 "../sokol\sokol_gfx.h"
   $cmp27 = (0)==($11|0); //@line 13653 "../sokol\sokol_gfx.h"
   if ($cmp27) {
    break;
   }
   $u_index = 0; //@line 13656 "../sokol\sokol_gfx.h"
   while(1) {
    $12 = $u_index; //@line 13656 "../sokol\sokol_gfx.h"
    $cmp29 = ($12|0)<(16); //@line 13656 "../sokol\sokol_gfx.h"
    if (!($cmp29)) {
     break;
    }
    $13 = $ub_desc; //@line 13657 "../sokol\sokol_gfx.h"
    $uniforms = ((($13)) + 4|0); //@line 13657 "../sokol\sokol_gfx.h"
    $14 = $u_index; //@line 13657 "../sokol\sokol_gfx.h"
    $arrayidx31 = (($uniforms) + (($14*12)|0)|0); //@line 13657 "../sokol\sokol_gfx.h"
    $u_desc = $arrayidx31; //@line 13657 "../sokol\sokol_gfx.h"
    $15 = $u_desc; //@line 13658 "../sokol\sokol_gfx.h"
    $type = ((($15)) + 4|0); //@line 13658 "../sokol\sokol_gfx.h"
    $16 = HEAP32[$type>>2]|0; //@line 13658 "../sokol\sokol_gfx.h"
    $cmp32 = ($16|0)==(0); //@line 13658 "../sokol\sokol_gfx.h"
    if ($cmp32) {
     break;
    }
    $17 = $u_desc; //@line 13661 "../sokol\sokol_gfx.h"
    $array_count = ((($17)) + 8|0); //@line 13661 "../sokol\sokol_gfx.h"
    $18 = HEAP32[$array_count>>2]|0; //@line 13661 "../sokol\sokol_gfx.h"
    $cmp35 = ($18|0)==(0); //@line 13661 "../sokol\sokol_gfx.h"
    if ($cmp35) {
     $cond40 = 1;
    } else {
     $19 = $u_desc; //@line 13661 "../sokol\sokol_gfx.h"
     $array_count38 = ((($19)) + 8|0); //@line 13661 "../sokol\sokol_gfx.h"
     $20 = HEAP32[$array_count38>>2]|0; //@line 13661 "../sokol\sokol_gfx.h"
     $cond40 = $20;
    }
    $21 = $u_desc; //@line 13661 "../sokol\sokol_gfx.h"
    $array_count41 = ((($21)) + 8|0); //@line 13661 "../sokol\sokol_gfx.h"
    HEAP32[$array_count41>>2] = $cond40; //@line 13661 "../sokol\sokol_gfx.h"
    $22 = $u_index; //@line 13656 "../sokol\sokol_gfx.h"
    $inc = (($22) + 1)|0; //@line 13656 "../sokol\sokol_gfx.h"
    $u_index = $inc; //@line 13656 "../sokol\sokol_gfx.h"
   }
   $23 = $ub_index; //@line 13651 "../sokol\sokol_gfx.h"
   $inc43 = (($23) + 1)|0; //@line 13651 "../sokol\sokol_gfx.h"
   $ub_index = $inc43; //@line 13651 "../sokol\sokol_gfx.h"
  }
  $img_index = 0; //@line 13664 "../sokol\sokol_gfx.h"
  while(1) {
   $24 = $img_index; //@line 13664 "../sokol\sokol_gfx.h"
   $cmp46 = ($24|0)<(12); //@line 13664 "../sokol\sokol_gfx.h"
   if (!($cmp46)) {
    break;
   }
   $25 = $stage_desc; //@line 13665 "../sokol\sokol_gfx.h"
   $images = ((($25)) + 804|0); //@line 13665 "../sokol\sokol_gfx.h"
   $26 = $img_index; //@line 13665 "../sokol\sokol_gfx.h"
   $arrayidx48 = (($images) + (($26*12)|0)|0); //@line 13665 "../sokol\sokol_gfx.h"
   $img_desc = $arrayidx48; //@line 13665 "../sokol\sokol_gfx.h"
   $27 = $img_desc; //@line 13666 "../sokol\sokol_gfx.h"
   $type49 = ((($27)) + 4|0); //@line 13666 "../sokol\sokol_gfx.h"
   $28 = HEAP32[$type49>>2]|0; //@line 13666 "../sokol\sokol_gfx.h"
   $cmp50 = ($28|0)==(0); //@line 13666 "../sokol\sokol_gfx.h"
   if ($cmp50) {
    break;
   }
   $29 = $img_desc; //@line 13669 "../sokol\sokol_gfx.h"
   $sampler_type = ((($29)) + 8|0); //@line 13669 "../sokol\sokol_gfx.h"
   $30 = HEAP32[$sampler_type>>2]|0; //@line 13669 "../sokol\sokol_gfx.h"
   $cmp53 = ($30|0)==(0); //@line 13669 "../sokol\sokol_gfx.h"
   if ($cmp53) {
    $cond58 = 1;
   } else {
    $31 = $img_desc; //@line 13669 "../sokol\sokol_gfx.h"
    $sampler_type56 = ((($31)) + 8|0); //@line 13669 "../sokol\sokol_gfx.h"
    $32 = HEAP32[$sampler_type56>>2]|0; //@line 13669 "../sokol\sokol_gfx.h"
    $cond58 = $32;
   }
   $33 = $img_desc; //@line 13669 "../sokol\sokol_gfx.h"
   $sampler_type59 = ((($33)) + 8|0); //@line 13669 "../sokol\sokol_gfx.h"
   HEAP32[$sampler_type59>>2] = $cond58; //@line 13669 "../sokol\sokol_gfx.h"
   $34 = $img_index; //@line 13664 "../sokol\sokol_gfx.h"
   $inc61 = (($34) + 1)|0; //@line 13664 "../sokol\sokol_gfx.h"
   $img_index = $inc61; //@line 13664 "../sokol\sokol_gfx.h"
  }
  $35 = $stage_index; //@line 13649 "../sokol\sokol_gfx.h"
  $inc64 = (($35) + 1)|0; //@line 13649 "../sokol\sokol_gfx.h"
  $stage_index = $inc64; //@line 13649 "../sokol\sokol_gfx.h"
 }
 _memcpy(($agg$result|0),($def|0),2100)|0; //@line 13672 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 13672 "../sokol\sokol_gfx.h"
}
function __sg_init_shader($shd_id,$desc) {
 $shd_id = $shd_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call9 = 0, $cmp = 0;
 var $cmp17 = 0, $cmp20 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $or$cond = 0, $shd = 0, $state = 0, $state12 = 0, $state14 = 0, $state16 = 0, $state19 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$shd_id>>2]|0; //@line 13855 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13855 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 13855 "../sokol\sokol_gfx.h"
 $tobool = ($1|0)!=(0|0); //@line 13855 "../sokol\sokol_gfx.h"
 $or$cond = $cmp & $tobool; //@line 13855 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((16476|0),(6868|0),13855,(16511|0)); //@line 13855 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13855 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[$shd_id>>2]|0; //@line 13856 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_shader((30364),$2)|0); //@line 13856 "../sokol\sokol_gfx.h"
 $shd = $call; //@line 13856 "../sokol\sokol_gfx.h"
 $3 = $shd; //@line 13857 "../sokol\sokol_gfx.h"
 $tobool2 = ($3|0)!=(0|0); //@line 13857 "../sokol\sokol_gfx.h"
 if (!($tobool2)) {
  ___assert_fail((7124|0),(6868|0),13857,(16511|0)); //@line 13857 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13857 "../sokol\sokol_gfx.h"
 }
 $4 = $shd; //@line 13857 "../sokol\sokol_gfx.h"
 $state = ((($4)) + 8|0); //@line 13857 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$state>>2]|0; //@line 13857 "../sokol\sokol_gfx.h"
 $cmp4 = ($5|0)==(1); //@line 13857 "../sokol\sokol_gfx.h"
 if (!($cmp4)) {
  ___assert_fail((7124|0),(6868|0),13857,(16511|0)); //@line 13857 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13857 "../sokol\sokol_gfx.h"
 }
 $6 = HEAP32[(30344)>>2]|0; //@line 13858 "../sokol\sokol_gfx.h"
 $7 = $shd; //@line 13858 "../sokol\sokol_gfx.h"
 $ctx_id = ((($7)) + 4|0); //@line 13858 "../sokol\sokol_gfx.h"
 HEAP32[$ctx_id>>2] = $6; //@line 13858 "../sokol\sokol_gfx.h"
 $8 = $desc$addr; //@line 13859 "../sokol\sokol_gfx.h"
 $call9 = (__sg_validate_shader_desc($8)|0); //@line 13859 "../sokol\sokol_gfx.h"
 $9 = $shd;
 if ($call9) {
  $10 = $desc$addr; //@line 13860 "../sokol\sokol_gfx.h"
  $call10 = (__sg_create_shader($9,$10)|0); //@line 13860 "../sokol\sokol_gfx.h"
  $11 = $shd; //@line 13860 "../sokol\sokol_gfx.h"
  $state12 = ((($11)) + 8|0); //@line 13860 "../sokol\sokol_gfx.h"
  HEAP32[$state12>>2] = $call10; //@line 13860 "../sokol\sokol_gfx.h"
 } else {
  $state14 = ((($9)) + 8|0); //@line 13863 "../sokol\sokol_gfx.h"
  HEAP32[$state14>>2] = 3; //@line 13863 "../sokol\sokol_gfx.h"
 }
 $12 = $shd; //@line 13865 "../sokol\sokol_gfx.h"
 $state16 = ((($12)) + 8|0); //@line 13865 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$state16>>2]|0; //@line 13865 "../sokol\sokol_gfx.h"
 $cmp17 = ($13|0)==(2); //@line 13865 "../sokol\sokol_gfx.h"
 if ($cmp17) {
  STACKTOP = sp;return; //@line 13866 "../sokol\sokol_gfx.h"
 }
 $14 = $shd; //@line 13865 "../sokol\sokol_gfx.h"
 $state19 = ((($14)) + 8|0); //@line 13865 "../sokol\sokol_gfx.h"
 $15 = HEAP32[$state19>>2]|0; //@line 13865 "../sokol\sokol_gfx.h"
 $cmp20 = ($15|0)==(3); //@line 13865 "../sokol\sokol_gfx.h"
 if ($cmp20) {
  STACKTOP = sp;return; //@line 13866 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((16527|0),(6868|0),13865,(16511|0)); //@line 13865 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13865 "../sokol\sokol_gfx.h"
 }
}
function __sg_pipeline_desc_defaults($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a_desc = 0, $a_desc319 = 0, $add = 0, $arrayidx = 0, $arrayidx282 = 0, $arrayidx306 = 0, $arrayidx322 = 0, $arrayidx340 = 0, $arrayidx345 = 0, $arrayidx355 = 0, $arrayidx359 = 0, $attr_index = 0, $attr_index299 = 0, $attr_index314 = 0, $attrs = 0;
 var $attrs305 = 0, $attrs321 = 0, $auto_offset = 0, $b_desc = 0, $blend = 0, $blend128 = 0, $blend132 = 0, $blend134 = 0, $blend138 = 0, $blend142 = 0, $blend144 = 0, $blend148 = 0, $blend152 = 0, $blend154 = 0, $blend158 = 0, $blend162 = 0, $blend164 = 0, $blend168 = 0, $blend172 = 0, $blend174 = 0;
 var $blend178 = 0, $blend182 = 0, $blend184 = 0, $blend187 = 0, $blend196 = 0, $blend202 = 0, $blend204 = 0, $blend209 = 0, $blend213 = 0, $blend215 = 0, $blend220 = 0, $blend224 = 0, $blend226 = 0, $blend231 = 0, $blend235 = 0, $buf_index = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp104 = 0;
 var $cmp116 = 0, $cmp125 = 0, $cmp135 = 0, $cmp145 = 0, $cmp155 = 0, $cmp165 = 0, $cmp175 = 0, $cmp185 = 0, $cmp192 = 0, $cmp205 = 0, $cmp216 = 0, $cmp227 = 0, $cmp23 = 0, $cmp237 = 0, $cmp248 = 0, $cmp259 = 0, $cmp269 = 0, $cmp271 = 0, $cmp275 = 0, $cmp278 = 0;
 var $cmp283 = 0, $cmp291 = 0, $cmp3 = 0, $cmp301 = 0, $cmp307 = 0, $cmp316 = 0, $cmp324 = 0, $cmp329 = 0, $cmp333 = 0, $cmp350 = 0, $cmp356 = 0, $cmp36 = 0, $cmp49 = 0, $cmp62 = 0, $cmp76 = 0, $cmp90 = 0, $color_attachment_count = 0, $color_attachment_count210 = 0, $color_attachment_count214 = 0, $color_format = 0;
 var $color_format221 = 0, $color_format225 = 0, $color_write_mask = 0, $color_write_mask188 = 0, $color_write_mask197 = 0, $color_write_mask203 = 0, $compare_func = 0, $compare_func103 = 0, $compare_func109 = 0, $compare_func114 = 0, $compare_func54 = 0, $compare_func59 = 0, $cond = 0, $cond111 = 0, $cond122 = 0, $cond131 = 0, $cond141 = 0, $cond151 = 0, $cond161 = 0, $cond17 = 0;
 var $cond171 = 0, $cond181 = 0, $cond200 = 0, $cond212 = 0, $cond223 = 0, $cond234 = 0, $cond244 = 0, $cond255 = 0, $cond266 = 0, $cond289 = 0, $cond297 = 0, $cond30 = 0, $cond43 = 0, $cond56 = 0, $cond69 = 0, $cond8 = 0, $cond83 = 0, $cond97 = 0, $conv = 0, $conv191 = 0;
 var $conv198 = 0, $conv201 = 0, $cull_mode = 0, $cull_mode242 = 0, $cull_mode246 = 0, $def = 0, $depth_compare_func = 0, $depth_compare_func120 = 0, $depth_compare_func124 = 0, $depth_fail_op = 0, $depth_fail_op28 = 0, $depth_fail_op33 = 0, $depth_fail_op75 = 0, $depth_fail_op81 = 0, $depth_fail_op86 = 0, $depth_format = 0, $depth_format232 = 0, $depth_format236 = 0, $depth_stencil = 0, $depth_stencil101 = 0;
 var $depth_stencil107 = 0, $depth_stencil112 = 0, $depth_stencil115 = 0, $depth_stencil119 = 0, $depth_stencil123 = 0, $depth_stencil13 = 0, $depth_stencil18 = 0, $depth_stencil21 = 0, $depth_stencil26 = 0, $depth_stencil31 = 0, $depth_stencil34 = 0, $depth_stencil39 = 0, $depth_stencil44 = 0, $depth_stencil47 = 0, $depth_stencil52 = 0, $depth_stencil57 = 0, $depth_stencil60 = 0, $depth_stencil65 = 0, $depth_stencil70 = 0, $depth_stencil73 = 0;
 var $depth_stencil79 = 0, $depth_stencil84 = 0, $depth_stencil87 = 0, $depth_stencil93 = 0, $depth_stencil98 = 0, $desc$addr = 0, $dst_factor_alpha = 0, $dst_factor_alpha169 = 0, $dst_factor_alpha173 = 0, $dst_factor_rgb = 0, $dst_factor_rgb139 = 0, $dst_factor_rgb143 = 0, $face_winding = 0, $face_winding253 = 0, $face_winding257 = 0, $format = 0, $format323 = 0, $format343 = 0, $inc = 0, $inc312 = 0;
 var $inc347 = 0, $inc363 = 0, $index_type = 0, $index_type6 = 0, $index_type9 = 0, $l_desc = 0, $layout = 0, $layout280 = 0, $layout304 = 0, $layout320 = 0, $layout353 = 0, $offset = 0, $offset341 = 0, $op_alpha = 0, $op_alpha179 = 0, $op_alpha183 = 0, $op_rgb = 0, $op_rgb149 = 0, $op_rgb153 = 0, $pass_op = 0;
 var $pass_op100 = 0, $pass_op41 = 0, $pass_op46 = 0, $pass_op89 = 0, $pass_op95 = 0, $primitive_type = 0, $primitive_type1 = 0, $primitive_type2 = 0, $rasterizer = 0, $rasterizer241 = 0, $rasterizer245 = 0, $rasterizer247 = 0, $rasterizer252 = 0, $rasterizer256 = 0, $rasterizer258 = 0, $rasterizer263 = 0, $rasterizer267 = 0, $sample_count = 0, $sample_count264 = 0, $sample_count268 = 0;
 var $src_factor_alpha = 0, $src_factor_alpha159 = 0, $src_factor_alpha163 = 0, $src_factor_rgb = 0, $src_factor_rgb129 = 0, $src_factor_rgb133 = 0, $stencil_back = 0, $stencil_back102 = 0, $stencil_back108 = 0, $stencil_back113 = 0, $stencil_back66 = 0, $stencil_back71 = 0, $stencil_back74 = 0, $stencil_back80 = 0, $stencil_back85 = 0, $stencil_back88 = 0, $stencil_back94 = 0, $stencil_back99 = 0, $step_func = 0, $step_func287 = 0;
 var $step_func290 = 0, $step_rate = 0, $step_rate295 = 0, $step_rate298 = 0, $tobool = 0, $use_auto_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $def = sp + 64|0;
 $auto_offset = sp;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13676 "../sokol\sokol_gfx.h"
 _memcpy(($def|0),($0|0),444)|0; //@line 13676 "../sokol\sokol_gfx.h"
 $primitive_type = ((($def)) + 296|0); //@line 13678 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$primitive_type>>2]|0; //@line 13678 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)==(0); //@line 13678 "../sokol\sokol_gfx.h"
 $primitive_type1 = ((($def)) + 296|0); //@line 13678 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$primitive_type1>>2]|0; //@line 13678 "../sokol\sokol_gfx.h"
 $cond = $cmp ? 4 : $2; //@line 13678 "../sokol\sokol_gfx.h"
 $primitive_type2 = ((($def)) + 296|0); //@line 13678 "../sokol\sokol_gfx.h"
 HEAP32[$primitive_type2>>2] = $cond; //@line 13678 "../sokol\sokol_gfx.h"
 $index_type = ((($def)) + 300|0); //@line 13679 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$index_type>>2]|0; //@line 13679 "../sokol\sokol_gfx.h"
 $cmp3 = ($3|0)==(0); //@line 13679 "../sokol\sokol_gfx.h"
 $index_type6 = ((($def)) + 300|0); //@line 13679 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$index_type6>>2]|0; //@line 13679 "../sokol\sokol_gfx.h"
 $cond8 = $cmp3 ? 1 : $4; //@line 13679 "../sokol\sokol_gfx.h"
 $index_type9 = ((($def)) + 300|0); //@line 13679 "../sokol\sokol_gfx.h"
 HEAP32[$index_type9>>2] = $cond8; //@line 13679 "../sokol\sokol_gfx.h"
 $depth_stencil = ((($def)) + 304|0); //@line 13681 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$depth_stencil>>2]|0; //@line 13681 "../sokol\sokol_gfx.h"
 $cmp10 = ($5|0)==(0); //@line 13681 "../sokol\sokol_gfx.h"
 $depth_stencil13 = ((($def)) + 304|0); //@line 13681 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$depth_stencil13>>2]|0; //@line 13681 "../sokol\sokol_gfx.h"
 $cond17 = $cmp10 ? 1 : $6; //@line 13681 "../sokol\sokol_gfx.h"
 $depth_stencil18 = ((($def)) + 304|0); //@line 13681 "../sokol\sokol_gfx.h"
 HEAP32[$depth_stencil18>>2] = $cond17; //@line 13681 "../sokol\sokol_gfx.h"
 $depth_stencil21 = ((($def)) + 304|0); //@line 13682 "../sokol\sokol_gfx.h"
 $depth_fail_op = ((($depth_stencil21)) + 4|0); //@line 13682 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$depth_fail_op>>2]|0; //@line 13682 "../sokol\sokol_gfx.h"
 $cmp23 = ($7|0)==(0); //@line 13682 "../sokol\sokol_gfx.h"
 if ($cmp23) {
  $cond30 = 1;
 } else {
  $depth_stencil26 = ((($def)) + 304|0); //@line 13682 "../sokol\sokol_gfx.h"
  $depth_fail_op28 = ((($depth_stencil26)) + 4|0); //@line 13682 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$depth_fail_op28>>2]|0; //@line 13682 "../sokol\sokol_gfx.h"
  $cond30 = $8;
 }
 $depth_stencil31 = ((($def)) + 304|0); //@line 13682 "../sokol\sokol_gfx.h"
 $depth_fail_op33 = ((($depth_stencil31)) + 4|0); //@line 13682 "../sokol\sokol_gfx.h"
 HEAP32[$depth_fail_op33>>2] = $cond30; //@line 13682 "../sokol\sokol_gfx.h"
 $depth_stencil34 = ((($def)) + 304|0); //@line 13683 "../sokol\sokol_gfx.h"
 $pass_op = ((($depth_stencil34)) + 8|0); //@line 13683 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$pass_op>>2]|0; //@line 13683 "../sokol\sokol_gfx.h"
 $cmp36 = ($9|0)==(0); //@line 13683 "../sokol\sokol_gfx.h"
 if ($cmp36) {
  $cond43 = 1;
 } else {
  $depth_stencil39 = ((($def)) + 304|0); //@line 13683 "../sokol\sokol_gfx.h"
  $pass_op41 = ((($depth_stencil39)) + 8|0); //@line 13683 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$pass_op41>>2]|0; //@line 13683 "../sokol\sokol_gfx.h"
  $cond43 = $10;
 }
 $depth_stencil44 = ((($def)) + 304|0); //@line 13683 "../sokol\sokol_gfx.h"
 $pass_op46 = ((($depth_stencil44)) + 8|0); //@line 13683 "../sokol\sokol_gfx.h"
 HEAP32[$pass_op46>>2] = $cond43; //@line 13683 "../sokol\sokol_gfx.h"
 $depth_stencil47 = ((($def)) + 304|0); //@line 13684 "../sokol\sokol_gfx.h"
 $compare_func = ((($depth_stencil47)) + 12|0); //@line 13684 "../sokol\sokol_gfx.h"
 $11 = HEAP32[$compare_func>>2]|0; //@line 13684 "../sokol\sokol_gfx.h"
 $cmp49 = ($11|0)==(0); //@line 13684 "../sokol\sokol_gfx.h"
 if ($cmp49) {
  $cond56 = 8;
 } else {
  $depth_stencil52 = ((($def)) + 304|0); //@line 13684 "../sokol\sokol_gfx.h"
  $compare_func54 = ((($depth_stencil52)) + 12|0); //@line 13684 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$compare_func54>>2]|0; //@line 13684 "../sokol\sokol_gfx.h"
  $cond56 = $12;
 }
 $depth_stencil57 = ((($def)) + 304|0); //@line 13684 "../sokol\sokol_gfx.h"
 $compare_func59 = ((($depth_stencil57)) + 12|0); //@line 13684 "../sokol\sokol_gfx.h"
 HEAP32[$compare_func59>>2] = $cond56; //@line 13684 "../sokol\sokol_gfx.h"
 $depth_stencil60 = ((($def)) + 304|0); //@line 13685 "../sokol\sokol_gfx.h"
 $stencil_back = ((($depth_stencil60)) + 16|0); //@line 13685 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$stencil_back>>2]|0; //@line 13685 "../sokol\sokol_gfx.h"
 $cmp62 = ($13|0)==(0); //@line 13685 "../sokol\sokol_gfx.h"
 if ($cmp62) {
  $cond69 = 1;
 } else {
  $depth_stencil65 = ((($def)) + 304|0); //@line 13685 "../sokol\sokol_gfx.h"
  $stencil_back66 = ((($depth_stencil65)) + 16|0); //@line 13685 "../sokol\sokol_gfx.h"
  $14 = HEAP32[$stencil_back66>>2]|0; //@line 13685 "../sokol\sokol_gfx.h"
  $cond69 = $14;
 }
 $depth_stencil70 = ((($def)) + 304|0); //@line 13685 "../sokol\sokol_gfx.h"
 $stencil_back71 = ((($depth_stencil70)) + 16|0); //@line 13685 "../sokol\sokol_gfx.h"
 HEAP32[$stencil_back71>>2] = $cond69; //@line 13685 "../sokol\sokol_gfx.h"
 $depth_stencil73 = ((($def)) + 304|0); //@line 13686 "../sokol\sokol_gfx.h"
 $stencil_back74 = ((($depth_stencil73)) + 16|0); //@line 13686 "../sokol\sokol_gfx.h"
 $depth_fail_op75 = ((($stencil_back74)) + 4|0); //@line 13686 "../sokol\sokol_gfx.h"
 $15 = HEAP32[$depth_fail_op75>>2]|0; //@line 13686 "../sokol\sokol_gfx.h"
 $cmp76 = ($15|0)==(0); //@line 13686 "../sokol\sokol_gfx.h"
 if ($cmp76) {
  $cond83 = 1;
 } else {
  $depth_stencil79 = ((($def)) + 304|0); //@line 13686 "../sokol\sokol_gfx.h"
  $stencil_back80 = ((($depth_stencil79)) + 16|0); //@line 13686 "../sokol\sokol_gfx.h"
  $depth_fail_op81 = ((($stencil_back80)) + 4|0); //@line 13686 "../sokol\sokol_gfx.h"
  $16 = HEAP32[$depth_fail_op81>>2]|0; //@line 13686 "../sokol\sokol_gfx.h"
  $cond83 = $16;
 }
 $depth_stencil84 = ((($def)) + 304|0); //@line 13686 "../sokol\sokol_gfx.h"
 $stencil_back85 = ((($depth_stencil84)) + 16|0); //@line 13686 "../sokol\sokol_gfx.h"
 $depth_fail_op86 = ((($stencil_back85)) + 4|0); //@line 13686 "../sokol\sokol_gfx.h"
 HEAP32[$depth_fail_op86>>2] = $cond83; //@line 13686 "../sokol\sokol_gfx.h"
 $depth_stencil87 = ((($def)) + 304|0); //@line 13687 "../sokol\sokol_gfx.h"
 $stencil_back88 = ((($depth_stencil87)) + 16|0); //@line 13687 "../sokol\sokol_gfx.h"
 $pass_op89 = ((($stencil_back88)) + 8|0); //@line 13687 "../sokol\sokol_gfx.h"
 $17 = HEAP32[$pass_op89>>2]|0; //@line 13687 "../sokol\sokol_gfx.h"
 $cmp90 = ($17|0)==(0); //@line 13687 "../sokol\sokol_gfx.h"
 if ($cmp90) {
  $cond97 = 1;
 } else {
  $depth_stencil93 = ((($def)) + 304|0); //@line 13687 "../sokol\sokol_gfx.h"
  $stencil_back94 = ((($depth_stencil93)) + 16|0); //@line 13687 "../sokol\sokol_gfx.h"
  $pass_op95 = ((($stencil_back94)) + 8|0); //@line 13687 "../sokol\sokol_gfx.h"
  $18 = HEAP32[$pass_op95>>2]|0; //@line 13687 "../sokol\sokol_gfx.h"
  $cond97 = $18;
 }
 $depth_stencil98 = ((($def)) + 304|0); //@line 13687 "../sokol\sokol_gfx.h"
 $stencil_back99 = ((($depth_stencil98)) + 16|0); //@line 13687 "../sokol\sokol_gfx.h"
 $pass_op100 = ((($stencil_back99)) + 8|0); //@line 13687 "../sokol\sokol_gfx.h"
 HEAP32[$pass_op100>>2] = $cond97; //@line 13687 "../sokol\sokol_gfx.h"
 $depth_stencil101 = ((($def)) + 304|0); //@line 13688 "../sokol\sokol_gfx.h"
 $stencil_back102 = ((($depth_stencil101)) + 16|0); //@line 13688 "../sokol\sokol_gfx.h"
 $compare_func103 = ((($stencil_back102)) + 12|0); //@line 13688 "../sokol\sokol_gfx.h"
 $19 = HEAP32[$compare_func103>>2]|0; //@line 13688 "../sokol\sokol_gfx.h"
 $cmp104 = ($19|0)==(0); //@line 13688 "../sokol\sokol_gfx.h"
 if ($cmp104) {
  $cond111 = 8;
 } else {
  $depth_stencil107 = ((($def)) + 304|0); //@line 13688 "../sokol\sokol_gfx.h"
  $stencil_back108 = ((($depth_stencil107)) + 16|0); //@line 13688 "../sokol\sokol_gfx.h"
  $compare_func109 = ((($stencil_back108)) + 12|0); //@line 13688 "../sokol\sokol_gfx.h"
  $20 = HEAP32[$compare_func109>>2]|0; //@line 13688 "../sokol\sokol_gfx.h"
  $cond111 = $20;
 }
 $depth_stencil112 = ((($def)) + 304|0); //@line 13688 "../sokol\sokol_gfx.h"
 $stencil_back113 = ((($depth_stencil112)) + 16|0); //@line 13688 "../sokol\sokol_gfx.h"
 $compare_func114 = ((($stencil_back113)) + 12|0); //@line 13688 "../sokol\sokol_gfx.h"
 HEAP32[$compare_func114>>2] = $cond111; //@line 13688 "../sokol\sokol_gfx.h"
 $depth_stencil115 = ((($def)) + 304|0); //@line 13689 "../sokol\sokol_gfx.h"
 $depth_compare_func = ((($depth_stencil115)) + 32|0); //@line 13689 "../sokol\sokol_gfx.h"
 $21 = HEAP32[$depth_compare_func>>2]|0; //@line 13689 "../sokol\sokol_gfx.h"
 $cmp116 = ($21|0)==(0); //@line 13689 "../sokol\sokol_gfx.h"
 if ($cmp116) {
  $cond122 = 8;
 } else {
  $depth_stencil119 = ((($def)) + 304|0); //@line 13689 "../sokol\sokol_gfx.h"
  $depth_compare_func120 = ((($depth_stencil119)) + 32|0); //@line 13689 "../sokol\sokol_gfx.h"
  $22 = HEAP32[$depth_compare_func120>>2]|0; //@line 13689 "../sokol\sokol_gfx.h"
  $cond122 = $22;
 }
 $depth_stencil123 = ((($def)) + 304|0); //@line 13689 "../sokol\sokol_gfx.h"
 $depth_compare_func124 = ((($depth_stencil123)) + 32|0); //@line 13689 "../sokol\sokol_gfx.h"
 HEAP32[$depth_compare_func124>>2] = $cond122; //@line 13689 "../sokol\sokol_gfx.h"
 $blend = ((($def)) + 348|0); //@line 13691 "../sokol\sokol_gfx.h"
 $src_factor_rgb = ((($blend)) + 4|0); //@line 13691 "../sokol\sokol_gfx.h"
 $23 = HEAP32[$src_factor_rgb>>2]|0; //@line 13691 "../sokol\sokol_gfx.h"
 $cmp125 = ($23|0)==(0); //@line 13691 "../sokol\sokol_gfx.h"
 if ($cmp125) {
  $cond131 = 2;
 } else {
  $blend128 = ((($def)) + 348|0); //@line 13691 "../sokol\sokol_gfx.h"
  $src_factor_rgb129 = ((($blend128)) + 4|0); //@line 13691 "../sokol\sokol_gfx.h"
  $24 = HEAP32[$src_factor_rgb129>>2]|0; //@line 13691 "../sokol\sokol_gfx.h"
  $cond131 = $24;
 }
 $blend132 = ((($def)) + 348|0); //@line 13691 "../sokol\sokol_gfx.h"
 $src_factor_rgb133 = ((($blend132)) + 4|0); //@line 13691 "../sokol\sokol_gfx.h"
 HEAP32[$src_factor_rgb133>>2] = $cond131; //@line 13691 "../sokol\sokol_gfx.h"
 $blend134 = ((($def)) + 348|0); //@line 13692 "../sokol\sokol_gfx.h"
 $dst_factor_rgb = ((($blend134)) + 8|0); //@line 13692 "../sokol\sokol_gfx.h"
 $25 = HEAP32[$dst_factor_rgb>>2]|0; //@line 13692 "../sokol\sokol_gfx.h"
 $cmp135 = ($25|0)==(0); //@line 13692 "../sokol\sokol_gfx.h"
 if ($cmp135) {
  $cond141 = 1;
 } else {
  $blend138 = ((($def)) + 348|0); //@line 13692 "../sokol\sokol_gfx.h"
  $dst_factor_rgb139 = ((($blend138)) + 8|0); //@line 13692 "../sokol\sokol_gfx.h"
  $26 = HEAP32[$dst_factor_rgb139>>2]|0; //@line 13692 "../sokol\sokol_gfx.h"
  $cond141 = $26;
 }
 $blend142 = ((($def)) + 348|0); //@line 13692 "../sokol\sokol_gfx.h"
 $dst_factor_rgb143 = ((($blend142)) + 8|0); //@line 13692 "../sokol\sokol_gfx.h"
 HEAP32[$dst_factor_rgb143>>2] = $cond141; //@line 13692 "../sokol\sokol_gfx.h"
 $blend144 = ((($def)) + 348|0); //@line 13693 "../sokol\sokol_gfx.h"
 $op_rgb = ((($blend144)) + 12|0); //@line 13693 "../sokol\sokol_gfx.h"
 $27 = HEAP32[$op_rgb>>2]|0; //@line 13693 "../sokol\sokol_gfx.h"
 $cmp145 = ($27|0)==(0); //@line 13693 "../sokol\sokol_gfx.h"
 if ($cmp145) {
  $cond151 = 1;
 } else {
  $blend148 = ((($def)) + 348|0); //@line 13693 "../sokol\sokol_gfx.h"
  $op_rgb149 = ((($blend148)) + 12|0); //@line 13693 "../sokol\sokol_gfx.h"
  $28 = HEAP32[$op_rgb149>>2]|0; //@line 13693 "../sokol\sokol_gfx.h"
  $cond151 = $28;
 }
 $blend152 = ((($def)) + 348|0); //@line 13693 "../sokol\sokol_gfx.h"
 $op_rgb153 = ((($blend152)) + 12|0); //@line 13693 "../sokol\sokol_gfx.h"
 HEAP32[$op_rgb153>>2] = $cond151; //@line 13693 "../sokol\sokol_gfx.h"
 $blend154 = ((($def)) + 348|0); //@line 13694 "../sokol\sokol_gfx.h"
 $src_factor_alpha = ((($blend154)) + 16|0); //@line 13694 "../sokol\sokol_gfx.h"
 $29 = HEAP32[$src_factor_alpha>>2]|0; //@line 13694 "../sokol\sokol_gfx.h"
 $cmp155 = ($29|0)==(0); //@line 13694 "../sokol\sokol_gfx.h"
 if ($cmp155) {
  $cond161 = 2;
 } else {
  $blend158 = ((($def)) + 348|0); //@line 13694 "../sokol\sokol_gfx.h"
  $src_factor_alpha159 = ((($blend158)) + 16|0); //@line 13694 "../sokol\sokol_gfx.h"
  $30 = HEAP32[$src_factor_alpha159>>2]|0; //@line 13694 "../sokol\sokol_gfx.h"
  $cond161 = $30;
 }
 $blend162 = ((($def)) + 348|0); //@line 13694 "../sokol\sokol_gfx.h"
 $src_factor_alpha163 = ((($blend162)) + 16|0); //@line 13694 "../sokol\sokol_gfx.h"
 HEAP32[$src_factor_alpha163>>2] = $cond161; //@line 13694 "../sokol\sokol_gfx.h"
 $blend164 = ((($def)) + 348|0); //@line 13695 "../sokol\sokol_gfx.h"
 $dst_factor_alpha = ((($blend164)) + 20|0); //@line 13695 "../sokol\sokol_gfx.h"
 $31 = HEAP32[$dst_factor_alpha>>2]|0; //@line 13695 "../sokol\sokol_gfx.h"
 $cmp165 = ($31|0)==(0); //@line 13695 "../sokol\sokol_gfx.h"
 if ($cmp165) {
  $cond171 = 1;
 } else {
  $blend168 = ((($def)) + 348|0); //@line 13695 "../sokol\sokol_gfx.h"
  $dst_factor_alpha169 = ((($blend168)) + 20|0); //@line 13695 "../sokol\sokol_gfx.h"
  $32 = HEAP32[$dst_factor_alpha169>>2]|0; //@line 13695 "../sokol\sokol_gfx.h"
  $cond171 = $32;
 }
 $blend172 = ((($def)) + 348|0); //@line 13695 "../sokol\sokol_gfx.h"
 $dst_factor_alpha173 = ((($blend172)) + 20|0); //@line 13695 "../sokol\sokol_gfx.h"
 HEAP32[$dst_factor_alpha173>>2] = $cond171; //@line 13695 "../sokol\sokol_gfx.h"
 $blend174 = ((($def)) + 348|0); //@line 13696 "../sokol\sokol_gfx.h"
 $op_alpha = ((($blend174)) + 24|0); //@line 13696 "../sokol\sokol_gfx.h"
 $33 = HEAP32[$op_alpha>>2]|0; //@line 13696 "../sokol\sokol_gfx.h"
 $cmp175 = ($33|0)==(0); //@line 13696 "../sokol\sokol_gfx.h"
 if ($cmp175) {
  $cond181 = 1;
 } else {
  $blend178 = ((($def)) + 348|0); //@line 13696 "../sokol\sokol_gfx.h"
  $op_alpha179 = ((($blend178)) + 24|0); //@line 13696 "../sokol\sokol_gfx.h"
  $34 = HEAP32[$op_alpha179>>2]|0; //@line 13696 "../sokol\sokol_gfx.h"
  $cond181 = $34;
 }
 $blend182 = ((($def)) + 348|0); //@line 13696 "../sokol\sokol_gfx.h"
 $op_alpha183 = ((($blend182)) + 24|0); //@line 13696 "../sokol\sokol_gfx.h"
 HEAP32[$op_alpha183>>2] = $cond181; //@line 13696 "../sokol\sokol_gfx.h"
 $blend184 = ((($def)) + 348|0); //@line 13697 "../sokol\sokol_gfx.h"
 $color_write_mask = ((($blend184)) + 28|0); //@line 13697 "../sokol\sokol_gfx.h"
 $35 = HEAP8[$color_write_mask>>0]|0; //@line 13697 "../sokol\sokol_gfx.h"
 $conv = $35&255; //@line 13697 "../sokol\sokol_gfx.h"
 $cmp185 = ($conv|0)==(16); //@line 13697 "../sokol\sokol_gfx.h"
 $blend187 = ((($def)) + 348|0);
 $color_write_mask188 = ((($blend187)) + 28|0);
 if ($cmp185) {
  HEAP8[$color_write_mask188>>0] = 0; //@line 13698 "../sokol\sokol_gfx.h"
 } else {
  $36 = HEAP8[$color_write_mask188>>0]|0; //@line 13701 "../sokol\sokol_gfx.h"
  $conv191 = $36&255; //@line 13701 "../sokol\sokol_gfx.h"
  $cmp192 = ($conv191|0)==(0); //@line 13701 "../sokol\sokol_gfx.h"
  if ($cmp192) {
   $cond200 = 15;
  } else {
   $blend196 = ((($def)) + 348|0); //@line 13701 "../sokol\sokol_gfx.h"
   $color_write_mask197 = ((($blend196)) + 28|0); //@line 13701 "../sokol\sokol_gfx.h"
   $37 = HEAP8[$color_write_mask197>>0]|0; //@line 13701 "../sokol\sokol_gfx.h"
   $conv198 = $37&255; //@line 13701 "../sokol\sokol_gfx.h"
   $cond200 = $conv198;
  }
  $conv201 = $cond200&255; //@line 13701 "../sokol\sokol_gfx.h"
  $blend202 = ((($def)) + 348|0); //@line 13701 "../sokol\sokol_gfx.h"
  $color_write_mask203 = ((($blend202)) + 28|0); //@line 13701 "../sokol\sokol_gfx.h"
  HEAP8[$color_write_mask203>>0] = $conv201; //@line 13701 "../sokol\sokol_gfx.h"
 }
 $blend204 = ((($def)) + 348|0); //@line 13703 "../sokol\sokol_gfx.h"
 $color_attachment_count = ((($blend204)) + 32|0); //@line 13703 "../sokol\sokol_gfx.h"
 $38 = HEAP32[$color_attachment_count>>2]|0; //@line 13703 "../sokol\sokol_gfx.h"
 $cmp205 = ($38|0)==(0); //@line 13703 "../sokol\sokol_gfx.h"
 if ($cmp205) {
  $cond212 = 1;
 } else {
  $blend209 = ((($def)) + 348|0); //@line 13703 "../sokol\sokol_gfx.h"
  $color_attachment_count210 = ((($blend209)) + 32|0); //@line 13703 "../sokol\sokol_gfx.h"
  $39 = HEAP32[$color_attachment_count210>>2]|0; //@line 13703 "../sokol\sokol_gfx.h"
  $cond212 = $39;
 }
 $blend213 = ((($def)) + 348|0); //@line 13703 "../sokol\sokol_gfx.h"
 $color_attachment_count214 = ((($blend213)) + 32|0); //@line 13703 "../sokol\sokol_gfx.h"
 HEAP32[$color_attachment_count214>>2] = $cond212; //@line 13703 "../sokol\sokol_gfx.h"
 $blend215 = ((($def)) + 348|0); //@line 13704 "../sokol\sokol_gfx.h"
 $color_format = ((($blend215)) + 36|0); //@line 13704 "../sokol\sokol_gfx.h"
 $40 = HEAP32[$color_format>>2]|0; //@line 13704 "../sokol\sokol_gfx.h"
 $cmp216 = ($40|0)==(0); //@line 13704 "../sokol\sokol_gfx.h"
 if ($cmp216) {
  $41 = HEAP32[(30236)>>2]|0; //@line 13704 "../sokol\sokol_gfx.h"
  $cond223 = $41;
 } else {
  $blend220 = ((($def)) + 348|0); //@line 13704 "../sokol\sokol_gfx.h"
  $color_format221 = ((($blend220)) + 36|0); //@line 13704 "../sokol\sokol_gfx.h"
  $42 = HEAP32[$color_format221>>2]|0; //@line 13704 "../sokol\sokol_gfx.h"
  $cond223 = $42;
 }
 $blend224 = ((($def)) + 348|0); //@line 13704 "../sokol\sokol_gfx.h"
 $color_format225 = ((($blend224)) + 36|0); //@line 13704 "../sokol\sokol_gfx.h"
 HEAP32[$color_format225>>2] = $cond223; //@line 13704 "../sokol\sokol_gfx.h"
 $blend226 = ((($def)) + 348|0); //@line 13705 "../sokol\sokol_gfx.h"
 $depth_format = ((($blend226)) + 40|0); //@line 13705 "../sokol\sokol_gfx.h"
 $43 = HEAP32[$depth_format>>2]|0; //@line 13705 "../sokol\sokol_gfx.h"
 $cmp227 = ($43|0)==(0); //@line 13705 "../sokol\sokol_gfx.h"
 if ($cmp227) {
  $44 = HEAP32[(30240)>>2]|0; //@line 13705 "../sokol\sokol_gfx.h"
  $cond234 = $44;
 } else {
  $blend231 = ((($def)) + 348|0); //@line 13705 "../sokol\sokol_gfx.h"
  $depth_format232 = ((($blend231)) + 40|0); //@line 13705 "../sokol\sokol_gfx.h"
  $45 = HEAP32[$depth_format232>>2]|0; //@line 13705 "../sokol\sokol_gfx.h"
  $cond234 = $45;
 }
 $blend235 = ((($def)) + 348|0); //@line 13705 "../sokol\sokol_gfx.h"
 $depth_format236 = ((($blend235)) + 40|0); //@line 13705 "../sokol\sokol_gfx.h"
 HEAP32[$depth_format236>>2] = $cond234; //@line 13705 "../sokol\sokol_gfx.h"
 $rasterizer = ((($def)) + 408|0); //@line 13707 "../sokol\sokol_gfx.h"
 $cull_mode = ((($rasterizer)) + 4|0); //@line 13707 "../sokol\sokol_gfx.h"
 $46 = HEAP32[$cull_mode>>2]|0; //@line 13707 "../sokol\sokol_gfx.h"
 $cmp237 = ($46|0)==(0); //@line 13707 "../sokol\sokol_gfx.h"
 if ($cmp237) {
  $cond244 = 1;
 } else {
  $rasterizer241 = ((($def)) + 408|0); //@line 13707 "../sokol\sokol_gfx.h"
  $cull_mode242 = ((($rasterizer241)) + 4|0); //@line 13707 "../sokol\sokol_gfx.h"
  $47 = HEAP32[$cull_mode242>>2]|0; //@line 13707 "../sokol\sokol_gfx.h"
  $cond244 = $47;
 }
 $rasterizer245 = ((($def)) + 408|0); //@line 13707 "../sokol\sokol_gfx.h"
 $cull_mode246 = ((($rasterizer245)) + 4|0); //@line 13707 "../sokol\sokol_gfx.h"
 HEAP32[$cull_mode246>>2] = $cond244; //@line 13707 "../sokol\sokol_gfx.h"
 $rasterizer247 = ((($def)) + 408|0); //@line 13708 "../sokol\sokol_gfx.h"
 $face_winding = ((($rasterizer247)) + 8|0); //@line 13708 "../sokol\sokol_gfx.h"
 $48 = HEAP32[$face_winding>>2]|0; //@line 13708 "../sokol\sokol_gfx.h"
 $cmp248 = ($48|0)==(0); //@line 13708 "../sokol\sokol_gfx.h"
 if ($cmp248) {
  $cond255 = 2;
 } else {
  $rasterizer252 = ((($def)) + 408|0); //@line 13708 "../sokol\sokol_gfx.h"
  $face_winding253 = ((($rasterizer252)) + 8|0); //@line 13708 "../sokol\sokol_gfx.h"
  $49 = HEAP32[$face_winding253>>2]|0; //@line 13708 "../sokol\sokol_gfx.h"
  $cond255 = $49;
 }
 $rasterizer256 = ((($def)) + 408|0); //@line 13708 "../sokol\sokol_gfx.h"
 $face_winding257 = ((($rasterizer256)) + 8|0); //@line 13708 "../sokol\sokol_gfx.h"
 HEAP32[$face_winding257>>2] = $cond255; //@line 13708 "../sokol\sokol_gfx.h"
 $rasterizer258 = ((($def)) + 408|0); //@line 13709 "../sokol\sokol_gfx.h"
 $sample_count = ((($rasterizer258)) + 12|0); //@line 13709 "../sokol\sokol_gfx.h"
 $50 = HEAP32[$sample_count>>2]|0; //@line 13709 "../sokol\sokol_gfx.h"
 $cmp259 = ($50|0)==(0); //@line 13709 "../sokol\sokol_gfx.h"
 if ($cmp259) {
  $51 = HEAP32[(30244)>>2]|0; //@line 13709 "../sokol\sokol_gfx.h"
  $cond266 = $51;
 } else {
  $rasterizer263 = ((($def)) + 408|0); //@line 13709 "../sokol\sokol_gfx.h"
  $sample_count264 = ((($rasterizer263)) + 12|0); //@line 13709 "../sokol\sokol_gfx.h"
  $52 = HEAP32[$sample_count264>>2]|0; //@line 13709 "../sokol\sokol_gfx.h"
  $cond266 = $52;
 }
 $rasterizer267 = ((($def)) + 408|0); //@line 13709 "../sokol\sokol_gfx.h"
 $sample_count268 = ((($rasterizer267)) + 12|0); //@line 13709 "../sokol\sokol_gfx.h"
 HEAP32[$sample_count268>>2] = $cond266; //@line 13709 "../sokol\sokol_gfx.h"
 $attr_index = 0; //@line 13711 "../sokol\sokol_gfx.h"
 while(1) {
  $53 = $attr_index; //@line 13711 "../sokol\sokol_gfx.h"
  $cmp269 = ($53|0)<(16); //@line 13711 "../sokol\sokol_gfx.h"
  if (!($cmp269)) {
   label = 60;
   break;
  }
  $layout = ((($def)) + 4|0); //@line 13712 "../sokol\sokol_gfx.h"
  $attrs = ((($layout)) + 96|0); //@line 13712 "../sokol\sokol_gfx.h"
  $54 = $attr_index; //@line 13712 "../sokol\sokol_gfx.h"
  $arrayidx = (($attrs) + (($54*12)|0)|0); //@line 13712 "../sokol\sokol_gfx.h"
  $a_desc = $arrayidx; //@line 13712 "../sokol\sokol_gfx.h"
  $55 = $a_desc; //@line 13713 "../sokol\sokol_gfx.h"
  $format = ((($55)) + 8|0); //@line 13713 "../sokol\sokol_gfx.h"
  $56 = HEAP32[$format>>2]|0; //@line 13713 "../sokol\sokol_gfx.h"
  $cmp271 = ($56|0)==(0); //@line 13713 "../sokol\sokol_gfx.h"
  if ($cmp271) {
   label = 60;
   break;
  }
  $57 = $a_desc; //@line 13716 "../sokol\sokol_gfx.h"
  $58 = HEAP32[$57>>2]|0; //@line 13716 "../sokol\sokol_gfx.h"
  $cmp275 = ($58|0)>=(0); //@line 13716 "../sokol\sokol_gfx.h"
  if (!($cmp275)) {
   label = 54;
   break;
  }
  $59 = $a_desc; //@line 13716 "../sokol\sokol_gfx.h"
  $60 = HEAP32[$59>>2]|0; //@line 13716 "../sokol\sokol_gfx.h"
  $cmp278 = ($60|0)<(8); //@line 13716 "../sokol\sokol_gfx.h"
  if (!($cmp278)) {
   label = 54;
   break;
  }
  $layout280 = ((($def)) + 4|0); //@line 13717 "../sokol\sokol_gfx.h"
  $61 = $a_desc; //@line 13717 "../sokol\sokol_gfx.h"
  $62 = HEAP32[$61>>2]|0; //@line 13717 "../sokol\sokol_gfx.h"
  $arrayidx282 = (($layout280) + (($62*12)|0)|0); //@line 13717 "../sokol\sokol_gfx.h"
  $b_desc = $arrayidx282; //@line 13717 "../sokol\sokol_gfx.h"
  $63 = $b_desc; //@line 13718 "../sokol\sokol_gfx.h"
  $step_func = ((($63)) + 4|0); //@line 13718 "../sokol\sokol_gfx.h"
  $64 = HEAP32[$step_func>>2]|0; //@line 13718 "../sokol\sokol_gfx.h"
  $cmp283 = ($64|0)==(0); //@line 13718 "../sokol\sokol_gfx.h"
  if ($cmp283) {
   $cond289 = 1;
  } else {
   $65 = $b_desc; //@line 13718 "../sokol\sokol_gfx.h"
   $step_func287 = ((($65)) + 4|0); //@line 13718 "../sokol\sokol_gfx.h"
   $66 = HEAP32[$step_func287>>2]|0; //@line 13718 "../sokol\sokol_gfx.h"
   $cond289 = $66;
  }
  $67 = $b_desc; //@line 13718 "../sokol\sokol_gfx.h"
  $step_func290 = ((($67)) + 4|0); //@line 13718 "../sokol\sokol_gfx.h"
  HEAP32[$step_func290>>2] = $cond289; //@line 13718 "../sokol\sokol_gfx.h"
  $68 = $b_desc; //@line 13719 "../sokol\sokol_gfx.h"
  $step_rate = ((($68)) + 8|0); //@line 13719 "../sokol\sokol_gfx.h"
  $69 = HEAP32[$step_rate>>2]|0; //@line 13719 "../sokol\sokol_gfx.h"
  $cmp291 = ($69|0)==(0); //@line 13719 "../sokol\sokol_gfx.h"
  if ($cmp291) {
   $cond297 = 1;
  } else {
   $70 = $b_desc; //@line 13719 "../sokol\sokol_gfx.h"
   $step_rate295 = ((($70)) + 8|0); //@line 13719 "../sokol\sokol_gfx.h"
   $71 = HEAP32[$step_rate295>>2]|0; //@line 13719 "../sokol\sokol_gfx.h"
   $cond297 = $71;
  }
  $72 = $b_desc; //@line 13719 "../sokol\sokol_gfx.h"
  $step_rate298 = ((($72)) + 8|0); //@line 13719 "../sokol\sokol_gfx.h"
  HEAP32[$step_rate298>>2] = $cond297; //@line 13719 "../sokol\sokol_gfx.h"
  $73 = $attr_index; //@line 13711 "../sokol\sokol_gfx.h"
  $inc = (($73) + 1)|0; //@line 13711 "../sokol\sokol_gfx.h"
  $attr_index = $inc; //@line 13711 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 54) {
  ___assert_fail((16917|0),(6868|0),13716,(17000|0)); //@line 13716 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13716 "../sokol\sokol_gfx.h"
 }
 else if ((label|0) == 60) {
  ;HEAP32[$auto_offset>>2]=0|0;HEAP32[$auto_offset+4>>2]=0|0;HEAP32[$auto_offset+8>>2]=0|0;HEAP32[$auto_offset+12>>2]=0|0;HEAP32[$auto_offset+16>>2]=0|0;HEAP32[$auto_offset+20>>2]=0|0;HEAP32[$auto_offset+24>>2]=0|0;HEAP32[$auto_offset+28>>2]=0|0; //@line 13724 "../sokol\sokol_gfx.h"
  $use_auto_offset = 1; //@line 13725 "../sokol\sokol_gfx.h"
  $attr_index299 = 0; //@line 13726 "../sokol\sokol_gfx.h"
  while(1) {
   $74 = $attr_index299; //@line 13726 "../sokol\sokol_gfx.h"
   $cmp301 = ($74|0)<(16); //@line 13726 "../sokol\sokol_gfx.h"
   if (!($cmp301)) {
    break;
   }
   $layout304 = ((($def)) + 4|0); //@line 13728 "../sokol\sokol_gfx.h"
   $attrs305 = ((($layout304)) + 96|0); //@line 13728 "../sokol\sokol_gfx.h"
   $75 = $attr_index299; //@line 13728 "../sokol\sokol_gfx.h"
   $arrayidx306 = (($attrs305) + (($75*12)|0)|0); //@line 13728 "../sokol\sokol_gfx.h"
   $offset = ((($arrayidx306)) + 4|0); //@line 13728 "../sokol\sokol_gfx.h"
   $76 = HEAP32[$offset>>2]|0; //@line 13728 "../sokol\sokol_gfx.h"
   $cmp307 = ($76|0)!=(0); //@line 13728 "../sokol\sokol_gfx.h"
   if ($cmp307) {
    $use_auto_offset = 0; //@line 13729 "../sokol\sokol_gfx.h"
   }
   $77 = $attr_index299; //@line 13726 "../sokol\sokol_gfx.h"
   $inc312 = (($77) + 1)|0; //@line 13726 "../sokol\sokol_gfx.h"
   $attr_index299 = $inc312; //@line 13726 "../sokol\sokol_gfx.h"
  }
  $attr_index314 = 0; //@line 13732 "../sokol\sokol_gfx.h"
  while(1) {
   $78 = $attr_index314; //@line 13732 "../sokol\sokol_gfx.h"
   $cmp316 = ($78|0)<(16); //@line 13732 "../sokol\sokol_gfx.h"
   if (!($cmp316)) {
    label = 74;
    break;
   }
   $layout320 = ((($def)) + 4|0); //@line 13733 "../sokol\sokol_gfx.h"
   $attrs321 = ((($layout320)) + 96|0); //@line 13733 "../sokol\sokol_gfx.h"
   $79 = $attr_index314; //@line 13733 "../sokol\sokol_gfx.h"
   $arrayidx322 = (($attrs321) + (($79*12)|0)|0); //@line 13733 "../sokol\sokol_gfx.h"
   $a_desc319 = $arrayidx322; //@line 13733 "../sokol\sokol_gfx.h"
   $80 = $a_desc319; //@line 13734 "../sokol\sokol_gfx.h"
   $format323 = ((($80)) + 8|0); //@line 13734 "../sokol\sokol_gfx.h"
   $81 = HEAP32[$format323>>2]|0; //@line 13734 "../sokol\sokol_gfx.h"
   $cmp324 = ($81|0)==(0); //@line 13734 "../sokol\sokol_gfx.h"
   if ($cmp324) {
    label = 74;
    break;
   }
   $82 = $a_desc319; //@line 13737 "../sokol\sokol_gfx.h"
   $83 = HEAP32[$82>>2]|0; //@line 13737 "../sokol\sokol_gfx.h"
   $cmp329 = ($83|0)>=(0); //@line 13737 "../sokol\sokol_gfx.h"
   if (!($cmp329)) {
    label = 70;
    break;
   }
   $84 = $a_desc319; //@line 13737 "../sokol\sokol_gfx.h"
   $85 = HEAP32[$84>>2]|0; //@line 13737 "../sokol\sokol_gfx.h"
   $cmp333 = ($85|0)<(8); //@line 13737 "../sokol\sokol_gfx.h"
   if (!($cmp333)) {
    label = 70;
    break;
   }
   $86 = $use_auto_offset; //@line 13738 "../sokol\sokol_gfx.h"
   $tobool = $86&1; //@line 13738 "../sokol\sokol_gfx.h"
   if ($tobool) {
    $87 = $a_desc319; //@line 13739 "../sokol\sokol_gfx.h"
    $88 = HEAP32[$87>>2]|0; //@line 13739 "../sokol\sokol_gfx.h"
    $arrayidx340 = (($auto_offset) + ($88<<2)|0); //@line 13739 "../sokol\sokol_gfx.h"
    $89 = HEAP32[$arrayidx340>>2]|0; //@line 13739 "../sokol\sokol_gfx.h"
    $90 = $a_desc319; //@line 13739 "../sokol\sokol_gfx.h"
    $offset341 = ((($90)) + 4|0); //@line 13739 "../sokol\sokol_gfx.h"
    HEAP32[$offset341>>2] = $89; //@line 13739 "../sokol\sokol_gfx.h"
   }
   $91 = $a_desc319; //@line 13741 "../sokol\sokol_gfx.h"
   $format343 = ((($91)) + 8|0); //@line 13741 "../sokol\sokol_gfx.h"
   $92 = HEAP32[$format343>>2]|0; //@line 13741 "../sokol\sokol_gfx.h"
   $call = (__sg_vertexformat_bytesize($92)|0); //@line 13741 "../sokol\sokol_gfx.h"
   $93 = $a_desc319; //@line 13741 "../sokol\sokol_gfx.h"
   $94 = HEAP32[$93>>2]|0; //@line 13741 "../sokol\sokol_gfx.h"
   $arrayidx345 = (($auto_offset) + ($94<<2)|0); //@line 13741 "../sokol\sokol_gfx.h"
   $95 = HEAP32[$arrayidx345>>2]|0; //@line 13741 "../sokol\sokol_gfx.h"
   $add = (($95) + ($call))|0; //@line 13741 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx345>>2] = $add; //@line 13741 "../sokol\sokol_gfx.h"
   $96 = $attr_index314; //@line 13732 "../sokol\sokol_gfx.h"
   $inc347 = (($96) + 1)|0; //@line 13732 "../sokol\sokol_gfx.h"
   $attr_index314 = $inc347; //@line 13732 "../sokol\sokol_gfx.h"
  }
  if ((label|0) == 70) {
   ___assert_fail((16917|0),(6868|0),13737,(17000|0)); //@line 13737 "../sokol\sokol_gfx.h"
   // unreachable; //@line 13737 "../sokol\sokol_gfx.h"
  }
  else if ((label|0) == 74) {
   $buf_index = 0; //@line 13744 "../sokol\sokol_gfx.h"
   while(1) {
    $97 = $buf_index; //@line 13744 "../sokol\sokol_gfx.h"
    $cmp350 = ($97|0)<(8); //@line 13744 "../sokol\sokol_gfx.h"
    if (!($cmp350)) {
     break;
    }
    $layout353 = ((($def)) + 4|0); //@line 13745 "../sokol\sokol_gfx.h"
    $98 = $buf_index; //@line 13745 "../sokol\sokol_gfx.h"
    $arrayidx355 = (($layout353) + (($98*12)|0)|0); //@line 13745 "../sokol\sokol_gfx.h"
    $l_desc = $arrayidx355; //@line 13745 "../sokol\sokol_gfx.h"
    $99 = $l_desc; //@line 13746 "../sokol\sokol_gfx.h"
    $100 = HEAP32[$99>>2]|0; //@line 13746 "../sokol\sokol_gfx.h"
    $cmp356 = ($100|0)==(0); //@line 13746 "../sokol\sokol_gfx.h"
    if ($cmp356) {
     $101 = $buf_index; //@line 13747 "../sokol\sokol_gfx.h"
     $arrayidx359 = (($auto_offset) + ($101<<2)|0); //@line 13747 "../sokol\sokol_gfx.h"
     $102 = HEAP32[$arrayidx359>>2]|0; //@line 13747 "../sokol\sokol_gfx.h"
     $103 = $l_desc; //@line 13747 "../sokol\sokol_gfx.h"
     HEAP32[$103>>2] = $102; //@line 13747 "../sokol\sokol_gfx.h"
    }
    $104 = $buf_index; //@line 13744 "../sokol\sokol_gfx.h"
    $inc363 = (($104) + 1)|0; //@line 13744 "../sokol\sokol_gfx.h"
    $buf_index = $inc363; //@line 13744 "../sokol\sokol_gfx.h"
   }
   _memcpy(($agg$result|0),($def|0),444)|0; //@line 13751 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return; //@line 13751 "../sokol\sokol_gfx.h"
  }
 }
}
function __sg_init_pipeline($pip_id,$desc) {
 $pip_id = $pip_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call11 = 0, $call18 = 0, $call9 = 0, $cmp = 0, $cmp16 = 0, $cmp29 = 0, $cmp32 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $or$cond = 0, $pip = 0, $shader = 0, $shd = 0, $state = 0;
 var $state15 = 0, $state20 = 0, $state22 = 0, $state25 = 0, $state28 = 0, $state31 = 0, $tobool = 0, $tobool12 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$pip_id>>2]|0; //@line 13869 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13869 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 13869 "../sokol\sokol_gfx.h"
 $tobool = ($1|0)!=(0|0); //@line 13869 "../sokol\sokol_gfx.h"
 $or$cond = $cmp & $tobool; //@line 13869 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((17053|0),(6868|0),13869,(17088|0)); //@line 13869 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13869 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[$pip_id>>2]|0; //@line 13870 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_pipeline((30364),$2)|0); //@line 13870 "../sokol\sokol_gfx.h"
 $pip = $call; //@line 13870 "../sokol\sokol_gfx.h"
 $3 = $pip; //@line 13871 "../sokol\sokol_gfx.h"
 $tobool2 = ($3|0)!=(0|0); //@line 13871 "../sokol\sokol_gfx.h"
 if (!($tobool2)) {
  ___assert_fail((7173|0),(6868|0),13871,(17088|0)); //@line 13871 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13871 "../sokol\sokol_gfx.h"
 }
 $4 = $pip; //@line 13871 "../sokol\sokol_gfx.h"
 $state = ((($4)) + 8|0); //@line 13871 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$state>>2]|0; //@line 13871 "../sokol\sokol_gfx.h"
 $cmp4 = ($5|0)==(1); //@line 13871 "../sokol\sokol_gfx.h"
 if (!($cmp4)) {
  ___assert_fail((7173|0),(6868|0),13871,(17088|0)); //@line 13871 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13871 "../sokol\sokol_gfx.h"
 }
 $6 = HEAP32[(30344)>>2]|0; //@line 13872 "../sokol\sokol_gfx.h"
 $7 = $pip; //@line 13872 "../sokol\sokol_gfx.h"
 $ctx_id = ((($7)) + 4|0); //@line 13872 "../sokol\sokol_gfx.h"
 HEAP32[$ctx_id>>2] = $6; //@line 13872 "../sokol\sokol_gfx.h"
 $8 = $desc$addr; //@line 13873 "../sokol\sokol_gfx.h"
 $call9 = (__sg_validate_pipeline_desc($8)|0); //@line 13873 "../sokol\sokol_gfx.h"
 do {
  if ($call9) {
   $9 = $desc$addr; //@line 13874 "../sokol\sokol_gfx.h"
   $shader = ((($9)) + 292|0); //@line 13874 "../sokol\sokol_gfx.h"
   $10 = HEAP32[$shader>>2]|0; //@line 13874 "../sokol\sokol_gfx.h"
   $call11 = (__sg_lookup_shader((30364),$10)|0); //@line 13874 "../sokol\sokol_gfx.h"
   $shd = $call11; //@line 13874 "../sokol\sokol_gfx.h"
   $11 = $shd; //@line 13875 "../sokol\sokol_gfx.h"
   $tobool12 = ($11|0)!=(0|0); //@line 13875 "../sokol\sokol_gfx.h"
   if ($tobool12) {
    $12 = $shd; //@line 13875 "../sokol\sokol_gfx.h"
    $state15 = ((($12)) + 8|0); //@line 13875 "../sokol\sokol_gfx.h"
    $13 = HEAP32[$state15>>2]|0; //@line 13875 "../sokol\sokol_gfx.h"
    $cmp16 = ($13|0)==(2); //@line 13875 "../sokol\sokol_gfx.h"
    if ($cmp16) {
     $14 = $pip; //@line 13876 "../sokol\sokol_gfx.h"
     $15 = $shd; //@line 13876 "../sokol\sokol_gfx.h"
     $16 = $desc$addr; //@line 13876 "../sokol\sokol_gfx.h"
     $call18 = (__sg_create_pipeline($14,$15,$16)|0); //@line 13876 "../sokol\sokol_gfx.h"
     $17 = $pip; //@line 13876 "../sokol\sokol_gfx.h"
     $state20 = ((($17)) + 8|0); //@line 13876 "../sokol\sokol_gfx.h"
     HEAP32[$state20>>2] = $call18; //@line 13876 "../sokol\sokol_gfx.h"
     break;
    }
   }
   $18 = $pip; //@line 13879 "../sokol\sokol_gfx.h"
   $state22 = ((($18)) + 8|0); //@line 13879 "../sokol\sokol_gfx.h"
   HEAP32[$state22>>2] = 3; //@line 13879 "../sokol\sokol_gfx.h"
  } else {
   $19 = $pip; //@line 13883 "../sokol\sokol_gfx.h"
   $state25 = ((($19)) + 8|0); //@line 13883 "../sokol\sokol_gfx.h"
   HEAP32[$state25>>2] = 3; //@line 13883 "../sokol\sokol_gfx.h"
  }
 } while(0);
 $20 = $pip; //@line 13885 "../sokol\sokol_gfx.h"
 $state28 = ((($20)) + 8|0); //@line 13885 "../sokol\sokol_gfx.h"
 $21 = HEAP32[$state28>>2]|0; //@line 13885 "../sokol\sokol_gfx.h"
 $cmp29 = ($21|0)==(2); //@line 13885 "../sokol\sokol_gfx.h"
 if ($cmp29) {
  STACKTOP = sp;return; //@line 13886 "../sokol\sokol_gfx.h"
 }
 $22 = $pip; //@line 13885 "../sokol\sokol_gfx.h"
 $state31 = ((($22)) + 8|0); //@line 13885 "../sokol\sokol_gfx.h"
 $23 = HEAP32[$state31>>2]|0; //@line 13885 "../sokol\sokol_gfx.h"
 $cmp32 = ($23|0)==(3); //@line 13885 "../sokol\sokol_gfx.h"
 if ($cmp32) {
  STACKTOP = sp;return; //@line 13886 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((17106|0),(6868|0),13885,(17088|0)); //@line 13885 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13885 "../sokol\sokol_gfx.h"
 }
}
function __sg_lookup_buffer($p,$buf_id) {
 $p = $p|0;
 $buf_id = $buf_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $buf_id$addr = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $buf_id$addr = $buf_id;
 $0 = $buf_id$addr; //@line 12786 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($0|0); //@line 12786 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = $p$addr; //@line 12787 "../sokol\sokol_gfx.h"
  $2 = $buf_id$addr; //@line 12787 "../sokol\sokol_gfx.h"
  $call = (__sg_buffer_at($1,$2)|0); //@line 12787 "../sokol\sokol_gfx.h"
  $buf = $call; //@line 12787 "../sokol\sokol_gfx.h"
  $3 = $buf; //@line 12788 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$3>>2]|0; //@line 12788 "../sokol\sokol_gfx.h"
  $5 = $buf_id$addr; //@line 12788 "../sokol\sokol_gfx.h"
  $cmp1 = ($4|0)==($5|0); //@line 12788 "../sokol\sokol_gfx.h"
  if ($cmp1) {
   $6 = $buf; //@line 12789 "../sokol\sokol_gfx.h"
   $retval = $6; //@line 12789 "../sokol\sokol_gfx.h"
   $7 = $retval; //@line 12793 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($7|0); //@line 12793 "../sokol\sokol_gfx.h"
  }
 }
 $retval = 0; //@line 12792 "../sokol\sokol_gfx.h"
 $7 = $retval; //@line 12793 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($7|0); //@line 12793 "../sokol\sokol_gfx.h"
}
function __sg_lookup_image($p,$img_id) {
 $p = $p|0;
 $img_id = $img_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $img = 0, $img_id$addr = 0, $p$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $img_id$addr = $img_id;
 $0 = $img_id$addr; //@line 12796 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($0|0); //@line 12796 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = $p$addr; //@line 12797 "../sokol\sokol_gfx.h"
  $2 = $img_id$addr; //@line 12797 "../sokol\sokol_gfx.h"
  $call = (__sg_image_at($1,$2)|0); //@line 12797 "../sokol\sokol_gfx.h"
  $img = $call; //@line 12797 "../sokol\sokol_gfx.h"
  $3 = $img; //@line 12798 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$3>>2]|0; //@line 12798 "../sokol\sokol_gfx.h"
  $5 = $img_id$addr; //@line 12798 "../sokol\sokol_gfx.h"
  $cmp1 = ($4|0)==($5|0); //@line 12798 "../sokol\sokol_gfx.h"
  if ($cmp1) {
   $6 = $img; //@line 12799 "../sokol\sokol_gfx.h"
   $retval = $6; //@line 12799 "../sokol\sokol_gfx.h"
   $7 = $retval; //@line 12803 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($7|0); //@line 12803 "../sokol\sokol_gfx.h"
  }
 }
 $retval = 0; //@line 12802 "../sokol\sokol_gfx.h"
 $7 = $retval; //@line 12803 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($7|0); //@line 12803 "../sokol\sokol_gfx.h"
}
function __sg_lookup_shader($p,$shd_id) {
 $p = $p|0;
 $shd_id = $shd_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $retval = 0, $shd = 0, $shd_id$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $shd_id$addr = $shd_id;
 $0 = $p$addr; //@line 12806 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12806 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7936|0),(6868|0),12806,(17875|0)); //@line 12806 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12806 "../sokol\sokol_gfx.h"
 }
 $1 = $shd_id$addr; //@line 12807 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12807 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $2 = $p$addr; //@line 12808 "../sokol\sokol_gfx.h"
  $3 = $shd_id$addr; //@line 12808 "../sokol\sokol_gfx.h"
  $call = (__sg_shader_at($2,$3)|0); //@line 12808 "../sokol\sokol_gfx.h"
  $shd = $call; //@line 12808 "../sokol\sokol_gfx.h"
  $4 = $shd; //@line 12809 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$4>>2]|0; //@line 12809 "../sokol\sokol_gfx.h"
  $6 = $shd_id$addr; //@line 12809 "../sokol\sokol_gfx.h"
  $cmp1 = ($5|0)==($6|0); //@line 12809 "../sokol\sokol_gfx.h"
  if ($cmp1) {
   $7 = $shd; //@line 12810 "../sokol\sokol_gfx.h"
   $retval = $7; //@line 12810 "../sokol\sokol_gfx.h"
   $8 = $retval; //@line 12814 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($8|0); //@line 12814 "../sokol\sokol_gfx.h"
  }
 }
 $retval = 0; //@line 12813 "../sokol\sokol_gfx.h"
 $8 = $retval; //@line 12814 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($8|0); //@line 12814 "../sokol\sokol_gfx.h"
}
function __sg_lookup_pipeline($p,$pip_id) {
 $p = $p|0;
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $pip = 0, $pip_id$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pip_id$addr = $pip_id;
 $0 = $p$addr; //@line 12817 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12817 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7936|0),(6868|0),12817,(17995|0)); //@line 12817 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12817 "../sokol\sokol_gfx.h"
 }
 $1 = $pip_id$addr; //@line 12818 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12818 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $2 = $p$addr; //@line 12819 "../sokol\sokol_gfx.h"
  $3 = $pip_id$addr; //@line 12819 "../sokol\sokol_gfx.h"
  $call = (__sg_pipeline_at($2,$3)|0); //@line 12819 "../sokol\sokol_gfx.h"
  $pip = $call; //@line 12819 "../sokol\sokol_gfx.h"
  $4 = $pip; //@line 12820 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$4>>2]|0; //@line 12820 "../sokol\sokol_gfx.h"
  $6 = $pip_id$addr; //@line 12820 "../sokol\sokol_gfx.h"
  $cmp1 = ($5|0)==($6|0); //@line 12820 "../sokol\sokol_gfx.h"
  if ($cmp1) {
   $7 = $pip; //@line 12821 "../sokol\sokol_gfx.h"
   $retval = $7; //@line 12821 "../sokol\sokol_gfx.h"
   $8 = $retval; //@line 12825 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($8|0); //@line 12825 "../sokol\sokol_gfx.h"
  }
 }
 $retval = 0; //@line 12824 "../sokol\sokol_gfx.h"
 $8 = $retval; //@line 12825 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($8|0); //@line 12825 "../sokol\sokol_gfx.h"
}
function __sg_lookup_pass($p,$pass_id) {
 $p = $p|0;
 $pass_id = $pass_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $pass = 0, $pass_id$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pass_id$addr = $pass_id;
 $0 = $p$addr; //@line 12828 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12828 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7936|0),(6868|0),12828,(18121|0)); //@line 12828 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12828 "../sokol\sokol_gfx.h"
 }
 $1 = $pass_id$addr; //@line 12829 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12829 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $2 = $p$addr; //@line 12830 "../sokol\sokol_gfx.h"
  $3 = $pass_id$addr; //@line 12830 "../sokol\sokol_gfx.h"
  $call = (__sg_pass_at($2,$3)|0); //@line 12830 "../sokol\sokol_gfx.h"
  $pass = $call; //@line 12830 "../sokol\sokol_gfx.h"
  $4 = $pass; //@line 12831 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$4>>2]|0; //@line 12831 "../sokol\sokol_gfx.h"
  $6 = $pass_id$addr; //@line 12831 "../sokol\sokol_gfx.h"
  $cmp1 = ($5|0)==($6|0); //@line 12831 "../sokol\sokol_gfx.h"
  if ($cmp1) {
   $7 = $pass; //@line 12832 "../sokol\sokol_gfx.h"
   $retval = $7; //@line 12832 "../sokol\sokol_gfx.h"
   $8 = $retval; //@line 12836 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($8|0); //@line 12836 "../sokol\sokol_gfx.h"
  }
 }
 $retval = 0; //@line 12835 "../sokol\sokol_gfx.h"
 $8 = $retval; //@line 12836 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($8|0); //@line 12836 "../sokol\sokol_gfx.h"
}
function _sg_make_buffer($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buf_id = 0, $buf_id$byval_copy = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $buf_id$byval_copy = sp + 64|0;
 $retval = sp + 60|0;
 $desc_def = sp + 4|0;
 $buf_id = sp;
 $desc$addr = $desc;
 $0 = HEAP8[30192]|0; //@line 14233 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14233 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14233,(7222|0)); //@line 14233 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14233 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 14234 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 14234 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((20040|0),(6868|0),14234,(7222|0)); //@line 14234 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14234 "../sokol\sokol_gfx.h"
 }
 $2 = $desc$addr; //@line 14235 "../sokol\sokol_gfx.h"
 __sg_buffer_desc_defaults($desc_def,$2); //@line 14235 "../sokol\sokol_gfx.h"
 $call = (__sg_alloc_buffer()|0); //@line 14236 "../sokol\sokol_gfx.h"
 HEAP32[$buf_id>>2] = $call; //@line 14236 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$buf_id>>2]|0; //@line 14237 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)!=(0); //@line 14237 "../sokol\sokol_gfx.h"
 if ($cmp) {
  ;HEAP32[$buf_id$byval_copy>>2]=HEAP32[$buf_id>>2]|0; //@line 14238 "../sokol\sokol_gfx.h"
  __sg_init_buffer($buf_id$byval_copy,$desc_def); //@line 14238 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$buf_id>>2]|0; //@line 14245 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$retval>>2]|0; //@line 14245 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 14245 "../sokol\sokol_gfx.h"
 } else {
  (_puts(7237)|0); //@line 14241 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$buf_id>>2]|0; //@line 14245 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$retval>>2]|0; //@line 14245 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 14245 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function _sg_make_shader($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $shd_id = 0, $shd_id$byval_copy = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2128|0);
 $shd_id$byval_copy = sp + 2112|0;
 $retval = sp + 2108|0;
 $desc_def = sp + 4|0;
 $shd_id = sp;
 $desc$addr = $desc;
 $0 = HEAP8[30192]|0; //@line 14265 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14265 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14265,(7260|0)); //@line 14265 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14265 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 14266 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 14266 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((20040|0),(6868|0),14266,(7260|0)); //@line 14266 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14266 "../sokol\sokol_gfx.h"
 }
 $2 = $desc$addr; //@line 14267 "../sokol\sokol_gfx.h"
 __sg_shader_desc_defaults($desc_def,$2); //@line 14267 "../sokol\sokol_gfx.h"
 $call = (__sg_alloc_shader()|0); //@line 14268 "../sokol\sokol_gfx.h"
 HEAP32[$shd_id>>2] = $call; //@line 14268 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$shd_id>>2]|0; //@line 14269 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)!=(0); //@line 14269 "../sokol\sokol_gfx.h"
 if ($cmp) {
  ;HEAP32[$shd_id$byval_copy>>2]=HEAP32[$shd_id>>2]|0; //@line 14270 "../sokol\sokol_gfx.h"
  __sg_init_shader($shd_id$byval_copy,$desc_def); //@line 14270 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$shd_id>>2]|0; //@line 14277 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$retval>>2]|0; //@line 14277 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 14277 "../sokol\sokol_gfx.h"
 } else {
  (_puts(7275)|0); //@line 14273 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$shd_id>>2]|0; //@line 14277 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$retval>>2]|0; //@line 14277 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 14277 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function _sg_make_pipeline($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $pip_id = 0, $pip_id$byval_copy = 0, $retval = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $pip_id$byval_copy = sp + 456|0;
 $retval = sp + 452|0;
 $desc_def = sp + 4|0;
 $pip_id = sp;
 $desc$addr = $desc;
 $0 = HEAP8[30192]|0; //@line 14281 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14281 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14281,(7298|0)); //@line 14281 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14281 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 14282 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 14282 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((20040|0),(6868|0),14282,(7298|0)); //@line 14282 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14282 "../sokol\sokol_gfx.h"
 }
 $2 = $desc$addr; //@line 14283 "../sokol\sokol_gfx.h"
 __sg_pipeline_desc_defaults($desc_def,$2); //@line 14283 "../sokol\sokol_gfx.h"
 $call = (__sg_alloc_pipeline()|0); //@line 14284 "../sokol\sokol_gfx.h"
 HEAP32[$pip_id>>2] = $call; //@line 14284 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$pip_id>>2]|0; //@line 14285 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)!=(0); //@line 14285 "../sokol\sokol_gfx.h"
 if ($cmp) {
  ;HEAP32[$pip_id$byval_copy>>2]=HEAP32[$pip_id>>2]|0; //@line 14286 "../sokol\sokol_gfx.h"
  __sg_init_pipeline($pip_id$byval_copy,$desc_def); //@line 14286 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$pip_id>>2]|0; //@line 14293 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$retval>>2]|0; //@line 14293 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 14293 "../sokol\sokol_gfx.h"
 } else {
  (_puts(7315)|0); //@line 14289 "../sokol\sokol_gfx.h"
  ;HEAP32[$retval>>2]=HEAP32[$pip_id>>2]|0; //@line 14293 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$retval>>2]|0; //@line 14293 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 14293 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_destroy_buffer($buf) {
 $buf = $buf|0;
 var $0 = 0, $buf$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf$addr = $buf;
 $0 = $buf$addr; //@line 12192 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_buffer($0); //@line 12192 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12198 "../sokol\sokol_gfx.h"
}
function __sg_destroy_image($img) {
 $img = $img|0;
 var $0 = 0, $img$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $img$addr = $img;
 $0 = $img$addr; //@line 12224 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_image($0); //@line 12224 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12230 "../sokol\sokol_gfx.h"
}
function __sg_destroy_shader($shd) {
 $shd = $shd|0;
 var $0 = 0, $shd$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $shd$addr = $shd;
 $0 = $shd$addr; //@line 12256 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_shader($0); //@line 12256 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12262 "../sokol\sokol_gfx.h"
}
function __sg_destroy_pipeline($pip) {
 $pip = $pip|0;
 var $0 = 0, $pip$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $0 = $pip$addr; //@line 12288 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_pipeline($0); //@line 12288 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12294 "../sokol\sokol_gfx.h"
}
function __sg_destroy_pass($pass) {
 $pass = $pass|0;
 var $0 = 0, $pass$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $0 = $pass$addr; //@line 12320 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_pass($0); //@line 12320 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12320 "../sokol\sokol_gfx.h"
}
function _sg_begin_default_pass($pass_action,$width,$height) {
 $pass_action = $pass_action|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_end_canary = 0, $cmp = 0, $cmp5 = 0, $height$addr = 0, $pa = 0, $pass_action$addr = 0, $tobool = 0, $tobool1 = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $pa = sp;
 $pass_action$addr = $pass_action;
 $width$addr = $width;
 $height$addr = $height;
 $0 = HEAP8[30192]|0; //@line 14399 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14399 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14399,(7340|0)); //@line 14399 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14399 "../sokol\sokol_gfx.h"
 }
 $1 = $pass_action$addr; //@line 14400 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 14400 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((7362|0),(6868|0),14400,(7340|0)); //@line 14400 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14400 "../sokol\sokol_gfx.h"
 }
 $2 = $pass_action$addr; //@line 14401 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$2>>2]|0; //@line 14401 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)==(0); //@line 14401 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((7374|0),(6868|0),14401,(7340|0)); //@line 14401 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14401 "../sokol\sokol_gfx.h"
 }
 $4 = $pass_action$addr; //@line 14401 "../sokol\sokol_gfx.h"
 $_end_canary = ((($4)) + 100|0); //@line 14401 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$_end_canary>>2]|0; //@line 14401 "../sokol\sokol_gfx.h"
 $cmp5 = ($5|0)==(0); //@line 14401 "../sokol\sokol_gfx.h"
 if ($cmp5) {
  $6 = $pass_action$addr; //@line 14403 "../sokol\sokol_gfx.h"
  __sg_resolve_default_pass_action($6,$pa); //@line 14403 "../sokol\sokol_gfx.h"
  HEAP32[(30348)>>2] = 0; //@line 14404 "../sokol\sokol_gfx.h"
  HEAP8[(30356)>>0] = 1; //@line 14405 "../sokol\sokol_gfx.h"
  $7 = $width$addr; //@line 14406 "../sokol\sokol_gfx.h"
  $8 = $height$addr; //@line 14406 "../sokol\sokol_gfx.h"
  __sg_begin_pass(0,$pa,$7,$8); //@line 14406 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 14408 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((7374|0),(6868|0),14401,(7340|0)); //@line 14401 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14401 "../sokol\sokol_gfx.h"
 }
}
function __sg_resolve_default_pass_action($from,$to) {
 $from = $from|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $cmp = 0, $cmp2 = 0, $cmp22 = 0, $cmp30 = 0, $colors = 0;
 var $colors13 = 0, $colors17 = 0, $colors3 = 0, $colors6 = 0, $colors9 = 0, $depth = 0, $depth24 = 0, $depth26 = 0, $from$addr = 0, $i = 0, $inc = 0, $or$cond = 0, $stencil = 0, $stencil32 = 0, $stencil34 = 0, $to$addr = 0, $tobool = 0, $tobool1 = 0, $val = 0, $val11 = 0;
 var $val15 = 0, $val19 = 0, $val27 = 0, $val35 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $from$addr = $from;
 $to$addr = $to;
 $0 = $from$addr; //@line 4017 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 4017 "../sokol\sokol_gfx.h"
 $1 = $to$addr; //@line 4017 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 4017 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $tobool1; //@line 4017 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((18368|0),(6868|0),4017,(18379|0)); //@line 4017 "../sokol\sokol_gfx.h"
  // unreachable; //@line 4017 "../sokol\sokol_gfx.h"
 }
 $2 = $to$addr; //@line 4018 "../sokol\sokol_gfx.h"
 $3 = $from$addr; //@line 4018 "../sokol\sokol_gfx.h"
 dest=$2; src=$3; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 4018 "../sokol\sokol_gfx.h"
 $i = 0; //@line 4019 "../sokol\sokol_gfx.h"
 while(1) {
  $4 = $i; //@line 4019 "../sokol\sokol_gfx.h"
  $cmp = ($4|0)<(4); //@line 4019 "../sokol\sokol_gfx.h"
  $5 = $to$addr;
  if (!($cmp)) {
   break;
  }
  $colors = ((($5)) + 4|0); //@line 4020 "../sokol\sokol_gfx.h"
  $6 = $i; //@line 4020 "../sokol\sokol_gfx.h"
  $arrayidx = (($colors) + (($6*20)|0)|0); //@line 4020 "../sokol\sokol_gfx.h"
  $7 = HEAP32[$arrayidx>>2]|0; //@line 4020 "../sokol\sokol_gfx.h"
  $cmp2 = ($7|0)==(0); //@line 4020 "../sokol\sokol_gfx.h"
  if ($cmp2) {
   $8 = $to$addr; //@line 4021 "../sokol\sokol_gfx.h"
   $colors3 = ((($8)) + 4|0); //@line 4021 "../sokol\sokol_gfx.h"
   $9 = $i; //@line 4021 "../sokol\sokol_gfx.h"
   $arrayidx4 = (($colors3) + (($9*20)|0)|0); //@line 4021 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx4>>2] = 1; //@line 4021 "../sokol\sokol_gfx.h"
   $10 = $to$addr; //@line 4022 "../sokol\sokol_gfx.h"
   $colors6 = ((($10)) + 4|0); //@line 4022 "../sokol\sokol_gfx.h"
   $11 = $i; //@line 4022 "../sokol\sokol_gfx.h"
   $arrayidx7 = (($colors6) + (($11*20)|0)|0); //@line 4022 "../sokol\sokol_gfx.h"
   $val = ((($arrayidx7)) + 4|0); //@line 4022 "../sokol\sokol_gfx.h"
   HEAPF32[$val>>2] = 0.5; //@line 4022 "../sokol\sokol_gfx.h"
   $12 = $to$addr; //@line 4023 "../sokol\sokol_gfx.h"
   $colors9 = ((($12)) + 4|0); //@line 4023 "../sokol\sokol_gfx.h"
   $13 = $i; //@line 4023 "../sokol\sokol_gfx.h"
   $arrayidx10 = (($colors9) + (($13*20)|0)|0); //@line 4023 "../sokol\sokol_gfx.h"
   $val11 = ((($arrayidx10)) + 4|0); //@line 4023 "../sokol\sokol_gfx.h"
   $arrayidx12 = ((($val11)) + 4|0); //@line 4023 "../sokol\sokol_gfx.h"
   HEAPF32[$arrayidx12>>2] = 0.5; //@line 4023 "../sokol\sokol_gfx.h"
   $14 = $to$addr; //@line 4024 "../sokol\sokol_gfx.h"
   $colors13 = ((($14)) + 4|0); //@line 4024 "../sokol\sokol_gfx.h"
   $15 = $i; //@line 4024 "../sokol\sokol_gfx.h"
   $arrayidx14 = (($colors13) + (($15*20)|0)|0); //@line 4024 "../sokol\sokol_gfx.h"
   $val15 = ((($arrayidx14)) + 4|0); //@line 4024 "../sokol\sokol_gfx.h"
   $arrayidx16 = ((($val15)) + 8|0); //@line 4024 "../sokol\sokol_gfx.h"
   HEAPF32[$arrayidx16>>2] = 0.5; //@line 4024 "../sokol\sokol_gfx.h"
   $16 = $to$addr; //@line 4025 "../sokol\sokol_gfx.h"
   $colors17 = ((($16)) + 4|0); //@line 4025 "../sokol\sokol_gfx.h"
   $17 = $i; //@line 4025 "../sokol\sokol_gfx.h"
   $arrayidx18 = (($colors17) + (($17*20)|0)|0); //@line 4025 "../sokol\sokol_gfx.h"
   $val19 = ((($arrayidx18)) + 4|0); //@line 4025 "../sokol\sokol_gfx.h"
   $arrayidx20 = ((($val19)) + 12|0); //@line 4025 "../sokol\sokol_gfx.h"
   HEAPF32[$arrayidx20>>2] = 1.0; //@line 4025 "../sokol\sokol_gfx.h"
  }
  $18 = $i; //@line 4019 "../sokol\sokol_gfx.h"
  $inc = (($18) + 1)|0; //@line 4019 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 4019 "../sokol\sokol_gfx.h"
 }
 $depth = ((($5)) + 84|0); //@line 4028 "../sokol\sokol_gfx.h"
 $19 = HEAP32[$depth>>2]|0; //@line 4028 "../sokol\sokol_gfx.h"
 $cmp22 = ($19|0)==(0); //@line 4028 "../sokol\sokol_gfx.h"
 if ($cmp22) {
  $20 = $to$addr; //@line 4029 "../sokol\sokol_gfx.h"
  $depth24 = ((($20)) + 84|0); //@line 4029 "../sokol\sokol_gfx.h"
  HEAP32[$depth24>>2] = 1; //@line 4029 "../sokol\sokol_gfx.h"
  $21 = $to$addr; //@line 4030 "../sokol\sokol_gfx.h"
  $depth26 = ((($21)) + 84|0); //@line 4030 "../sokol\sokol_gfx.h"
  $val27 = ((($depth26)) + 4|0); //@line 4030 "../sokol\sokol_gfx.h"
  HEAPF32[$val27>>2] = 1.0; //@line 4030 "../sokol\sokol_gfx.h"
 }
 $22 = $to$addr; //@line 4032 "../sokol\sokol_gfx.h"
 $stencil = ((($22)) + 92|0); //@line 4032 "../sokol\sokol_gfx.h"
 $23 = HEAP32[$stencil>>2]|0; //@line 4032 "../sokol\sokol_gfx.h"
 $cmp30 = ($23|0)==(0); //@line 4032 "../sokol\sokol_gfx.h"
 if (!($cmp30)) {
  STACKTOP = sp;return; //@line 4036 "../sokol\sokol_gfx.h"
 }
 $24 = $to$addr; //@line 4033 "../sokol\sokol_gfx.h"
 $stencil32 = ((($24)) + 92|0); //@line 4033 "../sokol\sokol_gfx.h"
 HEAP32[$stencil32>>2] = 1; //@line 4033 "../sokol\sokol_gfx.h"
 $25 = $to$addr; //@line 4034 "../sokol\sokol_gfx.h"
 $stencil34 = ((($25)) + 92|0); //@line 4034 "../sokol\sokol_gfx.h"
 $val35 = ((($stencil34)) + 4|0); //@line 4034 "../sokol\sokol_gfx.h"
 HEAP8[$val35>>0] = 0; //@line 4034 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 4036 "../sokol\sokol_gfx.h"
}
function __sg_begin_pass($pass,$action,$w,$h) {
 $pass = $pass|0;
 $action = $action|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $action$addr = 0, $h$addr = 0, $pass$addr = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $action$addr = $action;
 $w$addr = $w;
 $h$addr = $h;
 $0 = $pass$addr; //@line 12368 "../sokol\sokol_gfx.h"
 $1 = $action$addr; //@line 12368 "../sokol\sokol_gfx.h"
 $2 = $w$addr; //@line 12368 "../sokol\sokol_gfx.h"
 $3 = $h$addr; //@line 12368 "../sokol\sokol_gfx.h"
 __sg_wgpu_begin_pass($0,$1,$2,$3); //@line 12368 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12374 "../sokol\sokol_gfx.h"
}
function __sg_pass_color_image($pass,$index) {
 $pass = $pass|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $call = 0, $index$addr = 0, $pass$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $index$addr = $index;
 $0 = $pass$addr; //@line 12336 "../sokol\sokol_gfx.h"
 $1 = $index$addr; //@line 12336 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_pass_color_image($0,$1)|0); //@line 12336 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 12336 "../sokol\sokol_gfx.h"
}
function _sg_apply_pipeline($pip_id) {
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call4 = 0, $cmn = 0, $cmp = 0, $cmp14 = 0, $frombool = 0;
 var $pip = 0, $pip_id$byval_copy = 0, $shader = 0, $shader10 = 0, $state = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip_id$byval_copy = sp + 4|0;
 $0 = HEAP8[30192]|0; //@line 14454 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14454 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14454,(7447|0)); //@line 14454 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14454 "../sokol\sokol_gfx.h"
 }
 HEAP8[(30357)>>0] = 0; //@line 14455 "../sokol\sokol_gfx.h"
 ;HEAP32[$pip_id$byval_copy>>2]=HEAP32[$pip_id>>2]|0; //@line 14456 "../sokol\sokol_gfx.h"
 $call = (__sg_validate_apply_pipeline($pip_id$byval_copy)|0); //@line 14456 "../sokol\sokol_gfx.h"
 if (!($call)) {
  HEAP8[(30358)>>0] = 0; //@line 14457 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 14472 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP8[(30356)>>0]|0; //@line 14461 "../sokol\sokol_gfx.h"
 $tobool1 = $1&1; //@line 14461 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  STACKTOP = sp;return; //@line 14472 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[(30352)>>2]=HEAP32[$pip_id>>2]|0; //@line 14465 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$pip_id>>2]|0; //@line 14466 "../sokol\sokol_gfx.h"
 $call4 = (__sg_lookup_pipeline((30364),$2)|0); //@line 14466 "../sokol\sokol_gfx.h"
 $pip = $call4; //@line 14466 "../sokol\sokol_gfx.h"
 $3 = $pip; //@line 14467 "../sokol\sokol_gfx.h"
 $tobool5 = ($3|0)!=(0|0); //@line 14467 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((7465|0),(6868|0),14467,(7447|0)); //@line 14467 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14467 "../sokol\sokol_gfx.h"
 }
 $4 = $pip; //@line 14468 "../sokol\sokol_gfx.h"
 $state = ((($4)) + 8|0); //@line 14468 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$state>>2]|0; //@line 14468 "../sokol\sokol_gfx.h"
 $cmp = (2)==($5|0); //@line 14468 "../sokol\sokol_gfx.h"
 $frombool = $cmp&1; //@line 14468 "../sokol\sokol_gfx.h"
 HEAP8[(30358)>>0] = $frombool; //@line 14468 "../sokol\sokol_gfx.h"
 $6 = $pip; //@line 14469 "../sokol\sokol_gfx.h"
 $shader = ((($6)) + 72|0); //@line 14469 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$shader>>2]|0; //@line 14469 "../sokol\sokol_gfx.h"
 $tobool9 = ($7|0)!=(0|0); //@line 14469 "../sokol\sokol_gfx.h"
 if (!($tobool9)) {
  ___assert_fail((7469|0),(6868|0),14469,(7447|0)); //@line 14469 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14469 "../sokol\sokol_gfx.h"
 }
 $8 = $pip; //@line 14469 "../sokol\sokol_gfx.h"
 $shader10 = ((($8)) + 72|0); //@line 14469 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$shader10>>2]|0; //@line 14469 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$9>>2]|0; //@line 14469 "../sokol\sokol_gfx.h"
 $11 = $pip; //@line 14469 "../sokol\sokol_gfx.h"
 $cmn = ((($11)) + 12|0); //@line 14469 "../sokol\sokol_gfx.h"
 $12 = HEAP32[$cmn>>2]|0; //@line 14469 "../sokol\sokol_gfx.h"
 $cmp14 = ($10|0)==($12|0); //@line 14469 "../sokol\sokol_gfx.h"
 if (!($cmp14)) {
  ___assert_fail((7469|0),(6868|0),14469,(7447|0)); //@line 14469 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14469 "../sokol\sokol_gfx.h"
 }
 $13 = $pip; //@line 14470 "../sokol\sokol_gfx.h"
 __sg_apply_pipeline($13); //@line 14470 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 14472 "../sokol\sokol_gfx.h"
}
function __sg_validate_apply_pipeline($pip_id) {
 $pip_id = $pip_id|0;
 var $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $att_dsimg = 0, $att_img = 0, $call = 0, $call15 = 0, $call18 = 0, $call29 = 0, $call3 = 0, $call3$expand_i1_val = 0, $call54 = 0, $call54$expand_i1_val = 0;
 var $cmn = 0, $cmn19 = 0, $cmn20 = 0, $cmn22 = 0, $cmn23 = 0, $cmn25 = 0, $cmn26 = 0, $cmn32 = 0, $cmn33 = 0, $cmn41 = 0, $cmn44 = 0, $cmn47 = 0, $cmn50 = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp2 = 0, $cmp21 = 0, $cmp24 = 0, $cmp28 = 0;
 var $cmp35 = 0, $cmp38 = 0, $cmp4 = 0, $cmp43 = 0, $cmp46 = 0, $cmp49 = 0, $cmp52 = 0, $color_attachment_count = 0, $color_attachment_count42 = 0, $color_format = 0, $color_format45 = 0, $depth_format = 0, $depth_format48 = 0, $pass = 0, $pip = 0, $pixel_format = 0, $pixel_format34 = 0, $retval = 0, $sample_count = 0, $sample_count27 = 0;
 var $sample_count51 = 0, $shader = 0, $shader11 = 0, $shader6 = 0, $state = 0, $state13 = 0, $tobool = 0, $tobool16 = 0, $tobool30 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $retval = sp + 16|0;
 __sg_validate_begin(); //@line 13383 "../sokol\sokol_gfx.h"
 $0 = HEAP32[$pip_id>>2]|0; //@line 13385 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13385 "../sokol\sokol_gfx.h"
 __sg_validate($cmp,53); //@line 13385 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$pip_id>>2]|0; //@line 13386 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_pipeline((30364),$1)|0); //@line 13386 "../sokol\sokol_gfx.h"
 $pip = $call; //@line 13386 "../sokol\sokol_gfx.h"
 $2 = $pip; //@line 13387 "../sokol\sokol_gfx.h"
 $cmp2 = ($2|0)!=(0|0); //@line 13387 "../sokol\sokol_gfx.h"
 __sg_validate($cmp2,54); //@line 13387 "../sokol\sokol_gfx.h"
 $3 = $pip; //@line 13388 "../sokol\sokol_gfx.h"
 $tobool = ($3|0)!=(0|0); //@line 13388 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  $call3 = (__sg_validate_end()|0); //@line 13389 "../sokol\sokol_gfx.h"
  $call3$expand_i1_val = $call3&1; //@line 13389 "../sokol\sokol_gfx.h"
  HEAP8[$retval>>0] = $call3$expand_i1_val; //@line 13389 "../sokol\sokol_gfx.h"
  $$pre_trunc = HEAP8[$retval>>0]|0; //@line 13421 "../sokol\sokol_gfx.h"
  $48 = $$pre_trunc&1; //@line 13421 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($48|0); //@line 13421 "../sokol\sokol_gfx.h"
 }
 $4 = $pip; //@line 13391 "../sokol\sokol_gfx.h"
 $state = ((($4)) + 8|0); //@line 13391 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$state>>2]|0; //@line 13391 "../sokol\sokol_gfx.h"
 $cmp4 = ($5|0)==(2); //@line 13391 "../sokol\sokol_gfx.h"
 __sg_validate($cmp4,55); //@line 13391 "../sokol\sokol_gfx.h"
 $6 = $pip; //@line 13393 "../sokol\sokol_gfx.h"
 $shader = ((($6)) + 72|0); //@line 13393 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$shader>>2]|0; //@line 13393 "../sokol\sokol_gfx.h"
 $tobool5 = ($7|0)!=(0|0); //@line 13393 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((18883|0),(6868|0),13393,(18895|0)); //@line 13393 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13393 "../sokol\sokol_gfx.h"
 }
 $8 = $pip; //@line 13394 "../sokol\sokol_gfx.h"
 $shader6 = ((($8)) + 72|0); //@line 13394 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$shader6>>2]|0; //@line 13394 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$9>>2]|0; //@line 13394 "../sokol\sokol_gfx.h"
 $11 = $pip; //@line 13394 "../sokol\sokol_gfx.h"
 $cmn = ((($11)) + 12|0); //@line 13394 "../sokol\sokol_gfx.h"
 $12 = HEAP32[$cmn>>2]|0; //@line 13394 "../sokol\sokol_gfx.h"
 $cmp10 = ($10|0)==($12|0); //@line 13394 "../sokol\sokol_gfx.h"
 __sg_validate($cmp10,56); //@line 13394 "../sokol\sokol_gfx.h"
 $13 = $pip; //@line 13395 "../sokol\sokol_gfx.h"
 $shader11 = ((($13)) + 72|0); //@line 13395 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$shader11>>2]|0; //@line 13395 "../sokol\sokol_gfx.h"
 $state13 = ((($14)) + 8|0); //@line 13395 "../sokol\sokol_gfx.h"
 $15 = HEAP32[$state13>>2]|0; //@line 13395 "../sokol\sokol_gfx.h"
 $cmp14 = ($15|0)==(2); //@line 13395 "../sokol\sokol_gfx.h"
 __sg_validate($cmp14,57); //@line 13395 "../sokol\sokol_gfx.h"
 $16 = HEAP32[(30348)>>2]|0; //@line 13397 "../sokol\sokol_gfx.h"
 $call15 = (__sg_lookup_pass((30364),$16)|0); //@line 13397 "../sokol\sokol_gfx.h"
 $pass = $call15; //@line 13397 "../sokol\sokol_gfx.h"
 $17 = $pass; //@line 13398 "../sokol\sokol_gfx.h"
 $tobool16 = ($17|0)!=(0|0); //@line 13398 "../sokol\sokol_gfx.h"
 do {
  if ($tobool16) {
   $18 = $pass; //@line 13400 "../sokol\sokol_gfx.h"
   $call18 = (__sg_pass_color_image($18,0)|0); //@line 13400 "../sokol\sokol_gfx.h"
   $att_img = $call18; //@line 13400 "../sokol\sokol_gfx.h"
   $19 = $pip; //@line 13401 "../sokol\sokol_gfx.h"
   $cmn19 = ((($19)) + 12|0); //@line 13401 "../sokol\sokol_gfx.h"
   $color_attachment_count = ((($cmn19)) + 16|0); //@line 13401 "../sokol\sokol_gfx.h"
   $20 = HEAP32[$color_attachment_count>>2]|0; //@line 13401 "../sokol\sokol_gfx.h"
   $21 = $pass; //@line 13401 "../sokol\sokol_gfx.h"
   $cmn20 = ((($21)) + 12|0); //@line 13401 "../sokol\sokol_gfx.h"
   $22 = HEAP32[$cmn20>>2]|0; //@line 13401 "../sokol\sokol_gfx.h"
   $cmp21 = ($20|0)==($22|0); //@line 13401 "../sokol\sokol_gfx.h"
   __sg_validate($cmp21,58); //@line 13401 "../sokol\sokol_gfx.h"
   $23 = $pip; //@line 13402 "../sokol\sokol_gfx.h"
   $cmn22 = ((($23)) + 12|0); //@line 13402 "../sokol\sokol_gfx.h"
   $color_format = ((($cmn22)) + 20|0); //@line 13402 "../sokol\sokol_gfx.h"
   $24 = HEAP32[$color_format>>2]|0; //@line 13402 "../sokol\sokol_gfx.h"
   $25 = $att_img; //@line 13402 "../sokol\sokol_gfx.h"
   $cmn23 = ((($25)) + 12|0); //@line 13402 "../sokol\sokol_gfx.h"
   $pixel_format = ((($cmn23)) + 28|0); //@line 13402 "../sokol\sokol_gfx.h"
   $26 = HEAP32[$pixel_format>>2]|0; //@line 13402 "../sokol\sokol_gfx.h"
   $cmp24 = ($24|0)==($26|0); //@line 13402 "../sokol\sokol_gfx.h"
   __sg_validate($cmp24,59); //@line 13402 "../sokol\sokol_gfx.h"
   $27 = $pip; //@line 13403 "../sokol\sokol_gfx.h"
   $cmn25 = ((($27)) + 12|0); //@line 13403 "../sokol\sokol_gfx.h"
   $sample_count = ((($cmn25)) + 28|0); //@line 13403 "../sokol\sokol_gfx.h"
   $28 = HEAP32[$sample_count>>2]|0; //@line 13403 "../sokol\sokol_gfx.h"
   $29 = $att_img; //@line 13403 "../sokol\sokol_gfx.h"
   $cmn26 = ((($29)) + 12|0); //@line 13403 "../sokol\sokol_gfx.h"
   $sample_count27 = ((($cmn26)) + 32|0); //@line 13403 "../sokol\sokol_gfx.h"
   $30 = HEAP32[$sample_count27>>2]|0; //@line 13403 "../sokol\sokol_gfx.h"
   $cmp28 = ($28|0)==($30|0); //@line 13403 "../sokol\sokol_gfx.h"
   __sg_validate($cmp28,61); //@line 13403 "../sokol\sokol_gfx.h"
   $31 = $pass; //@line 13404 "../sokol\sokol_gfx.h"
   $call29 = (__sg_pass_ds_image($31)|0); //@line 13404 "../sokol\sokol_gfx.h"
   $att_dsimg = $call29; //@line 13404 "../sokol\sokol_gfx.h"
   $32 = $att_dsimg; //@line 13405 "../sokol\sokol_gfx.h"
   $tobool30 = ($32|0)!=(0|0); //@line 13405 "../sokol\sokol_gfx.h"
   $33 = $pip;
   $cmn32 = ((($33)) + 12|0);
   $depth_format = ((($cmn32)) + 24|0);
   $34 = HEAP32[$depth_format>>2]|0;
   if ($tobool30) {
    $35 = $att_dsimg; //@line 13406 "../sokol\sokol_gfx.h"
    $cmn33 = ((($35)) + 12|0); //@line 13406 "../sokol\sokol_gfx.h"
    $pixel_format34 = ((($cmn33)) + 28|0); //@line 13406 "../sokol\sokol_gfx.h"
    $36 = HEAP32[$pixel_format34>>2]|0; //@line 13406 "../sokol\sokol_gfx.h"
    $cmp35 = ($34|0)==($36|0); //@line 13406 "../sokol\sokol_gfx.h"
    __sg_validate($cmp35,60); //@line 13406 "../sokol\sokol_gfx.h"
    break;
   } else {
    $cmp38 = ($34|0)==(1); //@line 13409 "../sokol\sokol_gfx.h"
    __sg_validate($cmp38,60); //@line 13409 "../sokol\sokol_gfx.h"
    break;
   }
  } else {
   $37 = $pip; //@line 13414 "../sokol\sokol_gfx.h"
   $cmn41 = ((($37)) + 12|0); //@line 13414 "../sokol\sokol_gfx.h"
   $color_attachment_count42 = ((($cmn41)) + 16|0); //@line 13414 "../sokol\sokol_gfx.h"
   $38 = HEAP32[$color_attachment_count42>>2]|0; //@line 13414 "../sokol\sokol_gfx.h"
   $cmp43 = ($38|0)==(1); //@line 13414 "../sokol\sokol_gfx.h"
   __sg_validate($cmp43,58); //@line 13414 "../sokol\sokol_gfx.h"
   $39 = $pip; //@line 13415 "../sokol\sokol_gfx.h"
   $cmn44 = ((($39)) + 12|0); //@line 13415 "../sokol\sokol_gfx.h"
   $color_format45 = ((($cmn44)) + 20|0); //@line 13415 "../sokol\sokol_gfx.h"
   $40 = HEAP32[$color_format45>>2]|0; //@line 13415 "../sokol\sokol_gfx.h"
   $41 = HEAP32[(30236)>>2]|0; //@line 13415 "../sokol\sokol_gfx.h"
   $cmp46 = ($40|0)==($41|0); //@line 13415 "../sokol\sokol_gfx.h"
   __sg_validate($cmp46,59); //@line 13415 "../sokol\sokol_gfx.h"
   $42 = $pip; //@line 13416 "../sokol\sokol_gfx.h"
   $cmn47 = ((($42)) + 12|0); //@line 13416 "../sokol\sokol_gfx.h"
   $depth_format48 = ((($cmn47)) + 24|0); //@line 13416 "../sokol\sokol_gfx.h"
   $43 = HEAP32[$depth_format48>>2]|0; //@line 13416 "../sokol\sokol_gfx.h"
   $44 = HEAP32[(30240)>>2]|0; //@line 13416 "../sokol\sokol_gfx.h"
   $cmp49 = ($43|0)==($44|0); //@line 13416 "../sokol\sokol_gfx.h"
   __sg_validate($cmp49,60); //@line 13416 "../sokol\sokol_gfx.h"
   $45 = $pip; //@line 13417 "../sokol\sokol_gfx.h"
   $cmn50 = ((($45)) + 12|0); //@line 13417 "../sokol\sokol_gfx.h"
   $sample_count51 = ((($cmn50)) + 28|0); //@line 13417 "../sokol\sokol_gfx.h"
   $46 = HEAP32[$sample_count51>>2]|0; //@line 13417 "../sokol\sokol_gfx.h"
   $47 = HEAP32[(30244)>>2]|0; //@line 13417 "../sokol\sokol_gfx.h"
   $cmp52 = ($46|0)==($47|0); //@line 13417 "../sokol\sokol_gfx.h"
   __sg_validate($cmp52,61); //@line 13417 "../sokol\sokol_gfx.h"
  }
 } while(0);
 $call54 = (__sg_validate_end()|0); //@line 13419 "../sokol\sokol_gfx.h"
 $call54$expand_i1_val = $call54&1; //@line 13419 "../sokol\sokol_gfx.h"
 HEAP8[$retval>>0] = $call54$expand_i1_val; //@line 13419 "../sokol\sokol_gfx.h"
 $$pre_trunc = HEAP8[$retval>>0]|0; //@line 13421 "../sokol\sokol_gfx.h"
 $48 = $$pre_trunc&1; //@line 13421 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($48|0); //@line 13421 "../sokol\sokol_gfx.h"
}
function __sg_apply_pipeline($pip) {
 $pip = $pip|0;
 var $0 = 0, $pip$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $0 = $pip$addr; //@line 12432 "../sokol\sokol_gfx.h"
 __sg_wgpu_apply_pipeline($0); //@line 12432 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12438 "../sokol\sokol_gfx.h"
}
function _sg_apply_bindings($bindings) {
 $bindings = $bindings|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $_end_canary = 0, $and = 0, $and132 = 0, $and36 = 0, $and57 = 0, $and67 = 0, $and97 = 0, $append_overflow = 0, $append_overflow61 = 0, $arrayidx = 0, $arrayidx111 = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx120 = 0, $arrayidx125 = 0, $arrayidx18 = 0, $arrayidx21 = 0;
 var $arrayidx22 = 0, $arrayidx27 = 0, $arrayidx32 = 0, $arrayidx76 = 0, $arrayidx81 = 0, $arrayidx84 = 0, $arrayidx85 = 0, $arrayidx90 = 0, $bindings$addr = 0, $call = 0, $call118 = 0, $call20 = 0, $call46 = 0, $call83 = 0, $call9 = 0, $cmn = 0, $cmn60 = 0, $cmp = 0, $cmp108 = 0, $cmp128 = 0;
 var $cmp14 = 0, $cmp28 = 0, $cmp5 = 0, $cmp53 = 0, $cmp73 = 0, $cmp93 = 0, $conv = 0, $conv129 = 0, $conv131 = 0, $conv30 = 0, $conv35 = 0, $conv54 = 0, $conv56 = 0, $conv66 = 0, $conv94 = 0, $conv96 = 0, $frombool = 0, $frombool134 = 0, $frombool38 = 0, $frombool59 = 0;
 var $frombool69 = 0, $frombool99 = 0, $fs_images = 0, $fs_images115 = 0, $fs_imgs = 0, $i = 0, $i106 = 0, $i71 = 0, $ib = 0, $ib_offset = 0, $inc = 0, $inc103 = 0, $inc104 = 0, $inc138 = 0, $inc139 = 0, $inc40 = 0, $index_buffer = 0, $index_buffer44 = 0, $index_buffer_offset = 0, $lnot = 0;
 var $lnot$ext = 0, $lnot$ext64 = 0, $lnot63 = 0, $num_fs_imgs = 0, $num_vbs = 0, $num_vs_imgs = 0, $pip = 0, $state = 0, $state127 = 0, $state52 = 0, $state92 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool113 = 0, $tobool121 = 0, $tobool130 = 0, $tobool133 = 0, $tobool141 = 0, $tobool15 = 0;
 var $tobool23 = 0, $tobool29 = 0, $tobool31 = 0, $tobool33 = 0, $tobool34 = 0, $tobool37 = 0, $tobool42 = 0, $tobool47 = 0, $tobool55 = 0, $tobool58 = 0, $tobool62 = 0, $tobool65 = 0, $tobool68 = 0, $tobool78 = 0, $tobool86 = 0, $tobool95 = 0, $tobool98 = 0, $vb_offsets = 0, $vbs = 0, $vertex_buffer_offsets = 0;
 var $vertex_buffers = 0, $vertex_buffers17 = 0, $vs_images = 0, $vs_images80 = 0, $vs_imgs = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vbs = sp + 96|0;
 $vs_imgs = sp + 48|0;
 $fs_imgs = sp;
 $bindings$addr = $bindings;
 $0 = HEAP8[30192]|0; //@line 14475 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14475 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14475,(7532|0)); //@line 14475 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14475 "../sokol\sokol_gfx.h"
 }
 $1 = $bindings$addr; //@line 14476 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 14476 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((7550|0),(6868|0),14476,(7532|0)); //@line 14476 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14476 "../sokol\sokol_gfx.h"
 }
 $2 = $bindings$addr; //@line 14477 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$2>>2]|0; //@line 14477 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)==(0); //@line 14477 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((7559|0),(6868|0),14477,(7532|0)); //@line 14477 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14477 "../sokol\sokol_gfx.h"
 }
 $4 = $bindings$addr; //@line 14477 "../sokol\sokol_gfx.h"
 $_end_canary = ((($4)) + 172|0); //@line 14477 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$_end_canary>>2]|0; //@line 14477 "../sokol\sokol_gfx.h"
 $cmp5 = ($5|0)==(0); //@line 14477 "../sokol\sokol_gfx.h"
 if (!($cmp5)) {
  ___assert_fail((7559|0),(6868|0),14477,(7532|0)); //@line 14477 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14477 "../sokol\sokol_gfx.h"
 }
 $6 = $bindings$addr; //@line 14478 "../sokol\sokol_gfx.h"
 $call = (__sg_validate_apply_bindings($6)|0); //@line 14478 "../sokol\sokol_gfx.h"
 if (!($call)) {
  HEAP8[(30358)>>0] = 0; //@line 14479 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 14544 "../sokol\sokol_gfx.h"
 }
 HEAP8[(30357)>>0] = 1; //@line 14483 "../sokol\sokol_gfx.h"
 $7 = HEAP32[(30352)>>2]|0; //@line 14485 "../sokol\sokol_gfx.h"
 $call9 = (__sg_lookup_pipeline((30364),$7)|0); //@line 14485 "../sokol\sokol_gfx.h"
 $pip = $call9; //@line 14485 "../sokol\sokol_gfx.h"
 $8 = $pip; //@line 14486 "../sokol\sokol_gfx.h"
 $tobool10 = ($8|0)!=(0|0); //@line 14486 "../sokol\sokol_gfx.h"
 if (!($tobool10)) {
  ___assert_fail((7465|0),(6868|0),14486,(7532|0)); //@line 14486 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14486 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$vbs>>2]=0|0;HEAP32[$vbs+4>>2]=0|0;HEAP32[$vbs+8>>2]=0|0;HEAP32[$vbs+12>>2]=0|0;HEAP32[$vbs+16>>2]=0|0;HEAP32[$vbs+20>>2]=0|0;HEAP32[$vbs+24>>2]=0|0;HEAP32[$vbs+28>>2]=0|0; //@line 14488 "../sokol\sokol_gfx.h"
 $num_vbs = 0; //@line 14489 "../sokol\sokol_gfx.h"
 $i = 0; //@line 14490 "../sokol\sokol_gfx.h"
 while(1) {
  $9 = $i; //@line 14490 "../sokol\sokol_gfx.h"
  $cmp14 = ($9|0)<(8); //@line 14490 "../sokol\sokol_gfx.h"
  if (!($cmp14)) {
   break;
  }
  $10 = $bindings$addr; //@line 14491 "../sokol\sokol_gfx.h"
  $vertex_buffers = ((($10)) + 4|0); //@line 14491 "../sokol\sokol_gfx.h"
  $11 = $i; //@line 14491 "../sokol\sokol_gfx.h"
  $arrayidx = (($vertex_buffers) + ($11<<2)|0); //@line 14491 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$arrayidx>>2]|0; //@line 14491 "../sokol\sokol_gfx.h"
  $tobool15 = ($12|0)!=(0); //@line 14491 "../sokol\sokol_gfx.h"
  if (!($tobool15)) {
   break;
  }
  $13 = $bindings$addr; //@line 14492 "../sokol\sokol_gfx.h"
  $vertex_buffers17 = ((($13)) + 4|0); //@line 14492 "../sokol\sokol_gfx.h"
  $14 = $i; //@line 14492 "../sokol\sokol_gfx.h"
  $arrayidx18 = (($vertex_buffers17) + ($14<<2)|0); //@line 14492 "../sokol\sokol_gfx.h"
  $15 = HEAP32[$arrayidx18>>2]|0; //@line 14492 "../sokol\sokol_gfx.h"
  $call20 = (__sg_lookup_buffer((30364),$15)|0); //@line 14492 "../sokol\sokol_gfx.h"
  $16 = $i; //@line 14492 "../sokol\sokol_gfx.h"
  $arrayidx21 = (($vbs) + ($16<<2)|0); //@line 14492 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx21>>2] = $call20; //@line 14492 "../sokol\sokol_gfx.h"
  $17 = $i; //@line 14493 "../sokol\sokol_gfx.h"
  $arrayidx22 = (($vbs) + ($17<<2)|0); //@line 14493 "../sokol\sokol_gfx.h"
  $18 = HEAP32[$arrayidx22>>2]|0; //@line 14493 "../sokol\sokol_gfx.h"
  $tobool23 = ($18|0)!=(0|0); //@line 14493 "../sokol\sokol_gfx.h"
  if (!($tobool23)) {
   label = 16;
   break;
  }
  $19 = $i; //@line 14494 "../sokol\sokol_gfx.h"
  $arrayidx27 = (($vbs) + ($19<<2)|0); //@line 14494 "../sokol\sokol_gfx.h"
  $20 = HEAP32[$arrayidx27>>2]|0; //@line 14494 "../sokol\sokol_gfx.h"
  $state = ((($20)) + 8|0); //@line 14494 "../sokol\sokol_gfx.h"
  $21 = HEAP32[$state>>2]|0; //@line 14494 "../sokol\sokol_gfx.h"
  $cmp28 = (2)==($21|0); //@line 14494 "../sokol\sokol_gfx.h"
  $conv = $cmp28&1; //@line 14494 "../sokol\sokol_gfx.h"
  $22 = HEAP8[(30358)>>0]|0; //@line 14494 "../sokol\sokol_gfx.h"
  $tobool29 = $22&1; //@line 14494 "../sokol\sokol_gfx.h"
  $conv30 = $tobool29&1; //@line 14494 "../sokol\sokol_gfx.h"
  $and = $conv30 & $conv; //@line 14494 "../sokol\sokol_gfx.h"
  $tobool31 = ($and|0)!=(0); //@line 14494 "../sokol\sokol_gfx.h"
  $frombool = $tobool31&1; //@line 14494 "../sokol\sokol_gfx.h"
  HEAP8[(30358)>>0] = $frombool; //@line 14494 "../sokol\sokol_gfx.h"
  $23 = $i; //@line 14495 "../sokol\sokol_gfx.h"
  $arrayidx32 = (($vbs) + ($23<<2)|0); //@line 14495 "../sokol\sokol_gfx.h"
  $24 = HEAP32[$arrayidx32>>2]|0; //@line 14495 "../sokol\sokol_gfx.h"
  $cmn = ((($24)) + 12|0); //@line 14495 "../sokol\sokol_gfx.h"
  $append_overflow = ((($cmn)) + 8|0); //@line 14495 "../sokol\sokol_gfx.h"
  $25 = HEAP8[$append_overflow>>0]|0; //@line 14495 "../sokol\sokol_gfx.h"
  $tobool33 = $25&1; //@line 14495 "../sokol\sokol_gfx.h"
  $lnot = $tobool33 ^ 1; //@line 14495 "../sokol\sokol_gfx.h"
  $lnot$ext = $lnot&1; //@line 14495 "../sokol\sokol_gfx.h"
  $26 = HEAP8[(30358)>>0]|0; //@line 14495 "../sokol\sokol_gfx.h"
  $tobool34 = $26&1; //@line 14495 "../sokol\sokol_gfx.h"
  $conv35 = $tobool34&1; //@line 14495 "../sokol\sokol_gfx.h"
  $and36 = $conv35 & $lnot$ext; //@line 14495 "../sokol\sokol_gfx.h"
  $tobool37 = ($and36|0)!=(0); //@line 14495 "../sokol\sokol_gfx.h"
  $frombool38 = $tobool37&1; //@line 14495 "../sokol\sokol_gfx.h"
  HEAP8[(30358)>>0] = $frombool38; //@line 14495 "../sokol\sokol_gfx.h"
  $27 = $i; //@line 14490 "../sokol\sokol_gfx.h"
  $inc = (($27) + 1)|0; //@line 14490 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 14490 "../sokol\sokol_gfx.h"
  $28 = $num_vbs; //@line 14490 "../sokol\sokol_gfx.h"
  $inc40 = (($28) + 1)|0; //@line 14490 "../sokol\sokol_gfx.h"
  $num_vbs = $inc40; //@line 14490 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 16) {
  ___assert_fail((7620|0),(6868|0),14493,(7532|0)); //@line 14493 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14493 "../sokol\sokol_gfx.h"
 }
 $ib = 0; //@line 14502 "../sokol\sokol_gfx.h"
 $29 = $bindings$addr; //@line 14503 "../sokol\sokol_gfx.h"
 $index_buffer = ((($29)) + 68|0); //@line 14503 "../sokol\sokol_gfx.h"
 $30 = HEAP32[$index_buffer>>2]|0; //@line 14503 "../sokol\sokol_gfx.h"
 $tobool42 = ($30|0)!=(0); //@line 14503 "../sokol\sokol_gfx.h"
 do {
  if ($tobool42) {
   $31 = $bindings$addr; //@line 14504 "../sokol\sokol_gfx.h"
   $index_buffer44 = ((($31)) + 68|0); //@line 14504 "../sokol\sokol_gfx.h"
   $32 = HEAP32[$index_buffer44>>2]|0; //@line 14504 "../sokol\sokol_gfx.h"
   $call46 = (__sg_lookup_buffer((30364),$32)|0); //@line 14504 "../sokol\sokol_gfx.h"
   $ib = $call46; //@line 14504 "../sokol\sokol_gfx.h"
   $33 = $ib; //@line 14505 "../sokol\sokol_gfx.h"
   $tobool47 = ($33|0)!=(0|0); //@line 14505 "../sokol\sokol_gfx.h"
   if ($tobool47) {
    $34 = $ib; //@line 14506 "../sokol\sokol_gfx.h"
    $state52 = ((($34)) + 8|0); //@line 14506 "../sokol\sokol_gfx.h"
    $35 = HEAP32[$state52>>2]|0; //@line 14506 "../sokol\sokol_gfx.h"
    $cmp53 = (2)==($35|0); //@line 14506 "../sokol\sokol_gfx.h"
    $conv54 = $cmp53&1; //@line 14506 "../sokol\sokol_gfx.h"
    $36 = HEAP8[(30358)>>0]|0; //@line 14506 "../sokol\sokol_gfx.h"
    $tobool55 = $36&1; //@line 14506 "../sokol\sokol_gfx.h"
    $conv56 = $tobool55&1; //@line 14506 "../sokol\sokol_gfx.h"
    $and57 = $conv56 & $conv54; //@line 14506 "../sokol\sokol_gfx.h"
    $tobool58 = ($and57|0)!=(0); //@line 14506 "../sokol\sokol_gfx.h"
    $frombool59 = $tobool58&1; //@line 14506 "../sokol\sokol_gfx.h"
    HEAP8[(30358)>>0] = $frombool59; //@line 14506 "../sokol\sokol_gfx.h"
    $37 = $ib; //@line 14507 "../sokol\sokol_gfx.h"
    $cmn60 = ((($37)) + 12|0); //@line 14507 "../sokol\sokol_gfx.h"
    $append_overflow61 = ((($cmn60)) + 8|0); //@line 14507 "../sokol\sokol_gfx.h"
    $38 = HEAP8[$append_overflow61>>0]|0; //@line 14507 "../sokol\sokol_gfx.h"
    $tobool62 = $38&1; //@line 14507 "../sokol\sokol_gfx.h"
    $lnot63 = $tobool62 ^ 1; //@line 14507 "../sokol\sokol_gfx.h"
    $lnot$ext64 = $lnot63&1; //@line 14507 "../sokol\sokol_gfx.h"
    $39 = HEAP8[(30358)>>0]|0; //@line 14507 "../sokol\sokol_gfx.h"
    $tobool65 = $39&1; //@line 14507 "../sokol\sokol_gfx.h"
    $conv66 = $tobool65&1; //@line 14507 "../sokol\sokol_gfx.h"
    $and67 = $conv66 & $lnot$ext64; //@line 14507 "../sokol\sokol_gfx.h"
    $tobool68 = ($and67|0)!=(0); //@line 14507 "../sokol\sokol_gfx.h"
    $frombool69 = $tobool68&1; //@line 14507 "../sokol\sokol_gfx.h"
    HEAP8[(30358)>>0] = $frombool69; //@line 14507 "../sokol\sokol_gfx.h"
    break;
   } else {
    ___assert_fail((7627|0),(6868|0),14505,(7532|0)); //@line 14505 "../sokol\sokol_gfx.h"
    // unreachable; //@line 14505 "../sokol\sokol_gfx.h"
   }
  }
 } while(0);
 dest=$vs_imgs; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 14510 "../sokol\sokol_gfx.h"
 $num_vs_imgs = 0; //@line 14511 "../sokol\sokol_gfx.h"
 $i71 = 0; //@line 14512 "../sokol\sokol_gfx.h"
 while(1) {
  $40 = $i71; //@line 14512 "../sokol\sokol_gfx.h"
  $cmp73 = ($40|0)<(12); //@line 14512 "../sokol\sokol_gfx.h"
  if (!($cmp73)) {
   break;
  }
  $41 = $bindings$addr; //@line 14513 "../sokol\sokol_gfx.h"
  $vs_images = ((($41)) + 76|0); //@line 14513 "../sokol\sokol_gfx.h"
  $42 = $i71; //@line 14513 "../sokol\sokol_gfx.h"
  $arrayidx76 = (($vs_images) + ($42<<2)|0); //@line 14513 "../sokol\sokol_gfx.h"
  $43 = HEAP32[$arrayidx76>>2]|0; //@line 14513 "../sokol\sokol_gfx.h"
  $tobool78 = ($43|0)!=(0); //@line 14513 "../sokol\sokol_gfx.h"
  if (!($tobool78)) {
   break;
  }
  $44 = $bindings$addr; //@line 14514 "../sokol\sokol_gfx.h"
  $vs_images80 = ((($44)) + 76|0); //@line 14514 "../sokol\sokol_gfx.h"
  $45 = $i71; //@line 14514 "../sokol\sokol_gfx.h"
  $arrayidx81 = (($vs_images80) + ($45<<2)|0); //@line 14514 "../sokol\sokol_gfx.h"
  $46 = HEAP32[$arrayidx81>>2]|0; //@line 14514 "../sokol\sokol_gfx.h"
  $call83 = (__sg_lookup_image((30364),$46)|0); //@line 14514 "../sokol\sokol_gfx.h"
  $47 = $i71; //@line 14514 "../sokol\sokol_gfx.h"
  $arrayidx84 = (($vs_imgs) + ($47<<2)|0); //@line 14514 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx84>>2] = $call83; //@line 14514 "../sokol\sokol_gfx.h"
  $48 = $i71; //@line 14515 "../sokol\sokol_gfx.h"
  $arrayidx85 = (($vs_imgs) + ($48<<2)|0); //@line 14515 "../sokol\sokol_gfx.h"
  $49 = HEAP32[$arrayidx85>>2]|0; //@line 14515 "../sokol\sokol_gfx.h"
  $tobool86 = ($49|0)!=(0|0); //@line 14515 "../sokol\sokol_gfx.h"
  if (!($tobool86)) {
   label = 26;
   break;
  }
  $50 = $i71; //@line 14516 "../sokol\sokol_gfx.h"
  $arrayidx90 = (($vs_imgs) + ($50<<2)|0); //@line 14516 "../sokol\sokol_gfx.h"
  $51 = HEAP32[$arrayidx90>>2]|0; //@line 14516 "../sokol\sokol_gfx.h"
  $state92 = ((($51)) + 8|0); //@line 14516 "../sokol\sokol_gfx.h"
  $52 = HEAP32[$state92>>2]|0; //@line 14516 "../sokol\sokol_gfx.h"
  $cmp93 = (2)==($52|0); //@line 14516 "../sokol\sokol_gfx.h"
  $conv94 = $cmp93&1; //@line 14516 "../sokol\sokol_gfx.h"
  $53 = HEAP8[(30358)>>0]|0; //@line 14516 "../sokol\sokol_gfx.h"
  $tobool95 = $53&1; //@line 14516 "../sokol\sokol_gfx.h"
  $conv96 = $tobool95&1; //@line 14516 "../sokol\sokol_gfx.h"
  $and97 = $conv96 & $conv94; //@line 14516 "../sokol\sokol_gfx.h"
  $tobool98 = ($and97|0)!=(0); //@line 14516 "../sokol\sokol_gfx.h"
  $frombool99 = $tobool98&1; //@line 14516 "../sokol\sokol_gfx.h"
  HEAP8[(30358)>>0] = $frombool99; //@line 14516 "../sokol\sokol_gfx.h"
  $54 = $i71; //@line 14512 "../sokol\sokol_gfx.h"
  $inc103 = (($54) + 1)|0; //@line 14512 "../sokol\sokol_gfx.h"
  $i71 = $inc103; //@line 14512 "../sokol\sokol_gfx.h"
  $55 = $num_vs_imgs; //@line 14512 "../sokol\sokol_gfx.h"
  $inc104 = (($55) + 1)|0; //@line 14512 "../sokol\sokol_gfx.h"
  $num_vs_imgs = $inc104; //@line 14512 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 26) {
  ___assert_fail((7630|0),(6868|0),14515,(7532|0)); //@line 14515 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14515 "../sokol\sokol_gfx.h"
 }
 dest=$fs_imgs; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 14523 "../sokol\sokol_gfx.h"
 $num_fs_imgs = 0; //@line 14524 "../sokol\sokol_gfx.h"
 $i106 = 0; //@line 14525 "../sokol\sokol_gfx.h"
 while(1) {
  $56 = $i106; //@line 14525 "../sokol\sokol_gfx.h"
  $cmp108 = ($56|0)<(12); //@line 14525 "../sokol\sokol_gfx.h"
  if (!($cmp108)) {
   break;
  }
  $57 = $bindings$addr; //@line 14526 "../sokol\sokol_gfx.h"
  $fs_images = ((($57)) + 124|0); //@line 14526 "../sokol\sokol_gfx.h"
  $58 = $i106; //@line 14526 "../sokol\sokol_gfx.h"
  $arrayidx111 = (($fs_images) + ($58<<2)|0); //@line 14526 "../sokol\sokol_gfx.h"
  $59 = HEAP32[$arrayidx111>>2]|0; //@line 14526 "../sokol\sokol_gfx.h"
  $tobool113 = ($59|0)!=(0); //@line 14526 "../sokol\sokol_gfx.h"
  if (!($tobool113)) {
   break;
  }
  $60 = $bindings$addr; //@line 14527 "../sokol\sokol_gfx.h"
  $fs_images115 = ((($60)) + 124|0); //@line 14527 "../sokol\sokol_gfx.h"
  $61 = $i106; //@line 14527 "../sokol\sokol_gfx.h"
  $arrayidx116 = (($fs_images115) + ($61<<2)|0); //@line 14527 "../sokol\sokol_gfx.h"
  $62 = HEAP32[$arrayidx116>>2]|0; //@line 14527 "../sokol\sokol_gfx.h"
  $call118 = (__sg_lookup_image((30364),$62)|0); //@line 14527 "../sokol\sokol_gfx.h"
  $63 = $i106; //@line 14527 "../sokol\sokol_gfx.h"
  $arrayidx119 = (($fs_imgs) + ($63<<2)|0); //@line 14527 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx119>>2] = $call118; //@line 14527 "../sokol\sokol_gfx.h"
  $64 = $i106; //@line 14528 "../sokol\sokol_gfx.h"
  $arrayidx120 = (($fs_imgs) + ($64<<2)|0); //@line 14528 "../sokol\sokol_gfx.h"
  $65 = HEAP32[$arrayidx120>>2]|0; //@line 14528 "../sokol\sokol_gfx.h"
  $tobool121 = ($65|0)!=(0|0); //@line 14528 "../sokol\sokol_gfx.h"
  if (!($tobool121)) {
   label = 32;
   break;
  }
  $66 = $i106; //@line 14529 "../sokol\sokol_gfx.h"
  $arrayidx125 = (($fs_imgs) + ($66<<2)|0); //@line 14529 "../sokol\sokol_gfx.h"
  $67 = HEAP32[$arrayidx125>>2]|0; //@line 14529 "../sokol\sokol_gfx.h"
  $state127 = ((($67)) + 8|0); //@line 14529 "../sokol\sokol_gfx.h"
  $68 = HEAP32[$state127>>2]|0; //@line 14529 "../sokol\sokol_gfx.h"
  $cmp128 = (2)==($68|0); //@line 14529 "../sokol\sokol_gfx.h"
  $conv129 = $cmp128&1; //@line 14529 "../sokol\sokol_gfx.h"
  $69 = HEAP8[(30358)>>0]|0; //@line 14529 "../sokol\sokol_gfx.h"
  $tobool130 = $69&1; //@line 14529 "../sokol\sokol_gfx.h"
  $conv131 = $tobool130&1; //@line 14529 "../sokol\sokol_gfx.h"
  $and132 = $conv131 & $conv129; //@line 14529 "../sokol\sokol_gfx.h"
  $tobool133 = ($and132|0)!=(0); //@line 14529 "../sokol\sokol_gfx.h"
  $frombool134 = $tobool133&1; //@line 14529 "../sokol\sokol_gfx.h"
  HEAP8[(30358)>>0] = $frombool134; //@line 14529 "../sokol\sokol_gfx.h"
  $70 = $i106; //@line 14525 "../sokol\sokol_gfx.h"
  $inc138 = (($70) + 1)|0; //@line 14525 "../sokol\sokol_gfx.h"
  $i106 = $inc138; //@line 14525 "../sokol\sokol_gfx.h"
  $71 = $num_fs_imgs; //@line 14525 "../sokol\sokol_gfx.h"
  $inc139 = (($71) + 1)|0; //@line 14525 "../sokol\sokol_gfx.h"
  $num_fs_imgs = $inc139; //@line 14525 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 32) {
  ___assert_fail((7641|0),(6868|0),14528,(7532|0)); //@line 14528 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14528 "../sokol\sokol_gfx.h"
 }
 $72 = HEAP8[(30358)>>0]|0; //@line 14535 "../sokol\sokol_gfx.h"
 $tobool141 = $72&1; //@line 14535 "../sokol\sokol_gfx.h"
 if (!($tobool141)) {
  STACKTOP = sp;return; //@line 14544 "../sokol\sokol_gfx.h"
 }
 $73 = $bindings$addr; //@line 14536 "../sokol\sokol_gfx.h"
 $vertex_buffer_offsets = ((($73)) + 36|0); //@line 14536 "../sokol\sokol_gfx.h"
 $vb_offsets = $vertex_buffer_offsets; //@line 14536 "../sokol\sokol_gfx.h"
 $74 = $bindings$addr; //@line 14537 "../sokol\sokol_gfx.h"
 $index_buffer_offset = ((($74)) + 72|0); //@line 14537 "../sokol\sokol_gfx.h"
 $75 = HEAP32[$index_buffer_offset>>2]|0; //@line 14537 "../sokol\sokol_gfx.h"
 $ib_offset = $75; //@line 14537 "../sokol\sokol_gfx.h"
 $76 = $pip; //@line 14538 "../sokol\sokol_gfx.h"
 $77 = $vb_offsets; //@line 14538 "../sokol\sokol_gfx.h"
 $78 = $num_vbs; //@line 14538 "../sokol\sokol_gfx.h"
 $79 = $ib; //@line 14538 "../sokol\sokol_gfx.h"
 $80 = $ib_offset; //@line 14538 "../sokol\sokol_gfx.h"
 $81 = $num_vs_imgs; //@line 14538 "../sokol\sokol_gfx.h"
 $82 = $num_fs_imgs; //@line 14538 "../sokol\sokol_gfx.h"
 __sg_apply_bindings($76,$vbs,$77,$78,$79,$80,$vs_imgs,$81,$fs_imgs,$82); //@line 14538 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 14544 "../sokol\sokol_gfx.h"
}
function __sg_validate_apply_bindings($bindings) {
 $bindings = $bindings|0;
 var $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $append_overflow = 0, $append_overflow67 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx118 = 0, $arrayidx126 = 0;
 var $arrayidx139 = 0, $arrayidx14 = 0, $arrayidx17 = 0, $arrayidx80 = 0, $arrayidx86 = 0, $arrayidx98 = 0, $bindings$addr = 0, $buf = 0, $buf52 = 0, $call = 0, $call128 = 0, $call150 = 0, $call150$expand_i1_val = 0, $call19 = 0, $call2 = 0, $call2$expand_i1_val = 0, $call55 = 0, $call88 = 0, $cmn = 0, $cmn115 = 0;
 var $cmn13 = 0, $cmn136 = 0, $cmn27 = 0, $cmn29 = 0, $cmn38 = 0, $cmn63 = 0, $cmn66 = 0, $cmn77 = 0, $cmn96 = 0, $cmp = 0, $cmp1 = 0, $cmp100 = 0, $cmp104 = 0, $cmp11 = 0, $cmp111 = 0, $cmp120 = 0, $cmp123 = 0, $cmp129 = 0, $cmp134 = 0, $cmp141 = 0;
 var $cmp145 = 0, $cmp20 = 0, $cmp25 = 0, $cmp28 = 0, $cmp3 = 0, $cmp39 = 0, $cmp42 = 0, $cmp46 = 0, $cmp50 = 0, $cmp56 = 0, $cmp61 = 0, $cmp65 = 0, $cmp74 = 0, $cmp8 = 0, $cmp82 = 0, $cmp84 = 0, $cmp89 = 0, $cmp9 = 0, $cmp94 = 0, $fs_images = 0;
 var $fs_images125 = 0, $i = 0, $i109 = 0, $i72 = 0, $images = 0, $images138 = 0, $img = 0, $img124 = 0, $inc = 0, $inc107 = 0, $inc148 = 0, $index_buffer = 0, $index_buffer48 = 0, $index_buffer53 = 0, $index_type = 0, $lnot = 0, $lnot36 = 0, $lnot69 = 0, $num_images = 0, $num_images122 = 0;
 var $pip = 0, $retval = 0, $shader = 0, $shader114 = 0, $shader5 = 0, $shader76 = 0, $stage = 0, $stage113 = 0, $state = 0, $state133 = 0, $state24 = 0, $state60 = 0, $state93 = 0, $tobool = 0, $tobool130 = 0, $tobool15 = 0, $tobool21 = 0, $tobool30 = 0, $tobool4 = 0, $tobool57 = 0;
 var $tobool68 = 0, $tobool90 = 0, $type = 0, $type64 = 0, $vertex_buffers = 0, $vertex_buffers16 = 0, $vertex_layout_valid = 0, $vs_images = 0, $vs_images85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $retval = sp + 44|0;
 $bindings$addr = $bindings;
 __sg_validate_begin(); //@line 13428 "../sokol\sokol_gfx.h"
 $0 = HEAP32[(30352)>>2]|0; //@line 13431 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13431 "../sokol\sokol_gfx.h"
 __sg_validate($cmp,62); //@line 13431 "../sokol\sokol_gfx.h"
 $1 = HEAP32[(30352)>>2]|0; //@line 13432 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_pipeline((30364),$1)|0); //@line 13432 "../sokol\sokol_gfx.h"
 $pip = $call; //@line 13432 "../sokol\sokol_gfx.h"
 $2 = $pip; //@line 13433 "../sokol\sokol_gfx.h"
 $cmp1 = ($2|0)!=(0|0); //@line 13433 "../sokol\sokol_gfx.h"
 __sg_validate($cmp1,63); //@line 13433 "../sokol\sokol_gfx.h"
 $3 = $pip; //@line 13434 "../sokol\sokol_gfx.h"
 $tobool = ($3|0)!=(0|0); //@line 13434 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  $call2 = (__sg_validate_end()|0); //@line 13435 "../sokol\sokol_gfx.h"
  $call2$expand_i1_val = $call2&1; //@line 13435 "../sokol\sokol_gfx.h"
  HEAP8[$retval>>0] = $call2$expand_i1_val; //@line 13435 "../sokol\sokol_gfx.h"
  $$pre_trunc = HEAP8[$retval>>0]|0; //@line 13510 "../sokol\sokol_gfx.h"
  $92 = $$pre_trunc&1; //@line 13510 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($92|0); //@line 13510 "../sokol\sokol_gfx.h"
 }
 $4 = $pip; //@line 13437 "../sokol\sokol_gfx.h"
 $state = ((($4)) + 8|0); //@line 13437 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$state>>2]|0; //@line 13437 "../sokol\sokol_gfx.h"
 $cmp3 = ($5|0)==(2); //@line 13437 "../sokol\sokol_gfx.h"
 __sg_validate($cmp3,64); //@line 13437 "../sokol\sokol_gfx.h"
 $6 = $pip; //@line 13438 "../sokol\sokol_gfx.h"
 $shader = ((($6)) + 72|0); //@line 13438 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$shader>>2]|0; //@line 13438 "../sokol\sokol_gfx.h"
 $tobool4 = ($7|0)!=(0|0); //@line 13438 "../sokol\sokol_gfx.h"
 if (!($tobool4)) {
  ___assert_fail((18961|0),(6868|0),13438,(19024|0)); //@line 13438 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13438 "../sokol\sokol_gfx.h"
 }
 $8 = $pip; //@line 13438 "../sokol\sokol_gfx.h"
 $cmn = ((($8)) + 12|0); //@line 13438 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$cmn>>2]|0; //@line 13438 "../sokol\sokol_gfx.h"
 $10 = $pip; //@line 13438 "../sokol\sokol_gfx.h"
 $shader5 = ((($10)) + 72|0); //@line 13438 "../sokol\sokol_gfx.h"
 $11 = HEAP32[$shader5>>2]|0; //@line 13438 "../sokol\sokol_gfx.h"
 $12 = HEAP32[$11>>2]|0; //@line 13438 "../sokol\sokol_gfx.h"
 $cmp8 = ($9|0)==($12|0); //@line 13438 "../sokol\sokol_gfx.h"
 if (!($cmp8)) {
  ___assert_fail((18961|0),(6868|0),13438,(19024|0)); //@line 13438 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13438 "../sokol\sokol_gfx.h"
 }
 $i = 0; //@line 13441 "../sokol\sokol_gfx.h"
 while(1) {
  $13 = $i; //@line 13441 "../sokol\sokol_gfx.h"
  $cmp9 = ($13|0)<(8); //@line 13441 "../sokol\sokol_gfx.h"
  if (!($cmp9)) {
   break;
  }
  $14 = $bindings$addr; //@line 13442 "../sokol\sokol_gfx.h"
  $vertex_buffers = ((($14)) + 4|0); //@line 13442 "../sokol\sokol_gfx.h"
  $15 = $i; //@line 13442 "../sokol\sokol_gfx.h"
  $arrayidx = (($vertex_buffers) + ($15<<2)|0); //@line 13442 "../sokol\sokol_gfx.h"
  $16 = HEAP32[$arrayidx>>2]|0; //@line 13442 "../sokol\sokol_gfx.h"
  $cmp11 = ($16|0)!=(0); //@line 13442 "../sokol\sokol_gfx.h"
  $17 = $pip;
  $cmn13 = ((($17)) + 12|0);
  $vertex_layout_valid = ((($cmn13)) + 8|0);
  $18 = $i;
  $arrayidx14 = (($vertex_layout_valid) + ($18)|0);
  $19 = HEAP8[$arrayidx14>>0]|0;
  $tobool15 = $19&1;
  if ($cmp11) {
   __sg_validate($tobool15,65); //@line 13443 "../sokol\sokol_gfx.h"
   $20 = $bindings$addr; //@line 13445 "../sokol\sokol_gfx.h"
   $vertex_buffers16 = ((($20)) + 4|0); //@line 13445 "../sokol\sokol_gfx.h"
   $21 = $i; //@line 13445 "../sokol\sokol_gfx.h"
   $arrayidx17 = (($vertex_buffers16) + ($21<<2)|0); //@line 13445 "../sokol\sokol_gfx.h"
   $22 = HEAP32[$arrayidx17>>2]|0; //@line 13445 "../sokol\sokol_gfx.h"
   $call19 = (__sg_lookup_buffer((30364),$22)|0); //@line 13445 "../sokol\sokol_gfx.h"
   $buf = $call19; //@line 13445 "../sokol\sokol_gfx.h"
   $23 = $buf; //@line 13446 "../sokol\sokol_gfx.h"
   $cmp20 = ($23|0)!=(0|0); //@line 13446 "../sokol\sokol_gfx.h"
   __sg_validate($cmp20,66); //@line 13446 "../sokol\sokol_gfx.h"
   $24 = $buf; //@line 13447 "../sokol\sokol_gfx.h"
   $tobool21 = ($24|0)!=(0|0); //@line 13447 "../sokol\sokol_gfx.h"
   if ($tobool21) {
    $25 = $buf; //@line 13447 "../sokol\sokol_gfx.h"
    $state24 = ((($25)) + 8|0); //@line 13447 "../sokol\sokol_gfx.h"
    $26 = HEAP32[$state24>>2]|0; //@line 13447 "../sokol\sokol_gfx.h"
    $cmp25 = ($26|0)==(2); //@line 13447 "../sokol\sokol_gfx.h"
    if ($cmp25) {
     $27 = $buf; //@line 13448 "../sokol\sokol_gfx.h"
     $cmn27 = ((($27)) + 12|0); //@line 13448 "../sokol\sokol_gfx.h"
     $type = ((($cmn27)) + 12|0); //@line 13448 "../sokol\sokol_gfx.h"
     $28 = HEAP32[$type>>2]|0; //@line 13448 "../sokol\sokol_gfx.h"
     $cmp28 = (1)==($28|0); //@line 13448 "../sokol\sokol_gfx.h"
     __sg_validate($cmp28,67); //@line 13448 "../sokol\sokol_gfx.h"
     $29 = $buf; //@line 13449 "../sokol\sokol_gfx.h"
     $cmn29 = ((($29)) + 12|0); //@line 13449 "../sokol\sokol_gfx.h"
     $append_overflow = ((($cmn29)) + 8|0); //@line 13449 "../sokol\sokol_gfx.h"
     $30 = HEAP8[$append_overflow>>0]|0; //@line 13449 "../sokol\sokol_gfx.h"
     $tobool30 = $30&1; //@line 13449 "../sokol\sokol_gfx.h"
     $lnot = $tobool30 ^ 1; //@line 13449 "../sokol\sokol_gfx.h"
     __sg_validate($lnot,68); //@line 13449 "../sokol\sokol_gfx.h"
    }
   }
  } else {
   $lnot36 = $tobool15 ^ 1; //@line 13454 "../sokol\sokol_gfx.h"
   __sg_validate($lnot36,65); //@line 13454 "../sokol\sokol_gfx.h"
  }
  $31 = $i; //@line 13441 "../sokol\sokol_gfx.h"
  $inc = (($31) + 1)|0; //@line 13441 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 13441 "../sokol\sokol_gfx.h"
 }
 $32 = $pip; //@line 13459 "../sokol\sokol_gfx.h"
 $cmn38 = ((($32)) + 12|0); //@line 13459 "../sokol\sokol_gfx.h"
 $index_type = ((($cmn38)) + 4|0); //@line 13459 "../sokol\sokol_gfx.h"
 $33 = HEAP32[$index_type>>2]|0; //@line 13459 "../sokol\sokol_gfx.h"
 $cmp39 = ($33|0)==(1); //@line 13459 "../sokol\sokol_gfx.h"
 $34 = $bindings$addr;
 $index_buffer = ((($34)) + 68|0);
 $35 = HEAP32[$index_buffer>>2]|0;
 if ($cmp39) {
  $cmp42 = ($35|0)==(0); //@line 13461 "../sokol\sokol_gfx.h"
  __sg_validate($cmp42,70); //@line 13461 "../sokol\sokol_gfx.h"
 } else {
  $cmp46 = ($35|0)!=(0); //@line 13465 "../sokol\sokol_gfx.h"
  __sg_validate($cmp46,69); //@line 13465 "../sokol\sokol_gfx.h"
 }
 $36 = $bindings$addr; //@line 13467 "../sokol\sokol_gfx.h"
 $index_buffer48 = ((($36)) + 68|0); //@line 13467 "../sokol\sokol_gfx.h"
 $37 = HEAP32[$index_buffer48>>2]|0; //@line 13467 "../sokol\sokol_gfx.h"
 $cmp50 = ($37|0)!=(0); //@line 13467 "../sokol\sokol_gfx.h"
 if ($cmp50) {
  $38 = $bindings$addr; //@line 13469 "../sokol\sokol_gfx.h"
  $index_buffer53 = ((($38)) + 68|0); //@line 13469 "../sokol\sokol_gfx.h"
  $39 = HEAP32[$index_buffer53>>2]|0; //@line 13469 "../sokol\sokol_gfx.h"
  $call55 = (__sg_lookup_buffer((30364),$39)|0); //@line 13469 "../sokol\sokol_gfx.h"
  $buf52 = $call55; //@line 13469 "../sokol\sokol_gfx.h"
  $40 = $buf52; //@line 13470 "../sokol\sokol_gfx.h"
  $cmp56 = ($40|0)!=(0|0); //@line 13470 "../sokol\sokol_gfx.h"
  __sg_validate($cmp56,71); //@line 13470 "../sokol\sokol_gfx.h"
  $41 = $buf52; //@line 13471 "../sokol\sokol_gfx.h"
  $tobool57 = ($41|0)!=(0|0); //@line 13471 "../sokol\sokol_gfx.h"
  if ($tobool57) {
   $42 = $buf52; //@line 13471 "../sokol\sokol_gfx.h"
   $state60 = ((($42)) + 8|0); //@line 13471 "../sokol\sokol_gfx.h"
   $43 = HEAP32[$state60>>2]|0; //@line 13471 "../sokol\sokol_gfx.h"
   $cmp61 = ($43|0)==(2); //@line 13471 "../sokol\sokol_gfx.h"
   if ($cmp61) {
    $44 = $buf52; //@line 13472 "../sokol\sokol_gfx.h"
    $cmn63 = ((($44)) + 12|0); //@line 13472 "../sokol\sokol_gfx.h"
    $type64 = ((($cmn63)) + 12|0); //@line 13472 "../sokol\sokol_gfx.h"
    $45 = HEAP32[$type64>>2]|0; //@line 13472 "../sokol\sokol_gfx.h"
    $cmp65 = (2)==($45|0); //@line 13472 "../sokol\sokol_gfx.h"
    __sg_validate($cmp65,72); //@line 13472 "../sokol\sokol_gfx.h"
    $46 = $buf52; //@line 13473 "../sokol\sokol_gfx.h"
    $cmn66 = ((($46)) + 12|0); //@line 13473 "../sokol\sokol_gfx.h"
    $append_overflow67 = ((($cmn66)) + 8|0); //@line 13473 "../sokol\sokol_gfx.h"
    $47 = HEAP8[$append_overflow67>>0]|0; //@line 13473 "../sokol\sokol_gfx.h"
    $tobool68 = $47&1; //@line 13473 "../sokol\sokol_gfx.h"
    $lnot69 = $tobool68 ^ 1; //@line 13473 "../sokol\sokol_gfx.h"
    __sg_validate($lnot69,73); //@line 13473 "../sokol\sokol_gfx.h"
   }
  }
 }
 $i72 = 0; //@line 13478 "../sokol\sokol_gfx.h"
 while(1) {
  $48 = $i72; //@line 13478 "../sokol\sokol_gfx.h"
  $cmp74 = ($48|0)<(12); //@line 13478 "../sokol\sokol_gfx.h"
  if (!($cmp74)) {
   break;
  }
  $49 = $pip; //@line 13479 "../sokol\sokol_gfx.h"
  $shader76 = ((($49)) + 72|0); //@line 13479 "../sokol\sokol_gfx.h"
  $50 = HEAP32[$shader76>>2]|0; //@line 13479 "../sokol\sokol_gfx.h"
  $cmn77 = ((($50)) + 12|0); //@line 13479 "../sokol\sokol_gfx.h"
  $stage = $cmn77; //@line 13479 "../sokol\sokol_gfx.h"
  $51 = $bindings$addr; //@line 13480 "../sokol\sokol_gfx.h"
  $vs_images = ((($51)) + 76|0); //@line 13480 "../sokol\sokol_gfx.h"
  $52 = $i72; //@line 13480 "../sokol\sokol_gfx.h"
  $arrayidx80 = (($vs_images) + ($52<<2)|0); //@line 13480 "../sokol\sokol_gfx.h"
  $53 = HEAP32[$arrayidx80>>2]|0; //@line 13480 "../sokol\sokol_gfx.h"
  $cmp82 = ($53|0)!=(0); //@line 13480 "../sokol\sokol_gfx.h"
  $54 = $i72;
  $55 = $stage;
  $num_images = ((($55)) + 4|0);
  $56 = HEAP32[$num_images>>2]|0;
  if ($cmp82) {
   $cmp84 = ($54|0)<($56|0); //@line 13481 "../sokol\sokol_gfx.h"
   __sg_validate($cmp84,74); //@line 13481 "../sokol\sokol_gfx.h"
   $57 = $bindings$addr; //@line 13482 "../sokol\sokol_gfx.h"
   $vs_images85 = ((($57)) + 76|0); //@line 13482 "../sokol\sokol_gfx.h"
   $58 = $i72; //@line 13482 "../sokol\sokol_gfx.h"
   $arrayidx86 = (($vs_images85) + ($58<<2)|0); //@line 13482 "../sokol\sokol_gfx.h"
   $59 = HEAP32[$arrayidx86>>2]|0; //@line 13482 "../sokol\sokol_gfx.h"
   $call88 = (__sg_lookup_image((30364),$59)|0); //@line 13482 "../sokol\sokol_gfx.h"
   $img = $call88; //@line 13482 "../sokol\sokol_gfx.h"
   $60 = $img; //@line 13483 "../sokol\sokol_gfx.h"
   $cmp89 = ($60|0)!=(0|0); //@line 13483 "../sokol\sokol_gfx.h"
   __sg_validate($cmp89,75); //@line 13483 "../sokol\sokol_gfx.h"
   $61 = $img; //@line 13484 "../sokol\sokol_gfx.h"
   $tobool90 = ($61|0)!=(0|0); //@line 13484 "../sokol\sokol_gfx.h"
   if ($tobool90) {
    $62 = $img; //@line 13484 "../sokol\sokol_gfx.h"
    $state93 = ((($62)) + 8|0); //@line 13484 "../sokol\sokol_gfx.h"
    $63 = HEAP32[$state93>>2]|0; //@line 13484 "../sokol\sokol_gfx.h"
    $cmp94 = ($63|0)==(2); //@line 13484 "../sokol\sokol_gfx.h"
    if ($cmp94) {
     $64 = $img; //@line 13485 "../sokol\sokol_gfx.h"
     $cmn96 = ((($64)) + 12|0); //@line 13485 "../sokol\sokol_gfx.h"
     $65 = HEAP32[$cmn96>>2]|0; //@line 13485 "../sokol\sokol_gfx.h"
     $66 = $stage; //@line 13485 "../sokol\sokol_gfx.h"
     $images = ((($66)) + 24|0); //@line 13485 "../sokol\sokol_gfx.h"
     $67 = $i72; //@line 13485 "../sokol\sokol_gfx.h"
     $arrayidx98 = (($images) + ($67<<3)|0); //@line 13485 "../sokol\sokol_gfx.h"
     $68 = HEAP32[$arrayidx98>>2]|0; //@line 13485 "../sokol\sokol_gfx.h"
     $cmp100 = ($65|0)==($68|0); //@line 13485 "../sokol\sokol_gfx.h"
     __sg_validate($cmp100,76); //@line 13485 "../sokol\sokol_gfx.h"
    }
   }
  } else {
   $cmp104 = ($54|0)>=($56|0); //@line 13489 "../sokol\sokol_gfx.h"
   __sg_validate($cmp104,74); //@line 13489 "../sokol\sokol_gfx.h"
  }
  $69 = $i72; //@line 13478 "../sokol\sokol_gfx.h"
  $inc107 = (($69) + 1)|0; //@line 13478 "../sokol\sokol_gfx.h"
  $i72 = $inc107; //@line 13478 "../sokol\sokol_gfx.h"
 }
 $i109 = 0; //@line 13494 "../sokol\sokol_gfx.h"
 while(1) {
  $70 = $i109; //@line 13494 "../sokol\sokol_gfx.h"
  $cmp111 = ($70|0)<(12); //@line 13494 "../sokol\sokol_gfx.h"
  if (!($cmp111)) {
   break;
  }
  $71 = $pip; //@line 13495 "../sokol\sokol_gfx.h"
  $shader114 = ((($71)) + 72|0); //@line 13495 "../sokol\sokol_gfx.h"
  $72 = HEAP32[$shader114>>2]|0; //@line 13495 "../sokol\sokol_gfx.h"
  $cmn115 = ((($72)) + 12|0); //@line 13495 "../sokol\sokol_gfx.h"
  $arrayidx117 = ((($cmn115)) + 120|0); //@line 13495 "../sokol\sokol_gfx.h"
  $stage113 = $arrayidx117; //@line 13495 "../sokol\sokol_gfx.h"
  $73 = $bindings$addr; //@line 13496 "../sokol\sokol_gfx.h"
  $fs_images = ((($73)) + 124|0); //@line 13496 "../sokol\sokol_gfx.h"
  $74 = $i109; //@line 13496 "../sokol\sokol_gfx.h"
  $arrayidx118 = (($fs_images) + ($74<<2)|0); //@line 13496 "../sokol\sokol_gfx.h"
  $75 = HEAP32[$arrayidx118>>2]|0; //@line 13496 "../sokol\sokol_gfx.h"
  $cmp120 = ($75|0)!=(0); //@line 13496 "../sokol\sokol_gfx.h"
  $76 = $i109;
  $77 = $stage113;
  $num_images122 = ((($77)) + 4|0);
  $78 = HEAP32[$num_images122>>2]|0;
  if ($cmp120) {
   $cmp123 = ($76|0)<($78|0); //@line 13497 "../sokol\sokol_gfx.h"
   __sg_validate($cmp123,77); //@line 13497 "../sokol\sokol_gfx.h"
   $79 = $bindings$addr; //@line 13498 "../sokol\sokol_gfx.h"
   $fs_images125 = ((($79)) + 124|0); //@line 13498 "../sokol\sokol_gfx.h"
   $80 = $i109; //@line 13498 "../sokol\sokol_gfx.h"
   $arrayidx126 = (($fs_images125) + ($80<<2)|0); //@line 13498 "../sokol\sokol_gfx.h"
   $81 = HEAP32[$arrayidx126>>2]|0; //@line 13498 "../sokol\sokol_gfx.h"
   $call128 = (__sg_lookup_image((30364),$81)|0); //@line 13498 "../sokol\sokol_gfx.h"
   $img124 = $call128; //@line 13498 "../sokol\sokol_gfx.h"
   $82 = $img124; //@line 13499 "../sokol\sokol_gfx.h"
   $cmp129 = ($82|0)!=(0|0); //@line 13499 "../sokol\sokol_gfx.h"
   __sg_validate($cmp129,78); //@line 13499 "../sokol\sokol_gfx.h"
   $83 = $img124; //@line 13500 "../sokol\sokol_gfx.h"
   $tobool130 = ($83|0)!=(0|0); //@line 13500 "../sokol\sokol_gfx.h"
   if ($tobool130) {
    $84 = $img124; //@line 13500 "../sokol\sokol_gfx.h"
    $state133 = ((($84)) + 8|0); //@line 13500 "../sokol\sokol_gfx.h"
    $85 = HEAP32[$state133>>2]|0; //@line 13500 "../sokol\sokol_gfx.h"
    $cmp134 = ($85|0)==(2); //@line 13500 "../sokol\sokol_gfx.h"
    if ($cmp134) {
     $86 = $img124; //@line 13501 "../sokol\sokol_gfx.h"
     $cmn136 = ((($86)) + 12|0); //@line 13501 "../sokol\sokol_gfx.h"
     $87 = HEAP32[$cmn136>>2]|0; //@line 13501 "../sokol\sokol_gfx.h"
     $88 = $stage113; //@line 13501 "../sokol\sokol_gfx.h"
     $images138 = ((($88)) + 24|0); //@line 13501 "../sokol\sokol_gfx.h"
     $89 = $i109; //@line 13501 "../sokol\sokol_gfx.h"
     $arrayidx139 = (($images138) + ($89<<3)|0); //@line 13501 "../sokol\sokol_gfx.h"
     $90 = HEAP32[$arrayidx139>>2]|0; //@line 13501 "../sokol\sokol_gfx.h"
     $cmp141 = ($87|0)==($90|0); //@line 13501 "../sokol\sokol_gfx.h"
     __sg_validate($cmp141,79); //@line 13501 "../sokol\sokol_gfx.h"
    }
   }
  } else {
   $cmp145 = ($76|0)>=($78|0); //@line 13505 "../sokol\sokol_gfx.h"
   __sg_validate($cmp145,77); //@line 13505 "../sokol\sokol_gfx.h"
  }
  $91 = $i109; //@line 13494 "../sokol\sokol_gfx.h"
  $inc148 = (($91) + 1)|0; //@line 13494 "../sokol\sokol_gfx.h"
  $i109 = $inc148; //@line 13494 "../sokol\sokol_gfx.h"
 }
 $call150 = (__sg_validate_end()|0); //@line 13508 "../sokol\sokol_gfx.h"
 $call150$expand_i1_val = $call150&1; //@line 13508 "../sokol\sokol_gfx.h"
 HEAP8[$retval>>0] = $call150$expand_i1_val; //@line 13508 "../sokol\sokol_gfx.h"
 $$pre_trunc = HEAP8[$retval>>0]|0; //@line 13510 "../sokol\sokol_gfx.h"
 $92 = $$pre_trunc&1; //@line 13510 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($92|0); //@line 13510 "../sokol\sokol_gfx.h"
}
function __sg_apply_bindings($pip,$vbs,$vb_offsets,$num_vbs,$ib,$ib_offset,$vs_imgs,$num_vs_imgs,$fs_imgs,$num_fs_imgs) {
 $pip = $pip|0;
 $vbs = $vbs|0;
 $vb_offsets = $vb_offsets|0;
 $num_vbs = $num_vbs|0;
 $ib = $ib|0;
 $ib_offset = $ib_offset|0;
 $vs_imgs = $vs_imgs|0;
 $num_vs_imgs = $num_vs_imgs|0;
 $fs_imgs = $fs_imgs|0;
 $num_fs_imgs = $num_fs_imgs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs_imgs$addr = 0, $ib$addr = 0, $ib_offset$addr = 0, $num_fs_imgs$addr = 0, $num_vbs$addr = 0, $num_vs_imgs$addr = 0, $pip$addr = 0, $vb_offsets$addr = 0, $vbs$addr = 0, $vs_imgs$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $pip$addr = $pip;
 $vbs$addr = $vbs;
 $vb_offsets$addr = $vb_offsets;
 $num_vbs$addr = $num_vbs;
 $ib$addr = $ib;
 $ib_offset$addr = $ib_offset;
 $vs_imgs$addr = $vs_imgs;
 $num_vs_imgs$addr = $num_vs_imgs;
 $fs_imgs$addr = $fs_imgs;
 $num_fs_imgs$addr = $num_fs_imgs;
 $0 = $pip$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $1 = $vbs$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $2 = $vb_offsets$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $3 = $num_vbs$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $4 = $ib$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $5 = $ib_offset$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $6 = $vs_imgs$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $7 = $num_vs_imgs$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $8 = $fs_imgs$addr; //@line 12454 "../sokol\sokol_gfx.h"
 $9 = $num_fs_imgs$addr; //@line 12454 "../sokol\sokol_gfx.h"
 __sg_wgpu_apply_bindings($0,$1,$2,$3,$4,$5,$6,$7,$8,$9); //@line 12454 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12460 "../sokol\sokol_gfx.h"
}
function _sg_apply_uniforms($stage,$ub_index,$data,$num_bytes) {
 $stage = $stage|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0;
 var $cmp5 = 0, $cmp6 = 0, $data$addr = 0, $num_bytes$addr = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $stage$addr = 0, $tobool = 0, $tobool10 = 0, $tobool16 = 0, $ub_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $stage$addr = $stage;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = HEAP8[30192]|0; //@line 14547 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14547 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14547,(7652|0)); //@line 14547 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14547 "../sokol\sokol_gfx.h"
 }
 $1 = $stage$addr; //@line 14548 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)==(0); //@line 14548 "../sokol\sokol_gfx.h"
 $2 = $stage$addr; //@line 14548 "../sokol\sokol_gfx.h"
 $cmp1 = ($2|0)==(1); //@line 14548 "../sokol\sokol_gfx.h"
 $or$cond = $cmp | $cmp1; //@line 14548 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((7670|0),(6868|0),14548,(7652|0)); //@line 14548 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14548 "../sokol\sokol_gfx.h"
 }
 $3 = $ub_index$addr; //@line 14549 "../sokol\sokol_gfx.h"
 $cmp5 = ($3|0)>=(0); //@line 14549 "../sokol\sokol_gfx.h"
 $4 = $ub_index$addr; //@line 14549 "../sokol\sokol_gfx.h"
 $cmp6 = ($4|0)<(4); //@line 14549 "../sokol\sokol_gfx.h"
 $or$cond1 = $cmp5 & $cmp6; //@line 14549 "../sokol\sokol_gfx.h"
 if (!($or$cond1)) {
  ___assert_fail((7731|0),(6868|0),14549,(7652|0)); //@line 14549 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14549 "../sokol\sokol_gfx.h"
 }
 $5 = $data$addr; //@line 14550 "../sokol\sokol_gfx.h"
 $tobool10 = ($5|0)!=(0|0); //@line 14550 "../sokol\sokol_gfx.h"
 $6 = $num_bytes$addr; //@line 14550 "../sokol\sokol_gfx.h"
 $cmp12 = ($6|0)>(0); //@line 14550 "../sokol\sokol_gfx.h"
 $or$cond2 = $tobool10 & $cmp12; //@line 14550 "../sokol\sokol_gfx.h"
 if (!($or$cond2)) {
  ___assert_fail((7786|0),(6868|0),14550,(7652|0)); //@line 14550 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14550 "../sokol\sokol_gfx.h"
 }
 $7 = $stage$addr; //@line 14551 "../sokol\sokol_gfx.h"
 $8 = $ub_index$addr; //@line 14551 "../sokol\sokol_gfx.h"
 $9 = $data$addr; //@line 14551 "../sokol\sokol_gfx.h"
 $10 = $num_bytes$addr; //@line 14551 "../sokol\sokol_gfx.h"
 $call = (__sg_validate_apply_uniforms($7,$8,$9,$10)|0); //@line 14551 "../sokol\sokol_gfx.h"
 if (!($call)) {
  HEAP8[(30358)>>0] = 0; //@line 14552 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 14565 "../sokol\sokol_gfx.h"
 }
 $11 = HEAP8[(30356)>>0]|0; //@line 14556 "../sokol\sokol_gfx.h"
 $tobool16 = $11&1; //@line 14556 "../sokol\sokol_gfx.h"
 if (!($tobool16)) {
  STACKTOP = sp;return; //@line 14565 "../sokol\sokol_gfx.h"
 }
 $12 = $stage$addr; //@line 14563 "../sokol\sokol_gfx.h"
 $13 = $ub_index$addr; //@line 14563 "../sokol\sokol_gfx.h"
 $14 = $data$addr; //@line 14563 "../sokol\sokol_gfx.h"
 $15 = $num_bytes$addr; //@line 14563 "../sokol\sokol_gfx.h"
 __sg_apply_uniforms($12,$13,$14,$15); //@line 14563 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 14565 "../sokol\sokol_gfx.h"
}
function __sg_validate_apply_uniforms($stage_index,$ub_index,$data,$num_bytes) {
 $stage_index = $stage_index|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx27 = 0, $call = 0, $call29 = 0, $cmn = 0, $cmn24 = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $cmp2 = 0, $cmp26 = 0, $cmp28 = 0, $cmp3 = 0;
 var $cmp7 = 0, $cmp9 = 0, $data$addr = 0, $num_bytes$addr = 0, $or$cond = 0, $or$cond1 = 0, $pip = 0, $shader = 0, $shader15 = 0, $shader23 = 0, $stage = 0, $stage_index$addr = 0, $tobool = 0, $tobool13 = 0, $ub_index$addr = 0, $uniform_blocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $stage_index$addr = $stage_index;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = $stage_index$addr; //@line 13520 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)==(0); //@line 13520 "../sokol\sokol_gfx.h"
 $1 = $stage_index$addr; //@line 13520 "../sokol\sokol_gfx.h"
 $cmp1 = ($1|0)==(1); //@line 13520 "../sokol\sokol_gfx.h"
 $or$cond = $cmp | $cmp1; //@line 13520 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((19142|0),(6868|0),13520,(19215|0)); //@line 13520 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13520 "../sokol\sokol_gfx.h"
 }
 $2 = $ub_index$addr; //@line 13521 "../sokol\sokol_gfx.h"
 $cmp2 = ($2|0)>=(0); //@line 13521 "../sokol\sokol_gfx.h"
 $3 = $ub_index$addr; //@line 13521 "../sokol\sokol_gfx.h"
 $cmp3 = ($3|0)<(4); //@line 13521 "../sokol\sokol_gfx.h"
 $or$cond1 = $cmp2 & $cmp3; //@line 13521 "../sokol\sokol_gfx.h"
 if (!($or$cond1)) {
  ___assert_fail((7731|0),(6868|0),13521,(19215|0)); //@line 13521 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13521 "../sokol\sokol_gfx.h"
 }
 __sg_validate_begin(); //@line 13522 "../sokol\sokol_gfx.h"
 $4 = HEAP32[(30352)>>2]|0; //@line 13523 "../sokol\sokol_gfx.h"
 $cmp7 = ($4|0)!=(0); //@line 13523 "../sokol\sokol_gfx.h"
 __sg_validate($cmp7,80); //@line 13523 "../sokol\sokol_gfx.h"
 $5 = HEAP32[(30352)>>2]|0; //@line 13524 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_pipeline((30364),$5)|0); //@line 13524 "../sokol\sokol_gfx.h"
 $pip = $call; //@line 13524 "../sokol\sokol_gfx.h"
 $6 = $pip; //@line 13525 "../sokol\sokol_gfx.h"
 $tobool = ($6|0)!=(0|0); //@line 13525 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((19243|0),(6868|0),13525,(19215|0)); //@line 13525 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13525 "../sokol\sokol_gfx.h"
 }
 $7 = $pip; //@line 13525 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$7>>2]|0; //@line 13525 "../sokol\sokol_gfx.h"
 $9 = HEAP32[(30352)>>2]|0; //@line 13525 "../sokol\sokol_gfx.h"
 $cmp9 = ($8|0)==($9|0); //@line 13525 "../sokol\sokol_gfx.h"
 if (!($cmp9)) {
  ___assert_fail((19243|0),(6868|0),13525,(19215|0)); //@line 13525 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13525 "../sokol\sokol_gfx.h"
 }
 $10 = $pip; //@line 13526 "../sokol\sokol_gfx.h"
 $shader = ((($10)) + 72|0); //@line 13526 "../sokol\sokol_gfx.h"
 $11 = HEAP32[$shader>>2]|0; //@line 13526 "../sokol\sokol_gfx.h"
 $tobool13 = ($11|0)!=(0|0); //@line 13526 "../sokol\sokol_gfx.h"
 if (!($tobool13)) {
  ___assert_fail((7469|0),(6868|0),13526,(19215|0)); //@line 13526 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13526 "../sokol\sokol_gfx.h"
 }
 $12 = $pip; //@line 13526 "../sokol\sokol_gfx.h"
 $shader15 = ((($12)) + 72|0); //@line 13526 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$shader15>>2]|0; //@line 13526 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$13>>2]|0; //@line 13526 "../sokol\sokol_gfx.h"
 $15 = $pip; //@line 13526 "../sokol\sokol_gfx.h"
 $cmn = ((($15)) + 12|0); //@line 13526 "../sokol\sokol_gfx.h"
 $16 = HEAP32[$cmn>>2]|0; //@line 13526 "../sokol\sokol_gfx.h"
 $cmp19 = ($14|0)==($16|0); //@line 13526 "../sokol\sokol_gfx.h"
 if ($cmp19) {
  $17 = $pip; //@line 13529 "../sokol\sokol_gfx.h"
  $shader23 = ((($17)) + 72|0); //@line 13529 "../sokol\sokol_gfx.h"
  $18 = HEAP32[$shader23>>2]|0; //@line 13529 "../sokol\sokol_gfx.h"
  $cmn24 = ((($18)) + 12|0); //@line 13529 "../sokol\sokol_gfx.h"
  $19 = $stage_index$addr; //@line 13529 "../sokol\sokol_gfx.h"
  $arrayidx = (($cmn24) + (($19*120)|0)|0); //@line 13529 "../sokol\sokol_gfx.h"
  $stage = $arrayidx; //@line 13529 "../sokol\sokol_gfx.h"
  $20 = $ub_index$addr; //@line 13530 "../sokol\sokol_gfx.h"
  $21 = $stage; //@line 13530 "../sokol\sokol_gfx.h"
  $22 = HEAP32[$21>>2]|0; //@line 13530 "../sokol\sokol_gfx.h"
  $cmp26 = ($20|0)<($22|0); //@line 13530 "../sokol\sokol_gfx.h"
  __sg_validate($cmp26,81); //@line 13530 "../sokol\sokol_gfx.h"
  $23 = $num_bytes$addr; //@line 13533 "../sokol\sokol_gfx.h"
  $24 = $stage; //@line 13533 "../sokol\sokol_gfx.h"
  $uniform_blocks = ((($24)) + 8|0); //@line 13533 "../sokol\sokol_gfx.h"
  $25 = $ub_index$addr; //@line 13533 "../sokol\sokol_gfx.h"
  $arrayidx27 = (($uniform_blocks) + ($25<<2)|0); //@line 13533 "../sokol\sokol_gfx.h"
  $26 = HEAP32[$arrayidx27>>2]|0; //@line 13533 "../sokol\sokol_gfx.h"
  $cmp28 = ($23|0)<=($26|0); //@line 13533 "../sokol\sokol_gfx.h"
  __sg_validate($cmp28,82); //@line 13533 "../sokol\sokol_gfx.h"
  $call29 = (__sg_validate_end()|0); //@line 13535 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($call29|0); //@line 13535 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((7469|0),(6868|0),13526,(19215|0)); //@line 13526 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13526 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_apply_uniforms($stage_index,$ub_index,$data,$num_bytes) {
 $stage_index = $stage_index|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $data$addr = 0, $num_bytes$addr = 0, $stage_index$addr = 0, $ub_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $stage_index$addr = $stage_index;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = $stage_index$addr; //@line 12470 "../sokol\sokol_gfx.h"
 $1 = $ub_index$addr; //@line 12470 "../sokol\sokol_gfx.h"
 $2 = $data$addr; //@line 12470 "../sokol\sokol_gfx.h"
 $3 = $num_bytes$addr; //@line 12470 "../sokol\sokol_gfx.h"
 __sg_wgpu_apply_uniforms($0,$1,$2,$3); //@line 12470 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12476 "../sokol\sokol_gfx.h"
}
function _sg_draw($base_element,$num_elements,$num_instances) {
 $base_element = $base_element|0;
 $num_elements = $num_elements|0;
 $num_instances = $num_instances|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $base_element$addr = 0, $num_elements$addr = 0, $num_instances$addr = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool5 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $base_element$addr = $base_element;
 $num_elements$addr = $num_elements;
 $num_instances$addr = $num_instances;
 $0 = HEAP8[30192]|0; //@line 14568 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14568 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14568,(7810|0)); //@line 14568 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14568 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP8[(30357)>>0]|0; //@line 14570 "../sokol\sokol_gfx.h"
 $tobool1 = $1&1; //@line 14570 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  (_puts(7818)|0); //@line 14571 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP8[(30356)>>0]|0; //@line 14574 "../sokol\sokol_gfx.h"
 $tobool5 = $2&1; //@line 14574 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  STACKTOP = sp;return; //@line 14588 "../sokol\sokol_gfx.h"
 }
 $3 = HEAP8[(30358)>>0]|0; //@line 14578 "../sokol\sokol_gfx.h"
 $tobool8 = $3&1; //@line 14578 "../sokol\sokol_gfx.h"
 if (!($tobool8)) {
  STACKTOP = sp;return; //@line 14588 "../sokol\sokol_gfx.h"
 }
 $4 = HEAP8[(30357)>>0]|0; //@line 14582 "../sokol\sokol_gfx.h"
 $tobool11 = $4&1; //@line 14582 "../sokol\sokol_gfx.h"
 if (!($tobool11)) {
  STACKTOP = sp;return; //@line 14588 "../sokol\sokol_gfx.h"
 }
 $5 = $base_element$addr; //@line 14586 "../sokol\sokol_gfx.h"
 $6 = $num_elements$addr; //@line 14586 "../sokol\sokol_gfx.h"
 $7 = $num_instances$addr; //@line 14586 "../sokol\sokol_gfx.h"
 __sg_draw($5,$6,$7); //@line 14586 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 14588 "../sokol\sokol_gfx.h"
}
function __sg_draw($base_element,$num_elements,$num_instances) {
 $base_element = $base_element|0;
 $num_elements = $num_elements|0;
 $num_instances = $num_instances|0;
 var $0 = 0, $1 = 0, $2 = 0, $base_element$addr = 0, $num_elements$addr = 0, $num_instances$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $base_element$addr = $base_element;
 $num_elements$addr = $num_elements;
 $num_instances$addr = $num_instances;
 $0 = $base_element$addr; //@line 12486 "../sokol\sokol_gfx.h"
 $1 = $num_elements$addr; //@line 12486 "../sokol\sokol_gfx.h"
 $2 = $num_instances$addr; //@line 12486 "../sokol\sokol_gfx.h"
 __sg_wgpu_draw($0,$1,$2); //@line 12486 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12492 "../sokol\sokol_gfx.h"
}
function _sg_end_pass() {
 var $0 = 0, $1 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30192]|0; //@line 14591 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14591 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7006|0),(6868|0),14591,(7863|0)); //@line 14591 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14591 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP8[(30356)>>0]|0; //@line 14592 "../sokol\sokol_gfx.h"
 $tobool1 = $1&1; //@line 14592 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  return; //@line 14601 "../sokol\sokol_gfx.h"
 }
 __sg_end_pass(); //@line 14596 "../sokol\sokol_gfx.h"
 HEAP32[(30348)>>2] = 0; //@line 14597 "../sokol\sokol_gfx.h"
 HEAP32[(30352)>>2] = 0; //@line 14598 "../sokol\sokol_gfx.h"
 HEAP8[(30356)>>0] = 0; //@line 14599 "../sokol\sokol_gfx.h"
 return; //@line 14601 "../sokol\sokol_gfx.h"
}
function __sg_end_pass() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __sg_wgpu_end_pass(); //@line 12384 "../sokol\sokol_gfx.h"
 return; //@line 12390 "../sokol\sokol_gfx.h"
}
function _sg_commit() {
 var $0 = 0, $1 = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[30192]|0; //@line 14604 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 14604 "../sokol\sokol_gfx.h"
 if ($tobool) {
  __sg_commit(); //@line 14605 "../sokol\sokol_gfx.h"
  $1 = HEAP32[(30340)>>2]|0; //@line 14607 "../sokol\sokol_gfx.h"
  $inc = (($1) + 1)|0; //@line 14607 "../sokol\sokol_gfx.h"
  HEAP32[(30340)>>2] = $inc; //@line 14607 "../sokol\sokol_gfx.h"
  return; //@line 14608 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((7006|0),(6868|0),14604,(7875|0)); //@line 14604 "../sokol\sokol_gfx.h"
  // unreachable; //@line 14604 "../sokol\sokol_gfx.h"
 }
}
function __sg_commit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __sg_wgpu_commit(); //@line 12502 "../sokol\sokol_gfx.h"
 return; //@line 12508 "../sokol\sokol_gfx.h"
}
function _init() {
 var $$compoundliteral = 0, $$compoundliteral1 = 0, $$compoundliteral16 = 0, $$compoundliteral24 = 0, $$compoundliteral4 = 0, $_end_canary = 0, $_end_canary10 = 0, $arrayinit$element = 0, $attrs = 0, $buffer_pool_size = 0, $call = 0, $call11 = 0, $call13 = 0, $call14 = 0, $call22 = 0, $coerce = 0, $content = 0, $content7 = 0, $context = 0, $context_pool_size = 0;
 var $cull_mode = 0, $d3d11_buffer = 0, $depth_compare_func = 0, $depth_stencil = 0, $depth_write_enabled = 0, $format = 0, $format19 = 0, $gl_buffers = 0, $ibuf = 0, $image_pool_size = 0, $index_buffer = 0, $index_type = 0, $indices = 0, $label = 0, $label20 = 0, $label9 = 0, $layout = 0, $mtl_buffers = 0, $pass_pool_size = 0, $pipeline_pool_size = 0;
 var $rasterizer = 0, $sampler_cache_size = 0, $shader = 0, $shader_pool_size = 0, $shd = 0, $size = 0, $size6 = 0, $staging_buffer_size = 0, $type = 0, $uniform_buffer_size = 0, $usage = 0, $vbuf = 0, $vertex_buffers = 0, $vertices = 0, $wgpu_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1648|0);
 $$compoundliteral = sp + 1496|0;
 $vertices = sp + 80|0;
 $vbuf = sp + 1488|0;
 $$compoundliteral1 = sp + 1436|0;
 $indices = sp;
 $ibuf = sp + 1432|0;
 $$compoundliteral4 = sp + 1380|0;
 $shd = sp + 1376|0;
 $$compoundliteral16 = sp + 932|0;
 $coerce = sp + 928|0;
 $$compoundliteral24 = sp + 752|0;
 HEAP32[$$compoundliteral>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $buffer_pool_size = ((($$compoundliteral)) + 4|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$buffer_pool_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $image_pool_size = ((($$compoundliteral)) + 8|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$image_pool_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $shader_pool_size = ((($$compoundliteral)) + 12|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$shader_pool_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $pipeline_pool_size = ((($$compoundliteral)) + 16|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$pipeline_pool_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $pass_pool_size = ((($$compoundliteral)) + 20|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$pass_pool_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $context_pool_size = ((($$compoundliteral)) + 24|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$context_pool_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $uniform_buffer_size = ((($$compoundliteral)) + 28|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$uniform_buffer_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $staging_buffer_size = ((($$compoundliteral)) + 32|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$staging_buffer_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $sampler_cache_size = ((($$compoundliteral)) + 36|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$sampler_cache_size>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 $context = ((($$compoundliteral)) + 40|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 _wgpu_get_context($context); //@line 29 "../sokol-samples/wgpu/cube-wgpu.c"
 $_end_canary = ((($$compoundliteral)) + 140|0); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$_end_canary>>2] = 0; //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_setup($$compoundliteral); //@line 28 "../sokol-samples/wgpu/cube-wgpu.c"
 _memcpy(($vertices|0),(16|0),672)|0; //@line 33 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$$compoundliteral1; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 $size = ((($$compoundliteral1)) + 4|0); //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$size>>2] = 672; //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 $content = ((($$compoundliteral1)) + 16|0); //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$content>>2] = $vertices; //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 $label = ((($$compoundliteral1)) + 20|0); //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$label>>2] = 7885; //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 $call = (_sg_make_buffer($$compoundliteral1)|0); //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$vbuf>>2] = $call; //@line 64 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$indices; src=688; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 71 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$$compoundliteral4>>2] = 0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $size6 = ((($$compoundliteral4)) + 4|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$size6>>2] = 72; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $type = ((($$compoundliteral4)) + 8|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$type>>2] = 2; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $usage = ((($$compoundliteral4)) + 12|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$usage>>2] = 0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $content7 = ((($$compoundliteral4)) + 16|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$content7>>2] = $indices; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $label9 = ((($$compoundliteral4)) + 20|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$label9>>2] = 7899; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $gl_buffers = ((($$compoundliteral4)) + 24|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$gl_buffers>>2]=0|0;HEAP32[$gl_buffers+4>>2]=0|0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $mtl_buffers = ((($$compoundliteral4)) + 32|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$mtl_buffers>>2]=0|0;HEAP32[$mtl_buffers+4>>2]=0|0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $d3d11_buffer = ((($$compoundliteral4)) + 40|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$d3d11_buffer>>2] = 0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $wgpu_buffer = ((($$compoundliteral4)) + 44|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$wgpu_buffer>>2] = 0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $_end_canary10 = ((($$compoundliteral4)) + 48|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$_end_canary10>>2] = 0; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $call11 = (_sg_make_buffer($$compoundliteral4)|0); //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$ibuf>>2] = $call11; //@line 79 "../sokol-samples/wgpu/cube-wgpu.c"
 $call13 = (_cube_shader_desc()|0); //@line 87 "../sokol-samples/wgpu/cube-wgpu.c"
 $call14 = (_sg_make_shader($call13)|0); //@line 87 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$shd>>2] = $call14; //@line 87 "../sokol-samples/wgpu/cube-wgpu.c"
 _memset(($$compoundliteral16|0),0,444)|0; //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 $layout = ((($$compoundliteral16)) + 4|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$layout>>2] = 28; //@line 93 "../sokol-samples/wgpu/cube-wgpu.c"
 $attrs = ((($layout)) + 96|0); //@line 91 "../sokol-samples/wgpu/cube-wgpu.c"
 $format = ((($attrs)) + 8|0); //@line 95 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$format>>2] = 3; //@line 95 "../sokol-samples/wgpu/cube-wgpu.c"
 $arrayinit$element = ((($attrs)) + 12|0); //@line 94 "../sokol-samples/wgpu/cube-wgpu.c"
 $format19 = ((($arrayinit$element)) + 8|0); //@line 96 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$format19>>2] = 4; //@line 96 "../sokol-samples/wgpu/cube-wgpu.c"
 $shader = ((($$compoundliteral16)) + 292|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$shader>>2]=HEAP32[$shd>>2]|0; //@line 99 "../sokol-samples/wgpu/cube-wgpu.c"
 $index_type = ((($$compoundliteral16)) + 300|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$index_type>>2] = 2; //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 $depth_stencil = ((($$compoundliteral16)) + 304|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 $depth_compare_func = ((($depth_stencil)) + 32|0); //@line 101 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$depth_compare_func>>2] = 4; //@line 101 "../sokol-samples/wgpu/cube-wgpu.c"
 $depth_write_enabled = ((($depth_stencil)) + 36|0); //@line 101 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP8[$depth_write_enabled>>0] = 1; //@line 101 "../sokol-samples/wgpu/cube-wgpu.c"
 $rasterizer = ((($$compoundliteral16)) + 408|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 $cull_mode = ((($rasterizer)) + 4|0); //@line 105 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$cull_mode>>2] = 3; //@line 105 "../sokol-samples/wgpu/cube-wgpu.c"
 $label20 = ((($$compoundliteral16)) + 436|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$label20>>2] = 7912; //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 $call22 = (_sg_make_pipeline($$compoundliteral16)|0); //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$coerce>>2] = $call22; //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[(3304)>>2]=HEAP32[$coerce>>2]|0; //@line 90 "../sokol-samples/wgpu/cube-wgpu.c"
 _memset(($$compoundliteral24|0),0,176)|0; //@line 110 "../sokol-samples/wgpu/cube-wgpu.c"
 $vertex_buffers = ((($$compoundliteral24)) + 4|0); //@line 110 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$vertex_buffers>>2]=HEAP32[$vbuf>>2]|0; //@line 111 "../sokol-samples/wgpu/cube-wgpu.c"
 $index_buffer = ((($$compoundliteral24)) + 68|0); //@line 110 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$index_buffer>>2]=HEAP32[$ibuf>>2]|0; //@line 112 "../sokol-samples/wgpu/cube-wgpu.c"
 _memcpy(((3308)|0),($$compoundliteral24|0),176)|0; //@line 110 "../sokol-samples/wgpu/cube-wgpu.c"
 STACKTOP = sp;return; //@line 114 "../sokol-samples/wgpu/cube-wgpu.c"
}
function _cube_shader_desc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0); //@line 310 "E:/Vellum/Sokol/_cwc\cube-wgpu.glsl.h"
}
function _frame() {
 var $$byval_copy = 0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $add = 0.0, $add5 = 0.0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp7 = 0;
 var $agg$tmp7$byval_copy = 0, $call = 0, $call1 = 0, $conv = 0.0, $conv2 = 0.0, $conv8 = 0, $conv9 = 0, $div = 0.0, $h = 0.0, $model = 0, $model$byval_copy = 0, $proj = 0, $proj$byval_copy = 0, $rxm = 0, $rxm$byval_copy = 0, $rym = 0, $rym$byval_copy = 0, $tmp = 0, $view = 0, $view$byval_copy = 0;
 var $view_proj = 0, $view_proj$byval_copy = 0, $vs_params = 0, $w = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $$byval_copy = sp + 1040|0;
 $model$byval_copy = sp + 976|0;
 $view_proj$byval_copy = sp + 912|0;
 $rym$byval_copy = sp + 848|0;
 $rxm$byval_copy = sp + 784|0;
 $agg$tmp7$byval_copy = sp + 772|0;
 $agg$tmp6$byval_copy = sp + 760|0;
 $view$byval_copy = sp + 696|0;
 $proj$byval_copy = sp + 632|0;
 $agg$tmp4$byval_copy = sp + 616|0;
 $agg$tmp3$byval_copy = sp + 604|0;
 $agg$tmp$byval_copy = sp + 592|0;
 $vs_params = sp;
 $proj = sp + 520|0;
 $view = sp + 456|0;
 $agg$tmp = sp + 440|0;
 $agg$tmp3 = sp + 428|0;
 $agg$tmp4 = sp + 416|0;
 $view_proj = sp + 352|0;
 $rxm = sp + 288|0;
 $agg$tmp6 = sp + 272|0;
 $rym = sp + 208|0;
 $agg$tmp7 = sp + 192|0;
 $model = sp + 128|0;
 $tmp = sp + 64|0;
 $call = (_wgpu_width()|0); //@line 119 "../sokol-samples/wgpu/cube-wgpu.c"
 $conv = (+($call|0)); //@line 119 "../sokol-samples/wgpu/cube-wgpu.c"
 $w = $conv; //@line 119 "../sokol-samples/wgpu/cube-wgpu.c"
 $call1 = (_wgpu_height()|0); //@line 120 "../sokol-samples/wgpu/cube-wgpu.c"
 $conv2 = (+($call1|0)); //@line 120 "../sokol-samples/wgpu/cube-wgpu.c"
 $h = $conv2; //@line 120 "../sokol-samples/wgpu/cube-wgpu.c"
 $0 = $w; //@line 121 "../sokol-samples/wgpu/cube-wgpu.c"
 $1 = $h; //@line 121 "../sokol-samples/wgpu/cube-wgpu.c"
 $div = $0 / $1; //@line 121 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Perspective($proj,60.0,$div,0.0099999997764825821,10.0); //@line 121 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Vec3($agg$tmp,0.0,1.5,6.0); //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Vec3($agg$tmp3,0.0,0.0,0.0); //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Vec3($agg$tmp4,0.0,1.0,0.0); //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;HEAP32[$agg$tmp$byval_copy+8>>2]=HEAP32[$agg$tmp+8>>2]|0; //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;HEAP32[$agg$tmp3$byval_copy+8>>2]=HEAP32[$agg$tmp3+8>>2]|0; //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;HEAP32[$agg$tmp4$byval_copy+8>>2]=HEAP32[$agg$tmp4+8>>2]|0; //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_LookAt($view,$agg$tmp$byval_copy,$agg$tmp3$byval_copy,$agg$tmp4$byval_copy); //@line 122 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$proj$byval_copy; src=$proj; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 123 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$view$byval_copy; src=$view; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 123 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_MultiplyMat4($view_proj,$proj$byval_copy,$view$byval_copy); //@line 123 "../sokol-samples/wgpu/cube-wgpu.c"
 $2 = +HEAPF32[798]; //@line 124 "../sokol-samples/wgpu/cube-wgpu.c"
 $add = $2 + 1.0; //@line 124 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAPF32[798] = $add; //@line 124 "../sokol-samples/wgpu/cube-wgpu.c"
 $3 = +HEAPF32[(3196)>>2]; //@line 124 "../sokol-samples/wgpu/cube-wgpu.c"
 $add5 = $3 + 2.0; //@line 124 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAPF32[(3196)>>2] = $add5; //@line 124 "../sokol-samples/wgpu/cube-wgpu.c"
 $4 = +HEAPF32[798]; //@line 125 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Vec3($agg$tmp6,1.0,0.0,0.0); //@line 125 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;HEAP32[$agg$tmp6$byval_copy+8>>2]=HEAP32[$agg$tmp6+8>>2]|0; //@line 125 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Rotate($rxm,$4,$agg$tmp6$byval_copy); //@line 125 "../sokol-samples/wgpu/cube-wgpu.c"
 $5 = +HEAPF32[(3196)>>2]; //@line 126 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Vec3($agg$tmp7,0.0,1.0,0.0); //@line 126 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;HEAP32[$agg$tmp7$byval_copy+8>>2]=HEAP32[$agg$tmp7+8>>2]|0; //@line 126 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_Rotate($rym,$5,$agg$tmp7$byval_copy); //@line 126 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$rxm$byval_copy; src=$rxm; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 127 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$rym$byval_copy; src=$rym; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 127 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_MultiplyMat4($model,$rxm$byval_copy,$rym$byval_copy); //@line 127 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$view_proj$byval_copy; src=$view_proj; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 128 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$model$byval_copy; src=$model; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 128 "../sokol-samples/wgpu/cube-wgpu.c"
 _HMM_MultiplyMat4($tmp,$view_proj$byval_copy,$model$byval_copy); //@line 128 "../sokol-samples/wgpu/cube-wgpu.c"
 dest=$vs_params; src=$tmp; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 128 "../sokol-samples/wgpu/cube-wgpu.c"
 $6 = $w; //@line 130 "../sokol-samples/wgpu/cube-wgpu.c"
 $conv8 = (~~(($6))); //@line 130 "../sokol-samples/wgpu/cube-wgpu.c"
 $7 = $h; //@line 130 "../sokol-samples/wgpu/cube-wgpu.c"
 $conv9 = (~~(($7))); //@line 130 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_begin_default_pass((3200),$conv8,$conv9); //@line 130 "../sokol-samples/wgpu/cube-wgpu.c"
 ;HEAP32[$$byval_copy>>2]=HEAP32[(3304)>>2]|0; //@line 131 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_apply_pipeline($$byval_copy); //@line 131 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_apply_bindings((3308)); //@line 132 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_apply_uniforms(0,0,$vs_params,64); //@line 133 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_draw(0,36,1); //@line 134 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_end_pass(); //@line 135 "../sokol-samples/wgpu/cube-wgpu.c"
 _sg_commit(); //@line 136 "../sokol-samples/wgpu/cube-wgpu.c"
 STACKTOP = sp;return; //@line 137 "../sokol-samples/wgpu/cube-wgpu.c"
}
function _shutdown_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sg_shutdown(); //@line 140 "../sokol-samples/wgpu/cube-wgpu.c"
 return; //@line 141 "../sokol-samples/wgpu/cube-wgpu.c"
}
function _main() {
 var $$compoundliteral = 0, $char_cb = 0, $frame_cb = 0, $height = 0, $init_cb = 0, $key_down_cb = 0, $key_up_cb = 0, $mouse_btn_down_cb = 0, $mouse_btn_up_cb = 0, $mouse_pos_cb = 0, $mouse_wheel_cb = 0, $retval = 0, $sample_count = 0, $shutdown_cb = 0, $title = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$compoundliteral = sp;
 $retval = 0;
 HEAP32[$$compoundliteral>>2] = 640; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $height = ((($$compoundliteral)) + 4|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$height>>2] = 480; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $sample_count = ((($$compoundliteral)) + 8|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$sample_count>>2] = 4; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $title = ((($$compoundliteral)) + 12|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$title>>2] = 7926; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $init_cb = ((($$compoundliteral)) + 16|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$init_cb>>2] = 205; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $frame_cb = ((($$compoundliteral)) + 20|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$frame_cb>>2] = 206; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $shutdown_cb = ((($$compoundliteral)) + 24|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$shutdown_cb>>2] = 207; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $key_down_cb = ((($$compoundliteral)) + 28|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$key_down_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $key_up_cb = ((($$compoundliteral)) + 32|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$key_up_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $char_cb = ((($$compoundliteral)) + 36|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$char_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $mouse_btn_down_cb = ((($$compoundliteral)) + 40|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$mouse_btn_down_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $mouse_btn_up_cb = ((($$compoundliteral)) + 44|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$mouse_btn_up_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $mouse_pos_cb = ((($$compoundliteral)) + 48|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$mouse_pos_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 $mouse_wheel_cb = ((($$compoundliteral)) + 52|0); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 HEAP32[$mouse_wheel_cb>>2] = 0; //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 _wgpu_start($$compoundliteral); //@line 144 "../sokol-samples/wgpu/cube-wgpu.c"
 STACKTOP = sp;return 0; //@line 153 "../sokol-samples/wgpu/cube-wgpu.c"
}
function __sg_init_pool($pool,$num) {
 $pool = $pool|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp16 = 0, $dec = 0, $free_queue = 0, $free_queue10 = 0, $free_queue17 = 0, $gen_ctrs = 0, $gen_ctrs2 = 0, $gen_ctrs7 = 0;
 var $gen_ctrs_size = 0, $i = 0, $inc = 0, $mul = 0, $mul8 = 0, $num$addr = 0, $or$cond = 0, $pool$addr = 0, $queue_top = 0, $queue_top18 = 0, $sub = 0, $tobool = 0, $tobool11 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $num$addr = $num;
 $0 = $pool$addr; //@line 12561 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12561 "../sokol\sokol_gfx.h"
 $1 = $num$addr; //@line 12561 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)>=(1); //@line 12561 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12561 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((8483|0),(6868|0),12561,(8502|0)); //@line 12561 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12561 "../sokol\sokol_gfx.h"
 }
 $2 = $num$addr; //@line 12563 "../sokol\sokol_gfx.h"
 $add = (($2) + 1)|0; //@line 12563 "../sokol\sokol_gfx.h"
 $3 = $pool$addr; //@line 12563 "../sokol\sokol_gfx.h"
 HEAP32[$3>>2] = $add; //@line 12563 "../sokol\sokol_gfx.h"
 $4 = $pool$addr; //@line 12564 "../sokol\sokol_gfx.h"
 $queue_top = ((($4)) + 4|0); //@line 12564 "../sokol\sokol_gfx.h"
 HEAP32[$queue_top>>2] = 0; //@line 12564 "../sokol\sokol_gfx.h"
 $5 = $pool$addr; //@line 12566 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$5>>2]|0; //@line 12566 "../sokol\sokol_gfx.h"
 $mul = $6<<2; //@line 12566 "../sokol\sokol_gfx.h"
 $gen_ctrs_size = $mul; //@line 12566 "../sokol\sokol_gfx.h"
 $7 = $gen_ctrs_size; //@line 12567 "../sokol\sokol_gfx.h"
 $call = (_malloc($7)|0); //@line 12567 "../sokol\sokol_gfx.h"
 $8 = $pool$addr; //@line 12567 "../sokol\sokol_gfx.h"
 $gen_ctrs = ((($8)) + 8|0); //@line 12567 "../sokol\sokol_gfx.h"
 HEAP32[$gen_ctrs>>2] = $call; //@line 12567 "../sokol\sokol_gfx.h"
 $9 = $pool$addr; //@line 12568 "../sokol\sokol_gfx.h"
 $gen_ctrs2 = ((($9)) + 8|0); //@line 12568 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$gen_ctrs2>>2]|0; //@line 12568 "../sokol\sokol_gfx.h"
 $tobool3 = ($10|0)!=(0|0); //@line 12568 "../sokol\sokol_gfx.h"
 if (!($tobool3)) {
  ___assert_fail((8516|0),(6868|0),12568,(8502|0)); //@line 12568 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12568 "../sokol\sokol_gfx.h"
 }
 $11 = $pool$addr; //@line 12569 "../sokol\sokol_gfx.h"
 $gen_ctrs7 = ((($11)) + 8|0); //@line 12569 "../sokol\sokol_gfx.h"
 $12 = HEAP32[$gen_ctrs7>>2]|0; //@line 12569 "../sokol\sokol_gfx.h"
 $13 = $gen_ctrs_size; //@line 12569 "../sokol\sokol_gfx.h"
 _memset(($12|0),0,($13|0))|0; //@line 12569 "../sokol\sokol_gfx.h"
 $14 = $num$addr; //@line 12571 "../sokol\sokol_gfx.h"
 $mul8 = $14<<2; //@line 12571 "../sokol\sokol_gfx.h"
 $call9 = (_malloc($mul8)|0); //@line 12571 "../sokol\sokol_gfx.h"
 $15 = $pool$addr; //@line 12571 "../sokol\sokol_gfx.h"
 $free_queue = ((($15)) + 12|0); //@line 12571 "../sokol\sokol_gfx.h"
 HEAP32[$free_queue>>2] = $call9; //@line 12571 "../sokol\sokol_gfx.h"
 $16 = $pool$addr; //@line 12572 "../sokol\sokol_gfx.h"
 $free_queue10 = ((($16)) + 12|0); //@line 12572 "../sokol\sokol_gfx.h"
 $17 = HEAP32[$free_queue10>>2]|0; //@line 12572 "../sokol\sokol_gfx.h"
 $tobool11 = ($17|0)!=(0|0); //@line 12572 "../sokol\sokol_gfx.h"
 if (!($tobool11)) {
  ___assert_fail((8531|0),(6868|0),12572,(8502|0)); //@line 12572 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12572 "../sokol\sokol_gfx.h"
 }
 $18 = $pool$addr; //@line 12574 "../sokol\sokol_gfx.h"
 $19 = HEAP32[$18>>2]|0; //@line 12574 "../sokol\sokol_gfx.h"
 $sub = (($19) - 1)|0; //@line 12574 "../sokol\sokol_gfx.h"
 $i = $sub; //@line 12574 "../sokol\sokol_gfx.h"
 while(1) {
  $20 = $i; //@line 12574 "../sokol\sokol_gfx.h"
  $cmp16 = ($20|0)>=(1); //@line 12574 "../sokol\sokol_gfx.h"
  if (!($cmp16)) {
   break;
  }
  $21 = $i; //@line 12575 "../sokol\sokol_gfx.h"
  $22 = $pool$addr; //@line 12575 "../sokol\sokol_gfx.h"
  $free_queue17 = ((($22)) + 12|0); //@line 12575 "../sokol\sokol_gfx.h"
  $23 = HEAP32[$free_queue17>>2]|0; //@line 12575 "../sokol\sokol_gfx.h"
  $24 = $pool$addr; //@line 12575 "../sokol\sokol_gfx.h"
  $queue_top18 = ((($24)) + 4|0); //@line 12575 "../sokol\sokol_gfx.h"
  $25 = HEAP32[$queue_top18>>2]|0; //@line 12575 "../sokol\sokol_gfx.h"
  $inc = (($25) + 1)|0; //@line 12575 "../sokol\sokol_gfx.h"
  HEAP32[$queue_top18>>2] = $inc; //@line 12575 "../sokol\sokol_gfx.h"
  $arrayidx = (($23) + ($25<<2)|0); //@line 12575 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx>>2] = $21; //@line 12575 "../sokol\sokol_gfx.h"
  $26 = $i; //@line 12574 "../sokol\sokol_gfx.h"
  $dec = (($26) + -1)|0; //@line 12574 "../sokol\sokol_gfx.h"
  $i = $dec; //@line 12574 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 12577 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_setup_backend($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bg_desc = 0, $bgl_desc = 0, $call = 0, $call68 = 0, $call73 = 0, $call78 = 0, $call83 = 0, $cmd_enc_desc = 0, $cmp = 0, $cmp37 = 0, $context = 0;
 var $context14 = 0, $context18 = 0, $context24 = 0, $context28 = 0, $context41 = 0, $context44 = 0, $context47 = 0, $context5 = 0, $context50 = 0, $context53 = 0, $context56 = 0, $context59 = 0, $context62 = 0, $context8 = 0, $depth_stencil_view_cb = 0, $depth_stencil_view_cb58 = 0, $depth_stencil_view_userdata_cb = 0, $depth_stencil_view_userdata_cb61 = 0, $desc$addr = 0, $empty_bgl = 0;
 var $layout = 0, $render_view_cb = 0, $render_view_cb46 = 0, $render_view_userdata_cb = 0, $render_view_userdata_cb49 = 0, $resolve_view_cb = 0, $resolve_view_cb52 = 0, $resolve_view_userdata_cb = 0, $resolve_view_userdata_cb55 = 0, $staging_buffer_size = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool16 = 0, $tobool20 = 0, $tobool26 = 0, $tobool30 = 0, $tobool64 = 0, $tobool69 = 0, $tobool7 = 0;
 var $tobool74 = 0, $tobool79 = 0, $tobool84 = 0, $uniform_buffer_size = 0, $user_data = 0, $wgpu = 0, $wgpu15 = 0, $wgpu19 = 0, $wgpu25 = 0, $wgpu29 = 0, $wgpu42 = 0, $wgpu45 = 0, $wgpu48 = 0, $wgpu51 = 0, $wgpu54 = 0, $wgpu57 = 0, $wgpu6 = 0, $wgpu60 = 0, $wgpu63 = 0, $wgpu9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $bgl_desc = sp + 32|0;
 $bg_desc = sp + 8|0;
 $cmd_enc_desc = sp;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 11184 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11184 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((20040|0),(6868|0),11184,(8548|0)); //@line 11184 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11184 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 11185 "../sokol\sokol_gfx.h"
 $context = ((($1)) + 40|0); //@line 11185 "../sokol\sokol_gfx.h"
 $wgpu = ((($context)) + 68|0); //@line 11185 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$wgpu>>2]|0; //@line 11185 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 11185 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((8571|0),(6868|0),11185,(8548|0)); //@line 11185 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11185 "../sokol\sokol_gfx.h"
 }
 $3 = $desc$addr; //@line 11186 "../sokol\sokol_gfx.h"
 $context5 = ((($3)) + 40|0); //@line 11186 "../sokol\sokol_gfx.h"
 $wgpu6 = ((($context5)) + 68|0); //@line 11186 "../sokol\sokol_gfx.h"
 $render_view_cb = ((($wgpu6)) + 4|0); //@line 11186 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$render_view_cb>>2]|0; //@line 11186 "../sokol\sokol_gfx.h"
 $tobool7 = ($4|0)!=(0|0); //@line 11186 "../sokol\sokol_gfx.h"
 if (!($tobool7)) {
  $5 = $desc$addr; //@line 11186 "../sokol\sokol_gfx.h"
  $context8 = ((($5)) + 40|0); //@line 11186 "../sokol\sokol_gfx.h"
  $wgpu9 = ((($context8)) + 68|0); //@line 11186 "../sokol\sokol_gfx.h"
  $render_view_userdata_cb = ((($wgpu9)) + 8|0); //@line 11186 "../sokol\sokol_gfx.h"
  $6 = HEAP32[$render_view_userdata_cb>>2]|0; //@line 11186 "../sokol\sokol_gfx.h"
  $tobool10 = ($6|0)!=(0|0); //@line 11186 "../sokol\sokol_gfx.h"
  if (!($tobool10)) {
   ___assert_fail((8597|0),(6868|0),11186,(8548|0)); //@line 11186 "../sokol\sokol_gfx.h"
   // unreachable; //@line 11186 "../sokol\sokol_gfx.h"
  }
 }
 $7 = $desc$addr; //@line 11187 "../sokol\sokol_gfx.h"
 $context14 = ((($7)) + 40|0); //@line 11187 "../sokol\sokol_gfx.h"
 $wgpu15 = ((($context14)) + 68|0); //@line 11187 "../sokol\sokol_gfx.h"
 $resolve_view_cb = ((($wgpu15)) + 12|0); //@line 11187 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$resolve_view_cb>>2]|0; //@line 11187 "../sokol\sokol_gfx.h"
 $tobool16 = ($8|0)!=(0|0); //@line 11187 "../sokol\sokol_gfx.h"
 if (!($tobool16)) {
  $9 = $desc$addr; //@line 11187 "../sokol\sokol_gfx.h"
  $context18 = ((($9)) + 40|0); //@line 11187 "../sokol\sokol_gfx.h"
  $wgpu19 = ((($context18)) + 68|0); //@line 11187 "../sokol\sokol_gfx.h"
  $resolve_view_userdata_cb = ((($wgpu19)) + 16|0); //@line 11187 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$resolve_view_userdata_cb>>2]|0; //@line 11187 "../sokol\sokol_gfx.h"
  $tobool20 = ($10|0)!=(0|0); //@line 11187 "../sokol\sokol_gfx.h"
  if (!($tobool20)) {
   ___assert_fail((8677|0),(6868|0),11187,(8548|0)); //@line 11187 "../sokol\sokol_gfx.h"
   // unreachable; //@line 11187 "../sokol\sokol_gfx.h"
  }
 }
 $11 = $desc$addr; //@line 11188 "../sokol\sokol_gfx.h"
 $context24 = ((($11)) + 40|0); //@line 11188 "../sokol\sokol_gfx.h"
 $wgpu25 = ((($context24)) + 68|0); //@line 11188 "../sokol\sokol_gfx.h"
 $depth_stencil_view_cb = ((($wgpu25)) + 20|0); //@line 11188 "../sokol\sokol_gfx.h"
 $12 = HEAP32[$depth_stencil_view_cb>>2]|0; //@line 11188 "../sokol\sokol_gfx.h"
 $tobool26 = ($12|0)!=(0|0); //@line 11188 "../sokol\sokol_gfx.h"
 if (!($tobool26)) {
  $13 = $desc$addr; //@line 11188 "../sokol\sokol_gfx.h"
  $context28 = ((($13)) + 40|0); //@line 11188 "../sokol\sokol_gfx.h"
  $wgpu29 = ((($context28)) + 68|0); //@line 11188 "../sokol\sokol_gfx.h"
  $depth_stencil_view_userdata_cb = ((($wgpu29)) + 24|0); //@line 11188 "../sokol\sokol_gfx.h"
  $14 = HEAP32[$depth_stencil_view_userdata_cb>>2]|0; //@line 11188 "../sokol\sokol_gfx.h"
  $tobool30 = ($14|0)!=(0|0); //@line 11188 "../sokol\sokol_gfx.h"
  if (!($tobool30)) {
   ___assert_fail((8759|0),(6868|0),11188,(8548|0)); //@line 11188 "../sokol\sokol_gfx.h"
   // unreachable; //@line 11188 "../sokol\sokol_gfx.h"
  }
 }
 $15 = $desc$addr; //@line 11189 "../sokol\sokol_gfx.h"
 $uniform_buffer_size = ((($15)) + 28|0); //@line 11189 "../sokol\sokol_gfx.h"
 $16 = HEAP32[$uniform_buffer_size>>2]|0; //@line 11189 "../sokol\sokol_gfx.h"
 $cmp = ($16|0)>(0); //@line 11189 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((8853|0),(6868|0),11189,(8548|0)); //@line 11189 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11189 "../sokol\sokol_gfx.h"
 }
 $17 = $desc$addr; //@line 11190 "../sokol\sokol_gfx.h"
 $staging_buffer_size = ((($17)) + 32|0); //@line 11190 "../sokol\sokol_gfx.h"
 $18 = HEAP32[$staging_buffer_size>>2]|0; //@line 11190 "../sokol\sokol_gfx.h"
 $cmp37 = ($18|0)>(0); //@line 11190 "../sokol\sokol_gfx.h"
 if (!($cmp37)) {
  ___assert_fail((8883|0),(6868|0),11190,(8548|0)); //@line 11190 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11190 "../sokol\sokol_gfx.h"
 }
 HEAP32[(30484)>>2] = 7; //@line 11191 "../sokol\sokol_gfx.h"
 HEAP8[(30892)>>0] = 1; //@line 11192 "../sokol\sokol_gfx.h"
 $19 = $desc$addr; //@line 11193 "../sokol\sokol_gfx.h"
 $context41 = ((($19)) + 40|0); //@line 11193 "../sokol\sokol_gfx.h"
 $wgpu42 = ((($context41)) + 68|0); //@line 11193 "../sokol\sokol_gfx.h"
 $20 = HEAP32[$wgpu42>>2]|0; //@line 11193 "../sokol\sokol_gfx.h"
 HEAP32[(30904)>>2] = $20; //@line 11193 "../sokol\sokol_gfx.h"
 $21 = $desc$addr; //@line 11194 "../sokol\sokol_gfx.h"
 $context44 = ((($21)) + 40|0); //@line 11194 "../sokol\sokol_gfx.h"
 $wgpu45 = ((($context44)) + 68|0); //@line 11194 "../sokol\sokol_gfx.h"
 $render_view_cb46 = ((($wgpu45)) + 4|0); //@line 11194 "../sokol\sokol_gfx.h"
 $22 = HEAP32[$render_view_cb46>>2]|0; //@line 11194 "../sokol\sokol_gfx.h"
 HEAP32[(30908)>>2] = $22; //@line 11194 "../sokol\sokol_gfx.h"
 $23 = $desc$addr; //@line 11195 "../sokol\sokol_gfx.h"
 $context47 = ((($23)) + 40|0); //@line 11195 "../sokol\sokol_gfx.h"
 $wgpu48 = ((($context47)) + 68|0); //@line 11195 "../sokol\sokol_gfx.h"
 $render_view_userdata_cb49 = ((($wgpu48)) + 8|0); //@line 11195 "../sokol\sokol_gfx.h"
 $24 = HEAP32[$render_view_userdata_cb49>>2]|0; //@line 11195 "../sokol\sokol_gfx.h"
 HEAP32[(30912)>>2] = $24; //@line 11195 "../sokol\sokol_gfx.h"
 $25 = $desc$addr; //@line 11196 "../sokol\sokol_gfx.h"
 $context50 = ((($25)) + 40|0); //@line 11196 "../sokol\sokol_gfx.h"
 $wgpu51 = ((($context50)) + 68|0); //@line 11196 "../sokol\sokol_gfx.h"
 $resolve_view_cb52 = ((($wgpu51)) + 12|0); //@line 11196 "../sokol\sokol_gfx.h"
 $26 = HEAP32[$resolve_view_cb52>>2]|0; //@line 11196 "../sokol\sokol_gfx.h"
 HEAP32[(30916)>>2] = $26; //@line 11196 "../sokol\sokol_gfx.h"
 $27 = $desc$addr; //@line 11197 "../sokol\sokol_gfx.h"
 $context53 = ((($27)) + 40|0); //@line 11197 "../sokol\sokol_gfx.h"
 $wgpu54 = ((($context53)) + 68|0); //@line 11197 "../sokol\sokol_gfx.h"
 $resolve_view_userdata_cb55 = ((($wgpu54)) + 16|0); //@line 11197 "../sokol\sokol_gfx.h"
 $28 = HEAP32[$resolve_view_userdata_cb55>>2]|0; //@line 11197 "../sokol\sokol_gfx.h"
 HEAP32[(30920)>>2] = $28; //@line 11197 "../sokol\sokol_gfx.h"
 $29 = $desc$addr; //@line 11198 "../sokol\sokol_gfx.h"
 $context56 = ((($29)) + 40|0); //@line 11198 "../sokol\sokol_gfx.h"
 $wgpu57 = ((($context56)) + 68|0); //@line 11198 "../sokol\sokol_gfx.h"
 $depth_stencil_view_cb58 = ((($wgpu57)) + 20|0); //@line 11198 "../sokol\sokol_gfx.h"
 $30 = HEAP32[$depth_stencil_view_cb58>>2]|0; //@line 11198 "../sokol\sokol_gfx.h"
 HEAP32[(30924)>>2] = $30; //@line 11198 "../sokol\sokol_gfx.h"
 $31 = $desc$addr; //@line 11199 "../sokol\sokol_gfx.h"
 $context59 = ((($31)) + 40|0); //@line 11199 "../sokol\sokol_gfx.h"
 $wgpu60 = ((($context59)) + 68|0); //@line 11199 "../sokol\sokol_gfx.h"
 $depth_stencil_view_userdata_cb61 = ((($wgpu60)) + 24|0); //@line 11199 "../sokol\sokol_gfx.h"
 $32 = HEAP32[$depth_stencil_view_userdata_cb61>>2]|0; //@line 11199 "../sokol\sokol_gfx.h"
 HEAP32[(30928)>>2] = $32; //@line 11199 "../sokol\sokol_gfx.h"
 $33 = $desc$addr; //@line 11200 "../sokol\sokol_gfx.h"
 $context62 = ((($33)) + 40|0); //@line 11200 "../sokol\sokol_gfx.h"
 $wgpu63 = ((($context62)) + 68|0); //@line 11200 "../sokol\sokol_gfx.h"
 $user_data = ((($wgpu63)) + 28|0); //@line 11200 "../sokol\sokol_gfx.h"
 $34 = HEAP32[$user_data>>2]|0; //@line 11200 "../sokol\sokol_gfx.h"
 HEAP32[(30932)>>2] = $34; //@line 11200 "../sokol\sokol_gfx.h"
 $35 = HEAP32[(30904)>>2]|0; //@line 11201 "../sokol\sokol_gfx.h"
 $call = (_wgpuDeviceCreateQueue(($35|0))|0); //@line 11201 "../sokol\sokol_gfx.h"
 HEAP32[(30936)>>2] = $call; //@line 11201 "../sokol\sokol_gfx.h"
 $36 = HEAP32[(30936)>>2]|0; //@line 11202 "../sokol\sokol_gfx.h"
 $tobool64 = ($36|0)!=(0|0); //@line 11202 "../sokol\sokol_gfx.h"
 if (!($tobool64)) {
  ___assert_fail((8913|0),(6868|0),11202,(8548|0)); //@line 11202 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11202 "../sokol\sokol_gfx.h"
 }
 __sg_wgpu_init_caps(); //@line 11205 "../sokol\sokol_gfx.h"
 __sg_wgpu_init_sampler_cache((30196)); //@line 11208 "../sokol\sokol_gfx.h"
 $37 = $desc$addr; //@line 11209 "../sokol\sokol_gfx.h"
 __sg_wgpu_ubpool_init($37); //@line 11209 "../sokol\sokol_gfx.h"
 __sg_wgpu_ubpool_next_frame(1); //@line 11210 "../sokol\sokol_gfx.h"
 $38 = $desc$addr; //@line 11211 "../sokol\sokol_gfx.h"
 __sg_wgpu_staging_init($38); //@line 11211 "../sokol\sokol_gfx.h"
 __sg_wgpu_staging_next_frame(1); //@line 11212 "../sokol\sokol_gfx.h"
 ;HEAP32[$bgl_desc>>2]=0|0;HEAP32[$bgl_desc+4>>2]=0|0;HEAP32[$bgl_desc+8>>2]=0|0;HEAP32[$bgl_desc+12>>2]=0|0; //@line 11216 "../sokol\sokol_gfx.h"
 $39 = HEAP32[(30904)>>2]|0; //@line 11217 "../sokol\sokol_gfx.h"
 $call68 = (_wgpuDeviceCreateBindGroupLayout(($39|0),($bgl_desc|0))|0); //@line 11217 "../sokol\sokol_gfx.h"
 $empty_bgl = $call68; //@line 11217 "../sokol\sokol_gfx.h"
 $40 = $empty_bgl; //@line 11218 "../sokol\sokol_gfx.h"
 $tobool69 = ($40|0)!=(0|0); //@line 11218 "../sokol\sokol_gfx.h"
 if (!($tobool69)) {
  ___assert_fail((8928|0),(6868|0),11218,(8548|0)); //@line 11218 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11218 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$bg_desc>>2]=0|0;HEAP32[$bg_desc+4>>2]=0|0;HEAP32[$bg_desc+8>>2]=0|0;HEAP32[$bg_desc+12>>2]=0|0;HEAP32[$bg_desc+16>>2]=0|0; //@line 11220 "../sokol\sokol_gfx.h"
 $41 = $empty_bgl; //@line 11221 "../sokol\sokol_gfx.h"
 $layout = ((($bg_desc)) + 8|0); //@line 11221 "../sokol\sokol_gfx.h"
 HEAP32[$layout>>2] = $41; //@line 11221 "../sokol\sokol_gfx.h"
 $42 = HEAP32[(30904)>>2]|0; //@line 11222 "../sokol\sokol_gfx.h"
 $call73 = (_wgpuDeviceCreateBindGroup(($42|0),($bg_desc|0))|0); //@line 11222 "../sokol\sokol_gfx.h"
 HEAP32[(30952)>>2] = $call73; //@line 11222 "../sokol\sokol_gfx.h"
 $43 = HEAP32[(30952)>>2]|0; //@line 11223 "../sokol\sokol_gfx.h"
 $tobool74 = ($43|0)!=(0|0); //@line 11223 "../sokol\sokol_gfx.h"
 if (!($tobool74)) {
  ___assert_fail((8938|0),(6868|0),11223,(8548|0)); //@line 11223 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11223 "../sokol\sokol_gfx.h"
 }
 $44 = $empty_bgl; //@line 11224 "../sokol\sokol_gfx.h"
 _wgpuBindGroupLayoutRelease(($44|0)); //@line 11224 "../sokol\sokol_gfx.h"
 ;HEAP32[$cmd_enc_desc>>2]=0|0;HEAP32[$cmd_enc_desc+4>>2]=0|0; //@line 11228 "../sokol\sokol_gfx.h"
 $45 = HEAP32[(30904)>>2]|0; //@line 11229 "../sokol\sokol_gfx.h"
 $call78 = (_wgpuDeviceCreateCommandEncoder(($45|0),($cmd_enc_desc|0))|0); //@line 11229 "../sokol\sokol_gfx.h"
 HEAP32[(30940)>>2] = $call78; //@line 11229 "../sokol\sokol_gfx.h"
 $46 = HEAP32[(30940)>>2]|0; //@line 11230 "../sokol\sokol_gfx.h"
 $tobool79 = ($46|0)!=(0|0); //@line 11230 "../sokol\sokol_gfx.h"
 if (!($tobool79)) {
  ___assert_fail((8964|0),(6868|0),11230,(8548|0)); //@line 11230 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11230 "../sokol\sokol_gfx.h"
 }
 $47 = HEAP32[(30904)>>2]|0; //@line 11231 "../sokol\sokol_gfx.h"
 $call83 = (_wgpuDeviceCreateCommandEncoder(($47|0),($cmd_enc_desc|0))|0); //@line 11231 "../sokol\sokol_gfx.h"
 HEAP32[(30944)>>2] = $call83; //@line 11231 "../sokol\sokol_gfx.h"
 $48 = HEAP32[(30944)>>2]|0; //@line 11232 "../sokol\sokol_gfx.h"
 $tobool84 = ($48|0)!=(0|0); //@line 11232 "../sokol\sokol_gfx.h"
 if ($tobool84) {
  STACKTOP = sp;return; //@line 11233 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((8988|0),(6868|0),11232,(8548|0)); //@line 11232 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11232 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_init_caps() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(30484)>>2] = 7; //@line 10674 "../sokol\sokol_gfx.h"
 HEAP8[(30488)>>0] = 1; //@line 10675 "../sokol\sokol_gfx.h"
 HEAP8[(30489)>>0] = 1; //@line 10676 "../sokol\sokol_gfx.h"
 HEAP8[(30490)>>0] = 1; //@line 10677 "../sokol\sokol_gfx.h"
 HEAP8[(30491)>>0] = 1; //@line 10678 "../sokol\sokol_gfx.h"
 HEAP8[(30492)>>0] = 1; //@line 10679 "../sokol\sokol_gfx.h"
 HEAP8[(30493)>>0] = 1; //@line 10680 "../sokol\sokol_gfx.h"
 HEAP8[(30494)>>0] = 0; //@line 10681 "../sokol\sokol_gfx.h"
 HEAP32[(30496)>>2] = 8192; //@line 10684 "../sokol\sokol_gfx.h"
 HEAP32[(30500)>>2] = 8192; //@line 10685 "../sokol\sokol_gfx.h"
 HEAP32[(30504)>>2] = 2048; //@line 10686 "../sokol\sokol_gfx.h"
 HEAP32[(30508)>>2] = 8192; //@line 10687 "../sokol\sokol_gfx.h"
 HEAP32[(30512)>>2] = 2048; //@line 10688 "../sokol\sokol_gfx.h"
 HEAP32[(30516)>>2] = 16; //@line 10689 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30532)); //@line 10691 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30538)); //@line 10692 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30544)); //@line 10693 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30550)); //@line 10694 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30568)); //@line 10695 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30574)); //@line 10696 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30580)); //@line 10697 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30586)); //@line 10698 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30592)); //@line 10699 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30598)); //@line 10700 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30604)); //@line 10701 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30610)); //@line 10702 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30616)); //@line 10703 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sbr((30622)); //@line 10704 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30640)); //@line 10705 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30646)); //@line 10706 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30652)); //@line 10707 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30658)); //@line 10708 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30664)); //@line 10709 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30670)); //@line 10710 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30676)); //@line 10711 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30682)); //@line 10712 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30688)); //@line 10713 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30700)); //@line 10714 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30706)); //@line 10715 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sbr((30712)); //@line 10716 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30730)); //@line 10717 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srm((30736)); //@line 10718 "../sokol\sokol_gfx.h"
 __sg_pixelformat_all((30742)); //@line 10719 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30748)); //@line 10720 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30754)); //@line 10721 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sr((30760)); //@line 10722 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srmd((30766)); //@line 10723 "../sokol\sokol_gfx.h"
 __sg_pixelformat_srmd((30772)); //@line 10724 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30778)); //@line 10729 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30784)); //@line 10730 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30790)); //@line 10731 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30796)); //@line 10732 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30802)); //@line 10733 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30808)); //@line 10734 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30814)); //@line 10735 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30820)); //@line 10736 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30826)); //@line 10737 "../sokol\sokol_gfx.h"
 __sg_pixelformat_sf((30832)); //@line 10738 "../sokol\sokol_gfx.h"
 return; //@line 10739 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_init_sampler_cache($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $desc$addr = 0, $sampler_cache_size = 0, $sampler_cache_size1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 11142 "../sokol\sokol_gfx.h"
 $sampler_cache_size = ((($0)) + 36|0); //@line 11142 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$sampler_cache_size>>2]|0; //@line 11142 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)>(0); //@line 11142 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $2 = $desc$addr; //@line 11143 "../sokol\sokol_gfx.h"
  $sampler_cache_size1 = ((($2)) + 36|0); //@line 11143 "../sokol\sokol_gfx.h"
  $3 = HEAP32[$sampler_cache_size1>>2]|0; //@line 11143 "../sokol\sokol_gfx.h"
  __sg_smpcache_init((30964),$3); //@line 11143 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11144 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9013|0),(6868|0),11142,(9042|0)); //@line 11142 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11142 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_ubpool_init($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add39 = 0, $add8 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx11 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx40 = 0, $arrayidx41 = 0, $arrayidx43 = 0;
 var $arrayidx44 = 0, $arrayidx45 = 0, $arrayidx46 = 0, $arrayidx9 = 0, $bg_desc = 0, $bind_index = 0, $bind_index37 = 0, $bindingCount = 0, $bindingCount54 = 0, $bindings = 0, $bindings57 = 0, $buffer = 0, $call = 0, $call21 = 0, $call58 = 0, $cmp = 0, $cmp2 = 0, $cmp29 = 0, $cmp34 = 0, $cmp5 = 0;
 var $cond = 0, $desc$addr = 0, $hasDynamicOffset = 0, $inc = 0, $inc17 = 0, $inc49 = 0, $inc52 = 0, $layout = 0, $mul = 0, $mul38 = 0, $size = 0, $size47 = 0, $stage_index = 0, $stage_index27 = 0, $tobool = 0, $tobool22 = 0, $tobool59 = 0, $type = 0, $ub_bgb = 0, $ub_bgl_desc = 0;
 var $ub_bglb_desc = 0, $ub_desc = 0, $ub_index = 0, $ub_index32 = 0, $uniform_buffer_size = 0, $usage = 0, $vis = 0, $visibility = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $ub_desc = sp + 448|0;
 $ub_bglb_desc = sp + 256|0;
 $ub_bgl_desc = sp + 504|0;
 $ub_bgb = sp;
 $bg_desc = sp + 472|0;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 10762 "../sokol\sokol_gfx.h"
 $uniform_buffer_size = ((($0)) + 28|0); //@line 10762 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$uniform_buffer_size>>2]|0; //@line 10762 "../sokol\sokol_gfx.h"
 $add = (($1) + 65536)|0; //@line 10762 "../sokol\sokol_gfx.h"
 HEAP32[(30980)>>2] = $add; //@line 10762 "../sokol\sokol_gfx.h"
 ;HEAP32[$ub_desc>>2]=0|0;HEAP32[$ub_desc+4>>2]=0|0;HEAP32[$ub_desc+8>>2]=0|0;HEAP32[$ub_desc+12>>2]=0|0;HEAP32[$ub_desc+16>>2]=0|0;HEAP32[$ub_desc+20>>2]=0|0; //@line 10765 "../sokol\sokol_gfx.h"
 $2 = HEAP32[(30980)>>2]|0; //@line 10766 "../sokol\sokol_gfx.h"
 $size = ((($ub_desc)) + 16|0); //@line 10766 "../sokol\sokol_gfx.h"
 $3 = $size; //@line 10766 "../sokol\sokol_gfx.h"
 $4 = $3; //@line 10766 "../sokol\sokol_gfx.h"
 HEAP32[$4>>2] = $2; //@line 10766 "../sokol\sokol_gfx.h"
 $5 = (($3) + 4)|0; //@line 10766 "../sokol\sokol_gfx.h"
 $6 = $5; //@line 10766 "../sokol\sokol_gfx.h"
 HEAP32[$6>>2] = 0; //@line 10766 "../sokol\sokol_gfx.h"
 $usage = ((($ub_desc)) + 8|0); //@line 10767 "../sokol\sokol_gfx.h"
 HEAP32[$usage>>2] = 72; //@line 10767 "../sokol\sokol_gfx.h"
 $7 = HEAP32[(30904)>>2]|0; //@line 10768 "../sokol\sokol_gfx.h"
 $call = (_wgpuDeviceCreateBuffer(($7|0),($ub_desc|0))|0); //@line 10768 "../sokol\sokol_gfx.h"
 HEAP32[(31020)>>2] = $call; //@line 10768 "../sokol\sokol_gfx.h"
 $8 = HEAP32[(31020)>>2]|0; //@line 10769 "../sokol\sokol_gfx.h"
 $tobool = ($8|0)!=(0|0); //@line 10769 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((9112|0),(6868|0),10769,(9128|0)); //@line 10769 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10769 "../sokol\sokol_gfx.h"
 }
 _memset(($ub_bglb_desc|0),0,192)|0; //@line 10772 "../sokol\sokol_gfx.h"
 $stage_index = 0; //@line 10773 "../sokol\sokol_gfx.h"
 while(1) {
  $9 = $stage_index; //@line 10773 "../sokol\sokol_gfx.h"
  $cmp = ($9|0)<(2); //@line 10773 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $10 = $stage_index; //@line 10774 "../sokol\sokol_gfx.h"
  $cmp2 = ($10|0)==(0); //@line 10774 "../sokol\sokol_gfx.h"
  $cond = $cmp2 ? 1 : 2; //@line 10774 "../sokol\sokol_gfx.h"
  $vis = $cond; //@line 10774 "../sokol\sokol_gfx.h"
  $ub_index = 0; //@line 10775 "../sokol\sokol_gfx.h"
  while(1) {
   $11 = $ub_index; //@line 10775 "../sokol\sokol_gfx.h"
   $cmp5 = ($11|0)<(4); //@line 10775 "../sokol\sokol_gfx.h"
   $12 = $stage_index;
   if (!($cmp5)) {
    break;
   }
   $mul = $12<<2; //@line 10776 "../sokol\sokol_gfx.h"
   $13 = $ub_index; //@line 10776 "../sokol\sokol_gfx.h"
   $add8 = (($mul) + ($13))|0; //@line 10776 "../sokol\sokol_gfx.h"
   $bind_index = $add8; //@line 10776 "../sokol\sokol_gfx.h"
   $14 = $bind_index; //@line 10777 "../sokol\sokol_gfx.h"
   $15 = $stage_index; //@line 10777 "../sokol\sokol_gfx.h"
   $arrayidx = (($ub_bglb_desc) + (($15*96)|0)|0); //@line 10777 "../sokol\sokol_gfx.h"
   $16 = $ub_index; //@line 10777 "../sokol\sokol_gfx.h"
   $arrayidx9 = (($arrayidx) + (($16*24)|0)|0); //@line 10777 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx9>>2] = $14; //@line 10777 "../sokol\sokol_gfx.h"
   $17 = $vis; //@line 10778 "../sokol\sokol_gfx.h"
   $18 = $stage_index; //@line 10778 "../sokol\sokol_gfx.h"
   $arrayidx10 = (($ub_bglb_desc) + (($18*96)|0)|0); //@line 10778 "../sokol\sokol_gfx.h"
   $19 = $ub_index; //@line 10778 "../sokol\sokol_gfx.h"
   $arrayidx11 = (($arrayidx10) + (($19*24)|0)|0); //@line 10778 "../sokol\sokol_gfx.h"
   $visibility = ((($arrayidx11)) + 4|0); //@line 10778 "../sokol\sokol_gfx.h"
   HEAP32[$visibility>>2] = $17; //@line 10778 "../sokol\sokol_gfx.h"
   $20 = $stage_index; //@line 10779 "../sokol\sokol_gfx.h"
   $arrayidx12 = (($ub_bglb_desc) + (($20*96)|0)|0); //@line 10779 "../sokol\sokol_gfx.h"
   $21 = $ub_index; //@line 10779 "../sokol\sokol_gfx.h"
   $arrayidx13 = (($arrayidx12) + (($21*24)|0)|0); //@line 10779 "../sokol\sokol_gfx.h"
   $type = ((($arrayidx13)) + 8|0); //@line 10779 "../sokol\sokol_gfx.h"
   HEAP32[$type>>2] = 0; //@line 10779 "../sokol\sokol_gfx.h"
   $22 = $stage_index; //@line 10780 "../sokol\sokol_gfx.h"
   $arrayidx14 = (($ub_bglb_desc) + (($22*96)|0)|0); //@line 10780 "../sokol\sokol_gfx.h"
   $23 = $ub_index; //@line 10780 "../sokol\sokol_gfx.h"
   $arrayidx15 = (($arrayidx14) + (($23*24)|0)|0); //@line 10780 "../sokol\sokol_gfx.h"
   $hasDynamicOffset = ((($arrayidx15)) + 12|0); //@line 10780 "../sokol\sokol_gfx.h"
   HEAP8[$hasDynamicOffset>>0] = 1; //@line 10780 "../sokol\sokol_gfx.h"
   $24 = $ub_index; //@line 10775 "../sokol\sokol_gfx.h"
   $inc = (($24) + 1)|0; //@line 10775 "../sokol\sokol_gfx.h"
   $ub_index = $inc; //@line 10775 "../sokol\sokol_gfx.h"
  }
  $inc17 = (($12) + 1)|0; //@line 10773 "../sokol\sokol_gfx.h"
  $stage_index = $inc17; //@line 10773 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$ub_bgl_desc>>2]=0|0;HEAP32[$ub_bgl_desc+4>>2]=0|0;HEAP32[$ub_bgl_desc+8>>2]=0|0;HEAP32[$ub_bgl_desc+12>>2]=0|0; //@line 10785 "../sokol\sokol_gfx.h"
 $bindingCount = ((($ub_bgl_desc)) + 8|0); //@line 10786 "../sokol\sokol_gfx.h"
 HEAP32[$bindingCount>>2] = 8; //@line 10786 "../sokol\sokol_gfx.h"
 $bindings = ((($ub_bgl_desc)) + 12|0); //@line 10787 "../sokol\sokol_gfx.h"
 HEAP32[$bindings>>2] = $ub_bglb_desc; //@line 10787 "../sokol\sokol_gfx.h"
 $25 = HEAP32[(30904)>>2]|0; //@line 10788 "../sokol\sokol_gfx.h"
 $call21 = (_wgpuDeviceCreateBindGroupLayout(($25|0),($ub_bgl_desc|0))|0); //@line 10788 "../sokol\sokol_gfx.h"
 HEAP32[(30976)>>2] = $call21; //@line 10788 "../sokol\sokol_gfx.h"
 $26 = HEAP32[(30976)>>2]|0; //@line 10789 "../sokol\sokol_gfx.h"
 $tobool22 = ($26|0)!=(0|0); //@line 10789 "../sokol\sokol_gfx.h"
 if (!($tobool22)) {
  ___assert_fail((9149|0),(6868|0),10789,(9128|0)); //@line 10789 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10789 "../sokol\sokol_gfx.h"
 }
 _memset(($ub_bgb|0),0,256)|0; //@line 10792 "../sokol\sokol_gfx.h"
 $stage_index27 = 0; //@line 10793 "../sokol\sokol_gfx.h"
 while(1) {
  $27 = $stage_index27; //@line 10793 "../sokol\sokol_gfx.h"
  $cmp29 = ($27|0)<(2); //@line 10793 "../sokol\sokol_gfx.h"
  if (!($cmp29)) {
   break;
  }
  $ub_index32 = 0; //@line 10794 "../sokol\sokol_gfx.h"
  while(1) {
   $28 = $ub_index32; //@line 10794 "../sokol\sokol_gfx.h"
   $cmp34 = ($28|0)<(4); //@line 10794 "../sokol\sokol_gfx.h"
   $29 = $stage_index27;
   if (!($cmp34)) {
    break;
   }
   $mul38 = $29<<2; //@line 10795 "../sokol\sokol_gfx.h"
   $30 = $ub_index32; //@line 10795 "../sokol\sokol_gfx.h"
   $add39 = (($mul38) + ($30))|0; //@line 10795 "../sokol\sokol_gfx.h"
   $bind_index37 = $add39; //@line 10795 "../sokol\sokol_gfx.h"
   $31 = $bind_index37; //@line 10796 "../sokol\sokol_gfx.h"
   $32 = $stage_index27; //@line 10796 "../sokol\sokol_gfx.h"
   $arrayidx40 = (($ub_bgb) + ($32<<7)|0); //@line 10796 "../sokol\sokol_gfx.h"
   $33 = $ub_index32; //@line 10796 "../sokol\sokol_gfx.h"
   $arrayidx41 = (($arrayidx40) + ($33<<5)|0); //@line 10796 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx41>>2] = $31; //@line 10796 "../sokol\sokol_gfx.h"
   $34 = HEAP32[(31020)>>2]|0; //@line 10797 "../sokol\sokol_gfx.h"
   $35 = $stage_index27; //@line 10797 "../sokol\sokol_gfx.h"
   $arrayidx43 = (($ub_bgb) + ($35<<7)|0); //@line 10797 "../sokol\sokol_gfx.h"
   $36 = $ub_index32; //@line 10797 "../sokol\sokol_gfx.h"
   $arrayidx44 = (($arrayidx43) + ($36<<5)|0); //@line 10797 "../sokol\sokol_gfx.h"
   $buffer = ((($arrayidx44)) + 4|0); //@line 10797 "../sokol\sokol_gfx.h"
   HEAP32[$buffer>>2] = $34; //@line 10797 "../sokol\sokol_gfx.h"
   $37 = $stage_index27; //@line 10799 "../sokol\sokol_gfx.h"
   $arrayidx45 = (($ub_bgb) + ($37<<7)|0); //@line 10799 "../sokol\sokol_gfx.h"
   $38 = $ub_index32; //@line 10799 "../sokol\sokol_gfx.h"
   $arrayidx46 = (($arrayidx45) + ($38<<5)|0); //@line 10799 "../sokol\sokol_gfx.h"
   $size47 = ((($arrayidx46)) + 16|0); //@line 10799 "../sokol\sokol_gfx.h"
   $39 = $size47; //@line 10799 "../sokol\sokol_gfx.h"
   $40 = $39; //@line 10799 "../sokol\sokol_gfx.h"
   HEAP32[$40>>2] = 65536; //@line 10799 "../sokol\sokol_gfx.h"
   $41 = (($39) + 4)|0; //@line 10799 "../sokol\sokol_gfx.h"
   $42 = $41; //@line 10799 "../sokol\sokol_gfx.h"
   HEAP32[$42>>2] = 0; //@line 10799 "../sokol\sokol_gfx.h"
   $43 = $ub_index32; //@line 10794 "../sokol\sokol_gfx.h"
   $inc49 = (($43) + 1)|0; //@line 10794 "../sokol\sokol_gfx.h"
   $ub_index32 = $inc49; //@line 10794 "../sokol\sokol_gfx.h"
  }
  $inc52 = (($29) + 1)|0; //@line 10793 "../sokol\sokol_gfx.h"
  $stage_index27 = $inc52; //@line 10793 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$bg_desc>>2]=0|0;HEAP32[$bg_desc+4>>2]=0|0;HEAP32[$bg_desc+8>>2]=0|0;HEAP32[$bg_desc+12>>2]=0|0;HEAP32[$bg_desc+16>>2]=0|0; //@line 10803 "../sokol\sokol_gfx.h"
 $44 = HEAP32[(30976)>>2]|0; //@line 10804 "../sokol\sokol_gfx.h"
 $layout = ((($bg_desc)) + 8|0); //@line 10804 "../sokol\sokol_gfx.h"
 HEAP32[$layout>>2] = $44; //@line 10804 "../sokol\sokol_gfx.h"
 $bindingCount54 = ((($bg_desc)) + 12|0); //@line 10805 "../sokol\sokol_gfx.h"
 HEAP32[$bindingCount54>>2] = 8; //@line 10805 "../sokol\sokol_gfx.h"
 $bindings57 = ((($bg_desc)) + 16|0); //@line 10806 "../sokol\sokol_gfx.h"
 HEAP32[$bindings57>>2] = $ub_bgb; //@line 10806 "../sokol\sokol_gfx.h"
 $45 = HEAP32[(30904)>>2]|0; //@line 10807 "../sokol\sokol_gfx.h"
 $call58 = (_wgpuDeviceCreateBindGroup(($45|0),($bg_desc|0))|0); //@line 10807 "../sokol\sokol_gfx.h"
 HEAP32[(31024)>>2] = $call58; //@line 10807 "../sokol\sokol_gfx.h"
 $46 = HEAP32[(31024)>>2]|0; //@line 10808 "../sokol\sokol_gfx.h"
 $tobool59 = ($46|0)!=(0|0); //@line 10808 "../sokol\sokol_gfx.h"
 if ($tobool59) {
  STACKTOP = sp;return; //@line 10809 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9178|0),(6868|0),10808,(9128|0)); //@line 10808 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10808 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_ubpool_next_frame($first_frame) {
 $first_frame = $first_frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0;
 var $arrayidx14 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cmp = 0, $cmp5 = 0, $cur = 0, $data = 0, $dataLength = 0, $desc = 0, $first_frame$addr = 0, $frombool = 0, $i = 0, $inc = 0, $inc6 = 0, $res = 0, $size = 0, $tobool = 0, $tobool10 = 0, $tobool15 = 0;
 var $tobool2 = 0, $ub_src = 0, $usage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $desc = sp + 24|0;
 $res = sp;
 $frombool = $first_frame&1;
 $first_frame$addr = $frombool;
 $0 = $first_frame$addr; //@line 10852 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 10852 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  $1 = HEAP32[(31032)>>2]|0; //@line 10853 "../sokol\sokol_gfx.h"
  $arrayidx = ((31036) + ($1<<2)|0); //@line 10853 "../sokol\sokol_gfx.h"
  $2 = HEAP32[$arrayidx>>2]|0; //@line 10853 "../sokol\sokol_gfx.h"
  $ub_src = $2; //@line 10853 "../sokol\sokol_gfx.h"
  $3 = $ub_src; //@line 10854 "../sokol\sokol_gfx.h"
  $4 = HEAP32[(31032)>>2]|0; //@line 10854 "../sokol\sokol_gfx.h"
  $5 = $4; //@line 10854 "../sokol\sokol_gfx.h"
  _wgpuBufferMapWriteAsync(($3|0),(208|0),($5|0)); //@line 10854 "../sokol\sokol_gfx.h"
 }
 HEAP32[(30984)>>2] = 0; //@line 10858 "../sokol\sokol_gfx.h"
 ;HEAP32[(30988)>>2]=0|0;HEAP32[(30988)+4>>2]=0|0;HEAP32[(30988)+8>>2]=0|0;HEAP32[(30988)+12>>2]=0|0;HEAP32[(30988)+16>>2]=0|0;HEAP32[(30988)+20>>2]=0|0;HEAP32[(30988)+24>>2]=0|0;HEAP32[(30988)+28>>2]=0|0; //@line 10859 "../sokol\sokol_gfx.h"
 $i = 0; //@line 10862 "../sokol\sokol_gfx.h"
 while(1) {
  $6 = $i; //@line 10862 "../sokol\sokol_gfx.h"
  $7 = HEAP32[(31028)>>2]|0; //@line 10862 "../sokol\sokol_gfx.h"
  $cmp = ($6|0)<($7|0); //@line 10862 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $8 = $i; //@line 10863 "../sokol\sokol_gfx.h"
  $arrayidx1 = ((31068) + ($8<<2)|0); //@line 10863 "../sokol\sokol_gfx.h"
  $9 = HEAP32[$arrayidx1>>2]|0; //@line 10863 "../sokol\sokol_gfx.h"
  $tobool2 = ($9|0)!=(0|0); //@line 10863 "../sokol\sokol_gfx.h"
  $10 = $i;
  if ($tobool2) {
   label = 6;
   break;
  }
  $inc = (($10) + 1)|0; //@line 10862 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 10862 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 6) {
  HEAP32[(31032)>>2] = $10; //@line 10864 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 10884 "../sokol\sokol_gfx.h"
 }
 $11 = HEAP32[(31028)>>2]|0; //@line 10870 "../sokol\sokol_gfx.h"
 $cmp5 = ($11|0)<(8); //@line 10870 "../sokol\sokol_gfx.h"
 if (!($cmp5)) {
  ___assert_fail((9200|0),(6868|0),10870,(9228|0)); //@line 10870 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10870 "../sokol\sokol_gfx.h"
 }
 $12 = HEAP32[(31028)>>2]|0; //@line 10871 "../sokol\sokol_gfx.h"
 $inc6 = (($12) + 1)|0; //@line 10871 "../sokol\sokol_gfx.h"
 HEAP32[(31028)>>2] = $inc6; //@line 10871 "../sokol\sokol_gfx.h"
 HEAP32[(31032)>>2] = $12; //@line 10871 "../sokol\sokol_gfx.h"
 $13 = HEAP32[(31032)>>2]|0; //@line 10872 "../sokol\sokol_gfx.h"
 $cur = $13; //@line 10872 "../sokol\sokol_gfx.h"
 ;HEAP32[$desc>>2]=0|0;HEAP32[$desc+4>>2]=0|0;HEAP32[$desc+8>>2]=0|0;HEAP32[$desc+12>>2]=0|0;HEAP32[$desc+16>>2]=0|0;HEAP32[$desc+20>>2]=0|0; //@line 10875 "../sokol\sokol_gfx.h"
 $14 = HEAP32[(30980)>>2]|0; //@line 10876 "../sokol\sokol_gfx.h"
 $size = ((($desc)) + 16|0); //@line 10876 "../sokol\sokol_gfx.h"
 $15 = $size; //@line 10876 "../sokol\sokol_gfx.h"
 $16 = $15; //@line 10876 "../sokol\sokol_gfx.h"
 HEAP32[$16>>2] = $14; //@line 10876 "../sokol\sokol_gfx.h"
 $17 = (($15) + 4)|0; //@line 10876 "../sokol\sokol_gfx.h"
 $18 = $17; //@line 10876 "../sokol\sokol_gfx.h"
 HEAP32[$18>>2] = 0; //@line 10876 "../sokol\sokol_gfx.h"
 $usage = ((($desc)) + 8|0); //@line 10877 "../sokol\sokol_gfx.h"
 HEAP32[$usage>>2] = 6; //@line 10877 "../sokol\sokol_gfx.h"
 $19 = HEAP32[(30904)>>2]|0; //@line 10878 "../sokol\sokol_gfx.h"
 _wgpuDeviceCreateBufferMapped(($res|0),($19|0),($desc|0)); //@line 10878 "../sokol\sokol_gfx.h"
 $20 = HEAP32[$res>>2]|0; //@line 10879 "../sokol\sokol_gfx.h"
 $21 = $cur; //@line 10879 "../sokol\sokol_gfx.h"
 $arrayidx7 = ((31036) + ($21<<2)|0); //@line 10879 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx7>>2] = $20; //@line 10879 "../sokol\sokol_gfx.h"
 $data = ((($res)) + 16|0); //@line 10880 "../sokol\sokol_gfx.h"
 $22 = HEAP32[$data>>2]|0; //@line 10880 "../sokol\sokol_gfx.h"
 $23 = $cur; //@line 10880 "../sokol\sokol_gfx.h"
 $arrayidx8 = ((31068) + ($23<<2)|0); //@line 10880 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx8>>2] = $22; //@line 10880 "../sokol\sokol_gfx.h"
 $24 = $cur; //@line 10881 "../sokol\sokol_gfx.h"
 $arrayidx9 = ((31036) + ($24<<2)|0); //@line 10881 "../sokol\sokol_gfx.h"
 $25 = HEAP32[$arrayidx9>>2]|0; //@line 10881 "../sokol\sokol_gfx.h"
 $tobool10 = ($25|0)!=(0|0); //@line 10881 "../sokol\sokol_gfx.h"
 if (!($tobool10)) {
  ___assert_fail((9255|0),(6868|0),10881,(9228|0)); //@line 10881 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10881 "../sokol\sokol_gfx.h"
 }
 $26 = $cur; //@line 10882 "../sokol\sokol_gfx.h"
 $arrayidx14 = ((31068) + ($26<<2)|0); //@line 10882 "../sokol\sokol_gfx.h"
 $27 = HEAP32[$arrayidx14>>2]|0; //@line 10882 "../sokol\sokol_gfx.h"
 $tobool15 = ($27|0)!=(0|0); //@line 10882 "../sokol\sokol_gfx.h"
 if (!($tobool15)) {
  ___assert_fail((9282|0),(6868|0),10882,(9228|0)); //@line 10882 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10882 "../sokol\sokol_gfx.h"
 }
 $dataLength = ((($res)) + 8|0); //@line 10883 "../sokol\sokol_gfx.h"
 $28 = $dataLength; //@line 10883 "../sokol\sokol_gfx.h"
 $29 = $28; //@line 10883 "../sokol\sokol_gfx.h"
 $30 = HEAP32[$29>>2]|0; //@line 10883 "../sokol\sokol_gfx.h"
 $31 = (($28) + 4)|0; //@line 10883 "../sokol\sokol_gfx.h"
 $32 = $31; //@line 10883 "../sokol\sokol_gfx.h"
 $33 = HEAP32[$32>>2]|0; //@line 10883 "../sokol\sokol_gfx.h"
 $34 = HEAP32[(30980)>>2]|0; //@line 10883 "../sokol\sokol_gfx.h"
 $35 = ($30|0)==($34|0); //@line 10883 "../sokol\sokol_gfx.h"
 $36 = ($33|0)==(0); //@line 10883 "../sokol\sokol_gfx.h"
 $37 = $35 & $36; //@line 10883 "../sokol\sokol_gfx.h"
 if (!($37)) {
  ___assert_fail((9309|0),(6868|0),10883,(9228|0)); //@line 10883 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10883 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 10884 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_staging_init($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $desc$addr = 0, $staging_buffer_size = 0, $staging_buffer_size1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 11017 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11017 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((9523|0),(6868|0),11017,(9563|0)); //@line 11017 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11017 "../sokol\sokol_gfx.h"
 }
 $1 = $desc$addr; //@line 11017 "../sokol\sokol_gfx.h"
 $staging_buffer_size = ((($1)) + 32|0); //@line 11017 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$staging_buffer_size>>2]|0; //@line 11017 "../sokol\sokol_gfx.h"
 $cmp = ($2|0)>(0); //@line 11017 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $3 = $desc$addr; //@line 11018 "../sokol\sokol_gfx.h"
  $staging_buffer_size1 = ((($3)) + 32|0); //@line 11018 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$staging_buffer_size1>>2]|0; //@line 11018 "../sokol\sokol_gfx.h"
  HEAP32[(31100)>>2] = $4; //@line 11018 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11020 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9523|0),(6868|0),11017,(9563|0)); //@line 11017 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11017 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_staging_next_frame($first_frame) {
 $first_frame = $first_frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0;
 var $arrayidx14 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $cmp = 0, $cmp5 = 0, $cur = 0, $cur_buf = 0, $data = 0, $dataLength = 0, $desc = 0, $first_frame$addr = 0, $frombool = 0, $i = 0, $inc = 0, $inc6 = 0, $res = 0, $size = 0, $tobool = 0, $tobool10 = 0;
 var $tobool15 = 0, $tobool2 = 0, $usage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $desc = sp + 24|0;
 $res = sp;
 $frombool = $first_frame&1;
 $first_frame$addr = $frombool;
 $0 = $first_frame$addr; //@line 11051 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 11051 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  $1 = HEAP32[(31112)>>2]|0; //@line 11052 "../sokol\sokol_gfx.h"
  $arrayidx = ((31116) + ($1<<2)|0); //@line 11052 "../sokol\sokol_gfx.h"
  $2 = HEAP32[$arrayidx>>2]|0; //@line 11052 "../sokol\sokol_gfx.h"
  $cur_buf = $2; //@line 11052 "../sokol\sokol_gfx.h"
  $3 = $cur_buf; //@line 11053 "../sokol\sokol_gfx.h"
  $4 = HEAP32[(31112)>>2]|0; //@line 11053 "../sokol\sokol_gfx.h"
  $5 = $4; //@line 11053 "../sokol\sokol_gfx.h"
  _wgpuBufferMapWriteAsync(($3|0),(209|0),($5|0)); //@line 11053 "../sokol\sokol_gfx.h"
 }
 HEAP32[(31104)>>2] = 0; //@line 11057 "../sokol\sokol_gfx.h"
 $i = 0; //@line 11060 "../sokol\sokol_gfx.h"
 while(1) {
  $6 = $i; //@line 11060 "../sokol\sokol_gfx.h"
  $7 = HEAP32[(31108)>>2]|0; //@line 11060 "../sokol\sokol_gfx.h"
  $cmp = ($6|0)<($7|0); //@line 11060 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $8 = $i; //@line 11061 "../sokol\sokol_gfx.h"
  $arrayidx1 = ((31148) + ($8<<2)|0); //@line 11061 "../sokol\sokol_gfx.h"
  $9 = HEAP32[$arrayidx1>>2]|0; //@line 11061 "../sokol\sokol_gfx.h"
  $tobool2 = ($9|0)!=(0|0); //@line 11061 "../sokol\sokol_gfx.h"
  $10 = $i;
  if ($tobool2) {
   label = 6;
   break;
  }
  $inc = (($10) + 1)|0; //@line 11060 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 11060 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 6) {
  HEAP32[(31112)>>2] = $10; //@line 11062 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11082 "../sokol\sokol_gfx.h"
 }
 $11 = HEAP32[(31108)>>2]|0; //@line 11068 "../sokol\sokol_gfx.h"
 $cmp5 = ($11|0)<(8); //@line 11068 "../sokol\sokol_gfx.h"
 if (!($cmp5)) {
  ___assert_fail((9585|0),(6868|0),11068,(9612|0)); //@line 11068 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11068 "../sokol\sokol_gfx.h"
 }
 $12 = HEAP32[(31108)>>2]|0; //@line 11069 "../sokol\sokol_gfx.h"
 $inc6 = (($12) + 1)|0; //@line 11069 "../sokol\sokol_gfx.h"
 HEAP32[(31108)>>2] = $inc6; //@line 11069 "../sokol\sokol_gfx.h"
 HEAP32[(31112)>>2] = $12; //@line 11069 "../sokol\sokol_gfx.h"
 $13 = HEAP32[(31112)>>2]|0; //@line 11070 "../sokol\sokol_gfx.h"
 $cur = $13; //@line 11070 "../sokol\sokol_gfx.h"
 ;HEAP32[$desc>>2]=0|0;HEAP32[$desc+4>>2]=0|0;HEAP32[$desc+8>>2]=0|0;HEAP32[$desc+12>>2]=0|0;HEAP32[$desc+16>>2]=0|0;HEAP32[$desc+20>>2]=0|0; //@line 11073 "../sokol\sokol_gfx.h"
 $14 = HEAP32[(31100)>>2]|0; //@line 11074 "../sokol\sokol_gfx.h"
 $size = ((($desc)) + 16|0); //@line 11074 "../sokol\sokol_gfx.h"
 $15 = $size; //@line 11074 "../sokol\sokol_gfx.h"
 $16 = $15; //@line 11074 "../sokol\sokol_gfx.h"
 HEAP32[$16>>2] = $14; //@line 11074 "../sokol\sokol_gfx.h"
 $17 = (($15) + 4)|0; //@line 11074 "../sokol\sokol_gfx.h"
 $18 = $17; //@line 11074 "../sokol\sokol_gfx.h"
 HEAP32[$18>>2] = 0; //@line 11074 "../sokol\sokol_gfx.h"
 $usage = ((($desc)) + 8|0); //@line 11075 "../sokol\sokol_gfx.h"
 HEAP32[$usage>>2] = 6; //@line 11075 "../sokol\sokol_gfx.h"
 $19 = HEAP32[(30904)>>2]|0; //@line 11076 "../sokol\sokol_gfx.h"
 _wgpuDeviceCreateBufferMapped(($res|0),($19|0),($desc|0)); //@line 11076 "../sokol\sokol_gfx.h"
 $20 = HEAP32[$res>>2]|0; //@line 11077 "../sokol\sokol_gfx.h"
 $21 = $cur; //@line 11077 "../sokol\sokol_gfx.h"
 $arrayidx7 = ((31116) + ($21<<2)|0); //@line 11077 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx7>>2] = $20; //@line 11077 "../sokol\sokol_gfx.h"
 $data = ((($res)) + 16|0); //@line 11078 "../sokol\sokol_gfx.h"
 $22 = HEAP32[$data>>2]|0; //@line 11078 "../sokol\sokol_gfx.h"
 $23 = $cur; //@line 11078 "../sokol\sokol_gfx.h"
 $arrayidx8 = ((31148) + ($23<<2)|0); //@line 11078 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx8>>2] = $22; //@line 11078 "../sokol\sokol_gfx.h"
 $24 = $cur; //@line 11079 "../sokol\sokol_gfx.h"
 $arrayidx9 = ((31116) + ($24<<2)|0); //@line 11079 "../sokol\sokol_gfx.h"
 $25 = HEAP32[$arrayidx9>>2]|0; //@line 11079 "../sokol\sokol_gfx.h"
 $tobool10 = ($25|0)!=(0|0); //@line 11079 "../sokol\sokol_gfx.h"
 if (!($tobool10)) {
  ___assert_fail((9640|0),(6868|0),11079,(9612|0)); //@line 11079 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11079 "../sokol\sokol_gfx.h"
 }
 $26 = $cur; //@line 11080 "../sokol\sokol_gfx.h"
 $arrayidx14 = ((31148) + ($26<<2)|0); //@line 11080 "../sokol\sokol_gfx.h"
 $27 = HEAP32[$arrayidx14>>2]|0; //@line 11080 "../sokol\sokol_gfx.h"
 $tobool15 = ($27|0)!=(0|0); //@line 11080 "../sokol\sokol_gfx.h"
 if (!($tobool15)) {
  ___assert_fail((9666|0),(6868|0),11080,(9612|0)); //@line 11080 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11080 "../sokol\sokol_gfx.h"
 }
 $dataLength = ((($res)) + 8|0); //@line 11081 "../sokol\sokol_gfx.h"
 $28 = $dataLength; //@line 11081 "../sokol\sokol_gfx.h"
 $29 = $28; //@line 11081 "../sokol\sokol_gfx.h"
 $30 = HEAP32[$29>>2]|0; //@line 11081 "../sokol\sokol_gfx.h"
 $31 = (($28) + 4)|0; //@line 11081 "../sokol\sokol_gfx.h"
 $32 = $31; //@line 11081 "../sokol\sokol_gfx.h"
 $33 = HEAP32[$32>>2]|0; //@line 11081 "../sokol\sokol_gfx.h"
 $34 = HEAP32[(31100)>>2]|0; //@line 11081 "../sokol\sokol_gfx.h"
 $35 = ($30|0)==($34|0); //@line 11081 "../sokol\sokol_gfx.h"
 $36 = ($33|0)==(0); //@line 11081 "../sokol\sokol_gfx.h"
 $37 = $35 & $36; //@line 11081 "../sokol\sokol_gfx.h"
 if (!($37)) {
  ___assert_fail((9692|0),(6868|0),11081,(9612|0)); //@line 11081 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11081 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 11082 "../sokol\sokol_gfx.h"
}
function __sg_pixelformat_all($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $blend = 0, $filter = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr; //@line 3955 "../sokol\sokol_gfx.h"
 HEAP8[$0>>0] = 1; //@line 3955 "../sokol\sokol_gfx.h"
 $1 = $pfi$addr; //@line 3956 "../sokol\sokol_gfx.h"
 $filter = ((($1)) + 1|0); //@line 3956 "../sokol\sokol_gfx.h"
 HEAP8[$filter>>0] = 1; //@line 3956 "../sokol\sokol_gfx.h"
 $2 = $pfi$addr; //@line 3957 "../sokol\sokol_gfx.h"
 $blend = ((($2)) + 3|0); //@line 3957 "../sokol\sokol_gfx.h"
 HEAP8[$blend>>0] = 1; //@line 3957 "../sokol\sokol_gfx.h"
 $3 = $pfi$addr; //@line 3958 "../sokol\sokol_gfx.h"
 $render = ((($3)) + 2|0); //@line 3958 "../sokol\sokol_gfx.h"
 HEAP8[$render>>0] = 1; //@line 3958 "../sokol\sokol_gfx.h"
 $4 = $pfi$addr; //@line 3959 "../sokol\sokol_gfx.h"
 $msaa = ((($4)) + 4|0); //@line 3959 "../sokol\sokol_gfx.h"
 HEAP8[$msaa>>0] = 1; //@line 3959 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 3960 "../sokol\sokol_gfx.h"
}
function __sg_pixelformat_sf($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $filter = 0, $pfi$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr; //@line 3967 "../sokol\sokol_gfx.h"
 HEAP8[$0>>0] = 1; //@line 3967 "../sokol\sokol_gfx.h"
 $1 = $pfi$addr; //@line 3968 "../sokol\sokol_gfx.h"
 $filter = ((($1)) + 1|0); //@line 3968 "../sokol\sokol_gfx.h"
 HEAP8[$filter>>0] = 1; //@line 3968 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 3969 "../sokol\sokol_gfx.h"
}
function __sg_pixelformat_srm($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr; //@line 3984 "../sokol\sokol_gfx.h"
 HEAP8[$0>>0] = 1; //@line 3984 "../sokol\sokol_gfx.h"
 $1 = $pfi$addr; //@line 3985 "../sokol\sokol_gfx.h"
 $render = ((($1)) + 2|0); //@line 3985 "../sokol\sokol_gfx.h"
 HEAP8[$render>>0] = 1; //@line 3985 "../sokol\sokol_gfx.h"
 $2 = $pfi$addr; //@line 3986 "../sokol\sokol_gfx.h"
 $msaa = ((($2)) + 4|0); //@line 3986 "../sokol\sokol_gfx.h"
 HEAP8[$msaa>>0] = 1; //@line 3986 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 3987 "../sokol\sokol_gfx.h"
}
function __sg_pixelformat_sr($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr; //@line 3972 "../sokol\sokol_gfx.h"
 HEAP8[$0>>0] = 1; //@line 3972 "../sokol\sokol_gfx.h"
 $1 = $pfi$addr; //@line 3973 "../sokol\sokol_gfx.h"
 $render = ((($1)) + 2|0); //@line 3973 "../sokol\sokol_gfx.h"
 HEAP8[$render>>0] = 1; //@line 3973 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 3974 "../sokol\sokol_gfx.h"
}
function __sg_pixelformat_sbr($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $blend = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr; //@line 4003 "../sokol\sokol_gfx.h"
 HEAP8[$0>>0] = 1; //@line 4003 "../sokol\sokol_gfx.h"
 $1 = $pfi$addr; //@line 4004 "../sokol\sokol_gfx.h"
 $blend = ((($1)) + 3|0); //@line 4004 "../sokol\sokol_gfx.h"
 HEAP8[$blend>>0] = 1; //@line 4004 "../sokol\sokol_gfx.h"
 $2 = $pfi$addr; //@line 4005 "../sokol\sokol_gfx.h"
 $render = ((($2)) + 2|0); //@line 4005 "../sokol\sokol_gfx.h"
 HEAP8[$render>>0] = 1; //@line 4005 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 4006 "../sokol\sokol_gfx.h"
}
function __sg_pixelformat_srmd($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $depth = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr; //@line 3977 "../sokol\sokol_gfx.h"
 HEAP8[$0>>0] = 1; //@line 3977 "../sokol\sokol_gfx.h"
 $1 = $pfi$addr; //@line 3978 "../sokol\sokol_gfx.h"
 $render = ((($1)) + 2|0); //@line 3978 "../sokol\sokol_gfx.h"
 HEAP8[$render>>0] = 1; //@line 3978 "../sokol\sokol_gfx.h"
 $2 = $pfi$addr; //@line 3979 "../sokol\sokol_gfx.h"
 $msaa = ((($2)) + 4|0); //@line 3979 "../sokol\sokol_gfx.h"
 HEAP8[$msaa>>0] = 1; //@line 3979 "../sokol\sokol_gfx.h"
 $3 = $pfi$addr; //@line 3980 "../sokol\sokol_gfx.h"
 $depth = ((($3)) + 5|0); //@line 3980 "../sokol\sokol_gfx.h"
 HEAP8[$depth>>0] = 1; //@line 3980 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 3981 "../sokol\sokol_gfx.h"
}
function __sg_smpcache_init($cache,$capacity) {
 $cache = $cache|0;
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cache$addr = 0, $call = 0, $capacity$addr = 0, $cmp = 0, $items = 0, $items3 = 0, $mul = 0, $or$cond = 0;
 var $size = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cache$addr = $cache;
 $capacity$addr = $capacity;
 $0 = $cache$addr; //@line 2819 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 2819 "../sokol\sokol_gfx.h"
 $1 = $capacity$addr; //@line 2819 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)>(0); //@line 2819 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 2819 "../sokol\sokol_gfx.h"
 if ($or$cond) {
  $2 = $cache$addr; //@line 2820 "../sokol\sokol_gfx.h"
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0; //@line 2820 "../sokol\sokol_gfx.h"
  $3 = $capacity$addr; //@line 2821 "../sokol\sokol_gfx.h"
  $4 = $cache$addr; //@line 2821 "../sokol\sokol_gfx.h"
  HEAP32[$4>>2] = $3; //@line 2821 "../sokol\sokol_gfx.h"
  $5 = $cache$addr; //@line 2822 "../sokol\sokol_gfx.h"
  $6 = HEAP32[$5>>2]|0; //@line 2822 "../sokol\sokol_gfx.h"
  $mul = ($6*40)|0; //@line 2822 "../sokol\sokol_gfx.h"
  $size = $mul; //@line 2822 "../sokol\sokol_gfx.h"
  $7 = $size; //@line 2823 "../sokol\sokol_gfx.h"
  $call = (_malloc($7)|0); //@line 2823 "../sokol\sokol_gfx.h"
  $8 = $cache$addr; //@line 2823 "../sokol\sokol_gfx.h"
  $items = ((($8)) + 8|0); //@line 2823 "../sokol\sokol_gfx.h"
  HEAP32[$items>>2] = $call; //@line 2823 "../sokol\sokol_gfx.h"
  $9 = $cache$addr; //@line 2824 "../sokol\sokol_gfx.h"
  $items3 = ((($9)) + 8|0); //@line 2824 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$items3>>2]|0; //@line 2824 "../sokol\sokol_gfx.h"
  $11 = $size; //@line 2824 "../sokol\sokol_gfx.h"
  _memset(($10|0),0,($11|0))|0; //@line 2824 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 2825 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9070|0),(6868|0),2819,(9094|0)); //@line 2819 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2819 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_ubpool_mapped_callback($status,$data,$0,$1,$user_data) {
 $status = $status|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 $user_data = $user_data|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0, $cmp = 0, $cmp14 = 0, $cmp9 = 0, $data$addr = 0, $data_len$addr = 0, $index = 0, $status$addr = 0, $tobool = 0, $tobool3 = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $data_len$addr = sp;
 $status$addr = $status;
 $data$addr = $data;
 $2 = $data_len$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $user_data$addr = $user_data;
 $6 = HEAP8[(30892)>>0]|0; //@line 10834 "../sokol\sokol_gfx.h"
 $tobool = $6&1; //@line 10834 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  STACKTOP = sp;return; //@line 10847 "../sokol\sokol_gfx.h"
 }
 $7 = $status$addr; //@line 10838 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($7|0); //@line 10838 "../sokol\sokol_gfx.h"
 if ($cmp) {
  (_puts(9349)|0); //@line 10839 "../sokol\sokol_gfx.h"
  ___assert_fail((9413|0),(6868|0),10840,(9381|0)); //@line 10840 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10840 "../sokol\sokol_gfx.h"
 }
 $8 = $data$addr; //@line 10842 "../sokol\sokol_gfx.h"
 $tobool3 = ($8|0)!=(0|0); //@line 10842 "../sokol\sokol_gfx.h"
 if (!($tobool3)) {
  ___assert_fail((9415|0),(6868|0),10842,(9381|0)); //@line 10842 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10842 "../sokol\sokol_gfx.h"
 }
 $9 = $data_len$addr; //@line 10842 "../sokol\sokol_gfx.h"
 $10 = $9; //@line 10842 "../sokol\sokol_gfx.h"
 $11 = HEAP32[$10>>2]|0; //@line 10842 "../sokol\sokol_gfx.h"
 $12 = (($9) + 4)|0; //@line 10842 "../sokol\sokol_gfx.h"
 $13 = $12; //@line 10842 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$13>>2]|0; //@line 10842 "../sokol\sokol_gfx.h"
 $15 = HEAP32[(30980)>>2]|0; //@line 10842 "../sokol\sokol_gfx.h"
 $16 = ($11|0)==($15|0); //@line 10842 "../sokol\sokol_gfx.h"
 $17 = ($14|0)==(0); //@line 10842 "../sokol\sokol_gfx.h"
 $18 = $16 & $17; //@line 10842 "../sokol\sokol_gfx.h"
 if (!($18)) {
  ___assert_fail((9415|0),(6868|0),10842,(9381|0)); //@line 10842 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10842 "../sokol\sokol_gfx.h"
 }
 $19 = $user_data$addr; //@line 10843 "../sokol\sokol_gfx.h"
 $20 = $19; //@line 10843 "../sokol\sokol_gfx.h"
 $index = $20; //@line 10843 "../sokol\sokol_gfx.h"
 $21 = $index; //@line 10844 "../sokol\sokol_gfx.h"
 $22 = HEAP32[(31028)>>2]|0; //@line 10844 "../sokol\sokol_gfx.h"
 $cmp9 = ($21|0)<($22|0); //@line 10844 "../sokol\sokol_gfx.h"
 if (!($cmp9)) {
  ___assert_fail((9459|0),(6868|0),10844,(9381|0)); //@line 10844 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10844 "../sokol\sokol_gfx.h"
 }
 $23 = $index; //@line 10845 "../sokol\sokol_gfx.h"
 $arrayidx = ((31068) + ($23<<2)|0); //@line 10845 "../sokol\sokol_gfx.h"
 $24 = HEAP32[$arrayidx>>2]|0; //@line 10845 "../sokol\sokol_gfx.h"
 $cmp14 = (0|0)==($24|0); //@line 10845 "../sokol\sokol_gfx.h"
 if (!($cmp14)) {
  ___assert_fail((9489|0),(6868|0),10845,(9381|0)); //@line 10845 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10845 "../sokol\sokol_gfx.h"
 }
 $25 = $data$addr; //@line 10846 "../sokol\sokol_gfx.h"
 $26 = $index; //@line 10846 "../sokol\sokol_gfx.h"
 $arrayidx19 = ((31068) + ($26<<2)|0); //@line 10846 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx19>>2] = $25; //@line 10846 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 10847 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_staging_mapped_callback($status,$data,$0,$1,$user_data) {
 $status = $status|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 $user_data = $user_data|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0, $cmp = 0, $cmp14 = 0, $cmp9 = 0, $data$addr = 0, $data_len$addr = 0, $index = 0, $status$addr = 0, $tobool = 0, $tobool3 = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $data_len$addr = sp;
 $status$addr = $status;
 $data$addr = $data;
 $2 = $data_len$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $user_data$addr = $user_data;
 $6 = HEAP8[(30892)>>0]|0; //@line 11033 "../sokol\sokol_gfx.h"
 $tobool = $6&1; //@line 11033 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  STACKTOP = sp;return; //@line 11046 "../sokol\sokol_gfx.h"
 }
 $7 = $status$addr; //@line 11037 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($7|0); //@line 11037 "../sokol\sokol_gfx.h"
 if ($cmp) {
  ___assert_fail((9413|0),(6868|0),11039,(9737|0)); //@line 11039 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11039 "../sokol\sokol_gfx.h"
 }
 $8 = $data$addr; //@line 11041 "../sokol\sokol_gfx.h"
 $tobool3 = ($8|0)!=(0|0); //@line 11041 "../sokol\sokol_gfx.h"
 if (!($tobool3)) {
  ___assert_fail((9770|0),(6868|0),11041,(9737|0)); //@line 11041 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11041 "../sokol\sokol_gfx.h"
 }
 $9 = $data_len$addr; //@line 11041 "../sokol\sokol_gfx.h"
 $10 = $9; //@line 11041 "../sokol\sokol_gfx.h"
 $11 = HEAP32[$10>>2]|0; //@line 11041 "../sokol\sokol_gfx.h"
 $12 = (($9) + 4)|0; //@line 11041 "../sokol\sokol_gfx.h"
 $13 = $12; //@line 11041 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$13>>2]|0; //@line 11041 "../sokol\sokol_gfx.h"
 $15 = HEAP32[(31100)>>2]|0; //@line 11041 "../sokol\sokol_gfx.h"
 $16 = ($11|0)==($15|0); //@line 11041 "../sokol\sokol_gfx.h"
 $17 = ($14|0)==(0); //@line 11041 "../sokol\sokol_gfx.h"
 $18 = $16 & $17; //@line 11041 "../sokol\sokol_gfx.h"
 if (!($18)) {
  ___assert_fail((9770|0),(6868|0),11041,(9737|0)); //@line 11041 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11041 "../sokol\sokol_gfx.h"
 }
 $19 = $user_data$addr; //@line 11042 "../sokol\sokol_gfx.h"
 $20 = $19; //@line 11042 "../sokol\sokol_gfx.h"
 $index = $20; //@line 11042 "../sokol\sokol_gfx.h"
 $21 = $index; //@line 11043 "../sokol\sokol_gfx.h"
 $22 = HEAP32[(31108)>>2]|0; //@line 11043 "../sokol\sokol_gfx.h"
 $cmp9 = ($21|0)<($22|0); //@line 11043 "../sokol\sokol_gfx.h"
 if (!($cmp9)) {
  ___assert_fail((9819|0),(6868|0),11043,(9737|0)); //@line 11043 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11043 "../sokol\sokol_gfx.h"
 }
 $23 = $index; //@line 11044 "../sokol\sokol_gfx.h"
 $arrayidx = ((31148) + ($23<<2)|0); //@line 11044 "../sokol\sokol_gfx.h"
 $24 = HEAP32[$arrayidx>>2]|0; //@line 11044 "../sokol\sokol_gfx.h"
 $cmp14 = (0|0)==($24|0); //@line 11044 "../sokol\sokol_gfx.h"
 if (!($cmp14)) {
  ___assert_fail((9848|0),(6868|0),11044,(9737|0)); //@line 11044 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11044 "../sokol\sokol_gfx.h"
 }
 $25 = $data$addr; //@line 11045 "../sokol\sokol_gfx.h"
 $26 = $index; //@line 11045 "../sokol\sokol_gfx.h"
 $arrayidx19 = ((31148) + ($26<<2)|0); //@line 11045 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx19>>2] = $25; //@line 11045 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11046 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_destroy_context($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $ctx$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr; //@line 11265 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11265 "../sokol\sokol_gfx.h"
 if ($tobool) {
  STACKTOP = sp;return; //@line 11267 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9900|0),(6868|0),11265,(9904|0)); //@line 11265 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11265 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_discard_backend() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(30892)>>0]|0; //@line 11236 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 11236 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((9929|0),(6868|0),11236,(9944|0)); //@line 11236 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11236 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30940)>>2]|0; //@line 11237 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11237 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((8964|0),(6868|0),11237,(9944|0)); //@line 11237 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11237 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[(30944)>>2]|0; //@line 11238 "../sokol\sokol_gfx.h"
 $tobool5 = ($2|0)!=(0|0); //@line 11238 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((8988|0),(6868|0),11238,(9944|0)); //@line 11238 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11238 "../sokol\sokol_gfx.h"
 }
 HEAP8[(30892)>>0] = 0; //@line 11239 "../sokol\sokol_gfx.h"
 __sg_wgpu_ubpool_discard(); //@line 11240 "../sokol\sokol_gfx.h"
 __sg_wgpu_staging_discard(); //@line 11241 "../sokol\sokol_gfx.h"
 __sg_wgpu_destroy_sampler_cache(); //@line 11242 "../sokol\sokol_gfx.h"
 $3 = HEAP32[(30952)>>2]|0; //@line 11243 "../sokol\sokol_gfx.h"
 _wgpuBindGroupRelease(($3|0)); //@line 11243 "../sokol\sokol_gfx.h"
 $4 = HEAP32[(30940)>>2]|0; //@line 11244 "../sokol\sokol_gfx.h"
 _wgpuCommandEncoderRelease(($4|0)); //@line 11244 "../sokol\sokol_gfx.h"
 HEAP32[(30940)>>2] = 0; //@line 11245 "../sokol\sokol_gfx.h"
 $5 = HEAP32[(30944)>>2]|0; //@line 11246 "../sokol\sokol_gfx.h"
 _wgpuCommandEncoderRelease(($5|0)); //@line 11246 "../sokol\sokol_gfx.h"
 HEAP32[(30944)>>2] = 0; //@line 11247 "../sokol\sokol_gfx.h"
 $6 = HEAP32[(30936)>>2]|0; //@line 11248 "../sokol\sokol_gfx.h"
 $tobool9 = ($6|0)!=(0|0); //@line 11248 "../sokol\sokol_gfx.h"
 if (!($tobool9)) {
  return; //@line 11252 "../sokol\sokol_gfx.h"
 }
 $7 = HEAP32[(30936)>>2]|0; //@line 11249 "../sokol\sokol_gfx.h"
 _wgpuQueueRelease(($7|0)); //@line 11249 "../sokol\sokol_gfx.h"
 HEAP32[(30936)>>2] = 0; //@line 11250 "../sokol\sokol_gfx.h"
 return; //@line 11252 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_ubpool_discard() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx11 = 0, $arrayidx9 = 0, $cmp = 0;
 var $i = 0, $inc = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(31020)>>2]|0; //@line 10812 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 10812 "../sokol\sokol_gfx.h"
 if ($tobool) {
  $1 = HEAP32[(31020)>>2]|0; //@line 10813 "../sokol\sokol_gfx.h"
  _wgpuBufferRelease(($1|0)); //@line 10813 "../sokol\sokol_gfx.h"
  HEAP32[(31020)>>2] = 0; //@line 10814 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[(31024)>>2]|0; //@line 10816 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 10816 "../sokol\sokol_gfx.h"
 if ($tobool1) {
  $3 = HEAP32[(31024)>>2]|0; //@line 10817 "../sokol\sokol_gfx.h"
  _wgpuBindGroupRelease(($3|0)); //@line 10817 "../sokol\sokol_gfx.h"
  HEAP32[(31024)>>2] = 0; //@line 10818 "../sokol\sokol_gfx.h"
 }
 $4 = HEAP32[(30976)>>2]|0; //@line 10820 "../sokol\sokol_gfx.h"
 $tobool4 = ($4|0)!=(0|0); //@line 10820 "../sokol\sokol_gfx.h"
 if ($tobool4) {
  $5 = HEAP32[(30976)>>2]|0; //@line 10821 "../sokol\sokol_gfx.h"
  _wgpuBindGroupLayoutRelease(($5|0)); //@line 10821 "../sokol\sokol_gfx.h"
  HEAP32[(30976)>>2] = 0; //@line 10822 "../sokol\sokol_gfx.h"
 }
 $i = 0; //@line 10824 "../sokol\sokol_gfx.h"
 while(1) {
  $6 = $i; //@line 10824 "../sokol\sokol_gfx.h"
  $7 = HEAP32[(31028)>>2]|0; //@line 10824 "../sokol\sokol_gfx.h"
  $cmp = ($6|0)<($7|0); //@line 10824 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $8 = $i; //@line 10825 "../sokol\sokol_gfx.h"
  $arrayidx = ((31036) + ($8<<2)|0); //@line 10825 "../sokol\sokol_gfx.h"
  $9 = HEAP32[$arrayidx>>2]|0; //@line 10825 "../sokol\sokol_gfx.h"
  $tobool7 = ($9|0)!=(0|0); //@line 10825 "../sokol\sokol_gfx.h"
  if ($tobool7) {
   $10 = $i; //@line 10826 "../sokol\sokol_gfx.h"
   $arrayidx9 = ((31036) + ($10<<2)|0); //@line 10826 "../sokol\sokol_gfx.h"
   $11 = HEAP32[$arrayidx9>>2]|0; //@line 10826 "../sokol\sokol_gfx.h"
   _wgpuBufferRelease(($11|0)); //@line 10826 "../sokol\sokol_gfx.h"
   $12 = $i; //@line 10827 "../sokol\sokol_gfx.h"
   $arrayidx10 = ((31036) + ($12<<2)|0); //@line 10827 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx10>>2] = 0; //@line 10827 "../sokol\sokol_gfx.h"
   $13 = $i; //@line 10828 "../sokol\sokol_gfx.h"
   $arrayidx11 = ((31068) + ($13<<2)|0); //@line 10828 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx11>>2] = 0; //@line 10828 "../sokol\sokol_gfx.h"
  }
  $14 = $i; //@line 10824 "../sokol\sokol_gfx.h"
  $inc = (($14) + 1)|0; //@line 10824 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 10824 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 10831 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_staging_discard() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $cmp = 0, $i = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $i = 0; //@line 11023 "../sokol\sokol_gfx.h"
 while(1) {
  $0 = $i; //@line 11023 "../sokol\sokol_gfx.h"
  $1 = HEAP32[(31108)>>2]|0; //@line 11023 "../sokol\sokol_gfx.h"
  $cmp = ($0|0)<($1|0); //@line 11023 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $2 = $i; //@line 11024 "../sokol\sokol_gfx.h"
  $arrayidx = ((31116) + ($2<<2)|0); //@line 11024 "../sokol\sokol_gfx.h"
  $3 = HEAP32[$arrayidx>>2]|0; //@line 11024 "../sokol\sokol_gfx.h"
  $tobool = ($3|0)!=(0|0); //@line 11024 "../sokol\sokol_gfx.h"
  if ($tobool) {
   $4 = $i; //@line 11025 "../sokol\sokol_gfx.h"
   $arrayidx1 = ((31116) + ($4<<2)|0); //@line 11025 "../sokol\sokol_gfx.h"
   $5 = HEAP32[$arrayidx1>>2]|0; //@line 11025 "../sokol\sokol_gfx.h"
   _wgpuBufferRelease(($5|0)); //@line 11025 "../sokol\sokol_gfx.h"
   $6 = $i; //@line 11026 "../sokol\sokol_gfx.h"
   $arrayidx2 = ((31116) + ($6<<2)|0); //@line 11026 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx2>>2] = 0; //@line 11026 "../sokol\sokol_gfx.h"
   $7 = $i; //@line 11027 "../sokol\sokol_gfx.h"
   $arrayidx3 = ((31148) + ($7<<2)|0); //@line 11027 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx3>>2] = 0; //@line 11027 "../sokol\sokol_gfx.h"
  }
  $8 = $i; //@line 11023 "../sokol\sokol_gfx.h"
  $inc = (($8) + 1)|0; //@line 11023 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 11023 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 11030 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_destroy_sampler_cache() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $i = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(30972)>>2]|0; //@line 11147 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11147 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((9969|0),(6868|0),11147,(9998|0)); //@line 11147 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11147 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30968)>>2]|0; //@line 11148 "../sokol\sokol_gfx.h"
 $2 = HEAP32[(30964)>>2]|0; //@line 11148 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)<=($2|0); //@line 11148 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((10029|0),(6868|0),11148,(9998|0)); //@line 11148 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11148 "../sokol\sokol_gfx.h"
 }
 $i = 0; //@line 11149 "../sokol\sokol_gfx.h"
 while(1) {
  $3 = $i; //@line 11149 "../sokol\sokol_gfx.h"
  $4 = HEAP32[(30968)>>2]|0; //@line 11149 "../sokol\sokol_gfx.h"
  $cmp4 = ($3|0)<($4|0); //@line 11149 "../sokol\sokol_gfx.h"
  if (!($cmp4)) {
   break;
  }
  $5 = $i; //@line 11150 "../sokol\sokol_gfx.h"
  $call = (__sg_smpcache_sampler((30964),$5)|0); //@line 11150 "../sokol\sokol_gfx.h"
  $6 = $call; //@line 11150 "../sokol\sokol_gfx.h"
  _wgpuSamplerRelease(($6|0)); //@line 11150 "../sokol\sokol_gfx.h"
  $7 = $i; //@line 11149 "../sokol\sokol_gfx.h"
  $inc = (($7) + 1)|0; //@line 11149 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 11149 "../sokol\sokol_gfx.h"
 }
 __sg_smpcache_discard((30964)); //@line 11152 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11153 "../sokol\sokol_gfx.h"
}
function __sg_smpcache_sampler($cache,$item_index) {
 $cache = $cache|0;
 $item_index = $item_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cache$addr = 0, $cmp = 0, $cmp3 = 0, $item_index$addr = 0, $items = 0, $items7 = 0, $num_items = 0, $sampler_handle = 0;
 var $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cache$addr = $cache;
 $item_index$addr = $item_index;
 $0 = $cache$addr; //@line 2887 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 2887 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((10097|0),(6868|0),2887,(10119|0)); //@line 2887 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2887 "../sokol\sokol_gfx.h"
 }
 $1 = $cache$addr; //@line 2887 "../sokol\sokol_gfx.h"
 $items = ((($1)) + 8|0); //@line 2887 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$items>>2]|0; //@line 2887 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 2887 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((10097|0),(6868|0),2887,(10119|0)); //@line 2887 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2887 "../sokol\sokol_gfx.h"
 }
 $3 = $item_index$addr; //@line 2888 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)>=(0); //@line 2888 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((10140|0),(6868|0),2888,(10119|0)); //@line 2888 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2888 "../sokol\sokol_gfx.h"
 }
 $4 = $item_index$addr; //@line 2888 "../sokol\sokol_gfx.h"
 $5 = $cache$addr; //@line 2888 "../sokol\sokol_gfx.h"
 $num_items = ((($5)) + 4|0); //@line 2888 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$num_items>>2]|0; //@line 2888 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 2888 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $cache$addr; //@line 2889 "../sokol\sokol_gfx.h"
  $items7 = ((($7)) + 8|0); //@line 2889 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$items7>>2]|0; //@line 2889 "../sokol\sokol_gfx.h"
  $9 = $item_index$addr; //@line 2889 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*40)|0)|0); //@line 2889 "../sokol\sokol_gfx.h"
  $sampler_handle = ((($arrayidx)) + 36|0); //@line 2889 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$sampler_handle>>2]|0; //@line 2889 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($10|0); //@line 2889 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((10140|0),(6868|0),2888,(10119|0)); //@line 2888 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2888 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_smpcache_discard($cache) {
 $cache = $cache|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cache$addr = 0, $items = 0, $items2 = 0, $items3 = 0, $num_items = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cache$addr = $cache;
 $0 = $cache$addr; //@line 2828 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 2828 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((10097|0),(6868|0),2828,(10193|0)); //@line 2828 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2828 "../sokol\sokol_gfx.h"
 }
 $1 = $cache$addr; //@line 2828 "../sokol\sokol_gfx.h"
 $items = ((($1)) + 8|0); //@line 2828 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$items>>2]|0; //@line 2828 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 2828 "../sokol\sokol_gfx.h"
 if ($tobool1) {
  $3 = $cache$addr; //@line 2829 "../sokol\sokol_gfx.h"
  $items2 = ((($3)) + 8|0); //@line 2829 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$items2>>2]|0; //@line 2829 "../sokol\sokol_gfx.h"
  _free($4); //@line 2829 "../sokol\sokol_gfx.h"
  $5 = $cache$addr; //@line 2830 "../sokol\sokol_gfx.h"
  $items3 = ((($5)) + 8|0); //@line 2830 "../sokol\sokol_gfx.h"
  HEAP32[$items3>>2] = 0; //@line 2830 "../sokol\sokol_gfx.h"
  $6 = $cache$addr; //@line 2831 "../sokol\sokol_gfx.h"
  $num_items = ((($6)) + 4|0); //@line 2831 "../sokol\sokol_gfx.h"
  HEAP32[$num_items>>2] = 0; //@line 2831 "../sokol\sokol_gfx.h"
  $7 = $cache$addr; //@line 2832 "../sokol\sokol_gfx.h"
  HEAP32[$7>>2] = 0; //@line 2832 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 2833 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((10097|0),(6868|0),2828,(10193|0)); //@line 2828 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2828 "../sokol\sokol_gfx.h"
 }
}
function __sg_discard_pool($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $free_queue = 0, $free_queue5 = 0, $free_queue6 = 0, $gen_ctrs = 0, $gen_ctrs11 = 0, $gen_ctrs12 = 0, $pool$addr = 0;
 var $queue_top = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $0 = $pool$addr; //@line 12580 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12580 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((10232|0),(6868|0),12580,(10237|0)); //@line 12580 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12580 "../sokol\sokol_gfx.h"
 }
 $1 = $pool$addr; //@line 12581 "../sokol\sokol_gfx.h"
 $free_queue = ((($1)) + 12|0); //@line 12581 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$free_queue>>2]|0; //@line 12581 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 12581 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((8531|0),(6868|0),12581,(10237|0)); //@line 12581 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12581 "../sokol\sokol_gfx.h"
 }
 $3 = $pool$addr; //@line 12582 "../sokol\sokol_gfx.h"
 $free_queue5 = ((($3)) + 12|0); //@line 12582 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$free_queue5>>2]|0; //@line 12582 "../sokol\sokol_gfx.h"
 _free($4); //@line 12582 "../sokol\sokol_gfx.h"
 $5 = $pool$addr; //@line 12583 "../sokol\sokol_gfx.h"
 $free_queue6 = ((($5)) + 12|0); //@line 12583 "../sokol\sokol_gfx.h"
 HEAP32[$free_queue6>>2] = 0; //@line 12583 "../sokol\sokol_gfx.h"
 $6 = $pool$addr; //@line 12584 "../sokol\sokol_gfx.h"
 $gen_ctrs = ((($6)) + 8|0); //@line 12584 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$gen_ctrs>>2]|0; //@line 12584 "../sokol\sokol_gfx.h"
 $tobool7 = ($7|0)!=(0|0); //@line 12584 "../sokol\sokol_gfx.h"
 if ($tobool7) {
  $8 = $pool$addr; //@line 12585 "../sokol\sokol_gfx.h"
  $gen_ctrs11 = ((($8)) + 8|0); //@line 12585 "../sokol\sokol_gfx.h"
  $9 = HEAP32[$gen_ctrs11>>2]|0; //@line 12585 "../sokol\sokol_gfx.h"
  _free($9); //@line 12585 "../sokol\sokol_gfx.h"
  $10 = $pool$addr; //@line 12586 "../sokol\sokol_gfx.h"
  $gen_ctrs12 = ((($10)) + 8|0); //@line 12586 "../sokol\sokol_gfx.h"
  HEAP32[$gen_ctrs12>>2] = 0; //@line 12586 "../sokol\sokol_gfx.h"
  $11 = $pool$addr; //@line 12587 "../sokol\sokol_gfx.h"
  HEAP32[$11>>2] = 0; //@line 12587 "../sokol\sokol_gfx.h"
  $12 = $pool$addr; //@line 12588 "../sokol\sokol_gfx.h"
  $queue_top = ((($12)) + 4|0); //@line 12588 "../sokol\sokol_gfx.h"
  HEAP32[$queue_top>>2] = 0; //@line 12588 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12589 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((8516|0),(6868|0),12584,(10237|0)); //@line 12584 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12584 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_create_context($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $ctx$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr; //@line 11259 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11259 "../sokol\sokol_gfx.h"
 if ($tobool) {
  STACKTOP = sp;return 2; //@line 11261 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9900|0),(6868|0),11259,(10588|0)); //@line 11259 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11259 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_wgpu_activate_context($ctx) {
 $ctx = $ctx|0;
 var $ctx$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 (_puts(10612)|0); //@line 11270 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11271 "../sokol\sokol_gfx.h"
}
function __sg_validate_buffer_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_end_canary = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp14 = 0, $cmp16 = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cmp7 = 0, $cmp9 = 0, $content = 0, $content15 = 0, $d3d11_buffer = 0, $desc$addr = 0, $frombool = 0;
 var $gl_buffers = 0, $injected = 0, $mtl_buffers = 0, $size = 0, $tobool = 0, $tobool12 = 0, $usage = 0, $wgpu_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13059 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 13059 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((20040|0),(6868|0),13059,(10820|0)); //@line 13059 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13059 "../sokol\sokol_gfx.h"
 }
 __sg_validate_begin(); //@line 13060 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 13061 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$1>>2]|0; //@line 13061 "../sokol\sokol_gfx.h"
 $cmp = ($2|0)==(0); //@line 13061 "../sokol\sokol_gfx.h"
 __sg_validate($cmp,1); //@line 13061 "../sokol\sokol_gfx.h"
 $3 = $desc$addr; //@line 13062 "../sokol\sokol_gfx.h"
 $_end_canary = ((($3)) + 48|0); //@line 13062 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$_end_canary>>2]|0; //@line 13062 "../sokol\sokol_gfx.h"
 $cmp1 = ($4|0)==(0); //@line 13062 "../sokol\sokol_gfx.h"
 __sg_validate($cmp1,1); //@line 13062 "../sokol\sokol_gfx.h"
 $5 = $desc$addr; //@line 13063 "../sokol\sokol_gfx.h"
 $size = ((($5)) + 4|0); //@line 13063 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$size>>2]|0; //@line 13063 "../sokol\sokol_gfx.h"
 $cmp2 = ($6|0)>(0); //@line 13063 "../sokol\sokol_gfx.h"
 __sg_validate($cmp2,2); //@line 13063 "../sokol\sokol_gfx.h"
 $7 = $desc$addr; //@line 13064 "../sokol\sokol_gfx.h"
 $gl_buffers = ((($7)) + 24|0); //@line 13064 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$gl_buffers>>2]|0; //@line 13064 "../sokol\sokol_gfx.h"
 $cmp3 = (0)!=($8|0); //@line 13064 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $15 = 1;
 } else {
  $9 = $desc$addr; //@line 13065 "../sokol\sokol_gfx.h"
  $mtl_buffers = ((($9)) + 32|0); //@line 13065 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$mtl_buffers>>2]|0; //@line 13065 "../sokol\sokol_gfx.h"
  $cmp5 = (0|0)!=($10|0); //@line 13065 "../sokol\sokol_gfx.h"
  if ($cmp5) {
   $15 = 1;
  } else {
   $11 = $desc$addr; //@line 13066 "../sokol\sokol_gfx.h"
   $d3d11_buffer = ((($11)) + 40|0); //@line 13066 "../sokol\sokol_gfx.h"
   $12 = HEAP32[$d3d11_buffer>>2]|0; //@line 13066 "../sokol\sokol_gfx.h"
   $cmp7 = (0|0)!=($12|0); //@line 13066 "../sokol\sokol_gfx.h"
   if ($cmp7) {
    $15 = 1;
   } else {
    $13 = $desc$addr; //@line 13067 "../sokol\sokol_gfx.h"
    $wgpu_buffer = ((($13)) + 44|0); //@line 13067 "../sokol\sokol_gfx.h"
    $14 = HEAP32[$wgpu_buffer>>2]|0; //@line 13067 "../sokol\sokol_gfx.h"
    $cmp9 = (0|0)!=($14|0); //@line 13067 "../sokol\sokol_gfx.h"
    $15 = $cmp9;
   }
  }
 }
 $frombool = $15&1; //@line 13064 "../sokol\sokol_gfx.h"
 $injected = $frombool; //@line 13064 "../sokol\sokol_gfx.h"
 $16 = $injected; //@line 13068 "../sokol\sokol_gfx.h"
 $tobool12 = $16&1; //@line 13068 "../sokol\sokol_gfx.h"
 if (!($tobool12)) {
  $17 = $desc$addr; //@line 13068 "../sokol\sokol_gfx.h"
  $usage = ((($17)) + 12|0); //@line 13068 "../sokol\sokol_gfx.h"
  $18 = HEAP32[$usage>>2]|0; //@line 13068 "../sokol\sokol_gfx.h"
  $cmp13 = ($18|0)==(1); //@line 13068 "../sokol\sokol_gfx.h"
  if ($cmp13) {
   $19 = $desc$addr; //@line 13069 "../sokol\sokol_gfx.h"
   $content = ((($19)) + 16|0); //@line 13069 "../sokol\sokol_gfx.h"
   $20 = HEAP32[$content>>2]|0; //@line 13069 "../sokol\sokol_gfx.h"
   $cmp14 = (0|0)!=($20|0); //@line 13069 "../sokol\sokol_gfx.h"
   __sg_validate($cmp14,3); //@line 13069 "../sokol\sokol_gfx.h"
   $call = (__sg_validate_end()|0); //@line 13074 "../sokol\sokol_gfx.h"
   STACKTOP = sp;return ($call|0); //@line 13074 "../sokol\sokol_gfx.h"
  }
 }
 $21 = $desc$addr; //@line 13072 "../sokol\sokol_gfx.h"
 $content15 = ((($21)) + 16|0); //@line 13072 "../sokol\sokol_gfx.h"
 $22 = HEAP32[$content15>>2]|0; //@line 13072 "../sokol\sokol_gfx.h"
 $cmp16 = (0|0)==($22|0); //@line 13072 "../sokol\sokol_gfx.h"
 __sg_validate($cmp16,4); //@line 13072 "../sokol\sokol_gfx.h"
 $call = (__sg_validate_end()|0); //@line 13074 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 13074 "../sokol\sokol_gfx.h"
}
function __sg_create_buffer($buf,$desc) {
 $buf = $buf|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $buf$addr = 0, $call = 0, $desc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf$addr = $buf;
 $desc$addr = $desc;
 $0 = $buf$addr; //@line 12176 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 12176 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_create_buffer($0,$1)|0); //@line 12176 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 12176 "../sokol\sokol_gfx.h"
}
function __sg_validate_begin() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(30360)>>2] = 0; //@line 13030 "../sokol\sokol_gfx.h"
 return; //@line 13031 "../sokol\sokol_gfx.h"
}
function __sg_validate($cond,$err) {
 $cond = $cond|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call2 = 0, $cond$addr = 0, $err$addr = 0, $frombool = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frombool = $cond&1;
 $cond$addr = $frombool;
 $err$addr = $err;
 $0 = $cond$addr; //@line 13034 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 13034 "../sokol\sokol_gfx.h"
 if ($tobool) {
  STACKTOP = sp;return; //@line 13038 "../sokol\sokol_gfx.h"
 }
 $1 = $err$addr; //@line 13035 "../sokol\sokol_gfx.h"
 HEAP32[(30360)>>2] = $1; //@line 13035 "../sokol\sokol_gfx.h"
 $2 = $err$addr; //@line 13036 "../sokol\sokol_gfx.h"
 $call = (__sg_validate_string($2)|0); //@line 13036 "../sokol\sokol_gfx.h"
 $tobool1 = ($call|0)!=(0|0); //@line 13036 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((10845|0),(6868|0),13036,(10870|0)); //@line 13036 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13036 "../sokol\sokol_gfx.h"
 }
 $3 = $err$addr; //@line 13036 "../sokol\sokol_gfx.h"
 $call2 = (__sg_validate_string($3)|0); //@line 13036 "../sokol\sokol_gfx.h"
 (_puts($call2)|0); //@line 13036 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 13038 "../sokol\sokol_gfx.h"
}
function __sg_validate_end() {
 var $0 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(30360)>>2]|0; //@line 13041 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)!=(0); //@line 13041 "../sokol\sokol_gfx.h"
 if ($cmp) {
  (_puts(16255)|0); //@line 13043 "../sokol\sokol_gfx.h"
  ___assert_fail((9413|0),(6868|0),13044,(16297|0)); //@line 13044 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13044 "../sokol\sokol_gfx.h"
 } else {
  return 1; //@line 13049 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_validate_string($err) {
 $err = $err|0;
 var $0 = 0, $1 = 0, $err$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $err$addr = $err;
 $0 = $err$addr; //@line 12903 "../sokol\sokol_gfx.h"
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 10883; //@line 12905 "../sokol\sokol_gfx.h"
   break;
  }
  case 2:  {
   $retval = 10914; //@line 12906 "../sokol\sokol_gfx.h"
   break;
  }
  case 3:  {
   $retval = 10946; //@line 12907 "../sokol\sokol_gfx.h"
   break;
  }
  case 4:  {
   $retval = 11022; //@line 12908 "../sokol\sokol_gfx.h"
   break;
  }
  case 5:  {
   $retval = 11086; //@line 12911 "../sokol\sokol_gfx.h"
   break;
  }
  case 6:  {
   $retval = 11116; //@line 12912 "../sokol\sokol_gfx.h"
   break;
  }
  case 7:  {
   $retval = 11148; //@line 12913 "../sokol\sokol_gfx.h"
   break;
  }
  case 8:  {
   $retval = 11181; //@line 12914 "../sokol\sokol_gfx.h"
   break;
  }
  case 9:  {
   $retval = 11226; //@line 12915 "../sokol\sokol_gfx.h"
   break;
  }
  case 10:  {
   $retval = 11275; //@line 12916 "../sokol\sokol_gfx.h"
   break;
  }
  case 11:  {
   $retval = 11323; //@line 12917 "../sokol\sokol_gfx.h"
   break;
  }
  case 12:  {
   $retval = 11364; //@line 12918 "../sokol\sokol_gfx.h"
   break;
  }
  case 13:  {
   $retval = 11412; //@line 12919 "../sokol\sokol_gfx.h"
   break;
  }
  case 14:  {
   $retval = 11468; //@line 12920 "../sokol\sokol_gfx.h"
   break;
  }
  case 15:  {
   $retval = 11515; //@line 12921 "../sokol\sokol_gfx.h"
   break;
  }
  case 16:  {
   $retval = 11578; //@line 12924 "../sokol\sokol_gfx.h"
   break;
  }
  case 17:  {
   $retval = 11609; //@line 12925 "../sokol\sokol_gfx.h"
   break;
  }
  case 18:  {
   $retval = 11637; //@line 12926 "../sokol\sokol_gfx.h"
   break;
  }
  case 19:  {
   $retval = 11663; //@line 12927 "../sokol\sokol_gfx.h"
   break;
  }
  case 20:  {
   $retval = 11699; //@line 12928 "../sokol\sokol_gfx.h"
   break;
  }
  case 21:  {
   $retval = 11743; //@line 12929 "../sokol\sokol_gfx.h"
   break;
  }
  case 23:  {
   $retval = 11794; //@line 12930 "../sokol\sokol_gfx.h"
   break;
  }
  case 24:  {
   $retval = 11845; //@line 12931 "../sokol\sokol_gfx.h"
   break;
  }
  case 25:  {
   $retval = 11899; //@line 12932 "../sokol\sokol_gfx.h"
   break;
  }
  case 26:  {
   $retval = 11933; //@line 12933 "../sokol\sokol_gfx.h"
   break;
  }
  case 22:  {
   $retval = 11996; //@line 12934 "../sokol\sokol_gfx.h"
   break;
  }
  case 27:  {
   $retval = 12039; //@line 12935 "../sokol\sokol_gfx.h"
   break;
  }
  case 28:  {
   $retval = 12086; //@line 12936 "../sokol\sokol_gfx.h"
   break;
  }
  case 29:  {
   $retval = 12132; //@line 12937 "../sokol\sokol_gfx.h"
   break;
  }
  case 30:  {
   $retval = 12182; //@line 12938 "../sokol\sokol_gfx.h"
   break;
  }
  case 31:  {
   $retval = 12242; //@line 12941 "../sokol\sokol_gfx.h"
   break;
  }
  case 32:  {
   $retval = 12275; //@line 12942 "../sokol\sokol_gfx.h"
   break;
  }
  case 33:  {
   $retval = 12318; //@line 12943 "../sokol\sokol_gfx.h"
   break;
  }
  case 34:  {
   $retval = 12375; //@line 12944 "../sokol\sokol_gfx.h"
   break;
  }
  case 35:  {
   $retval = 12438; //@line 12945 "../sokol\sokol_gfx.h"
   break;
  }
  case 36:  {
   $retval = 12490; //@line 12946 "../sokol\sokol_gfx.h"
   break;
  }
  case 37:  {
   $retval = 12541; //@line 12949 "../sokol\sokol_gfx.h"
   break;
  }
  case 38:  {
   $retval = 12570; //@line 12950 "../sokol\sokol_gfx.h"
   break;
  }
  case 39:  {
   $retval = 12618; //@line 12951 "../sokol\sokol_gfx.h"
   break;
  }
  case 40:  {
   $retval = 12665; //@line 12952 "../sokol\sokol_gfx.h"
   break;
  }
  case 41:  {
   $retval = 12700; //@line 12953 "../sokol\sokol_gfx.h"
   break;
  }
  case 42:  {
   $retval = 12759; //@line 12954 "../sokol\sokol_gfx.h"
   break;
  }
  case 43:  {
   $retval = 12819; //@line 12955 "../sokol\sokol_gfx.h"
   break;
  }
  case 44:  {
   $retval = 12886; //@line 12956 "../sokol\sokol_gfx.h"
   break;
  }
  case 45:  {
   $retval = 12950; //@line 12957 "../sokol\sokol_gfx.h"
   break;
  }
  case 46:  {
   $retval = 12995; //@line 12958 "../sokol\sokol_gfx.h"
   break;
  }
  case 47:  {
   $retval = 13060; //@line 12959 "../sokol\sokol_gfx.h"
   break;
  }
  case 48:  {
   $retval = 13125; //@line 12960 "../sokol\sokol_gfx.h"
   break;
  }
  case 49:  {
   $retval = 13182; //@line 12961 "../sokol\sokol_gfx.h"
   break;
  }
  case 50:  {
   $retval = 13227; //@line 12962 "../sokol\sokol_gfx.h"
   break;
  }
  case 51:  {
   $retval = 13280; //@line 12965 "../sokol\sokol_gfx.h"
   break;
  }
  case 52:  {
   $retval = 13314; //@line 12966 "../sokol\sokol_gfx.h"
   break;
  }
  case 53:  {
   $retval = 13373; //@line 12969 "../sokol\sokol_gfx.h"
   break;
  }
  case 54:  {
   $retval = 13421; //@line 12970 "../sokol\sokol_gfx.h"
   break;
  }
  case 55:  {
   $retval = 13472; //@line 12971 "../sokol\sokol_gfx.h"
   break;
  }
  case 56:  {
   $retval = 13526; //@line 12972 "../sokol\sokol_gfx.h"
   break;
  }
  case 57:  {
   $retval = 13575; //@line 12973 "../sokol\sokol_gfx.h"
   break;
  }
  case 58:  {
   $retval = 13627; //@line 12974 "../sokol\sokol_gfx.h"
   break;
  }
  case 59:  {
   $retval = 13728; //@line 12975 "../sokol\sokol_gfx.h"
   break;
  }
  case 60:  {
   $retval = 13821; //@line 12976 "../sokol\sokol_gfx.h"
   break;
  }
  case 61:  {
   $retval = 13914; //@line 12977 "../sokol\sokol_gfx.h"
   break;
  }
  case 62:  {
   $retval = 14013; //@line 12980 "../sokol\sokol_gfx.h"
   break;
  }
  case 63:  {
   $retval = 14071; //@line 12981 "../sokol\sokol_gfx.h"
   break;
  }
  case 64:  {
   $retval = 14140; //@line 12982 "../sokol\sokol_gfx.h"
   break;
  }
  case 65:  {
   $retval = 14212; //@line 12983 "../sokol\sokol_gfx.h"
   break;
  }
  case 66:  {
   $retval = 14304; //@line 12984 "../sokol\sokol_gfx.h"
   break;
  }
  case 67:  {
   $retval = 14353; //@line 12985 "../sokol\sokol_gfx.h"
   break;
  }
  case 68:  {
   $retval = 14437; //@line 12986 "../sokol\sokol_gfx.h"
   break;
  }
  case 69:  {
   $retval = 14498; //@line 12987 "../sokol\sokol_gfx.h"
   break;
  }
  case 70:  {
   $retval = 14589; //@line 12988 "../sokol\sokol_gfx.h"
   break;
  }
  case 71:  {
   $retval = 14681; //@line 12989 "../sokol\sokol_gfx.h"
   break;
  }
  case 72:  {
   $retval = 14729; //@line 12990 "../sokol\sokol_gfx.h"
   break;
  }
  case 73:  {
   $retval = 14811; //@line 12991 "../sokol\sokol_gfx.h"
   break;
  }
  case 74:  {
   $retval = 14871; //@line 12992 "../sokol\sokol_gfx.h"
   break;
  }
  case 75:  {
   $retval = 14945; //@line 12993 "../sokol\sokol_gfx.h"
   break;
  }
  case 76:  {
   $retval = 15000; //@line 12994 "../sokol\sokol_gfx.h"
   break;
  }
  case 77:  {
   $retval = 15084; //@line 12995 "../sokol\sokol_gfx.h"
   break;
  }
  case 78:  {
   $retval = 15160; //@line 12996 "../sokol\sokol_gfx.h"
   break;
  }
  case 79:  {
   $retval = 15217; //@line 12997 "../sokol\sokol_gfx.h"
   break;
  }
  case 80:  {
   $retval = 15303; //@line 13000 "../sokol\sokol_gfx.h"
   break;
  }
  case 81:  {
   $retval = 15363; //@line 13001 "../sokol\sokol_gfx.h"
   break;
  }
  case 82:  {
   $retval = 15440; //@line 13002 "../sokol\sokol_gfx.h"
   break;
  }
  case 83:  {
   $retval = 15505; //@line 13005 "../sokol\sokol_gfx.h"
   break;
  }
  case 84:  {
   $retval = 15554; //@line 13006 "../sokol\sokol_gfx.h"
   break;
  }
  case 85:  {
   $retval = 15611; //@line 13007 "../sokol\sokol_gfx.h"
   break;
  }
  case 86:  {
   $retval = 15674; //@line 13008 "../sokol\sokol_gfx.h"
   break;
  }
  case 87:  {
   $retval = 15756; //@line 13011 "../sokol\sokol_gfx.h"
   break;
  }
  case 88:  {
   $retval = 15808; //@line 13012 "../sokol\sokol_gfx.h"
   break;
  }
  case 89:  {
   $retval = 15875; //@line 13013 "../sokol\sokol_gfx.h"
   break;
  }
  case 90:  {
   $retval = 15957; //@line 13016 "../sokol\sokol_gfx.h"
   break;
  }
  case 91:  {
   $retval = 16004; //@line 13017 "../sokol\sokol_gfx.h"
   break;
  }
  case 92:  {
   $retval = 16055; //@line 13018 "../sokol\sokol_gfx.h"
   break;
  }
  case 93:  {
   $retval = 16108; //@line 13019 "../sokol\sokol_gfx.h"
   break;
  }
  case 94:  {
   $retval = 16169; //@line 13020 "../sokol\sokol_gfx.h"
   break;
  }
  default: {
   $retval = 16230; //@line 13022 "../sokol\sokol_gfx.h"
  }
  }
 } while(0);
 $1 = $retval; //@line 13024 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 13024 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_create_buffer($buf,$desc) {
 $buf = $buf|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$addr = 0, $call = 0, $call39 = 0, $cmn = 0, $cmn10 = 0, $cmn12 = 0, $cmn26 = 0, $cmn35 = 0, $cmn7 = 0, $cmn8 = 0, $cmp = 0, $cmp14 = 0;
 var $cmp28 = 0, $content = 0, $content34 = 0, $data = 0, $data33 = 0, $dataLength = 0, $desc$addr = 0, $frombool = 0, $injected = 0, $or$cond = 0, $res = 0, $size11 = 0, $tobool = 0, $tobool1 = 0, $tobool17 = 0, $tobool2 = 0, $tobool23 = 0, $type = 0, $usage = 0, $usage13 = 0;
 var $usage9 = 0, $wgpu = 0, $wgpu21 = 0, $wgpu40 = 0, $wgpu5 = 0, $wgpu_buf_desc = 0, $wgpu_buffer = 0, $wgpu_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $wgpu_buf_desc = sp + 24|0;
 $res = sp;
 $buf$addr = $buf;
 $desc$addr = $desc;
 $0 = $buf$addr; //@line 11274 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11274 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 11274 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11274 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $tobool1; //@line 11274 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((16314|0),(6868|0),11274,(16326|0)); //@line 11274 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11274 "../sokol\sokol_gfx.h"
 }
 $2 = $desc$addr; //@line 11275 "../sokol\sokol_gfx.h"
 $wgpu_buffer = ((($2)) + 44|0); //@line 11275 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$wgpu_buffer>>2]|0; //@line 11275 "../sokol\sokol_gfx.h"
 $cmp = (0|0)!=($3|0); //@line 11275 "../sokol\sokol_gfx.h"
 $frombool = $cmp&1; //@line 11275 "../sokol\sokol_gfx.h"
 $injected = $frombool; //@line 11275 "../sokol\sokol_gfx.h"
 $4 = $buf$addr; //@line 11276 "../sokol\sokol_gfx.h"
 $cmn = ((($4)) + 12|0); //@line 11276 "../sokol\sokol_gfx.h"
 $5 = $desc$addr; //@line 11276 "../sokol\sokol_gfx.h"
 __sg_buffer_common_init($cmn,$5); //@line 11276 "../sokol\sokol_gfx.h"
 $6 = $injected; //@line 11277 "../sokol\sokol_gfx.h"
 $tobool2 = $6&1; //@line 11277 "../sokol\sokol_gfx.h"
 if ($tobool2) {
  $7 = $desc$addr; //@line 11278 "../sokol\sokol_gfx.h"
  $wgpu_buffer3 = ((($7)) + 44|0); //@line 11278 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$wgpu_buffer3>>2]|0; //@line 11278 "../sokol\sokol_gfx.h"
  $9 = $buf$addr; //@line 11278 "../sokol\sokol_gfx.h"
  $wgpu = ((($9)) + 48|0); //@line 11278 "../sokol\sokol_gfx.h"
  HEAP32[$wgpu>>2] = $8; //@line 11278 "../sokol\sokol_gfx.h"
  $10 = $buf$addr; //@line 11279 "../sokol\sokol_gfx.h"
  $wgpu5 = ((($10)) + 48|0); //@line 11279 "../sokol\sokol_gfx.h"
  $11 = HEAP32[$wgpu5>>2]|0; //@line 11279 "../sokol\sokol_gfx.h"
  _wgpuBufferReference(($11|0)); //@line 11279 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return 2; //@line 11298 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$wgpu_buf_desc>>2]=0|0;HEAP32[$wgpu_buf_desc+4>>2]=0|0;HEAP32[$wgpu_buf_desc+8>>2]=0|0;HEAP32[$wgpu_buf_desc+12>>2]=0|0;HEAP32[$wgpu_buf_desc+16>>2]=0|0;HEAP32[$wgpu_buf_desc+20>>2]=0|0; //@line 11283 "../sokol\sokol_gfx.h"
 $12 = $buf$addr; //@line 11284 "../sokol\sokol_gfx.h"
 $cmn7 = ((($12)) + 12|0); //@line 11284 "../sokol\sokol_gfx.h"
 $type = ((($cmn7)) + 12|0); //@line 11284 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$type>>2]|0; //@line 11284 "../sokol\sokol_gfx.h"
 $14 = $buf$addr; //@line 11284 "../sokol\sokol_gfx.h"
 $cmn8 = ((($14)) + 12|0); //@line 11284 "../sokol\sokol_gfx.h"
 $usage = ((($cmn8)) + 16|0); //@line 11284 "../sokol\sokol_gfx.h"
 $15 = HEAP32[$usage>>2]|0; //@line 11284 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_buffer_usage($13,$15)|0); //@line 11284 "../sokol\sokol_gfx.h"
 $usage9 = ((($wgpu_buf_desc)) + 8|0); //@line 11284 "../sokol\sokol_gfx.h"
 HEAP32[$usage9>>2] = $call; //@line 11284 "../sokol\sokol_gfx.h"
 $16 = $buf$addr; //@line 11285 "../sokol\sokol_gfx.h"
 $cmn10 = ((($16)) + 12|0); //@line 11285 "../sokol\sokol_gfx.h"
 $17 = HEAP32[$cmn10>>2]|0; //@line 11285 "../sokol\sokol_gfx.h"
 $18 = ($17|0)<(0); //@line 11285 "../sokol\sokol_gfx.h"
 $19 = $18 << 31 >> 31; //@line 11285 "../sokol\sokol_gfx.h"
 $size11 = ((($wgpu_buf_desc)) + 16|0); //@line 11285 "../sokol\sokol_gfx.h"
 $20 = $size11; //@line 11285 "../sokol\sokol_gfx.h"
 $21 = $20; //@line 11285 "../sokol\sokol_gfx.h"
 HEAP32[$21>>2] = $17; //@line 11285 "../sokol\sokol_gfx.h"
 $22 = (($20) + 4)|0; //@line 11285 "../sokol\sokol_gfx.h"
 $23 = $22; //@line 11285 "../sokol\sokol_gfx.h"
 HEAP32[$23>>2] = $19; //@line 11285 "../sokol\sokol_gfx.h"
 $24 = $buf$addr; //@line 11286 "../sokol\sokol_gfx.h"
 $cmn12 = ((($24)) + 12|0); //@line 11286 "../sokol\sokol_gfx.h"
 $usage13 = ((($cmn12)) + 16|0); //@line 11286 "../sokol\sokol_gfx.h"
 $25 = HEAP32[$usage13>>2]|0; //@line 11286 "../sokol\sokol_gfx.h"
 $cmp14 = (1)==($25|0); //@line 11286 "../sokol\sokol_gfx.h"
 if (!($cmp14)) {
  $46 = HEAP32[(30904)>>2]|0; //@line 11295 "../sokol\sokol_gfx.h"
  $call39 = (_wgpuDeviceCreateBuffer(($46|0),($wgpu_buf_desc|0))|0); //@line 11295 "../sokol\sokol_gfx.h"
  $47 = $buf$addr; //@line 11295 "../sokol\sokol_gfx.h"
  $wgpu40 = ((($47)) + 48|0); //@line 11295 "../sokol\sokol_gfx.h"
  HEAP32[$wgpu40>>2] = $call39; //@line 11295 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return 2; //@line 11298 "../sokol\sokol_gfx.h"
 }
 $26 = $desc$addr; //@line 11287 "../sokol\sokol_gfx.h"
 $content = ((($26)) + 16|0); //@line 11287 "../sokol\sokol_gfx.h"
 $27 = HEAP32[$content>>2]|0; //@line 11287 "../sokol\sokol_gfx.h"
 $tobool17 = ($27|0)!=(0|0); //@line 11287 "../sokol\sokol_gfx.h"
 if (!($tobool17)) {
  ___assert_fail((16349|0),(6868|0),11287,(16326|0)); //@line 11287 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11287 "../sokol\sokol_gfx.h"
 }
 $28 = HEAP32[(30904)>>2]|0; //@line 11288 "../sokol\sokol_gfx.h"
 _wgpuDeviceCreateBufferMapped(($res|0),($28|0),($wgpu_buf_desc|0)); //@line 11288 "../sokol\sokol_gfx.h"
 $29 = HEAP32[$res>>2]|0; //@line 11289 "../sokol\sokol_gfx.h"
 $30 = $buf$addr; //@line 11289 "../sokol\sokol_gfx.h"
 $wgpu21 = ((($30)) + 48|0); //@line 11289 "../sokol\sokol_gfx.h"
 HEAP32[$wgpu21>>2] = $29; //@line 11289 "../sokol\sokol_gfx.h"
 $data = ((($res)) + 16|0); //@line 11290 "../sokol\sokol_gfx.h"
 $31 = HEAP32[$data>>2]|0; //@line 11290 "../sokol\sokol_gfx.h"
 $tobool23 = ($31|0)!=(0|0); //@line 11290 "../sokol\sokol_gfx.h"
 if (!($tobool23)) {
  ___assert_fail((16363|0),(6868|0),11290,(16326|0)); //@line 11290 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11290 "../sokol\sokol_gfx.h"
 }
 $dataLength = ((($res)) + 8|0); //@line 11290 "../sokol\sokol_gfx.h"
 $32 = $dataLength; //@line 11290 "../sokol\sokol_gfx.h"
 $33 = $32; //@line 11290 "../sokol\sokol_gfx.h"
 $34 = HEAP32[$33>>2]|0; //@line 11290 "../sokol\sokol_gfx.h"
 $35 = (($32) + 4)|0; //@line 11290 "../sokol\sokol_gfx.h"
 $36 = $35; //@line 11290 "../sokol\sokol_gfx.h"
 $37 = HEAP32[$36>>2]|0; //@line 11290 "../sokol\sokol_gfx.h"
 $38 = $buf$addr; //@line 11290 "../sokol\sokol_gfx.h"
 $cmn26 = ((($38)) + 12|0); //@line 11290 "../sokol\sokol_gfx.h"
 $39 = HEAP32[$cmn26>>2]|0; //@line 11290 "../sokol\sokol_gfx.h"
 $cmp28 = ($34|0)==($39|0); //@line 11290 "../sokol\sokol_gfx.h"
 if (!($cmp28)) {
  ___assert_fail((16363|0),(6868|0),11290,(16326|0)); //@line 11290 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11290 "../sokol\sokol_gfx.h"
 }
 $data33 = ((($res)) + 16|0); //@line 11291 "../sokol\sokol_gfx.h"
 $40 = HEAP32[$data33>>2]|0; //@line 11291 "../sokol\sokol_gfx.h"
 $41 = $desc$addr; //@line 11291 "../sokol\sokol_gfx.h"
 $content34 = ((($41)) + 16|0); //@line 11291 "../sokol\sokol_gfx.h"
 $42 = HEAP32[$content34>>2]|0; //@line 11291 "../sokol\sokol_gfx.h"
 $43 = $buf$addr; //@line 11291 "../sokol\sokol_gfx.h"
 $cmn35 = ((($43)) + 12|0); //@line 11291 "../sokol\sokol_gfx.h"
 $44 = HEAP32[$cmn35>>2]|0; //@line 11291 "../sokol\sokol_gfx.h"
 _memcpy(($40|0),($42|0),($44|0))|0; //@line 11291 "../sokol\sokol_gfx.h"
 $45 = HEAP32[$res>>2]|0; //@line 11292 "../sokol\sokol_gfx.h"
 _wgpuBufferUnmap(($45|0)); //@line 11292 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return 2; //@line 11298 "../sokol\sokol_gfx.h"
}
function __sg_buffer_common_init($cmn,$desc) {
 $cmn = $cmn|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active_slot = 0, $append_frame_index = 0, $append_overflow = 0;
 var $append_pos = 0, $cmn$addr = 0, $cmp = 0, $cond = 0, $desc$addr = 0, $num_slots = 0, $size = 0, $type = 0, $type2 = 0, $update_frame_index = 0, $usage = 0, $usage3 = 0, $usage4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmn$addr = $cmn;
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 2626 "../sokol\sokol_gfx.h"
 $size = ((($0)) + 4|0); //@line 2626 "../sokol\sokol_gfx.h"
 $1 = HEAP32[$size>>2]|0; //@line 2626 "../sokol\sokol_gfx.h"
 $2 = $cmn$addr; //@line 2626 "../sokol\sokol_gfx.h"
 HEAP32[$2>>2] = $1; //@line 2626 "../sokol\sokol_gfx.h"
 $3 = $cmn$addr; //@line 2627 "../sokol\sokol_gfx.h"
 $append_pos = ((($3)) + 4|0); //@line 2627 "../sokol\sokol_gfx.h"
 HEAP32[$append_pos>>2] = 0; //@line 2627 "../sokol\sokol_gfx.h"
 $4 = $cmn$addr; //@line 2628 "../sokol\sokol_gfx.h"
 $append_overflow = ((($4)) + 8|0); //@line 2628 "../sokol\sokol_gfx.h"
 HEAP8[$append_overflow>>0] = 0; //@line 2628 "../sokol\sokol_gfx.h"
 $5 = $desc$addr; //@line 2629 "../sokol\sokol_gfx.h"
 $type = ((($5)) + 8|0); //@line 2629 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$type>>2]|0; //@line 2629 "../sokol\sokol_gfx.h"
 $7 = $cmn$addr; //@line 2629 "../sokol\sokol_gfx.h"
 $type2 = ((($7)) + 12|0); //@line 2629 "../sokol\sokol_gfx.h"
 HEAP32[$type2>>2] = $6; //@line 2629 "../sokol\sokol_gfx.h"
 $8 = $desc$addr; //@line 2630 "../sokol\sokol_gfx.h"
 $usage = ((($8)) + 12|0); //@line 2630 "../sokol\sokol_gfx.h"
 $9 = HEAP32[$usage>>2]|0; //@line 2630 "../sokol\sokol_gfx.h"
 $10 = $cmn$addr; //@line 2630 "../sokol\sokol_gfx.h"
 $usage3 = ((($10)) + 16|0); //@line 2630 "../sokol\sokol_gfx.h"
 HEAP32[$usage3>>2] = $9; //@line 2630 "../sokol\sokol_gfx.h"
 $11 = $cmn$addr; //@line 2631 "../sokol\sokol_gfx.h"
 $update_frame_index = ((($11)) + 20|0); //@line 2631 "../sokol\sokol_gfx.h"
 HEAP32[$update_frame_index>>2] = 0; //@line 2631 "../sokol\sokol_gfx.h"
 $12 = $cmn$addr; //@line 2632 "../sokol\sokol_gfx.h"
 $append_frame_index = ((($12)) + 24|0); //@line 2632 "../sokol\sokol_gfx.h"
 HEAP32[$append_frame_index>>2] = 0; //@line 2632 "../sokol\sokol_gfx.h"
 $13 = $cmn$addr; //@line 2633 "../sokol\sokol_gfx.h"
 $usage4 = ((($13)) + 16|0); //@line 2633 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$usage4>>2]|0; //@line 2633 "../sokol\sokol_gfx.h"
 $cmp = ($14|0)==(1); //@line 2633 "../sokol\sokol_gfx.h"
 $cond = $cmp ? 1 : 2; //@line 2633 "../sokol\sokol_gfx.h"
 $15 = $cmn$addr; //@line 2633 "../sokol\sokol_gfx.h"
 $num_slots = ((($15)) + 28|0); //@line 2633 "../sokol\sokol_gfx.h"
 HEAP32[$num_slots>>2] = $cond; //@line 2633 "../sokol\sokol_gfx.h"
 $16 = $cmn$addr; //@line 2634 "../sokol\sokol_gfx.h"
 $active_slot = ((($16)) + 32|0); //@line 2634 "../sokol\sokol_gfx.h"
 HEAP32[$active_slot>>2] = 0; //@line 2634 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 2635 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_buffer_usage($t,$u) {
 $t = $t|0;
 $u = $u|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp2 = 0, $or = 0, $or1 = 0, $or4 = 0, $res = 0, $t$addr = 0, $u$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $u$addr = $u;
 $res = 0; //@line 10355 "../sokol\sokol_gfx.h"
 $0 = $t$addr; //@line 10356 "../sokol\sokol_gfx.h"
 $cmp = (1)==($0|0); //@line 10356 "../sokol\sokol_gfx.h"
 $1 = $res;
 if ($cmp) {
  $or = $1 | 32; //@line 10357 "../sokol\sokol_gfx.h"
  $res = $or; //@line 10357 "../sokol\sokol_gfx.h"
 } else {
  $or1 = $1 | 16; //@line 10360 "../sokol\sokol_gfx.h"
  $res = $or1; //@line 10360 "../sokol\sokol_gfx.h"
 }
 $2 = $u$addr; //@line 10362 "../sokol\sokol_gfx.h"
 $cmp2 = (1)!=($2|0); //@line 10362 "../sokol\sokol_gfx.h"
 if (!($cmp2)) {
  $4 = $res; //@line 10365 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($4|0); //@line 10365 "../sokol\sokol_gfx.h"
 }
 $3 = $res; //@line 10363 "../sokol\sokol_gfx.h"
 $or4 = $3 | 8; //@line 10363 "../sokol\sokol_gfx.h"
 $res = $or4; //@line 10363 "../sokol\sokol_gfx.h"
 $4 = $res; //@line 10365 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($4|0); //@line 10365 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_tex_viewdim($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr; //@line 10382 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 2; //@line 10383 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 4; //@line 10384 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 6; //@line 10385 "../sokol\sokol_gfx.h"
  break;
 }
 case 4:  {
  $retval = 3; //@line 10386 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10387,(16450|0)); //@line 10387 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10387 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10389 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10389 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_textureformat($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $p$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $0 = $p$addr; //@line 10514 "../sokol\sokol_gfx.h"
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 0; //@line 10515 "../sokol\sokol_gfx.h"
   break;
  }
  case 2:  {
   $retval = 1; //@line 10516 "../sokol\sokol_gfx.h"
   break;
  }
  case 3:  {
   $retval = 2; //@line 10517 "../sokol\sokol_gfx.h"
   break;
  }
  case 4:  {
   $retval = 3; //@line 10518 "../sokol\sokol_gfx.h"
   break;
  }
  case 5:  {
   $retval = 4; //@line 10519 "../sokol\sokol_gfx.h"
   break;
  }
  case 8:  {
   $retval = 5; //@line 10520 "../sokol\sokol_gfx.h"
   break;
  }
  case 9:  {
   $retval = 6; //@line 10521 "../sokol\sokol_gfx.h"
   break;
  }
  case 10:  {
   $retval = 7; //@line 10522 "../sokol\sokol_gfx.h"
   break;
  }
  case 11:  {
   $retval = 8; //@line 10523 "../sokol\sokol_gfx.h"
   break;
  }
  case 12:  {
   $retval = 9; //@line 10524 "../sokol\sokol_gfx.h"
   break;
  }
  case 13:  {
   $retval = 10; //@line 10525 "../sokol\sokol_gfx.h"
   break;
  }
  case 14:  {
   $retval = 11; //@line 10526 "../sokol\sokol_gfx.h"
   break;
  }
  case 15:  {
   $retval = 13; //@line 10527 "../sokol\sokol_gfx.h"
   break;
  }
  case 16:  {
   $retval = 14; //@line 10528 "../sokol\sokol_gfx.h"
   break;
  }
  case 17:  {
   $retval = 12; //@line 10529 "../sokol\sokol_gfx.h"
   break;
  }
  case 20:  {
   $retval = 15; //@line 10530 "../sokol\sokol_gfx.h"
   break;
  }
  case 21:  {
   $retval = 16; //@line 10531 "../sokol\sokol_gfx.h"
   break;
  }
  case 22:  {
   $retval = 17; //@line 10532 "../sokol\sokol_gfx.h"
   break;
  }
  case 23:  {
   $retval = 18; //@line 10533 "../sokol\sokol_gfx.h"
   break;
  }
  case 24:  {
   $retval = 20; //@line 10534 "../sokol\sokol_gfx.h"
   break;
  }
  case 25:  {
   $retval = 21; //@line 10535 "../sokol\sokol_gfx.h"
   break;
  }
  case 26:  {
   $retval = 22; //@line 10536 "../sokol\sokol_gfx.h"
   break;
  }
  case 27:  {
   $retval = 23; //@line 10537 "../sokol\sokol_gfx.h"
   break;
  }
  case 28:  {
   $retval = 25; //@line 10538 "../sokol\sokol_gfx.h"
   break;
  }
  case 29:  {
   $retval = 26; //@line 10539 "../sokol\sokol_gfx.h"
   break;
  }
  case 30:  {
   $retval = 28; //@line 10540 "../sokol\sokol_gfx.h"
   break;
  }
  case 31:  {
   $retval = 29; //@line 10541 "../sokol\sokol_gfx.h"
   break;
  }
  case 32:  {
   $retval = 27; //@line 10542 "../sokol\sokol_gfx.h"
   break;
  }
  case 35:  {
   $retval = 30; //@line 10543 "../sokol\sokol_gfx.h"
   break;
  }
  case 36:  {
   $retval = 31; //@line 10544 "../sokol\sokol_gfx.h"
   break;
  }
  case 37:  {
   $retval = 32; //@line 10545 "../sokol\sokol_gfx.h"
   break;
  }
  case 38:  {
   $retval = 34; //@line 10546 "../sokol\sokol_gfx.h"
   break;
  }
  case 39:  {
   $retval = 35; //@line 10547 "../sokol\sokol_gfx.h"
   break;
  }
  case 40:  {
   $retval = 33; //@line 10548 "../sokol\sokol_gfx.h"
   break;
  }
  case 41:  {
   $retval = 37; //@line 10549 "../sokol\sokol_gfx.h"
   break;
  }
  case 42:  {
   $retval = 38; //@line 10550 "../sokol\sokol_gfx.h"
   break;
  }
  case 43:  {
   $retval = 39; //@line 10551 "../sokol\sokol_gfx.h"
   break;
  }
  case 44:  {
   $retval = 41; //@line 10552 "../sokol\sokol_gfx.h"
   break;
  }
  case 45:  {
   $retval = 43; //@line 10553 "../sokol\sokol_gfx.h"
   break;
  }
  case 46:  {
   $retval = 45; //@line 10554 "../sokol\sokol_gfx.h"
   break;
  }
  case 47:  {
   $retval = 46; //@line 10555 "../sokol\sokol_gfx.h"
   break;
  }
  case 48:  {
   $retval = 47; //@line 10556 "../sokol\sokol_gfx.h"
   break;
  }
  case 49:  {
   $retval = 48; //@line 10557 "../sokol\sokol_gfx.h"
   break;
  }
  case 50:  {
   $retval = 50; //@line 10558 "../sokol\sokol_gfx.h"
   break;
  }
  case 51:  {
   $retval = 49; //@line 10559 "../sokol\sokol_gfx.h"
   break;
  }
  case 52:  {
   $retval = 51; //@line 10560 "../sokol\sokol_gfx.h"
   break;
  }
  default: {
   ___assert_fail((9413|0),(6868|0),10579,(16427|0)); //@line 10579 "../sokol\sokol_gfx.h"
   // unreachable; //@line 10579 "../sokol\sokol_gfx.h"
  }
  }
 } while(0);
 $1 = $retval; //@line 10582 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10582 "../sokol\sokol_gfx.h"
}
function __sg_validate_shader_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_end_canary = 0, $add = 0, $array_count = 0, $array_count56 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx16 = 0, $arrayidx45 = 0, $arrayidx52 = 0, $arrayidx72 = 0, $arrayidx8 = 0, $attrs = 0, $attrs11 = 0, $attrs15 = 0, $attrs7 = 0, $byte_code = 0, $byte_code22 = 0, $byte_code29 = 0;
 var $byte_code3 = 0, $byte_code_size = 0, $byte_code_size33 = 0, $call = 0, $call18 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp19 = 0, $cmp2 = 0, $cmp23 = 0, $cmp26 = 0, $cmp30 = 0, $cmp34 = 0, $cmp37 = 0, $cmp39 = 0, $cmp4 = 0, $cmp43 = 0;
 var $cmp46 = 0, $cmp5 = 0, $cmp50 = 0, $cmp53 = 0, $cmp70 = 0, $cmp74 = 0, $cond = 0, $desc$addr = 0, $fs = 0, $fs28 = 0, $fs32 = 0, $fs41 = 0, $i = 0, $images = 0, $images_continuous = 0, $img_desc = 0, $img_index = 0, $inc = 0, $inc59 = 0, $inc62 = 0;
 var $inc67 = 0, $inc80 = 0, $inc83 = 0, $num_uniforms = 0, $sem_name = 0, $sem_name17 = 0, $stage_desc = 0, $stage_index = 0, $tobool = 0, $tobool13 = 0, $tobool48 = 0, $tobool55 = 0, $tobool6 = 0, $tobool76 = 0, $type = 0, $type57 = 0, $type73 = 0, $u_desc = 0, $u_index = 0, $ub_desc = 0;
 var $ub_index = 0, $uniform_blocks = 0, $uniform_blocks_continuous = 0, $uniform_offset = 0, $uniforms = 0, $uniforms_continuous = 0, $vs = 0, $vs21 = 0, $vs25 = 0, $vs40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13146 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 13146 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((20040|0),(6868|0),13146,(16617|0)); //@line 13146 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13146 "../sokol\sokol_gfx.h"
 }
 __sg_validate_begin(); //@line 13147 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 13148 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$1>>2]|0; //@line 13148 "../sokol\sokol_gfx.h"
 $cmp = ($2|0)==(0); //@line 13148 "../sokol\sokol_gfx.h"
 __sg_validate($cmp,16); //@line 13148 "../sokol\sokol_gfx.h"
 $3 = $desc$addr; //@line 13149 "../sokol\sokol_gfx.h"
 $_end_canary = ((($3)) + 2096|0); //@line 13149 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$_end_canary>>2]|0; //@line 13149 "../sokol\sokol_gfx.h"
 $cmp1 = ($4|0)==(0); //@line 13149 "../sokol\sokol_gfx.h"
 __sg_validate($cmp1,16); //@line 13149 "../sokol\sokol_gfx.h"
 $5 = $desc$addr; //@line 13165 "../sokol\sokol_gfx.h"
 $vs = ((($5)) + 196|0); //@line 13165 "../sokol\sokol_gfx.h"
 $byte_code = ((($vs)) + 4|0); //@line 13165 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$byte_code>>2]|0; //@line 13165 "../sokol\sokol_gfx.h"
 $cmp2 = (0|0)!=($6|0); //@line 13165 "../sokol\sokol_gfx.h"
 __sg_validate($cmp2,18); //@line 13165 "../sokol\sokol_gfx.h"
 $7 = $desc$addr; //@line 13166 "../sokol\sokol_gfx.h"
 $fs = ((($7)) + 1144|0); //@line 13166 "../sokol\sokol_gfx.h"
 $byte_code3 = ((($fs)) + 4|0); //@line 13166 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$byte_code3>>2]|0; //@line 13166 "../sokol\sokol_gfx.h"
 $cmp4 = (0|0)!=($8|0); //@line 13166 "../sokol\sokol_gfx.h"
 __sg_validate($cmp4,18); //@line 13166 "../sokol\sokol_gfx.h"
 $i = 0; //@line 13170 "../sokol\sokol_gfx.h"
 while(1) {
  $9 = $i; //@line 13170 "../sokol\sokol_gfx.h"
  $cmp5 = ($9|0)<(16); //@line 13170 "../sokol\sokol_gfx.h"
  $10 = $desc$addr;
  if (!($cmp5)) {
   break;
  }
  $attrs = ((($10)) + 4|0); //@line 13171 "../sokol\sokol_gfx.h"
  $11 = $i; //@line 13171 "../sokol\sokol_gfx.h"
  $arrayidx = (($attrs) + (($11*12)|0)|0); //@line 13171 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$arrayidx>>2]|0; //@line 13171 "../sokol\sokol_gfx.h"
  $tobool6 = ($12|0)!=(0|0); //@line 13171 "../sokol\sokol_gfx.h"
  if ($tobool6) {
   $13 = $desc$addr; //@line 13172 "../sokol\sokol_gfx.h"
   $attrs7 = ((($13)) + 4|0); //@line 13172 "../sokol\sokol_gfx.h"
   $14 = $i; //@line 13172 "../sokol\sokol_gfx.h"
   $arrayidx8 = (($attrs7) + (($14*12)|0)|0); //@line 13172 "../sokol\sokol_gfx.h"
   $15 = HEAP32[$arrayidx8>>2]|0; //@line 13172 "../sokol\sokol_gfx.h"
   $call = (_strlen($15)|0); //@line 13172 "../sokol\sokol_gfx.h"
   $cmp10 = ($call>>>0)<(16); //@line 13172 "../sokol\sokol_gfx.h"
   __sg_validate($cmp10,30); //@line 13172 "../sokol\sokol_gfx.h"
  }
  $16 = $desc$addr; //@line 13174 "../sokol\sokol_gfx.h"
  $attrs11 = ((($16)) + 4|0); //@line 13174 "../sokol\sokol_gfx.h"
  $17 = $i; //@line 13174 "../sokol\sokol_gfx.h"
  $arrayidx12 = (($attrs11) + (($17*12)|0)|0); //@line 13174 "../sokol\sokol_gfx.h"
  $sem_name = ((($arrayidx12)) + 4|0); //@line 13174 "../sokol\sokol_gfx.h"
  $18 = HEAP32[$sem_name>>2]|0; //@line 13174 "../sokol\sokol_gfx.h"
  $tobool13 = ($18|0)!=(0|0); //@line 13174 "../sokol\sokol_gfx.h"
  if ($tobool13) {
   $19 = $desc$addr; //@line 13175 "../sokol\sokol_gfx.h"
   $attrs15 = ((($19)) + 4|0); //@line 13175 "../sokol\sokol_gfx.h"
   $20 = $i; //@line 13175 "../sokol\sokol_gfx.h"
   $arrayidx16 = (($attrs15) + (($20*12)|0)|0); //@line 13175 "../sokol\sokol_gfx.h"
   $sem_name17 = ((($arrayidx16)) + 4|0); //@line 13175 "../sokol\sokol_gfx.h"
   $21 = HEAP32[$sem_name17>>2]|0; //@line 13175 "../sokol\sokol_gfx.h"
   $call18 = (_strlen($21)|0); //@line 13175 "../sokol\sokol_gfx.h"
   $cmp19 = ($call18>>>0)<(16); //@line 13175 "../sokol\sokol_gfx.h"
   __sg_validate($cmp19,30); //@line 13175 "../sokol\sokol_gfx.h"
  }
  $22 = $i; //@line 13170 "../sokol\sokol_gfx.h"
  $inc = (($22) + 1)|0; //@line 13170 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 13170 "../sokol\sokol_gfx.h"
 }
 $vs21 = ((($10)) + 196|0); //@line 13179 "../sokol\sokol_gfx.h"
 $byte_code22 = ((($vs21)) + 4|0); //@line 13179 "../sokol\sokol_gfx.h"
 $23 = HEAP32[$byte_code22>>2]|0; //@line 13179 "../sokol\sokol_gfx.h"
 $cmp23 = (0|0)!=($23|0); //@line 13179 "../sokol\sokol_gfx.h"
 if ($cmp23) {
  $24 = $desc$addr; //@line 13180 "../sokol\sokol_gfx.h"
  $vs25 = ((($24)) + 196|0); //@line 13180 "../sokol\sokol_gfx.h"
  $byte_code_size = ((($vs25)) + 8|0); //@line 13180 "../sokol\sokol_gfx.h"
  $25 = HEAP32[$byte_code_size>>2]|0; //@line 13180 "../sokol\sokol_gfx.h"
  $cmp26 = ($25|0)>(0); //@line 13180 "../sokol\sokol_gfx.h"
  __sg_validate($cmp26,20); //@line 13180 "../sokol\sokol_gfx.h"
 }
 $26 = $desc$addr; //@line 13182 "../sokol\sokol_gfx.h"
 $fs28 = ((($26)) + 1144|0); //@line 13182 "../sokol\sokol_gfx.h"
 $byte_code29 = ((($fs28)) + 4|0); //@line 13182 "../sokol\sokol_gfx.h"
 $27 = HEAP32[$byte_code29>>2]|0; //@line 13182 "../sokol\sokol_gfx.h"
 $cmp30 = (0|0)!=($27|0); //@line 13182 "../sokol\sokol_gfx.h"
 if ($cmp30) {
  $28 = $desc$addr; //@line 13183 "../sokol\sokol_gfx.h"
  $fs32 = ((($28)) + 1144|0); //@line 13183 "../sokol\sokol_gfx.h"
  $byte_code_size33 = ((($fs32)) + 8|0); //@line 13183 "../sokol\sokol_gfx.h"
  $29 = HEAP32[$byte_code_size33>>2]|0; //@line 13183 "../sokol\sokol_gfx.h"
  $cmp34 = ($29|0)>(0); //@line 13183 "../sokol\sokol_gfx.h"
  __sg_validate($cmp34,20); //@line 13183 "../sokol\sokol_gfx.h"
 }
 $stage_index = 0; //@line 13185 "../sokol\sokol_gfx.h"
 while(1) {
  $30 = $stage_index; //@line 13185 "../sokol\sokol_gfx.h"
  $cmp37 = ($30|0)<(2); //@line 13185 "../sokol\sokol_gfx.h"
  if (!($cmp37)) {
   break;
  }
  $31 = $stage_index; //@line 13186 "../sokol\sokol_gfx.h"
  $cmp39 = ($31|0)==(0); //@line 13186 "../sokol\sokol_gfx.h"
  $32 = $desc$addr;
  $vs40 = ((($32)) + 196|0); //@line 13186 "../sokol\sokol_gfx.h"
  $fs41 = ((($32)) + 1144|0); //@line 13186 "../sokol\sokol_gfx.h"
  $cond = $cmp39 ? $vs40 : $fs41; //@line 13186 "../sokol\sokol_gfx.h"
  $stage_desc = $cond; //@line 13186 "../sokol\sokol_gfx.h"
  $uniform_blocks_continuous = 1; //@line 13187 "../sokol\sokol_gfx.h"
  $ub_index = 0; //@line 13188 "../sokol\sokol_gfx.h"
  while(1) {
   $33 = $ub_index; //@line 13188 "../sokol\sokol_gfx.h"
   $cmp43 = ($33|0)<(4); //@line 13188 "../sokol\sokol_gfx.h"
   if (!($cmp43)) {
    break;
   }
   $34 = $stage_desc; //@line 13189 "../sokol\sokol_gfx.h"
   $uniform_blocks = ((($34)) + 20|0); //@line 13189 "../sokol\sokol_gfx.h"
   $35 = $ub_index; //@line 13189 "../sokol\sokol_gfx.h"
   $arrayidx45 = (($uniform_blocks) + (($35*196)|0)|0); //@line 13189 "../sokol\sokol_gfx.h"
   $ub_desc = $arrayidx45; //@line 13189 "../sokol\sokol_gfx.h"
   $36 = $ub_desc; //@line 13190 "../sokol\sokol_gfx.h"
   $37 = HEAP32[$36>>2]|0; //@line 13190 "../sokol\sokol_gfx.h"
   $cmp46 = ($37|0)>(0); //@line 13190 "../sokol\sokol_gfx.h"
   L26: do {
    if ($cmp46) {
     $38 = $uniform_blocks_continuous; //@line 13191 "../sokol\sokol_gfx.h"
     $tobool48 = $38&1; //@line 13191 "../sokol\sokol_gfx.h"
     __sg_validate($tobool48,21); //@line 13191 "../sokol\sokol_gfx.h"
     $uniforms_continuous = 1; //@line 13192 "../sokol\sokol_gfx.h"
     $uniform_offset = 0; //@line 13193 "../sokol\sokol_gfx.h"
     $num_uniforms = 0; //@line 13194 "../sokol\sokol_gfx.h"
     $u_index = 0; //@line 13195 "../sokol\sokol_gfx.h"
     while(1) {
      $39 = $u_index; //@line 13195 "../sokol\sokol_gfx.h"
      $cmp50 = ($39|0)<(16); //@line 13195 "../sokol\sokol_gfx.h"
      if (!($cmp50)) {
       break L26;
      }
      $40 = $ub_desc; //@line 13196 "../sokol\sokol_gfx.h"
      $uniforms = ((($40)) + 4|0); //@line 13196 "../sokol\sokol_gfx.h"
      $41 = $u_index; //@line 13196 "../sokol\sokol_gfx.h"
      $arrayidx52 = (($uniforms) + (($41*12)|0)|0); //@line 13196 "../sokol\sokol_gfx.h"
      $u_desc = $arrayidx52; //@line 13196 "../sokol\sokol_gfx.h"
      $42 = $u_desc; //@line 13197 "../sokol\sokol_gfx.h"
      $type = ((($42)) + 4|0); //@line 13197 "../sokol\sokol_gfx.h"
      $43 = HEAP32[$type>>2]|0; //@line 13197 "../sokol\sokol_gfx.h"
      $cmp53 = ($43|0)!=(0); //@line 13197 "../sokol\sokol_gfx.h"
      if ($cmp53) {
       $44 = $uniforms_continuous; //@line 13198 "../sokol\sokol_gfx.h"
       $tobool55 = $44&1; //@line 13198 "../sokol\sokol_gfx.h"
       __sg_validate($tobool55,23); //@line 13198 "../sokol\sokol_gfx.h"
       $45 = $u_desc; //@line 13202 "../sokol\sokol_gfx.h"
       $array_count56 = ((($45)) + 8|0); //@line 13202 "../sokol\sokol_gfx.h"
       $46 = HEAP32[$array_count56>>2]|0; //@line 13202 "../sokol\sokol_gfx.h"
       $array_count = $46; //@line 13202 "../sokol\sokol_gfx.h"
       $47 = $u_desc; //@line 13203 "../sokol\sokol_gfx.h"
       $type57 = ((($47)) + 4|0); //@line 13203 "../sokol\sokol_gfx.h"
       $48 = HEAP32[$type57>>2]|0; //@line 13203 "../sokol\sokol_gfx.h"
       $49 = $array_count; //@line 13203 "../sokol\sokol_gfx.h"
       $call58 = (__sg_uniform_size($48,$49)|0); //@line 13203 "../sokol\sokol_gfx.h"
       $50 = $uniform_offset; //@line 13203 "../sokol\sokol_gfx.h"
       $add = (($50) + ($call58))|0; //@line 13203 "../sokol\sokol_gfx.h"
       $uniform_offset = $add; //@line 13203 "../sokol\sokol_gfx.h"
       $51 = $num_uniforms; //@line 13204 "../sokol\sokol_gfx.h"
       $inc59 = (($51) + 1)|0; //@line 13204 "../sokol\sokol_gfx.h"
       $num_uniforms = $inc59; //@line 13204 "../sokol\sokol_gfx.h"
      } else {
       $uniforms_continuous = 0; //@line 13207 "../sokol\sokol_gfx.h"
      }
      $52 = $u_index; //@line 13195 "../sokol\sokol_gfx.h"
      $inc62 = (($52) + 1)|0; //@line 13195 "../sokol\sokol_gfx.h"
      $u_index = $inc62; //@line 13195 "../sokol\sokol_gfx.h"
     }
    } else {
     $uniform_blocks_continuous = 0; //@line 13216 "../sokol\sokol_gfx.h"
    }
   } while(0);
   $53 = $ub_index; //@line 13188 "../sokol\sokol_gfx.h"
   $inc67 = (($53) + 1)|0; //@line 13188 "../sokol\sokol_gfx.h"
   $ub_index = $inc67; //@line 13188 "../sokol\sokol_gfx.h"
  }
  $images_continuous = 1; //@line 13219 "../sokol\sokol_gfx.h"
  $img_index = 0; //@line 13220 "../sokol\sokol_gfx.h"
  while(1) {
   $54 = $img_index; //@line 13220 "../sokol\sokol_gfx.h"
   $cmp70 = ($54|0)<(12); //@line 13220 "../sokol\sokol_gfx.h"
   if (!($cmp70)) {
    break;
   }
   $55 = $stage_desc; //@line 13221 "../sokol\sokol_gfx.h"
   $images = ((($55)) + 804|0); //@line 13221 "../sokol\sokol_gfx.h"
   $56 = $img_index; //@line 13221 "../sokol\sokol_gfx.h"
   $arrayidx72 = (($images) + (($56*12)|0)|0); //@line 13221 "../sokol\sokol_gfx.h"
   $img_desc = $arrayidx72; //@line 13221 "../sokol\sokol_gfx.h"
   $57 = $img_desc; //@line 13222 "../sokol\sokol_gfx.h"
   $type73 = ((($57)) + 4|0); //@line 13222 "../sokol\sokol_gfx.h"
   $58 = HEAP32[$type73>>2]|0; //@line 13222 "../sokol\sokol_gfx.h"
   $cmp74 = ($58|0)!=(0); //@line 13222 "../sokol\sokol_gfx.h"
   if ($cmp74) {
    $59 = $images_continuous; //@line 13223 "../sokol\sokol_gfx.h"
    $tobool76 = $59&1; //@line 13223 "../sokol\sokol_gfx.h"
    __sg_validate($tobool76,22); //@line 13223 "../sokol\sokol_gfx.h"
   } else {
    $images_continuous = 0; //@line 13229 "../sokol\sokol_gfx.h"
   }
   $60 = $img_index; //@line 13220 "../sokol\sokol_gfx.h"
   $inc80 = (($60) + 1)|0; //@line 13220 "../sokol\sokol_gfx.h"
   $img_index = $inc80; //@line 13220 "../sokol\sokol_gfx.h"
  }
  $61 = $stage_index; //@line 13185 "../sokol\sokol_gfx.h"
  $inc83 = (($61) + 1)|0; //@line 13185 "../sokol\sokol_gfx.h"
  $stage_index = $inc83; //@line 13185 "../sokol\sokol_gfx.h"
 }
 $call85 = (__sg_validate_end()|0); //@line 13233 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call85|0); //@line 13233 "../sokol\sokol_gfx.h"
}
function __sg_create_shader($shd,$desc) {
 $shd = $shd|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $call = 0, $desc$addr = 0, $shd$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $shd$addr = $shd;
 $desc$addr = $desc;
 $0 = $shd$addr; //@line 12240 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 12240 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_create_shader($0,$1)|0); //@line 12240 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 12240 "../sokol\sokol_gfx.h"
}
function __sg_uniform_size($type,$count) {
 $type = $type|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $count$addr = 0, $mul = 0, $mul3 = 0, $mul5 = 0, $mul7 = 0, $mul9 = 0, $retval = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $type$addr = $type;
 $count$addr = $count;
 $0 = $type$addr; //@line 3735 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 0:  {
  $retval = 0; //@line 3736 "../sokol\sokol_gfx.h"
  break;
 }
 case 1:  {
  $1 = $count$addr; //@line 3737 "../sokol\sokol_gfx.h"
  $mul = $1<<2; //@line 3737 "../sokol\sokol_gfx.h"
  $retval = $mul; //@line 3737 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $2 = $count$addr; //@line 3738 "../sokol\sokol_gfx.h"
  $mul3 = $2<<3; //@line 3738 "../sokol\sokol_gfx.h"
  $retval = $mul3; //@line 3738 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $3 = $count$addr; //@line 3739 "../sokol\sokol_gfx.h"
  $mul5 = ($3*12)|0; //@line 3739 "../sokol\sokol_gfx.h"
  $retval = $mul5; //@line 3739 "../sokol\sokol_gfx.h"
  break;
 }
 case 4:  {
  $4 = $count$addr; //@line 3740 "../sokol\sokol_gfx.h"
  $mul7 = $4<<4; //@line 3740 "../sokol\sokol_gfx.h"
  $retval = $mul7; //@line 3740 "../sokol\sokol_gfx.h"
  break;
 }
 case 5:  {
  $5 = $count$addr; //@line 3741 "../sokol\sokol_gfx.h"
  $mul9 = $5<<6; //@line 3741 "../sokol\sokol_gfx.h"
  $retval = $mul9; //@line 3741 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),3743,(16642|0)); //@line 3743 "../sokol\sokol_gfx.h"
  // unreachable; //@line 3743 "../sokol\sokol_gfx.h"
 }
 }
 $6 = $retval; //@line 3746 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($6|0); //@line 3746 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_create_shader($shd,$desc) {
 $shd = $shd|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add35 = 0, $add43 = 0, $and = 0, $arrayidx = 0, $arrayidx18 = 0, $arrayidx33 = 0, $arrayidx36 = 0, $arrayidx37 = 0, $arrayidx41 = 0, $bglb_desc = 0, $bind_group_layout = 0, $bind_group_layout50 = 0, $bindingCount = 0, $bindings = 0, $byte_code = 0, $byte_code22 = 0, $byte_code4 = 0;
 var $byte_code_size = 0, $byte_code_size21 = 0, $call = 0, $call39 = 0, $call42 = 0, $call49 = 0, $cmn = 0, $cmn16 = 0, $cmn_stage = 0, $cmp = 0, $cmp12 = 0, $cmp24 = 0, $cmp25 = 0, $cmp27 = 0, $cmp31 = 0, $cmp9 = 0, $code = 0, $codeSize = 0, $cond = 0, $cond26 = 0;
 var $cond59 = 0, $desc$addr = 0, $entry19 = 0, $entry20 = 0, $fs = 0, $fs11 = 0, $images = 0, $images40 = 0, $img_bgl_desc = 0, $img_index = 0, $inc = 0, $inc56 = 0, $mul = 0, $mul34 = 0, $mul47 = 0, $num_images = 0, $num_imgs = 0, $or$cond = 0, $sampler_type = 0, $shd$addr = 0;
 var $shr = 0, $smp_desc = 0, $spec$store$select = 0, $stage_desc = 0, $stage_index = 0, $success = 0, $tex_desc = 0, $textureComponentType = 0, $textureDimension = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool5 = 0, $tobool51 = 0, $tobool58 = 0, $type = 0, $type46 = 0, $vis = 0, $visibility = 0, $visibility45 = 0;
 var $vs = 0, $vs10 = 0, $wgpu = 0, $wgpu_shdmod_desc = 0, $wgpu_stage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $wgpu_shdmod_desc = sp + 424|0;
 $bglb_desc = sp;
 $img_bgl_desc = sp + 384|0;
 $shd$addr = $shd;
 $desc$addr = $desc;
 $0 = $shd$addr; //@line 11461 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11461 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 11461 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11461 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $tobool1; //@line 11461 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((16659|0),(6868|0),11461,(16671|0)); //@line 11461 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11461 "../sokol\sokol_gfx.h"
 }
 $2 = $desc$addr; //@line 11462 "../sokol\sokol_gfx.h"
 $vs = ((($2)) + 196|0); //@line 11462 "../sokol\sokol_gfx.h"
 $byte_code = ((($vs)) + 4|0); //@line 11462 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$byte_code>>2]|0; //@line 11462 "../sokol\sokol_gfx.h"
 $tobool2 = ($3|0)!=(0|0); //@line 11462 "../sokol\sokol_gfx.h"
 if (!($tobool2)) {
  ___assert_fail((16694|0),(6868|0),11462,(16671|0)); //@line 11462 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11462 "../sokol\sokol_gfx.h"
 }
 $4 = $desc$addr; //@line 11462 "../sokol\sokol_gfx.h"
 $fs = ((($4)) + 1144|0); //@line 11462 "../sokol\sokol_gfx.h"
 $byte_code4 = ((($fs)) + 4|0); //@line 11462 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$byte_code4>>2]|0; //@line 11462 "../sokol\sokol_gfx.h"
 $tobool5 = ($5|0)!=(0|0); //@line 11462 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((16694|0),(6868|0),11462,(16671|0)); //@line 11462 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11462 "../sokol\sokol_gfx.h"
 }
 $6 = $shd$addr; //@line 11463 "../sokol\sokol_gfx.h"
 $cmn = ((($6)) + 12|0); //@line 11463 "../sokol\sokol_gfx.h"
 $7 = $desc$addr; //@line 11463 "../sokol\sokol_gfx.h"
 __sg_shader_common_init($cmn,$7); //@line 11463 "../sokol\sokol_gfx.h"
 $success = 1; //@line 11465 "../sokol\sokol_gfx.h"
 $stage_index = 0; //@line 11466 "../sokol\sokol_gfx.h"
 while(1) {
  $8 = $stage_index; //@line 11466 "../sokol\sokol_gfx.h"
  $cmp = ($8|0)<(2); //@line 11466 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   label = 18;
   break;
  }
  $9 = $stage_index; //@line 11467 "../sokol\sokol_gfx.h"
  $cmp9 = ($9|0)==(0); //@line 11467 "../sokol\sokol_gfx.h"
  $10 = $desc$addr;
  $vs10 = ((($10)) + 196|0); //@line 11467 "../sokol\sokol_gfx.h"
  $fs11 = ((($10)) + 1144|0); //@line 11467 "../sokol\sokol_gfx.h"
  $cond = $cmp9 ? $vs10 : $fs11; //@line 11467 "../sokol\sokol_gfx.h"
  $stage_desc = $cond; //@line 11467 "../sokol\sokol_gfx.h"
  $11 = $stage_desc; //@line 11468 "../sokol\sokol_gfx.h"
  $byte_code_size = ((($11)) + 8|0); //@line 11468 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$byte_code_size>>2]|0; //@line 11468 "../sokol\sokol_gfx.h"
  $and = $12 & 3; //@line 11468 "../sokol\sokol_gfx.h"
  $cmp12 = ($and|0)==(0); //@line 11468 "../sokol\sokol_gfx.h"
  if (!($cmp12)) {
   label = 9;
   break;
  }
  $13 = $shd$addr; //@line 11470 "../sokol\sokol_gfx.h"
  $cmn16 = ((($13)) + 12|0); //@line 11470 "../sokol\sokol_gfx.h"
  $14 = $stage_index; //@line 11470 "../sokol\sokol_gfx.h"
  $arrayidx = (($cmn16) + (($14*120)|0)|0); //@line 11470 "../sokol\sokol_gfx.h"
  $cmn_stage = $arrayidx; //@line 11470 "../sokol\sokol_gfx.h"
  $15 = $shd$addr; //@line 11471 "../sokol\sokol_gfx.h"
  $wgpu = ((($15)) + 252|0); //@line 11471 "../sokol\sokol_gfx.h"
  $16 = $stage_index; //@line 11471 "../sokol\sokol_gfx.h"
  $arrayidx18 = (($wgpu) + (($16*24)|0)|0); //@line 11471 "../sokol\sokol_gfx.h"
  $wgpu_stage = $arrayidx18; //@line 11471 "../sokol\sokol_gfx.h"
  $17 = $wgpu_stage; //@line 11473 "../sokol\sokol_gfx.h"
  $entry19 = ((($17)) + 8|0); //@line 11473 "../sokol\sokol_gfx.h"
  $18 = $stage_desc; //@line 11473 "../sokol\sokol_gfx.h"
  $entry20 = ((($18)) + 12|0); //@line 11473 "../sokol\sokol_gfx.h"
  $19 = HEAP32[$entry20>>2]|0; //@line 11473 "../sokol\sokol_gfx.h"
  __sg_strcpy($entry19,$19); //@line 11473 "../sokol\sokol_gfx.h"
  ;HEAP32[$wgpu_shdmod_desc>>2]=0|0;HEAP32[$wgpu_shdmod_desc+4>>2]=0|0;HEAP32[$wgpu_shdmod_desc+8>>2]=0|0;HEAP32[$wgpu_shdmod_desc+12>>2]=0|0; //@line 11475 "../sokol\sokol_gfx.h"
  $20 = $stage_desc; //@line 11476 "../sokol\sokol_gfx.h"
  $byte_code_size21 = ((($20)) + 8|0); //@line 11476 "../sokol\sokol_gfx.h"
  $21 = HEAP32[$byte_code_size21>>2]|0; //@line 11476 "../sokol\sokol_gfx.h"
  $shr = $21 >> 2; //@line 11476 "../sokol\sokol_gfx.h"
  $codeSize = ((($wgpu_shdmod_desc)) + 8|0); //@line 11476 "../sokol\sokol_gfx.h"
  HEAP32[$codeSize>>2] = $shr; //@line 11476 "../sokol\sokol_gfx.h"
  $22 = $stage_desc; //@line 11477 "../sokol\sokol_gfx.h"
  $byte_code22 = ((($22)) + 4|0); //@line 11477 "../sokol\sokol_gfx.h"
  $23 = HEAP32[$byte_code22>>2]|0; //@line 11477 "../sokol\sokol_gfx.h"
  $code = ((($wgpu_shdmod_desc)) + 12|0); //@line 11477 "../sokol\sokol_gfx.h"
  HEAP32[$code>>2] = $23; //@line 11477 "../sokol\sokol_gfx.h"
  $24 = HEAP32[(30904)>>2]|0; //@line 11478 "../sokol\sokol_gfx.h"
  $call = (_wgpuDeviceCreateShaderModule(($24|0),($wgpu_shdmod_desc|0))|0); //@line 11478 "../sokol\sokol_gfx.h"
  $25 = $wgpu_stage; //@line 11478 "../sokol\sokol_gfx.h"
  HEAP32[$25>>2] = $call; //@line 11478 "../sokol\sokol_gfx.h"
  $26 = $wgpu_stage; //@line 11479 "../sokol\sokol_gfx.h"
  $27 = HEAP32[$26>>2]|0; //@line 11479 "../sokol\sokol_gfx.h"
  $cmp24 = (0|0)==($27|0); //@line 11479 "../sokol\sokol_gfx.h"
  if ($cmp24) {
   $success = 0; //@line 11480 "../sokol\sokol_gfx.h"
  }
  $28 = $stage_index; //@line 11484 "../sokol\sokol_gfx.h"
  $cmp25 = ($28|0)==(0); //@line 11484 "../sokol\sokol_gfx.h"
  $cond26 = $cmp25 ? 1 : 2; //@line 11484 "../sokol\sokol_gfx.h"
  $vis = $cond26; //@line 11484 "../sokol\sokol_gfx.h"
  $29 = $cmn_stage; //@line 11485 "../sokol\sokol_gfx.h"
  $num_images = ((($29)) + 4|0); //@line 11485 "../sokol\sokol_gfx.h"
  $30 = HEAP32[$num_images>>2]|0; //@line 11485 "../sokol\sokol_gfx.h"
  $num_imgs = $30; //@line 11485 "../sokol\sokol_gfx.h"
  $31 = $num_imgs; //@line 11486 "../sokol\sokol_gfx.h"
  $cmp27 = ($31|0)>(8); //@line 11486 "../sokol\sokol_gfx.h"
  $spec$store$select = $cmp27 ? 8 : $30; //@line 11486 "../sokol\sokol_gfx.h"
  $num_imgs = $spec$store$select;
  _memset(($bglb_desc|0),0,384)|0; //@line 11490 "../sokol\sokol_gfx.h"
  $img_index = 0; //@line 11491 "../sokol\sokol_gfx.h"
  while(1) {
   $32 = $img_index; //@line 11491 "../sokol\sokol_gfx.h"
   $33 = $num_imgs; //@line 11491 "../sokol\sokol_gfx.h"
   $cmp31 = ($32|0)<($33|0); //@line 11491 "../sokol\sokol_gfx.h"
   if (!($cmp31)) {
    break;
   }
   $34 = $img_index; //@line 11493 "../sokol\sokol_gfx.h"
   $mul = $34<<1; //@line 11493 "../sokol\sokol_gfx.h"
   $add = (($mul) + 0)|0; //@line 11493 "../sokol\sokol_gfx.h"
   $arrayidx33 = (($bglb_desc) + (($add*24)|0)|0); //@line 11493 "../sokol\sokol_gfx.h"
   $tex_desc = $arrayidx33; //@line 11493 "../sokol\sokol_gfx.h"
   $35 = $img_index; //@line 11494 "../sokol\sokol_gfx.h"
   $mul34 = $35<<1; //@line 11494 "../sokol\sokol_gfx.h"
   $add35 = (($mul34) + 1)|0; //@line 11494 "../sokol\sokol_gfx.h"
   $arrayidx36 = (($bglb_desc) + (($add35*24)|0)|0); //@line 11494 "../sokol\sokol_gfx.h"
   $smp_desc = $arrayidx36; //@line 11494 "../sokol\sokol_gfx.h"
   $36 = $img_index; //@line 11496 "../sokol\sokol_gfx.h"
   $37 = $tex_desc; //@line 11496 "../sokol\sokol_gfx.h"
   HEAP32[$37>>2] = $36; //@line 11496 "../sokol\sokol_gfx.h"
   $38 = $vis; //@line 11497 "../sokol\sokol_gfx.h"
   $39 = $tex_desc; //@line 11497 "../sokol\sokol_gfx.h"
   $visibility = ((($39)) + 4|0); //@line 11497 "../sokol\sokol_gfx.h"
   HEAP32[$visibility>>2] = $38; //@line 11497 "../sokol\sokol_gfx.h"
   $40 = $tex_desc; //@line 11498 "../sokol\sokol_gfx.h"
   $type = ((($40)) + 8|0); //@line 11498 "../sokol\sokol_gfx.h"
   HEAP32[$type>>2] = 4; //@line 11498 "../sokol\sokol_gfx.h"
   $41 = $cmn_stage; //@line 11499 "../sokol\sokol_gfx.h"
   $images = ((($41)) + 24|0); //@line 11499 "../sokol\sokol_gfx.h"
   $42 = $img_index; //@line 11499 "../sokol\sokol_gfx.h"
   $arrayidx37 = (($images) + ($42<<3)|0); //@line 11499 "../sokol\sokol_gfx.h"
   $43 = HEAP32[$arrayidx37>>2]|0; //@line 11499 "../sokol\sokol_gfx.h"
   $call39 = (__sg_wgpu_tex_viewdim($43)|0); //@line 11499 "../sokol\sokol_gfx.h"
   $44 = $tex_desc; //@line 11499 "../sokol\sokol_gfx.h"
   $textureDimension = ((($44)) + 16|0); //@line 11499 "../sokol\sokol_gfx.h"
   HEAP32[$textureDimension>>2] = $call39; //@line 11499 "../sokol\sokol_gfx.h"
   $45 = $cmn_stage; //@line 11500 "../sokol\sokol_gfx.h"
   $images40 = ((($45)) + 24|0); //@line 11500 "../sokol\sokol_gfx.h"
   $46 = $img_index; //@line 11500 "../sokol\sokol_gfx.h"
   $arrayidx41 = (($images40) + ($46<<3)|0); //@line 11500 "../sokol\sokol_gfx.h"
   $sampler_type = ((($arrayidx41)) + 4|0); //@line 11500 "../sokol\sokol_gfx.h"
   $47 = HEAP32[$sampler_type>>2]|0; //@line 11500 "../sokol\sokol_gfx.h"
   $call42 = (__sg_wgpu_tex_comptype($47)|0); //@line 11500 "../sokol\sokol_gfx.h"
   $48 = $tex_desc; //@line 11500 "../sokol\sokol_gfx.h"
   $textureComponentType = ((($48)) + 20|0); //@line 11500 "../sokol\sokol_gfx.h"
   HEAP32[$textureComponentType>>2] = $call42; //@line 11500 "../sokol\sokol_gfx.h"
   $49 = $img_index; //@line 11502 "../sokol\sokol_gfx.h"
   $add43 = (($49) + 8)|0; //@line 11502 "../sokol\sokol_gfx.h"
   $50 = $smp_desc; //@line 11502 "../sokol\sokol_gfx.h"
   HEAP32[$50>>2] = $add43; //@line 11502 "../sokol\sokol_gfx.h"
   $51 = $vis; //@line 11503 "../sokol\sokol_gfx.h"
   $52 = $smp_desc; //@line 11503 "../sokol\sokol_gfx.h"
   $visibility45 = ((($52)) + 4|0); //@line 11503 "../sokol\sokol_gfx.h"
   HEAP32[$visibility45>>2] = $51; //@line 11503 "../sokol\sokol_gfx.h"
   $53 = $smp_desc; //@line 11504 "../sokol\sokol_gfx.h"
   $type46 = ((($53)) + 8|0); //@line 11504 "../sokol\sokol_gfx.h"
   HEAP32[$type46>>2] = 3; //@line 11504 "../sokol\sokol_gfx.h"
   $54 = $img_index; //@line 11491 "../sokol\sokol_gfx.h"
   $inc = (($54) + 1)|0; //@line 11491 "../sokol\sokol_gfx.h"
   $img_index = $inc; //@line 11491 "../sokol\sokol_gfx.h"
  }
  ;HEAP32[$img_bgl_desc>>2]=0|0;HEAP32[$img_bgl_desc+4>>2]=0|0;HEAP32[$img_bgl_desc+8>>2]=0|0;HEAP32[$img_bgl_desc+12>>2]=0|0; //@line 11507 "../sokol\sokol_gfx.h"
  $55 = $num_imgs; //@line 11508 "../sokol\sokol_gfx.h"
  $mul47 = $55<<1; //@line 11508 "../sokol\sokol_gfx.h"
  $bindingCount = ((($img_bgl_desc)) + 8|0); //@line 11508 "../sokol\sokol_gfx.h"
  HEAP32[$bindingCount>>2] = $mul47; //@line 11508 "../sokol\sokol_gfx.h"
  $bindings = ((($img_bgl_desc)) + 12|0); //@line 11509 "../sokol\sokol_gfx.h"
  HEAP32[$bindings>>2] = $bglb_desc; //@line 11509 "../sokol\sokol_gfx.h"
  $56 = HEAP32[(30904)>>2]|0; //@line 11510 "../sokol\sokol_gfx.h"
  $call49 = (_wgpuDeviceCreateBindGroupLayout(($56|0),($img_bgl_desc|0))|0); //@line 11510 "../sokol\sokol_gfx.h"
  $57 = $wgpu_stage; //@line 11510 "../sokol\sokol_gfx.h"
  $bind_group_layout = ((($57)) + 4|0); //@line 11510 "../sokol\sokol_gfx.h"
  HEAP32[$bind_group_layout>>2] = $call49; //@line 11510 "../sokol\sokol_gfx.h"
  $58 = $wgpu_stage; //@line 11511 "../sokol\sokol_gfx.h"
  $bind_group_layout50 = ((($58)) + 4|0); //@line 11511 "../sokol\sokol_gfx.h"
  $59 = HEAP32[$bind_group_layout50>>2]|0; //@line 11511 "../sokol\sokol_gfx.h"
  $tobool51 = ($59|0)!=(0|0); //@line 11511 "../sokol\sokol_gfx.h"
  if (!($tobool51)) {
   label = 16;
   break;
  }
  $60 = $stage_index; //@line 11466 "../sokol\sokol_gfx.h"
  $inc56 = (($60) + 1)|0; //@line 11466 "../sokol\sokol_gfx.h"
  $stage_index = $inc56; //@line 11466 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 9) {
  ___assert_fail((16735|0),(6868|0),11468,(16671|0)); //@line 11468 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11468 "../sokol\sokol_gfx.h"
 }
 else if ((label|0) == 16) {
  ___assert_fail((16773|0),(6868|0),11511,(16671|0)); //@line 11511 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11511 "../sokol\sokol_gfx.h"
 }
 else if ((label|0) == 18) {
  $61 = $success; //@line 11513 "../sokol\sokol_gfx.h"
  $tobool58 = $61&1; //@line 11513 "../sokol\sokol_gfx.h"
  $cond59 = $tobool58 ? 2 : 3; //@line 11513 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($cond59|0); //@line 11513 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_shader_common_init($cmn,$desc) {
 $cmn = $cmn|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx11 = 0;
 var $arrayidx22 = 0, $arrayidx28 = 0, $arrayidx31 = 0, $arrayidx7 = 0, $cmn$addr = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp20 = 0, $cmp23 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $desc$addr = 0, $fs = 0, $images = 0, $images27 = 0, $images30 = 0, $img_desc = 0;
 var $img_index = 0, $inc = 0, $inc14 = 0, $inc34 = 0, $inc36 = 0, $inc39 = 0, $num_images = 0, $num_images33 = 0, $sampler_type = 0, $sampler_type32 = 0, $stage = 0, $stage_desc = 0, $stage_index = 0, $type = 0, $type26 = 0, $ub_desc = 0, $ub_index = 0, $uniform_blocks = 0, $uniform_blocks10 = 0, $vs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $cmn$addr = $cmn;
 $desc$addr = $desc;
 $stage_index = 0; //@line 2702 "../sokol\sokol_gfx.h"
 while(1) {
  $0 = $stage_index; //@line 2702 "../sokol\sokol_gfx.h"
  $cmp = ($0|0)<(2); //@line 2702 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   label = 16;
   break;
  }
  $1 = $stage_index; //@line 2703 "../sokol\sokol_gfx.h"
  $cmp1 = ($1|0)==(0); //@line 2703 "../sokol\sokol_gfx.h"
  $2 = $desc$addr;
  $vs = ((($2)) + 196|0); //@line 2703 "../sokol\sokol_gfx.h"
  $fs = ((($2)) + 1144|0); //@line 2703 "../sokol\sokol_gfx.h"
  $cond = $cmp1 ? $vs : $fs; //@line 2703 "../sokol\sokol_gfx.h"
  $stage_desc = $cond; //@line 2703 "../sokol\sokol_gfx.h"
  $3 = $cmn$addr; //@line 2704 "../sokol\sokol_gfx.h"
  $4 = $stage_index; //@line 2704 "../sokol\sokol_gfx.h"
  $arrayidx = (($3) + (($4*120)|0)|0); //@line 2704 "../sokol\sokol_gfx.h"
  $stage = $arrayidx; //@line 2704 "../sokol\sokol_gfx.h"
  $5 = $stage; //@line 2705 "../sokol\sokol_gfx.h"
  $6 = HEAP32[$5>>2]|0; //@line 2705 "../sokol\sokol_gfx.h"
  $cmp3 = ($6|0)==(0); //@line 2705 "../sokol\sokol_gfx.h"
  if (!($cmp3)) {
   label = 4;
   break;
  }
  $ub_index = 0; //@line 2706 "../sokol\sokol_gfx.h"
  while(1) {
   $7 = $ub_index; //@line 2706 "../sokol\sokol_gfx.h"
   $cmp5 = ($7|0)<(4); //@line 2706 "../sokol\sokol_gfx.h"
   if (!($cmp5)) {
    break;
   }
   $8 = $stage_desc; //@line 2707 "../sokol\sokol_gfx.h"
   $uniform_blocks = ((($8)) + 20|0); //@line 2707 "../sokol\sokol_gfx.h"
   $9 = $ub_index; //@line 2707 "../sokol\sokol_gfx.h"
   $arrayidx7 = (($uniform_blocks) + (($9*196)|0)|0); //@line 2707 "../sokol\sokol_gfx.h"
   $ub_desc = $arrayidx7; //@line 2707 "../sokol\sokol_gfx.h"
   $10 = $ub_desc; //@line 2708 "../sokol\sokol_gfx.h"
   $11 = HEAP32[$10>>2]|0; //@line 2708 "../sokol\sokol_gfx.h"
   $cmp8 = (0)==($11|0); //@line 2708 "../sokol\sokol_gfx.h"
   if ($cmp8) {
    break;
   }
   $12 = $ub_desc; //@line 2711 "../sokol\sokol_gfx.h"
   $13 = HEAP32[$12>>2]|0; //@line 2711 "../sokol\sokol_gfx.h"
   $14 = $stage; //@line 2711 "../sokol\sokol_gfx.h"
   $uniform_blocks10 = ((($14)) + 8|0); //@line 2711 "../sokol\sokol_gfx.h"
   $15 = $ub_index; //@line 2711 "../sokol\sokol_gfx.h"
   $arrayidx11 = (($uniform_blocks10) + ($15<<2)|0); //@line 2711 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx11>>2] = $13; //@line 2711 "../sokol\sokol_gfx.h"
   $16 = $stage; //@line 2712 "../sokol\sokol_gfx.h"
   $17 = HEAP32[$16>>2]|0; //@line 2712 "../sokol\sokol_gfx.h"
   $inc = (($17) + 1)|0; //@line 2712 "../sokol\sokol_gfx.h"
   HEAP32[$16>>2] = $inc; //@line 2712 "../sokol\sokol_gfx.h"
   $18 = $ub_index; //@line 2706 "../sokol\sokol_gfx.h"
   $inc14 = (($18) + 1)|0; //@line 2706 "../sokol\sokol_gfx.h"
   $ub_index = $inc14; //@line 2706 "../sokol\sokol_gfx.h"
  }
  $19 = $stage; //@line 2714 "../sokol\sokol_gfx.h"
  $num_images = ((($19)) + 4|0); //@line 2714 "../sokol\sokol_gfx.h"
  $20 = HEAP32[$num_images>>2]|0; //@line 2714 "../sokol\sokol_gfx.h"
  $cmp15 = ($20|0)==(0); //@line 2714 "../sokol\sokol_gfx.h"
  if (!($cmp15)) {
   label = 10;
   break;
  }
  $img_index = 0; //@line 2715 "../sokol\sokol_gfx.h"
  while(1) {
   $21 = $img_index; //@line 2715 "../sokol\sokol_gfx.h"
   $cmp20 = ($21|0)<(12); //@line 2715 "../sokol\sokol_gfx.h"
   if (!($cmp20)) {
    break;
   }
   $22 = $stage_desc; //@line 2716 "../sokol\sokol_gfx.h"
   $images = ((($22)) + 804|0); //@line 2716 "../sokol\sokol_gfx.h"
   $23 = $img_index; //@line 2716 "../sokol\sokol_gfx.h"
   $arrayidx22 = (($images) + (($23*12)|0)|0); //@line 2716 "../sokol\sokol_gfx.h"
   $img_desc = $arrayidx22; //@line 2716 "../sokol\sokol_gfx.h"
   $24 = $img_desc; //@line 2717 "../sokol\sokol_gfx.h"
   $type = ((($24)) + 4|0); //@line 2717 "../sokol\sokol_gfx.h"
   $25 = HEAP32[$type>>2]|0; //@line 2717 "../sokol\sokol_gfx.h"
   $cmp23 = ($25|0)==(0); //@line 2717 "../sokol\sokol_gfx.h"
   if ($cmp23) {
    break;
   }
   $26 = $img_desc; //@line 2720 "../sokol\sokol_gfx.h"
   $type26 = ((($26)) + 4|0); //@line 2720 "../sokol\sokol_gfx.h"
   $27 = HEAP32[$type26>>2]|0; //@line 2720 "../sokol\sokol_gfx.h"
   $28 = $stage; //@line 2720 "../sokol\sokol_gfx.h"
   $images27 = ((($28)) + 24|0); //@line 2720 "../sokol\sokol_gfx.h"
   $29 = $img_index; //@line 2720 "../sokol\sokol_gfx.h"
   $arrayidx28 = (($images27) + ($29<<3)|0); //@line 2720 "../sokol\sokol_gfx.h"
   HEAP32[$arrayidx28>>2] = $27; //@line 2720 "../sokol\sokol_gfx.h"
   $30 = $img_desc; //@line 2721 "../sokol\sokol_gfx.h"
   $sampler_type = ((($30)) + 8|0); //@line 2721 "../sokol\sokol_gfx.h"
   $31 = HEAP32[$sampler_type>>2]|0; //@line 2721 "../sokol\sokol_gfx.h"
   $32 = $stage; //@line 2721 "../sokol\sokol_gfx.h"
   $images30 = ((($32)) + 24|0); //@line 2721 "../sokol\sokol_gfx.h"
   $33 = $img_index; //@line 2721 "../sokol\sokol_gfx.h"
   $arrayidx31 = (($images30) + ($33<<3)|0); //@line 2721 "../sokol\sokol_gfx.h"
   $sampler_type32 = ((($arrayidx31)) + 4|0); //@line 2721 "../sokol\sokol_gfx.h"
   HEAP32[$sampler_type32>>2] = $31; //@line 2721 "../sokol\sokol_gfx.h"
   $34 = $stage; //@line 2722 "../sokol\sokol_gfx.h"
   $num_images33 = ((($34)) + 4|0); //@line 2722 "../sokol\sokol_gfx.h"
   $35 = HEAP32[$num_images33>>2]|0; //@line 2722 "../sokol\sokol_gfx.h"
   $inc34 = (($35) + 1)|0; //@line 2722 "../sokol\sokol_gfx.h"
   HEAP32[$num_images33>>2] = $inc34; //@line 2722 "../sokol\sokol_gfx.h"
   $36 = $img_index; //@line 2715 "../sokol\sokol_gfx.h"
   $inc36 = (($36) + 1)|0; //@line 2715 "../sokol\sokol_gfx.h"
   $img_index = $inc36; //@line 2715 "../sokol\sokol_gfx.h"
  }
  $37 = $stage_index; //@line 2702 "../sokol\sokol_gfx.h"
  $inc39 = (($37) + 1)|0; //@line 2702 "../sokol\sokol_gfx.h"
  $stage_index = $inc39; //@line 2702 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 4) {
  ___assert_fail((16803|0),(6868|0),2705,(16834|0)); //@line 2705 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2705 "../sokol\sokol_gfx.h"
 }
 else if ((label|0) == 10) {
  ___assert_fail((16857|0),(6868|0),2714,(16834|0)); //@line 2714 "../sokol\sokol_gfx.h"
  // unreachable; //@line 2714 "../sokol\sokol_gfx.h"
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return; //@line 2725 "../sokol\sokol_gfx.h"
 }
}
function __sg_strcpy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $dst$addr = 0, $src$addr = 0, $tobool = 0, $tobool1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dst$addr = $dst;
 $src$addr = $src;
 $0 = $dst$addr; //@line 3694 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 3694 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((16880|0),(6868|0),3694,(16884|0)); //@line 3694 "../sokol\sokol_gfx.h"
  // unreachable; //@line 3694 "../sokol\sokol_gfx.h"
 }
 $1 = $src$addr; //@line 3695 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 3695 "../sokol\sokol_gfx.h"
 $2 = $dst$addr;
 if ($tobool1) {
  $3 = $src$addr; //@line 3699 "../sokol\sokol_gfx.h"
  (_strncpy($2,$3,16)|0); //@line 3699 "../sokol\sokol_gfx.h"
  $4 = $dst$addr; //@line 3701 "../sokol\sokol_gfx.h"
  $arrayidx = ((($4)) + 15|0); //@line 3701 "../sokol\sokol_gfx.h"
  HEAP8[$arrayidx>>0] = 0; //@line 3701 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 3706 "../sokol\sokol_gfx.h"
 } else {
  dest=$2; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 3704 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 3706 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_tex_comptype($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr; //@line 10392 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 0; //@line 10393 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10394 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 2; //@line 10395 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10396,(16895|0)); //@line 10396 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10396 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10398 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10398 "../sokol\sokol_gfx.h"
}
function __sg_vertexformat_bytesize($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr; //@line 3710 "../sokol\sokol_gfx.h"
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 4; //@line 3711 "../sokol\sokol_gfx.h"
   break;
  }
  case 2:  {
   $retval = 8; //@line 3712 "../sokol\sokol_gfx.h"
   break;
  }
  case 3:  {
   $retval = 12; //@line 3713 "../sokol\sokol_gfx.h"
   break;
  }
  case 4:  {
   $retval = 16; //@line 3714 "../sokol\sokol_gfx.h"
   break;
  }
  case 5:  {
   $retval = 4; //@line 3715 "../sokol\sokol_gfx.h"
   break;
  }
  case 6:  {
   $retval = 4; //@line 3716 "../sokol\sokol_gfx.h"
   break;
  }
  case 7:  {
   $retval = 4; //@line 3717 "../sokol\sokol_gfx.h"
   break;
  }
  case 8:  {
   $retval = 4; //@line 3718 "../sokol\sokol_gfx.h"
   break;
  }
  case 9:  {
   $retval = 4; //@line 3719 "../sokol\sokol_gfx.h"
   break;
  }
  case 10:  {
   $retval = 4; //@line 3720 "../sokol\sokol_gfx.h"
   break;
  }
  case 11:  {
   $retval = 4; //@line 3721 "../sokol\sokol_gfx.h"
   break;
  }
  case 12:  {
   $retval = 8; //@line 3722 "../sokol\sokol_gfx.h"
   break;
  }
  case 13:  {
   $retval = 8; //@line 3723 "../sokol\sokol_gfx.h"
   break;
  }
  case 14:  {
   $retval = 8; //@line 3724 "../sokol\sokol_gfx.h"
   break;
  }
  case 15:  {
   $retval = 4; //@line 3725 "../sokol\sokol_gfx.h"
   break;
  }
  case 0:  {
   $retval = 0; //@line 3726 "../sokol\sokol_gfx.h"
   break;
  }
  default: {
   ___assert_fail((9413|0),(6868|0),3728,(17027|0)); //@line 3728 "../sokol\sokol_gfx.h"
   // unreachable; //@line 3728 "../sokol\sokol_gfx.h"
  }
  }
 } while(0);
 $1 = $retval; //@line 3731 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 3731 "../sokol\sokol_gfx.h"
}
function __sg_validate_pipeline_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_end_canary = 0, $a_desc = 0, $and = 0, $arrayidx = 0, $arrayidx21 = 0, $attr_index = 0, $attrs = 0, $attrs20 = 0, $attrs_cont = 0;
 var $buf_index = 0, $call = 0, $call35 = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp17 = 0, $cmp2 = 0, $cmp23 = 0, $cmp27 = 0, $cmp3 = 0, $cmp4 = 0, $cmp6 = 0, $cmp9 = 0, $desc$addr = 0, $format = 0, $format22 = 0, $inc = 0, $inc32 = 0, $l_desc = 0;
 var $layout = 0, $layout19 = 0, $shader = 0, $shader10 = 0, $shd = 0, $state = 0, $tobool = 0, $tobool12 = 0, $tobool13 = 0, $tobool26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 13242 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 13242 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((20040|0),(6868|0),13242,(17196|0)); //@line 13242 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13242 "../sokol\sokol_gfx.h"
 }
 __sg_validate_begin(); //@line 13243 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 13244 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$1>>2]|0; //@line 13244 "../sokol\sokol_gfx.h"
 $cmp = ($2|0)==(0); //@line 13244 "../sokol\sokol_gfx.h"
 __sg_validate($cmp,31); //@line 13244 "../sokol\sokol_gfx.h"
 $3 = $desc$addr; //@line 13245 "../sokol\sokol_gfx.h"
 $_end_canary = ((($3)) + 440|0); //@line 13245 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$_end_canary>>2]|0; //@line 13245 "../sokol\sokol_gfx.h"
 $cmp1 = ($4|0)==(0); //@line 13245 "../sokol\sokol_gfx.h"
 __sg_validate($cmp1,31); //@line 13245 "../sokol\sokol_gfx.h"
 $5 = $desc$addr; //@line 13246 "../sokol\sokol_gfx.h"
 $shader = ((($5)) + 292|0); //@line 13246 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$shader>>2]|0; //@line 13246 "../sokol\sokol_gfx.h"
 $cmp2 = ($6|0)!=(0); //@line 13246 "../sokol\sokol_gfx.h"
 __sg_validate($cmp2,32); //@line 13246 "../sokol\sokol_gfx.h"
 $buf_index = 0; //@line 13247 "../sokol\sokol_gfx.h"
 while(1) {
  $7 = $buf_index; //@line 13247 "../sokol\sokol_gfx.h"
  $cmp3 = ($7|0)<(8); //@line 13247 "../sokol\sokol_gfx.h"
  $8 = $desc$addr;
  $layout = ((($8)) + 4|0);
  if (!($cmp3)) {
   break;
  }
  $9 = $buf_index; //@line 13248 "../sokol\sokol_gfx.h"
  $arrayidx = (($layout) + (($9*12)|0)|0); //@line 13248 "../sokol\sokol_gfx.h"
  $l_desc = $arrayidx; //@line 13248 "../sokol\sokol_gfx.h"
  $10 = $l_desc; //@line 13249 "../sokol\sokol_gfx.h"
  $11 = HEAP32[$10>>2]|0; //@line 13249 "../sokol\sokol_gfx.h"
  $cmp4 = ($11|0)==(0); //@line 13249 "../sokol\sokol_gfx.h"
  if (!($cmp4)) {
   $12 = $l_desc; //@line 13252 "../sokol\sokol_gfx.h"
   $13 = HEAP32[$12>>2]|0; //@line 13252 "../sokol\sokol_gfx.h"
   $and = $13 & 3; //@line 13252 "../sokol\sokol_gfx.h"
   $cmp6 = ($and|0)==(0); //@line 13252 "../sokol\sokol_gfx.h"
   __sg_validate($cmp6,34); //@line 13252 "../sokol\sokol_gfx.h"
  }
  $14 = $buf_index; //@line 13247 "../sokol\sokol_gfx.h"
  $inc = (($14) + 1)|0; //@line 13247 "../sokol\sokol_gfx.h"
  $buf_index = $inc; //@line 13247 "../sokol\sokol_gfx.h"
 }
 $attrs = ((($layout)) + 96|0); //@line 13254 "../sokol\sokol_gfx.h"
 $format = ((($attrs)) + 8|0); //@line 13254 "../sokol\sokol_gfx.h"
 $15 = HEAP32[$format>>2]|0; //@line 13254 "../sokol\sokol_gfx.h"
 $cmp9 = ($15|0)!=(0); //@line 13254 "../sokol\sokol_gfx.h"
 __sg_validate($cmp9,33); //@line 13254 "../sokol\sokol_gfx.h"
 $16 = $desc$addr; //@line 13255 "../sokol\sokol_gfx.h"
 $shader10 = ((($16)) + 292|0); //@line 13255 "../sokol\sokol_gfx.h"
 $17 = HEAP32[$shader10>>2]|0; //@line 13255 "../sokol\sokol_gfx.h"
 $call = (__sg_lookup_shader((30364),$17)|0); //@line 13255 "../sokol\sokol_gfx.h"
 $shd = $call; //@line 13255 "../sokol\sokol_gfx.h"
 $18 = $shd; //@line 13256 "../sokol\sokol_gfx.h"
 $tobool12 = ($18|0)!=(0|0); //@line 13256 "../sokol\sokol_gfx.h"
 __sg_validate($tobool12,32); //@line 13256 "../sokol\sokol_gfx.h"
 $19 = $shd; //@line 13257 "../sokol\sokol_gfx.h"
 $tobool13 = ($19|0)!=(0|0); //@line 13257 "../sokol\sokol_gfx.h"
 if (!($tobool13)) {
  $call35 = (__sg_validate_end()|0); //@line 13277 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($call35|0); //@line 13277 "../sokol\sokol_gfx.h"
 }
 $20 = $shd; //@line 13258 "../sokol\sokol_gfx.h"
 $state = ((($20)) + 8|0); //@line 13258 "../sokol\sokol_gfx.h"
 $21 = HEAP32[$state>>2]|0; //@line 13258 "../sokol\sokol_gfx.h"
 $cmp15 = ($21|0)==(2); //@line 13258 "../sokol\sokol_gfx.h"
 __sg_validate($cmp15,32); //@line 13258 "../sokol\sokol_gfx.h"
 $attrs_cont = 1; //@line 13259 "../sokol\sokol_gfx.h"
 $attr_index = 0; //@line 13260 "../sokol\sokol_gfx.h"
 while(1) {
  $22 = $attr_index; //@line 13260 "../sokol\sokol_gfx.h"
  $cmp17 = ($22|0)<(16); //@line 13260 "../sokol\sokol_gfx.h"
  if (!($cmp17)) {
   label = 17;
   break;
  }
  $23 = $desc$addr; //@line 13261 "../sokol\sokol_gfx.h"
  $layout19 = ((($23)) + 4|0); //@line 13261 "../sokol\sokol_gfx.h"
  $attrs20 = ((($layout19)) + 96|0); //@line 13261 "../sokol\sokol_gfx.h"
  $24 = $attr_index; //@line 13261 "../sokol\sokol_gfx.h"
  $arrayidx21 = (($attrs20) + (($24*12)|0)|0); //@line 13261 "../sokol\sokol_gfx.h"
  $a_desc = $arrayidx21; //@line 13261 "../sokol\sokol_gfx.h"
  $25 = $a_desc; //@line 13262 "../sokol\sokol_gfx.h"
  $format22 = ((($25)) + 8|0); //@line 13262 "../sokol\sokol_gfx.h"
  $26 = HEAP32[$format22>>2]|0; //@line 13262 "../sokol\sokol_gfx.h"
  $cmp23 = ($26|0)==(0); //@line 13262 "../sokol\sokol_gfx.h"
  if ($cmp23) {
   $attrs_cont = 0; //@line 13263 "../sokol\sokol_gfx.h"
  } else {
   $27 = $attrs_cont; //@line 13266 "../sokol\sokol_gfx.h"
   $tobool26 = $27&1; //@line 13266 "../sokol\sokol_gfx.h"
   __sg_validate($tobool26,33); //@line 13266 "../sokol\sokol_gfx.h"
   $28 = $a_desc; //@line 13267 "../sokol\sokol_gfx.h"
   $29 = HEAP32[$28>>2]|0; //@line 13267 "../sokol\sokol_gfx.h"
   $cmp27 = ($29|0)<(8); //@line 13267 "../sokol\sokol_gfx.h"
   if (!($cmp27)) {
    label = 14;
    break;
   }
  }
  $30 = $attr_index; //@line 13260 "../sokol\sokol_gfx.h"
  $inc32 = (($30) + 1)|0; //@line 13260 "../sokol\sokol_gfx.h"
  $attr_index = $inc32; //@line 13260 "../sokol\sokol_gfx.h"
 }
 if ((label|0) == 14) {
  ___assert_fail((17223|0),(6868|0),13267,(17196|0)); //@line 13267 "../sokol\sokol_gfx.h"
  // unreachable; //@line 13267 "../sokol\sokol_gfx.h"
 }
 else if ((label|0) == 17) {
  $call35 = (__sg_validate_end()|0); //@line 13277 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($call35|0); //@line 13277 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_create_pipeline($pip,$shd,$desc) {
 $pip = $pip|0;
 $shd = $shd|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $desc$addr = 0, $pip$addr = 0, $shd$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $shd$addr = $shd;
 $desc$addr = $desc;
 $0 = $pip$addr; //@line 12272 "../sokol\sokol_gfx.h"
 $1 = $shd$addr; //@line 12272 "../sokol\sokol_gfx.h"
 $2 = $desc$addr; //@line 12272 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_create_pipeline($0,$1,$2)|0); //@line 12272 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 12272 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_create_pipeline($pip,$shd,$desc) {
 $pip = $pip|0;
 $shd = $shd|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alphaBlend = 0, $alphaBlend165 = 0, $alphaBlend170 = 0, $arrayidx135 = 0;
 var $arrayidx14 = 0, $arrayidx185 = 0, $arrayidx30 = 0, $arrayidx35 = 0, $arrayidx40 = 0, $arrayidx42 = 0, $arrayidx48 = 0, $arrayidx54 = 0, $arrayidx61 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx66 = 0, $arrayidx68 = 0, $arrayidx69 = 0, $arrayidx72 = 0, $arrayidx73 = 0, $arrayidx75 = 0, $arrayinit$element = 0, $arrayinit$element27 = 0, $attributeCount = 0;
 var $attributes = 0, $attrs = 0, $bindGroupLayoutCount = 0, $bindGroupLayouts = 0, $bind_group_layout = 0, $bind_group_layout15 = 0, $bind_group_layout26 = 0, $bind_group_layout31 = 0, $blend = 0, $blend143 = 0, $blend147 = 0, $blend150 = 0, $blend154 = 0, $blend158 = 0, $blend162 = 0, $blend167 = 0, $blend172 = 0, $blend175 = 0, $blend206 = 0, $blend212 = 0;
 var $call = 0, $call101 = 0, $call105 = 0, $call109 = 0, $call113 = 0, $call118 = 0, $call124 = 0, $call130 = 0, $call144 = 0, $call148 = 0, $call151 = 0, $call155 = 0, $call159 = 0, $call163 = 0, $call168 = 0, $call173 = 0, $call204 = 0, $call215 = 0, $call41 = 0, $call60 = 0;
 var $call79 = 0, $call80 = 0, $call82 = 0, $call87 = 0, $call92 = 0, $call98 = 0, $cmn = 0, $cmn53 = 0, $cmp = 0, $cmp176 = 0, $cmp182 = 0, $cmp208 = 0, $cmp220 = 0, $cmp33 = 0, $cmp36 = 0, $cmp44 = 0, $cmp49 = 0, $cmp56 = 0, $colorBlend = 0, $colorBlend153 = 0;
 var $colorBlend157 = 0, $colorStateCount = 0, $colorStates = 0, $color_attachment_count = 0, $color_attachment_count213 = 0, $color_format = 0, $color_write_mask = 0, $compare_func = 0, $compare_func112 = 0, $conv = 0, $conv84 = 0, $conv94 = 0, $conv96 = 0, $cs_desc = 0, $cullMode = 0, $cull_mode = 0, $depthBias = 0, $depthBiasClamp = 0, $depthBiasSlopeScale = 0, $depthCompare = 0;
 var $depthFailOp = 0, $depthFailOp126 = 0, $depthStencilState = 0, $depthWriteEnabled = 0, $depth_bias = 0, $depth_bias_clamp = 0, $depth_bias_slope_scale = 0, $depth_compare_func = 0, $depth_fail_op = 0, $depth_fail_op123 = 0, $depth_format = 0, $depth_format207 = 0, $depth_stencil = 0, $depth_stencil103 = 0, $depth_stencil107 = 0, $depth_stencil111 = 0, $depth_stencil115 = 0, $depth_stencil121 = 0, $depth_stencil127 = 0, $depth_stencil89 = 0;
 var $depth_stencil91 = 0, $depth_stencil93 = 0, $depth_stencil95 = 0, $depth_stencil97 = 0, $depth_stencil99 = 0, $depth_write_enabled = 0, $desc$addr = 0, $ds_desc = 0, $dstFactor = 0, $dstFactor171 = 0, $dst_factor_alpha = 0, $dst_factor_rgb = 0, $entry140 = 0, $entry199 = 0, $entryPoint = 0, $entryPoint203 = 0, $face_winding = 0, $failOp = 0, $failOp120 = 0, $format = 0;
 var $format146 = 0, $format59 = 0, $format88 = 0, $fragmentStage = 0, $frombool = 0, $frontFace = 0, $fs_desc = 0, $i = 0, $inc = 0, $inc188 = 0, $inc71 = 0, $inc77 = 0, $indexFormat = 0, $index_type = 0, $layout = 0, $layout190 = 0, $layout47 = 0, $module136 = 0, $module195 = 0, $offset = 0;
 var $offset67 = 0, $op_alpha = 0, $op_rgb = 0, $or$cond = 0, $or$cond1 = 0, $passOp = 0, $passOp132 = 0, $pass_op = 0, $pass_op129 = 0, $pip$addr = 0, $pip_bgl = 0, $pip_desc = 0, $pip_layout = 0, $pl_desc = 0, $primitiveTopology = 0, $primitive_type = 0, $rasterizationState = 0, $rasterizer = 0, $rasterizer205 = 0, $rasterizer81 = 0;
 var $rasterizer83 = 0, $rasterizer85 = 0, $rasterizer86 = 0, $rs_desc = 0, $sampleCount = 0, $sampleMask = 0, $sample_count = 0, $shader = 0, $shader20 = 0, $shaderLocation = 0, $shd$addr = 0, $srcFactor = 0, $srcFactor166 = 0, $src_factor_alpha = 0, $src_factor_rgb = 0, $src_va_desc = 0, $src_vb_desc = 0, $stencilBack = 0, $stencilBack119 = 0, $stencilBack125 = 0;
 var $stencilBack131 = 0, $stencilFront = 0, $stencilFront102 = 0, $stencilFront106 = 0, $stencilFront110 = 0, $stencilReadMask = 0, $stencilWriteMask = 0, $stencil_back = 0, $stencil_back116 = 0, $stencil_back122 = 0, $stencil_back128 = 0, $stencil_read_mask = 0, $stencil_ref = 0, $stencil_ref22 = 0, $stencil_write_mask = 0, $stepMode = 0, $step_func = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0;
 var $tobool3 = 0, $tobool8 = 0, $tobool90 = 0, $va_desc = 0, $va_idx = 0, $va_loc = 0, $vb_desc = 0, $vb_idx = 0, $vertexBufferCount = 0, $vertexBuffers = 0, $vertexStage = 0, $vertexStage202 = 0, $vertexState = 0, $vertex_layout_valid = 0, $vx_state_desc = 0, $wgpu = 0, $wgpu12 = 0, $wgpu133 = 0, $wgpu137 = 0, $wgpu191 = 0;
 var $wgpu196 = 0, $wgpu21 = 0, $wgpu216 = 0, $wgpu218 = 0, $wgpu23 = 0, $wgpu28 = 0, $writeMask = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3648|0);
 $pip_bgl = sp + 3624|0;
 $pl_desc = sp + 3608|0;
 $vb_desc = sp + 3216|0;
 $va_desc = sp + 144|0;
 $vx_state_desc = sp + 3568|0;
 $rs_desc = sp + 3544|0;
 $ds_desc = sp + 3488|0;
 $fs_desc = sp + 3476|0;
 $cs_desc = sp;
 $pip_desc = sp + 3408|0;
 $pip$addr = $pip;
 $shd$addr = $shd;
 $desc$addr = $desc;
 $0 = $pip$addr; //@line 11532 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11532 "../sokol\sokol_gfx.h"
 $1 = $shd$addr; //@line 11532 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11532 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $tobool1; //@line 11532 "../sokol\sokol_gfx.h"
 $2 = $desc$addr; //@line 11532 "../sokol\sokol_gfx.h"
 $tobool3 = ($2|0)!=(0|0); //@line 11532 "../sokol\sokol_gfx.h"
 $or$cond1 = $or$cond & $tobool3; //@line 11532 "../sokol\sokol_gfx.h"
 if (!($or$cond1)) {
  ___assert_fail((17273|0),(6868|0),11532,(17292|0)); //@line 11532 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11532 "../sokol\sokol_gfx.h"
 }
 $3 = $desc$addr; //@line 11533 "../sokol\sokol_gfx.h"
 $shader = ((($3)) + 292|0); //@line 11533 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$shader>>2]|0; //@line 11533 "../sokol\sokol_gfx.h"
 $5 = $shd$addr; //@line 11533 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$5>>2]|0; //@line 11533 "../sokol\sokol_gfx.h"
 $cmp = ($4|0)==($6|0); //@line 11533 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((17317|0),(6868|0),11533,(17292|0)); //@line 11533 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11533 "../sokol\sokol_gfx.h"
 }
 $7 = $shd$addr; //@line 11534 "../sokol\sokol_gfx.h"
 $wgpu = ((($7)) + 252|0); //@line 11534 "../sokol\sokol_gfx.h"
 $bind_group_layout = ((($wgpu)) + 4|0); //@line 11534 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$bind_group_layout>>2]|0; //@line 11534 "../sokol\sokol_gfx.h"
 $tobool8 = ($8|0)!=(0|0); //@line 11534 "../sokol\sokol_gfx.h"
 if (!($tobool8)) {
  ___assert_fail((17349|0),(6868|0),11534,(17292|0)); //@line 11534 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11534 "../sokol\sokol_gfx.h"
 }
 $9 = $shd$addr; //@line 11535 "../sokol\sokol_gfx.h"
 $wgpu12 = ((($9)) + 252|0); //@line 11535 "../sokol\sokol_gfx.h"
 $arrayidx14 = ((($wgpu12)) + 24|0); //@line 11535 "../sokol\sokol_gfx.h"
 $bind_group_layout15 = ((($arrayidx14)) + 4|0); //@line 11535 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$bind_group_layout15>>2]|0; //@line 11535 "../sokol\sokol_gfx.h"
 $tobool16 = ($10|0)!=(0|0); //@line 11535 "../sokol\sokol_gfx.h"
 if (!($tobool16)) {
  ___assert_fail((17402|0),(6868|0),11535,(17292|0)); //@line 11535 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11535 "../sokol\sokol_gfx.h"
 }
 $11 = $shd$addr; //@line 11536 "../sokol\sokol_gfx.h"
 $12 = $pip$addr; //@line 11536 "../sokol\sokol_gfx.h"
 $shader20 = ((($12)) + 72|0); //@line 11536 "../sokol\sokol_gfx.h"
 HEAP32[$shader20>>2] = $11; //@line 11536 "../sokol\sokol_gfx.h"
 $13 = $pip$addr; //@line 11537 "../sokol\sokol_gfx.h"
 $cmn = ((($13)) + 12|0); //@line 11537 "../sokol\sokol_gfx.h"
 $14 = $desc$addr; //@line 11537 "../sokol\sokol_gfx.h"
 __sg_pipeline_common_init($cmn,$14); //@line 11537 "../sokol\sokol_gfx.h"
 $15 = $desc$addr; //@line 11538 "../sokol\sokol_gfx.h"
 $depth_stencil = ((($15)) + 304|0); //@line 11538 "../sokol\sokol_gfx.h"
 $stencil_ref = ((($depth_stencil)) + 40|0); //@line 11538 "../sokol\sokol_gfx.h"
 $16 = HEAP8[$stencil_ref>>0]|0; //@line 11538 "../sokol\sokol_gfx.h"
 $conv = $16&255; //@line 11538 "../sokol\sokol_gfx.h"
 $17 = $pip$addr; //@line 11538 "../sokol\sokol_gfx.h"
 $wgpu21 = ((($17)) + 76|0); //@line 11538 "../sokol\sokol_gfx.h"
 $stencil_ref22 = ((($wgpu21)) + 4|0); //@line 11538 "../sokol\sokol_gfx.h"
 HEAP32[$stencil_ref22>>2] = $conv; //@line 11538 "../sokol\sokol_gfx.h"
 $18 = HEAP32[(30976)>>2]|0; //@line 11541 "../sokol\sokol_gfx.h"
 HEAP32[$pip_bgl>>2] = $18; //@line 11540 "../sokol\sokol_gfx.h"
 $arrayinit$element = ((($pip_bgl)) + 4|0); //@line 11540 "../sokol\sokol_gfx.h"
 $19 = $shd$addr; //@line 11542 "../sokol\sokol_gfx.h"
 $wgpu23 = ((($19)) + 252|0); //@line 11542 "../sokol\sokol_gfx.h"
 $bind_group_layout26 = ((($wgpu23)) + 4|0); //@line 11542 "../sokol\sokol_gfx.h"
 $20 = HEAP32[$bind_group_layout26>>2]|0; //@line 11542 "../sokol\sokol_gfx.h"
 HEAP32[$arrayinit$element>>2] = $20; //@line 11540 "../sokol\sokol_gfx.h"
 $arrayinit$element27 = ((($arrayinit$element)) + 4|0); //@line 11540 "../sokol\sokol_gfx.h"
 $21 = $shd$addr; //@line 11543 "../sokol\sokol_gfx.h"
 $wgpu28 = ((($21)) + 252|0); //@line 11543 "../sokol\sokol_gfx.h"
 $arrayidx30 = ((($wgpu28)) + 24|0); //@line 11543 "../sokol\sokol_gfx.h"
 $bind_group_layout31 = ((($arrayidx30)) + 4|0); //@line 11543 "../sokol\sokol_gfx.h"
 $22 = HEAP32[$bind_group_layout31>>2]|0; //@line 11543 "../sokol\sokol_gfx.h"
 HEAP32[$arrayinit$element27>>2] = $22; //@line 11540 "../sokol\sokol_gfx.h"
 ;HEAP32[$pl_desc>>2]=0|0;HEAP32[$pl_desc+4>>2]=0|0;HEAP32[$pl_desc+8>>2]=0|0;HEAP32[$pl_desc+12>>2]=0|0; //@line 11546 "../sokol\sokol_gfx.h"
 $bindGroupLayoutCount = ((($pl_desc)) + 8|0); //@line 11547 "../sokol\sokol_gfx.h"
 HEAP32[$bindGroupLayoutCount>>2] = 3; //@line 11547 "../sokol\sokol_gfx.h"
 $bindGroupLayouts = ((($pl_desc)) + 12|0); //@line 11548 "../sokol\sokol_gfx.h"
 HEAP32[$bindGroupLayouts>>2] = $pip_bgl; //@line 11548 "../sokol\sokol_gfx.h"
 $23 = HEAP32[(30904)>>2]|0; //@line 11549 "../sokol\sokol_gfx.h"
 $call = (_wgpuDeviceCreatePipelineLayout(($23|0),($pl_desc|0))|0); //@line 11549 "../sokol\sokol_gfx.h"
 $pip_layout = $call; //@line 11549 "../sokol\sokol_gfx.h"
 _memset(($vb_desc|0),0,192)|0; //@line 11552 "../sokol\sokol_gfx.h"
 _memset(($va_desc|0),0,3072)|0; //@line 11554 "../sokol\sokol_gfx.h"
 $vb_idx = 0; //@line 11555 "../sokol\sokol_gfx.h"
 while(1) {
  $24 = $vb_idx; //@line 11556 "../sokol\sokol_gfx.h"
  $cmp33 = ($24|0)<(8); //@line 11556 "../sokol\sokol_gfx.h"
  if (!($cmp33)) {
   break;
  }
  $25 = $desc$addr; //@line 11557 "../sokol\sokol_gfx.h"
  $layout = ((($25)) + 4|0); //@line 11557 "../sokol\sokol_gfx.h"
  $26 = $vb_idx; //@line 11557 "../sokol\sokol_gfx.h"
  $arrayidx35 = (($layout) + (($26*12)|0)|0); //@line 11557 "../sokol\sokol_gfx.h"
  $src_vb_desc = $arrayidx35; //@line 11557 "../sokol\sokol_gfx.h"
  $27 = $src_vb_desc; //@line 11558 "../sokol\sokol_gfx.h"
  $28 = HEAP32[$27>>2]|0; //@line 11558 "../sokol\sokol_gfx.h"
  $cmp36 = (0)==($28|0); //@line 11558 "../sokol\sokol_gfx.h"
  if ($cmp36) {
   break;
  }
  $29 = $src_vb_desc; //@line 11561 "../sokol\sokol_gfx.h"
  $30 = HEAP32[$29>>2]|0; //@line 11561 "../sokol\sokol_gfx.h"
  $31 = ($30|0)<(0); //@line 11561 "../sokol\sokol_gfx.h"
  $32 = $31 << 31 >> 31; //@line 11561 "../sokol\sokol_gfx.h"
  $33 = $vb_idx; //@line 11561 "../sokol\sokol_gfx.h"
  $arrayidx40 = (($vb_desc) + (($33*24)|0)|0); //@line 11561 "../sokol\sokol_gfx.h"
  $34 = $arrayidx40; //@line 11561 "../sokol\sokol_gfx.h"
  $35 = $34; //@line 11561 "../sokol\sokol_gfx.h"
  HEAP32[$35>>2] = $30; //@line 11561 "../sokol\sokol_gfx.h"
  $36 = (($34) + 4)|0; //@line 11561 "../sokol\sokol_gfx.h"
  $37 = $36; //@line 11561 "../sokol\sokol_gfx.h"
  HEAP32[$37>>2] = $32; //@line 11561 "../sokol\sokol_gfx.h"
  $38 = $src_vb_desc; //@line 11562 "../sokol\sokol_gfx.h"
  $step_func = ((($38)) + 4|0); //@line 11562 "../sokol\sokol_gfx.h"
  $39 = HEAP32[$step_func>>2]|0; //@line 11562 "../sokol\sokol_gfx.h"
  $call41 = (__sg_wgpu_stepmode($39)|0); //@line 11562 "../sokol\sokol_gfx.h"
  $40 = $vb_idx; //@line 11562 "../sokol\sokol_gfx.h"
  $arrayidx42 = (($vb_desc) + (($40*24)|0)|0); //@line 11562 "../sokol\sokol_gfx.h"
  $stepMode = ((($arrayidx42)) + 8|0); //@line 11562 "../sokol\sokol_gfx.h"
  HEAP32[$stepMode>>2] = $call41; //@line 11562 "../sokol\sokol_gfx.h"
  $va_idx = 0; //@line 11566 "../sokol\sokol_gfx.h"
  $va_loc = 0; //@line 11567 "../sokol\sokol_gfx.h"
  while(1) {
   $41 = $va_loc; //@line 11567 "../sokol\sokol_gfx.h"
   $cmp44 = ($41|0)<(16); //@line 11567 "../sokol\sokol_gfx.h"
   if (!($cmp44)) {
    break;
   }
   $42 = $desc$addr; //@line 11568 "../sokol\sokol_gfx.h"
   $layout47 = ((($42)) + 4|0); //@line 11568 "../sokol\sokol_gfx.h"
   $attrs = ((($layout47)) + 96|0); //@line 11568 "../sokol\sokol_gfx.h"
   $43 = $va_loc; //@line 11568 "../sokol\sokol_gfx.h"
   $arrayidx48 = (($attrs) + (($43*12)|0)|0); //@line 11568 "../sokol\sokol_gfx.h"
   $src_va_desc = $arrayidx48; //@line 11568 "../sokol\sokol_gfx.h"
   $44 = $src_va_desc; //@line 11569 "../sokol\sokol_gfx.h"
   $format = ((($44)) + 8|0); //@line 11569 "../sokol\sokol_gfx.h"
   $45 = HEAP32[$format>>2]|0; //@line 11569 "../sokol\sokol_gfx.h"
   $cmp49 = (0)==($45|0); //@line 11569 "../sokol\sokol_gfx.h"
   if ($cmp49) {
    break;
   }
   $46 = $pip$addr; //@line 11572 "../sokol\sokol_gfx.h"
   $cmn53 = ((($46)) + 12|0); //@line 11572 "../sokol\sokol_gfx.h"
   $vertex_layout_valid = ((($cmn53)) + 8|0); //@line 11572 "../sokol\sokol_gfx.h"
   $47 = $src_va_desc; //@line 11572 "../sokol\sokol_gfx.h"
   $48 = HEAP32[$47>>2]|0; //@line 11572 "../sokol\sokol_gfx.h"
   $arrayidx54 = (($vertex_layout_valid) + ($48)|0); //@line 11572 "../sokol\sokol_gfx.h"
   HEAP8[$arrayidx54>>0] = 1; //@line 11572 "../sokol\sokol_gfx.h"
   $49 = $vb_idx; //@line 11573 "../sokol\sokol_gfx.h"
   $50 = $src_va_desc; //@line 11573 "../sokol\sokol_gfx.h"
   $51 = HEAP32[$50>>2]|0; //@line 11573 "../sokol\sokol_gfx.h"
   $cmp56 = ($49|0)==($51|0); //@line 11573 "../sokol\sokol_gfx.h"
   if ($cmp56) {
    $52 = $src_va_desc; //@line 11574 "../sokol\sokol_gfx.h"
    $format59 = ((($52)) + 8|0); //@line 11574 "../sokol\sokol_gfx.h"
    $53 = HEAP32[$format59>>2]|0; //@line 11574 "../sokol\sokol_gfx.h"
    $call60 = (__sg_wgpu_vertexformat($53)|0); //@line 11574 "../sokol\sokol_gfx.h"
    $54 = $vb_idx; //@line 11574 "../sokol\sokol_gfx.h"
    $arrayidx61 = (($va_desc) + (($54*384)|0)|0); //@line 11574 "../sokol\sokol_gfx.h"
    $55 = $va_idx; //@line 11574 "../sokol\sokol_gfx.h"
    $arrayidx62 = (($arrayidx61) + (($55*24)|0)|0); //@line 11574 "../sokol\sokol_gfx.h"
    HEAP32[$arrayidx62>>2] = $call60; //@line 11574 "../sokol\sokol_gfx.h"
    $56 = $src_va_desc; //@line 11575 "../sokol\sokol_gfx.h"
    $offset = ((($56)) + 4|0); //@line 11575 "../sokol\sokol_gfx.h"
    $57 = HEAP32[$offset>>2]|0; //@line 11575 "../sokol\sokol_gfx.h"
    $58 = ($57|0)<(0); //@line 11575 "../sokol\sokol_gfx.h"
    $59 = $58 << 31 >> 31; //@line 11575 "../sokol\sokol_gfx.h"
    $60 = $vb_idx; //@line 11575 "../sokol\sokol_gfx.h"
    $arrayidx65 = (($va_desc) + (($60*384)|0)|0); //@line 11575 "../sokol\sokol_gfx.h"
    $61 = $va_idx; //@line 11575 "../sokol\sokol_gfx.h"
    $arrayidx66 = (($arrayidx65) + (($61*24)|0)|0); //@line 11575 "../sokol\sokol_gfx.h"
    $offset67 = ((($arrayidx66)) + 8|0); //@line 11575 "../sokol\sokol_gfx.h"
    $62 = $offset67; //@line 11575 "../sokol\sokol_gfx.h"
    $63 = $62; //@line 11575 "../sokol\sokol_gfx.h"
    HEAP32[$63>>2] = $57; //@line 11575 "../sokol\sokol_gfx.h"
    $64 = (($62) + 4)|0; //@line 11575 "../sokol\sokol_gfx.h"
    $65 = $64; //@line 11575 "../sokol\sokol_gfx.h"
    HEAP32[$65>>2] = $59; //@line 11575 "../sokol\sokol_gfx.h"
    $66 = $va_loc; //@line 11576 "../sokol\sokol_gfx.h"
    $67 = $vb_idx; //@line 11576 "../sokol\sokol_gfx.h"
    $arrayidx68 = (($va_desc) + (($67*384)|0)|0); //@line 11576 "../sokol\sokol_gfx.h"
    $68 = $va_idx; //@line 11576 "../sokol\sokol_gfx.h"
    $arrayidx69 = (($arrayidx68) + (($68*24)|0)|0); //@line 11576 "../sokol\sokol_gfx.h"
    $shaderLocation = ((($arrayidx69)) + 16|0); //@line 11576 "../sokol\sokol_gfx.h"
    HEAP32[$shaderLocation>>2] = $66; //@line 11576 "../sokol\sokol_gfx.h"
    $69 = $va_idx; //@line 11577 "../sokol\sokol_gfx.h"
    $inc = (($69) + 1)|0; //@line 11577 "../sokol\sokol_gfx.h"
    $va_idx = $inc; //@line 11577 "../sokol\sokol_gfx.h"
   }
   $70 = $va_loc; //@line 11567 "../sokol\sokol_gfx.h"
   $inc71 = (($70) + 1)|0; //@line 11567 "../sokol\sokol_gfx.h"
   $va_loc = $inc71; //@line 11567 "../sokol\sokol_gfx.h"
  }
  $71 = $va_idx; //@line 11580 "../sokol\sokol_gfx.h"
  $72 = $vb_idx; //@line 11580 "../sokol\sokol_gfx.h"
  $arrayidx72 = (($vb_desc) + (($72*24)|0)|0); //@line 11580 "../sokol\sokol_gfx.h"
  $attributeCount = ((($arrayidx72)) + 12|0); //@line 11580 "../sokol\sokol_gfx.h"
  HEAP32[$attributeCount>>2] = $71; //@line 11580 "../sokol\sokol_gfx.h"
  $73 = $vb_idx; //@line 11581 "../sokol\sokol_gfx.h"
  $arrayidx73 = (($va_desc) + (($73*384)|0)|0); //@line 11581 "../sokol\sokol_gfx.h"
  $74 = $vb_idx; //@line 11581 "../sokol\sokol_gfx.h"
  $arrayidx75 = (($vb_desc) + (($74*24)|0)|0); //@line 11581 "../sokol\sokol_gfx.h"
  $attributes = ((($arrayidx75)) + 16|0); //@line 11581 "../sokol\sokol_gfx.h"
  HEAP32[$attributes>>2] = $arrayidx73; //@line 11581 "../sokol\sokol_gfx.h"
  $75 = $vb_idx; //@line 11556 "../sokol\sokol_gfx.h"
  $inc77 = (($75) + 1)|0; //@line 11556 "../sokol\sokol_gfx.h"
  $vb_idx = $inc77; //@line 11556 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$vx_state_desc>>2]=0|0;HEAP32[$vx_state_desc+4>>2]=0|0;HEAP32[$vx_state_desc+8>>2]=0|0;HEAP32[$vx_state_desc+12>>2]=0|0; //@line 11584 "../sokol\sokol_gfx.h"
 $76 = $desc$addr; //@line 11585 "../sokol\sokol_gfx.h"
 $index_type = ((($76)) + 300|0); //@line 11585 "../sokol\sokol_gfx.h"
 $77 = HEAP32[$index_type>>2]|0; //@line 11585 "../sokol\sokol_gfx.h"
 $call79 = (__sg_wgpu_indexformat($77)|0); //@line 11585 "../sokol\sokol_gfx.h"
 $indexFormat = ((($vx_state_desc)) + 4|0); //@line 11585 "../sokol\sokol_gfx.h"
 HEAP32[$indexFormat>>2] = $call79; //@line 11585 "../sokol\sokol_gfx.h"
 $78 = $vb_idx; //@line 11586 "../sokol\sokol_gfx.h"
 $vertexBufferCount = ((($vx_state_desc)) + 8|0); //@line 11586 "../sokol\sokol_gfx.h"
 HEAP32[$vertexBufferCount>>2] = $78; //@line 11586 "../sokol\sokol_gfx.h"
 $vertexBuffers = ((($vx_state_desc)) + 12|0); //@line 11587 "../sokol\sokol_gfx.h"
 HEAP32[$vertexBuffers>>2] = $vb_desc; //@line 11587 "../sokol\sokol_gfx.h"
 ;HEAP32[$rs_desc>>2]=0|0;HEAP32[$rs_desc+4>>2]=0|0;HEAP32[$rs_desc+8>>2]=0|0;HEAP32[$rs_desc+12>>2]=0|0;HEAP32[$rs_desc+16>>2]=0|0;HEAP32[$rs_desc+20>>2]=0|0; //@line 11590 "../sokol\sokol_gfx.h"
 $79 = $desc$addr; //@line 11591 "../sokol\sokol_gfx.h"
 $rasterizer = ((($79)) + 408|0); //@line 11591 "../sokol\sokol_gfx.h"
 $face_winding = ((($rasterizer)) + 8|0); //@line 11591 "../sokol\sokol_gfx.h"
 $80 = HEAP32[$face_winding>>2]|0; //@line 11591 "../sokol\sokol_gfx.h"
 $call80 = (__sg_wgpu_frontface($80)|0); //@line 11591 "../sokol\sokol_gfx.h"
 $frontFace = ((($rs_desc)) + 4|0); //@line 11591 "../sokol\sokol_gfx.h"
 HEAP32[$frontFace>>2] = $call80; //@line 11591 "../sokol\sokol_gfx.h"
 $81 = $desc$addr; //@line 11592 "../sokol\sokol_gfx.h"
 $rasterizer81 = ((($81)) + 408|0); //@line 11592 "../sokol\sokol_gfx.h"
 $cull_mode = ((($rasterizer81)) + 4|0); //@line 11592 "../sokol\sokol_gfx.h"
 $82 = HEAP32[$cull_mode>>2]|0; //@line 11592 "../sokol\sokol_gfx.h"
 $call82 = (__sg_wgpu_cullmode($82)|0); //@line 11592 "../sokol\sokol_gfx.h"
 $cullMode = ((($rs_desc)) + 8|0); //@line 11592 "../sokol\sokol_gfx.h"
 HEAP32[$cullMode>>2] = $call82; //@line 11592 "../sokol\sokol_gfx.h"
 $83 = $desc$addr; //@line 11593 "../sokol\sokol_gfx.h"
 $rasterizer83 = ((($83)) + 408|0); //@line 11593 "../sokol\sokol_gfx.h"
 $depth_bias = ((($rasterizer83)) + 16|0); //@line 11593 "../sokol\sokol_gfx.h"
 $84 = +HEAPF32[$depth_bias>>2]; //@line 11593 "../sokol\sokol_gfx.h"
 $conv84 = (~~(($84))); //@line 11593 "../sokol\sokol_gfx.h"
 $depthBias = ((($rs_desc)) + 12|0); //@line 11593 "../sokol\sokol_gfx.h"
 HEAP32[$depthBias>>2] = $conv84; //@line 11593 "../sokol\sokol_gfx.h"
 $85 = $desc$addr; //@line 11594 "../sokol\sokol_gfx.h"
 $rasterizer85 = ((($85)) + 408|0); //@line 11594 "../sokol\sokol_gfx.h"
 $depth_bias_clamp = ((($rasterizer85)) + 24|0); //@line 11594 "../sokol\sokol_gfx.h"
 $86 = +HEAPF32[$depth_bias_clamp>>2]; //@line 11594 "../sokol\sokol_gfx.h"
 $depthBiasClamp = ((($rs_desc)) + 20|0); //@line 11594 "../sokol\sokol_gfx.h"
 HEAPF32[$depthBiasClamp>>2] = $86; //@line 11594 "../sokol\sokol_gfx.h"
 $87 = $desc$addr; //@line 11595 "../sokol\sokol_gfx.h"
 $rasterizer86 = ((($87)) + 408|0); //@line 11595 "../sokol\sokol_gfx.h"
 $depth_bias_slope_scale = ((($rasterizer86)) + 20|0); //@line 11595 "../sokol\sokol_gfx.h"
 $88 = +HEAPF32[$depth_bias_slope_scale>>2]; //@line 11595 "../sokol\sokol_gfx.h"
 $depthBiasSlopeScale = ((($rs_desc)) + 16|0); //@line 11595 "../sokol\sokol_gfx.h"
 HEAPF32[$depthBiasSlopeScale>>2] = $88; //@line 11595 "../sokol\sokol_gfx.h"
 dest=$ds_desc; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 11598 "../sokol\sokol_gfx.h"
 $89 = $desc$addr; //@line 11599 "../sokol\sokol_gfx.h"
 $blend = ((($89)) + 348|0); //@line 11599 "../sokol\sokol_gfx.h"
 $depth_format = ((($blend)) + 40|0); //@line 11599 "../sokol\sokol_gfx.h"
 $90 = HEAP32[$depth_format>>2]|0; //@line 11599 "../sokol\sokol_gfx.h"
 $call87 = (__sg_wgpu_textureformat($90)|0); //@line 11599 "../sokol\sokol_gfx.h"
 $format88 = ((($ds_desc)) + 4|0); //@line 11599 "../sokol\sokol_gfx.h"
 HEAP32[$format88>>2] = $call87; //@line 11599 "../sokol\sokol_gfx.h"
 $91 = $desc$addr; //@line 11600 "../sokol\sokol_gfx.h"
 $depth_stencil89 = ((($91)) + 304|0); //@line 11600 "../sokol\sokol_gfx.h"
 $depth_write_enabled = ((($depth_stencil89)) + 36|0); //@line 11600 "../sokol\sokol_gfx.h"
 $92 = HEAP8[$depth_write_enabled>>0]|0; //@line 11600 "../sokol\sokol_gfx.h"
 $tobool90 = $92&1; //@line 11600 "../sokol\sokol_gfx.h"
 $depthWriteEnabled = ((($ds_desc)) + 8|0); //@line 11600 "../sokol\sokol_gfx.h"
 $frombool = $tobool90&1; //@line 11600 "../sokol\sokol_gfx.h"
 HEAP8[$depthWriteEnabled>>0] = $frombool; //@line 11600 "../sokol\sokol_gfx.h"
 $93 = $desc$addr; //@line 11601 "../sokol\sokol_gfx.h"
 $depth_stencil91 = ((($93)) + 304|0); //@line 11601 "../sokol\sokol_gfx.h"
 $depth_compare_func = ((($depth_stencil91)) + 32|0); //@line 11601 "../sokol\sokol_gfx.h"
 $94 = HEAP32[$depth_compare_func>>2]|0; //@line 11601 "../sokol\sokol_gfx.h"
 $call92 = (__sg_wgpu_comparefunc($94)|0); //@line 11601 "../sokol\sokol_gfx.h"
 $depthCompare = ((($ds_desc)) + 12|0); //@line 11601 "../sokol\sokol_gfx.h"
 HEAP32[$depthCompare>>2] = $call92; //@line 11601 "../sokol\sokol_gfx.h"
 $95 = $desc$addr; //@line 11602 "../sokol\sokol_gfx.h"
 $depth_stencil93 = ((($95)) + 304|0); //@line 11602 "../sokol\sokol_gfx.h"
 $stencil_read_mask = ((($depth_stencil93)) + 38|0); //@line 11602 "../sokol\sokol_gfx.h"
 $96 = HEAP8[$stencil_read_mask>>0]|0; //@line 11602 "../sokol\sokol_gfx.h"
 $conv94 = $96&255; //@line 11602 "../sokol\sokol_gfx.h"
 $stencilReadMask = ((($ds_desc)) + 48|0); //@line 11602 "../sokol\sokol_gfx.h"
 HEAP32[$stencilReadMask>>2] = $conv94; //@line 11602 "../sokol\sokol_gfx.h"
 $97 = $desc$addr; //@line 11603 "../sokol\sokol_gfx.h"
 $depth_stencil95 = ((($97)) + 304|0); //@line 11603 "../sokol\sokol_gfx.h"
 $stencil_write_mask = ((($depth_stencil95)) + 39|0); //@line 11603 "../sokol\sokol_gfx.h"
 $98 = HEAP8[$stencil_write_mask>>0]|0; //@line 11603 "../sokol\sokol_gfx.h"
 $conv96 = $98&255; //@line 11603 "../sokol\sokol_gfx.h"
 $stencilWriteMask = ((($ds_desc)) + 52|0); //@line 11603 "../sokol\sokol_gfx.h"
 HEAP32[$stencilWriteMask>>2] = $conv96; //@line 11603 "../sokol\sokol_gfx.h"
 $99 = $desc$addr; //@line 11604 "../sokol\sokol_gfx.h"
 $depth_stencil97 = ((($99)) + 304|0); //@line 11604 "../sokol\sokol_gfx.h"
 $compare_func = ((($depth_stencil97)) + 12|0); //@line 11604 "../sokol\sokol_gfx.h"
 $100 = HEAP32[$compare_func>>2]|0; //@line 11604 "../sokol\sokol_gfx.h"
 $call98 = (__sg_wgpu_comparefunc($100)|0); //@line 11604 "../sokol\sokol_gfx.h"
 $stencilFront = ((($ds_desc)) + 16|0); //@line 11604 "../sokol\sokol_gfx.h"
 HEAP32[$stencilFront>>2] = $call98; //@line 11604 "../sokol\sokol_gfx.h"
 $101 = $desc$addr; //@line 11605 "../sokol\sokol_gfx.h"
 $depth_stencil99 = ((($101)) + 304|0); //@line 11605 "../sokol\sokol_gfx.h"
 $102 = HEAP32[$depth_stencil99>>2]|0; //@line 11605 "../sokol\sokol_gfx.h"
 $call101 = (__sg_wgpu_stencilop($102)|0); //@line 11605 "../sokol\sokol_gfx.h"
 $stencilFront102 = ((($ds_desc)) + 16|0); //@line 11605 "../sokol\sokol_gfx.h"
 $failOp = ((($stencilFront102)) + 4|0); //@line 11605 "../sokol\sokol_gfx.h"
 HEAP32[$failOp>>2] = $call101; //@line 11605 "../sokol\sokol_gfx.h"
 $103 = $desc$addr; //@line 11606 "../sokol\sokol_gfx.h"
 $depth_stencil103 = ((($103)) + 304|0); //@line 11606 "../sokol\sokol_gfx.h"
 $depth_fail_op = ((($depth_stencil103)) + 4|0); //@line 11606 "../sokol\sokol_gfx.h"
 $104 = HEAP32[$depth_fail_op>>2]|0; //@line 11606 "../sokol\sokol_gfx.h"
 $call105 = (__sg_wgpu_stencilop($104)|0); //@line 11606 "../sokol\sokol_gfx.h"
 $stencilFront106 = ((($ds_desc)) + 16|0); //@line 11606 "../sokol\sokol_gfx.h"
 $depthFailOp = ((($stencilFront106)) + 8|0); //@line 11606 "../sokol\sokol_gfx.h"
 HEAP32[$depthFailOp>>2] = $call105; //@line 11606 "../sokol\sokol_gfx.h"
 $105 = $desc$addr; //@line 11607 "../sokol\sokol_gfx.h"
 $depth_stencil107 = ((($105)) + 304|0); //@line 11607 "../sokol\sokol_gfx.h"
 $pass_op = ((($depth_stencil107)) + 8|0); //@line 11607 "../sokol\sokol_gfx.h"
 $106 = HEAP32[$pass_op>>2]|0; //@line 11607 "../sokol\sokol_gfx.h"
 $call109 = (__sg_wgpu_stencilop($106)|0); //@line 11607 "../sokol\sokol_gfx.h"
 $stencilFront110 = ((($ds_desc)) + 16|0); //@line 11607 "../sokol\sokol_gfx.h"
 $passOp = ((($stencilFront110)) + 12|0); //@line 11607 "../sokol\sokol_gfx.h"
 HEAP32[$passOp>>2] = $call109; //@line 11607 "../sokol\sokol_gfx.h"
 $107 = $desc$addr; //@line 11608 "../sokol\sokol_gfx.h"
 $depth_stencil111 = ((($107)) + 304|0); //@line 11608 "../sokol\sokol_gfx.h"
 $stencil_back = ((($depth_stencil111)) + 16|0); //@line 11608 "../sokol\sokol_gfx.h"
 $compare_func112 = ((($stencil_back)) + 12|0); //@line 11608 "../sokol\sokol_gfx.h"
 $108 = HEAP32[$compare_func112>>2]|0; //@line 11608 "../sokol\sokol_gfx.h"
 $call113 = (__sg_wgpu_comparefunc($108)|0); //@line 11608 "../sokol\sokol_gfx.h"
 $stencilBack = ((($ds_desc)) + 32|0); //@line 11608 "../sokol\sokol_gfx.h"
 HEAP32[$stencilBack>>2] = $call113; //@line 11608 "../sokol\sokol_gfx.h"
 $109 = $desc$addr; //@line 11609 "../sokol\sokol_gfx.h"
 $depth_stencil115 = ((($109)) + 304|0); //@line 11609 "../sokol\sokol_gfx.h"
 $stencil_back116 = ((($depth_stencil115)) + 16|0); //@line 11609 "../sokol\sokol_gfx.h"
 $110 = HEAP32[$stencil_back116>>2]|0; //@line 11609 "../sokol\sokol_gfx.h"
 $call118 = (__sg_wgpu_stencilop($110)|0); //@line 11609 "../sokol\sokol_gfx.h"
 $stencilBack119 = ((($ds_desc)) + 32|0); //@line 11609 "../sokol\sokol_gfx.h"
 $failOp120 = ((($stencilBack119)) + 4|0); //@line 11609 "../sokol\sokol_gfx.h"
 HEAP32[$failOp120>>2] = $call118; //@line 11609 "../sokol\sokol_gfx.h"
 $111 = $desc$addr; //@line 11610 "../sokol\sokol_gfx.h"
 $depth_stencil121 = ((($111)) + 304|0); //@line 11610 "../sokol\sokol_gfx.h"
 $stencil_back122 = ((($depth_stencil121)) + 16|0); //@line 11610 "../sokol\sokol_gfx.h"
 $depth_fail_op123 = ((($stencil_back122)) + 4|0); //@line 11610 "../sokol\sokol_gfx.h"
 $112 = HEAP32[$depth_fail_op123>>2]|0; //@line 11610 "../sokol\sokol_gfx.h"
 $call124 = (__sg_wgpu_stencilop($112)|0); //@line 11610 "../sokol\sokol_gfx.h"
 $stencilBack125 = ((($ds_desc)) + 32|0); //@line 11610 "../sokol\sokol_gfx.h"
 $depthFailOp126 = ((($stencilBack125)) + 8|0); //@line 11610 "../sokol\sokol_gfx.h"
 HEAP32[$depthFailOp126>>2] = $call124; //@line 11610 "../sokol\sokol_gfx.h"
 $113 = $desc$addr; //@line 11611 "../sokol\sokol_gfx.h"
 $depth_stencil127 = ((($113)) + 304|0); //@line 11611 "../sokol\sokol_gfx.h"
 $stencil_back128 = ((($depth_stencil127)) + 16|0); //@line 11611 "../sokol\sokol_gfx.h"
 $pass_op129 = ((($stencil_back128)) + 8|0); //@line 11611 "../sokol\sokol_gfx.h"
 $114 = HEAP32[$pass_op129>>2]|0; //@line 11611 "../sokol\sokol_gfx.h"
 $call130 = (__sg_wgpu_stencilop($114)|0); //@line 11611 "../sokol\sokol_gfx.h"
 $stencilBack131 = ((($ds_desc)) + 32|0); //@line 11611 "../sokol\sokol_gfx.h"
 $passOp132 = ((($stencilBack131)) + 12|0); //@line 11611 "../sokol\sokol_gfx.h"
 HEAP32[$passOp132>>2] = $call130; //@line 11611 "../sokol\sokol_gfx.h"
 ;HEAP32[$fs_desc>>2]=0|0;HEAP32[$fs_desc+4>>2]=0|0;HEAP32[$fs_desc+8>>2]=0|0; //@line 11614 "../sokol\sokol_gfx.h"
 $115 = $shd$addr; //@line 11615 "../sokol\sokol_gfx.h"
 $wgpu133 = ((($115)) + 252|0); //@line 11615 "../sokol\sokol_gfx.h"
 $arrayidx135 = ((($wgpu133)) + 24|0); //@line 11615 "../sokol\sokol_gfx.h"
 $116 = HEAP32[$arrayidx135>>2]|0; //@line 11615 "../sokol\sokol_gfx.h"
 $module136 = ((($fs_desc)) + 4|0); //@line 11615 "../sokol\sokol_gfx.h"
 HEAP32[$module136>>2] = $116; //@line 11615 "../sokol\sokol_gfx.h"
 $117 = $shd$addr; //@line 11616 "../sokol\sokol_gfx.h"
 $wgpu137 = ((($117)) + 252|0); //@line 11616 "../sokol\sokol_gfx.h"
 $entry140 = ((($wgpu137)) + 8|0); //@line 11616 "../sokol\sokol_gfx.h"
 $entryPoint = ((($fs_desc)) + 8|0); //@line 11616 "../sokol\sokol_gfx.h"
 HEAP32[$entryPoint>>2] = $entry140; //@line 11616 "../sokol\sokol_gfx.h"
 _memset(($cs_desc|0),0,144)|0; //@line 11619 "../sokol\sokol_gfx.h"
 $118 = $desc$addr; //@line 11620 "../sokol\sokol_gfx.h"
 $blend143 = ((($118)) + 348|0); //@line 11620 "../sokol\sokol_gfx.h"
 $color_format = ((($blend143)) + 36|0); //@line 11620 "../sokol\sokol_gfx.h"
 $119 = HEAP32[$color_format>>2]|0; //@line 11620 "../sokol\sokol_gfx.h"
 $call144 = (__sg_wgpu_textureformat($119)|0); //@line 11620 "../sokol\sokol_gfx.h"
 $format146 = ((($cs_desc)) + 4|0); //@line 11620 "../sokol\sokol_gfx.h"
 HEAP32[$format146>>2] = $call144; //@line 11620 "../sokol\sokol_gfx.h"
 $120 = $desc$addr; //@line 11621 "../sokol\sokol_gfx.h"
 $blend147 = ((($120)) + 348|0); //@line 11621 "../sokol\sokol_gfx.h"
 $op_rgb = ((($blend147)) + 12|0); //@line 11621 "../sokol\sokol_gfx.h"
 $121 = HEAP32[$op_rgb>>2]|0; //@line 11621 "../sokol\sokol_gfx.h"
 $call148 = (__sg_wgpu_blendop($121)|0); //@line 11621 "../sokol\sokol_gfx.h"
 $colorBlend = ((($cs_desc)) + 20|0); //@line 11621 "../sokol\sokol_gfx.h"
 HEAP32[$colorBlend>>2] = $call148; //@line 11621 "../sokol\sokol_gfx.h"
 $122 = $desc$addr; //@line 11622 "../sokol\sokol_gfx.h"
 $blend150 = ((($122)) + 348|0); //@line 11622 "../sokol\sokol_gfx.h"
 $src_factor_rgb = ((($blend150)) + 4|0); //@line 11622 "../sokol\sokol_gfx.h"
 $123 = HEAP32[$src_factor_rgb>>2]|0; //@line 11622 "../sokol\sokol_gfx.h"
 $call151 = (__sg_wgpu_blendfactor($123)|0); //@line 11622 "../sokol\sokol_gfx.h"
 $colorBlend153 = ((($cs_desc)) + 20|0); //@line 11622 "../sokol\sokol_gfx.h"
 $srcFactor = ((($colorBlend153)) + 4|0); //@line 11622 "../sokol\sokol_gfx.h"
 HEAP32[$srcFactor>>2] = $call151; //@line 11622 "../sokol\sokol_gfx.h"
 $124 = $desc$addr; //@line 11623 "../sokol\sokol_gfx.h"
 $blend154 = ((($124)) + 348|0); //@line 11623 "../sokol\sokol_gfx.h"
 $dst_factor_rgb = ((($blend154)) + 8|0); //@line 11623 "../sokol\sokol_gfx.h"
 $125 = HEAP32[$dst_factor_rgb>>2]|0; //@line 11623 "../sokol\sokol_gfx.h"
 $call155 = (__sg_wgpu_blendfactor($125)|0); //@line 11623 "../sokol\sokol_gfx.h"
 $colorBlend157 = ((($cs_desc)) + 20|0); //@line 11623 "../sokol\sokol_gfx.h"
 $dstFactor = ((($colorBlend157)) + 8|0); //@line 11623 "../sokol\sokol_gfx.h"
 HEAP32[$dstFactor>>2] = $call155; //@line 11623 "../sokol\sokol_gfx.h"
 $126 = $desc$addr; //@line 11624 "../sokol\sokol_gfx.h"
 $blend158 = ((($126)) + 348|0); //@line 11624 "../sokol\sokol_gfx.h"
 $op_alpha = ((($blend158)) + 24|0); //@line 11624 "../sokol\sokol_gfx.h"
 $127 = HEAP32[$op_alpha>>2]|0; //@line 11624 "../sokol\sokol_gfx.h"
 $call159 = (__sg_wgpu_blendop($127)|0); //@line 11624 "../sokol\sokol_gfx.h"
 $alphaBlend = ((($cs_desc)) + 8|0); //@line 11624 "../sokol\sokol_gfx.h"
 HEAP32[$alphaBlend>>2] = $call159; //@line 11624 "../sokol\sokol_gfx.h"
 $128 = $desc$addr; //@line 11625 "../sokol\sokol_gfx.h"
 $blend162 = ((($128)) + 348|0); //@line 11625 "../sokol\sokol_gfx.h"
 $src_factor_alpha = ((($blend162)) + 16|0); //@line 11625 "../sokol\sokol_gfx.h"
 $129 = HEAP32[$src_factor_alpha>>2]|0; //@line 11625 "../sokol\sokol_gfx.h"
 $call163 = (__sg_wgpu_blendfactor($129)|0); //@line 11625 "../sokol\sokol_gfx.h"
 $alphaBlend165 = ((($cs_desc)) + 8|0); //@line 11625 "../sokol\sokol_gfx.h"
 $srcFactor166 = ((($alphaBlend165)) + 4|0); //@line 11625 "../sokol\sokol_gfx.h"
 HEAP32[$srcFactor166>>2] = $call163; //@line 11625 "../sokol\sokol_gfx.h"
 $130 = $desc$addr; //@line 11626 "../sokol\sokol_gfx.h"
 $blend167 = ((($130)) + 348|0); //@line 11626 "../sokol\sokol_gfx.h"
 $dst_factor_alpha = ((($blend167)) + 20|0); //@line 11626 "../sokol\sokol_gfx.h"
 $131 = HEAP32[$dst_factor_alpha>>2]|0; //@line 11626 "../sokol\sokol_gfx.h"
 $call168 = (__sg_wgpu_blendfactor($131)|0); //@line 11626 "../sokol\sokol_gfx.h"
 $alphaBlend170 = ((($cs_desc)) + 8|0); //@line 11626 "../sokol\sokol_gfx.h"
 $dstFactor171 = ((($alphaBlend170)) + 8|0); //@line 11626 "../sokol\sokol_gfx.h"
 HEAP32[$dstFactor171>>2] = $call168; //@line 11626 "../sokol\sokol_gfx.h"
 $132 = $desc$addr; //@line 11627 "../sokol\sokol_gfx.h"
 $blend172 = ((($132)) + 348|0); //@line 11627 "../sokol\sokol_gfx.h"
 $color_write_mask = ((($blend172)) + 28|0); //@line 11627 "../sokol\sokol_gfx.h"
 $133 = HEAP8[$color_write_mask>>0]|0; //@line 11627 "../sokol\sokol_gfx.h"
 $call173 = (__sg_wgpu_colorwritemask($133)|0); //@line 11627 "../sokol\sokol_gfx.h"
 $writeMask = ((($cs_desc)) + 32|0); //@line 11627 "../sokol\sokol_gfx.h"
 HEAP32[$writeMask>>2] = $call173; //@line 11627 "../sokol\sokol_gfx.h"
 $134 = $desc$addr; //@line 11628 "../sokol\sokol_gfx.h"
 $blend175 = ((($134)) + 348|0); //@line 11628 "../sokol\sokol_gfx.h"
 $color_attachment_count = ((($blend175)) + 32|0); //@line 11628 "../sokol\sokol_gfx.h"
 $135 = HEAP32[$color_attachment_count>>2]|0; //@line 11628 "../sokol\sokol_gfx.h"
 $cmp176 = ($135|0)<=(4); //@line 11628 "../sokol\sokol_gfx.h"
 if (!($cmp176)) {
  ___assert_fail((17455|0),(6868|0),11628,(17292|0)); //@line 11628 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11628 "../sokol\sokol_gfx.h"
 }
 $i = 1; //@line 11629 "../sokol\sokol_gfx.h"
 while(1) {
  $136 = $i; //@line 11629 "../sokol\sokol_gfx.h"
  $cmp182 = ($136|0)<(4); //@line 11629 "../sokol\sokol_gfx.h"
  if (!($cmp182)) {
   break;
  }
  $137 = $i; //@line 11630 "../sokol\sokol_gfx.h"
  $arrayidx185 = (($cs_desc) + (($137*36)|0)|0); //@line 11630 "../sokol\sokol_gfx.h"
  dest=$arrayidx185; src=$cs_desc; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 11630 "../sokol\sokol_gfx.h"
  $138 = $i; //@line 11629 "../sokol\sokol_gfx.h"
  $inc188 = (($138) + 1)|0; //@line 11629 "../sokol\sokol_gfx.h"
  $i = $inc188; //@line 11629 "../sokol\sokol_gfx.h"
 }
 dest=$pip_desc; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 11634 "../sokol\sokol_gfx.h"
 $139 = $pip_layout; //@line 11635 "../sokol\sokol_gfx.h"
 $layout190 = ((($pip_desc)) + 8|0); //@line 11635 "../sokol\sokol_gfx.h"
 HEAP32[$layout190>>2] = $139; //@line 11635 "../sokol\sokol_gfx.h"
 $140 = $shd$addr; //@line 11636 "../sokol\sokol_gfx.h"
 $wgpu191 = ((($140)) + 252|0); //@line 11636 "../sokol\sokol_gfx.h"
 $141 = HEAP32[$wgpu191>>2]|0; //@line 11636 "../sokol\sokol_gfx.h"
 $vertexStage = ((($pip_desc)) + 12|0); //@line 11636 "../sokol\sokol_gfx.h"
 $module195 = ((($vertexStage)) + 4|0); //@line 11636 "../sokol\sokol_gfx.h"
 HEAP32[$module195>>2] = $141; //@line 11636 "../sokol\sokol_gfx.h"
 $142 = $shd$addr; //@line 11637 "../sokol\sokol_gfx.h"
 $wgpu196 = ((($142)) + 252|0); //@line 11637 "../sokol\sokol_gfx.h"
 $entry199 = ((($wgpu196)) + 8|0); //@line 11637 "../sokol\sokol_gfx.h"
 $vertexStage202 = ((($pip_desc)) + 12|0); //@line 11637 "../sokol\sokol_gfx.h"
 $entryPoint203 = ((($vertexStage202)) + 8|0); //@line 11637 "../sokol\sokol_gfx.h"
 HEAP32[$entryPoint203>>2] = $entry199; //@line 11637 "../sokol\sokol_gfx.h"
 $fragmentStage = ((($pip_desc)) + 24|0); //@line 11638 "../sokol\sokol_gfx.h"
 HEAP32[$fragmentStage>>2] = $fs_desc; //@line 11638 "../sokol\sokol_gfx.h"
 $vertexState = ((($pip_desc)) + 28|0); //@line 11639 "../sokol\sokol_gfx.h"
 HEAP32[$vertexState>>2] = $vx_state_desc; //@line 11639 "../sokol\sokol_gfx.h"
 $143 = $desc$addr; //@line 11640 "../sokol\sokol_gfx.h"
 $primitive_type = ((($143)) + 296|0); //@line 11640 "../sokol\sokol_gfx.h"
 $144 = HEAP32[$primitive_type>>2]|0; //@line 11640 "../sokol\sokol_gfx.h"
 $call204 = (__sg_wgpu_topology($144)|0); //@line 11640 "../sokol\sokol_gfx.h"
 $primitiveTopology = ((($pip_desc)) + 32|0); //@line 11640 "../sokol\sokol_gfx.h"
 HEAP32[$primitiveTopology>>2] = $call204; //@line 11640 "../sokol\sokol_gfx.h"
 $rasterizationState = ((($pip_desc)) + 36|0); //@line 11641 "../sokol\sokol_gfx.h"
 HEAP32[$rasterizationState>>2] = $rs_desc; //@line 11641 "../sokol\sokol_gfx.h"
 $145 = $desc$addr; //@line 11642 "../sokol\sokol_gfx.h"
 $rasterizer205 = ((($145)) + 408|0); //@line 11642 "../sokol\sokol_gfx.h"
 $sample_count = ((($rasterizer205)) + 12|0); //@line 11642 "../sokol\sokol_gfx.h"
 $146 = HEAP32[$sample_count>>2]|0; //@line 11642 "../sokol\sokol_gfx.h"
 $sampleCount = ((($pip_desc)) + 40|0); //@line 11642 "../sokol\sokol_gfx.h"
 HEAP32[$sampleCount>>2] = $146; //@line 11642 "../sokol\sokol_gfx.h"
 $147 = $desc$addr; //@line 11643 "../sokol\sokol_gfx.h"
 $blend206 = ((($147)) + 348|0); //@line 11643 "../sokol\sokol_gfx.h"
 $depth_format207 = ((($blend206)) + 40|0); //@line 11643 "../sokol\sokol_gfx.h"
 $148 = HEAP32[$depth_format207>>2]|0; //@line 11643 "../sokol\sokol_gfx.h"
 $cmp208 = (1)!=($148|0); //@line 11643 "../sokol\sokol_gfx.h"
 if ($cmp208) {
  $depthStencilState = ((($pip_desc)) + 44|0); //@line 11644 "../sokol\sokol_gfx.h"
  HEAP32[$depthStencilState>>2] = $ds_desc; //@line 11644 "../sokol\sokol_gfx.h"
 }
 $149 = $desc$addr; //@line 11646 "../sokol\sokol_gfx.h"
 $blend212 = ((($149)) + 348|0); //@line 11646 "../sokol\sokol_gfx.h"
 $color_attachment_count213 = ((($blend212)) + 32|0); //@line 11646 "../sokol\sokol_gfx.h"
 $150 = HEAP32[$color_attachment_count213>>2]|0; //@line 11646 "../sokol\sokol_gfx.h"
 $colorStateCount = ((($pip_desc)) + 48|0); //@line 11646 "../sokol\sokol_gfx.h"
 HEAP32[$colorStateCount>>2] = $150; //@line 11646 "../sokol\sokol_gfx.h"
 $colorStates = ((($pip_desc)) + 52|0); //@line 11647 "../sokol\sokol_gfx.h"
 HEAP32[$colorStates>>2] = $cs_desc; //@line 11647 "../sokol\sokol_gfx.h"
 $sampleMask = ((($pip_desc)) + 56|0); //@line 11648 "../sokol\sokol_gfx.h"
 HEAP32[$sampleMask>>2] = -1; //@line 11648 "../sokol\sokol_gfx.h"
 $151 = HEAP32[(30904)>>2]|0; //@line 11649 "../sokol\sokol_gfx.h"
 $call215 = (_wgpuDeviceCreateRenderPipeline(($151|0),($pip_desc|0))|0); //@line 11649 "../sokol\sokol_gfx.h"
 $152 = $pip$addr; //@line 11649 "../sokol\sokol_gfx.h"
 $wgpu216 = ((($152)) + 76|0); //@line 11649 "../sokol\sokol_gfx.h"
 HEAP32[$wgpu216>>2] = $call215; //@line 11649 "../sokol\sokol_gfx.h"
 $153 = $pip$addr; //@line 11650 "../sokol\sokol_gfx.h"
 $wgpu218 = ((($153)) + 76|0); //@line 11650 "../sokol\sokol_gfx.h"
 $154 = HEAP32[$wgpu218>>2]|0; //@line 11650 "../sokol\sokol_gfx.h"
 $cmp220 = (0|0)!=($154|0); //@line 11650 "../sokol\sokol_gfx.h"
 if ($cmp220) {
  $155 = $pip_layout; //@line 11651 "../sokol\sokol_gfx.h"
  _wgpuPipelineLayoutRelease(($155|0)); //@line 11651 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return 2; //@line 11653 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((17518|0),(6868|0),11650,(17292|0)); //@line 11650 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11650 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_pipeline_common_init($cmn,$desc) {
 $cmn = $cmn|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx21 = 0;
 var $blend = 0, $blend18 = 0, $blend3 = 0, $blend5 = 0, $blend_color = 0, $blend_color20 = 0, $cmn$addr = 0, $cmp = 0, $cmp16 = 0, $color_attachment_count = 0, $color_attachment_count2 = 0, $color_format = 0, $color_format4 = 0, $depth_bias = 0, $depth_bias9 = 0, $depth_bias_clamp = 0, $depth_bias_clamp13 = 0, $depth_bias_slope_scale = 0, $depth_bias_slope_scale11 = 0, $depth_format = 0;
 var $depth_format6 = 0, $desc$addr = 0, $i = 0, $i14 = 0, $inc = 0, $inc23 = 0, $index_type = 0, $index_type1 = 0, $rasterizer = 0, $rasterizer10 = 0, $rasterizer12 = 0, $rasterizer8 = 0, $sample_count = 0, $sample_count7 = 0, $shader = 0, $vertex_layout_valid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmn$addr = $cmn;
 $desc$addr = $desc;
 $0 = $cmn$addr; //@line 2742 "../sokol\sokol_gfx.h"
 $1 = $desc$addr; //@line 2742 "../sokol\sokol_gfx.h"
 $shader = ((($1)) + 292|0); //@line 2742 "../sokol\sokol_gfx.h"
 ;HEAP32[$0>>2]=HEAP32[$shader>>2]|0; //@line 2742 "../sokol\sokol_gfx.h"
 $2 = $desc$addr; //@line 2743 "../sokol\sokol_gfx.h"
 $index_type = ((($2)) + 300|0); //@line 2743 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$index_type>>2]|0; //@line 2743 "../sokol\sokol_gfx.h"
 $4 = $cmn$addr; //@line 2743 "../sokol\sokol_gfx.h"
 $index_type1 = ((($4)) + 4|0); //@line 2743 "../sokol\sokol_gfx.h"
 HEAP32[$index_type1>>2] = $3; //@line 2743 "../sokol\sokol_gfx.h"
 $i = 0; //@line 2744 "../sokol\sokol_gfx.h"
 while(1) {
  $5 = $i; //@line 2744 "../sokol\sokol_gfx.h"
  $cmp = ($5|0)<(8); //@line 2744 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $6 = $cmn$addr; //@line 2745 "../sokol\sokol_gfx.h"
  $vertex_layout_valid = ((($6)) + 8|0); //@line 2745 "../sokol\sokol_gfx.h"
  $7 = $i; //@line 2745 "../sokol\sokol_gfx.h"
  $arrayidx = (($vertex_layout_valid) + ($7)|0); //@line 2745 "../sokol\sokol_gfx.h"
  HEAP8[$arrayidx>>0] = 0; //@line 2745 "../sokol\sokol_gfx.h"
  $8 = $i; //@line 2744 "../sokol\sokol_gfx.h"
  $inc = (($8) + 1)|0; //@line 2744 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 2744 "../sokol\sokol_gfx.h"
 }
 $9 = $desc$addr; //@line 2747 "../sokol\sokol_gfx.h"
 $blend = ((($9)) + 348|0); //@line 2747 "../sokol\sokol_gfx.h"
 $color_attachment_count = ((($blend)) + 32|0); //@line 2747 "../sokol\sokol_gfx.h"
 $10 = HEAP32[$color_attachment_count>>2]|0; //@line 2747 "../sokol\sokol_gfx.h"
 $11 = $cmn$addr; //@line 2747 "../sokol\sokol_gfx.h"
 $color_attachment_count2 = ((($11)) + 16|0); //@line 2747 "../sokol\sokol_gfx.h"
 HEAP32[$color_attachment_count2>>2] = $10; //@line 2747 "../sokol\sokol_gfx.h"
 $12 = $desc$addr; //@line 2748 "../sokol\sokol_gfx.h"
 $blend3 = ((($12)) + 348|0); //@line 2748 "../sokol\sokol_gfx.h"
 $color_format = ((($blend3)) + 36|0); //@line 2748 "../sokol\sokol_gfx.h"
 $13 = HEAP32[$color_format>>2]|0; //@line 2748 "../sokol\sokol_gfx.h"
 $14 = $cmn$addr; //@line 2748 "../sokol\sokol_gfx.h"
 $color_format4 = ((($14)) + 20|0); //@line 2748 "../sokol\sokol_gfx.h"
 HEAP32[$color_format4>>2] = $13; //@line 2748 "../sokol\sokol_gfx.h"
 $15 = $desc$addr; //@line 2749 "../sokol\sokol_gfx.h"
 $blend5 = ((($15)) + 348|0); //@line 2749 "../sokol\sokol_gfx.h"
 $depth_format = ((($blend5)) + 40|0); //@line 2749 "../sokol\sokol_gfx.h"
 $16 = HEAP32[$depth_format>>2]|0; //@line 2749 "../sokol\sokol_gfx.h"
 $17 = $cmn$addr; //@line 2749 "../sokol\sokol_gfx.h"
 $depth_format6 = ((($17)) + 24|0); //@line 2749 "../sokol\sokol_gfx.h"
 HEAP32[$depth_format6>>2] = $16; //@line 2749 "../sokol\sokol_gfx.h"
 $18 = $desc$addr; //@line 2750 "../sokol\sokol_gfx.h"
 $rasterizer = ((($18)) + 408|0); //@line 2750 "../sokol\sokol_gfx.h"
 $sample_count = ((($rasterizer)) + 12|0); //@line 2750 "../sokol\sokol_gfx.h"
 $19 = HEAP32[$sample_count>>2]|0; //@line 2750 "../sokol\sokol_gfx.h"
 $20 = $cmn$addr; //@line 2750 "../sokol\sokol_gfx.h"
 $sample_count7 = ((($20)) + 28|0); //@line 2750 "../sokol\sokol_gfx.h"
 HEAP32[$sample_count7>>2] = $19; //@line 2750 "../sokol\sokol_gfx.h"
 $21 = $desc$addr; //@line 2751 "../sokol\sokol_gfx.h"
 $rasterizer8 = ((($21)) + 408|0); //@line 2751 "../sokol\sokol_gfx.h"
 $depth_bias = ((($rasterizer8)) + 16|0); //@line 2751 "../sokol\sokol_gfx.h"
 $22 = +HEAPF32[$depth_bias>>2]; //@line 2751 "../sokol\sokol_gfx.h"
 $23 = $cmn$addr; //@line 2751 "../sokol\sokol_gfx.h"
 $depth_bias9 = ((($23)) + 32|0); //@line 2751 "../sokol\sokol_gfx.h"
 HEAPF32[$depth_bias9>>2] = $22; //@line 2751 "../sokol\sokol_gfx.h"
 $24 = $desc$addr; //@line 2752 "../sokol\sokol_gfx.h"
 $rasterizer10 = ((($24)) + 408|0); //@line 2752 "../sokol\sokol_gfx.h"
 $depth_bias_slope_scale = ((($rasterizer10)) + 20|0); //@line 2752 "../sokol\sokol_gfx.h"
 $25 = +HEAPF32[$depth_bias_slope_scale>>2]; //@line 2752 "../sokol\sokol_gfx.h"
 $26 = $cmn$addr; //@line 2752 "../sokol\sokol_gfx.h"
 $depth_bias_slope_scale11 = ((($26)) + 36|0); //@line 2752 "../sokol\sokol_gfx.h"
 HEAPF32[$depth_bias_slope_scale11>>2] = $25; //@line 2752 "../sokol\sokol_gfx.h"
 $27 = $desc$addr; //@line 2753 "../sokol\sokol_gfx.h"
 $rasterizer12 = ((($27)) + 408|0); //@line 2753 "../sokol\sokol_gfx.h"
 $depth_bias_clamp = ((($rasterizer12)) + 24|0); //@line 2753 "../sokol\sokol_gfx.h"
 $28 = +HEAPF32[$depth_bias_clamp>>2]; //@line 2753 "../sokol\sokol_gfx.h"
 $29 = $cmn$addr; //@line 2753 "../sokol\sokol_gfx.h"
 $depth_bias_clamp13 = ((($29)) + 40|0); //@line 2753 "../sokol\sokol_gfx.h"
 HEAPF32[$depth_bias_clamp13>>2] = $28; //@line 2753 "../sokol\sokol_gfx.h"
 $i14 = 0; //@line 2754 "../sokol\sokol_gfx.h"
 while(1) {
  $30 = $i14; //@line 2754 "../sokol\sokol_gfx.h"
  $cmp16 = ($30|0)<(4); //@line 2754 "../sokol\sokol_gfx.h"
  if (!($cmp16)) {
   break;
  }
  $31 = $desc$addr; //@line 2755 "../sokol\sokol_gfx.h"
  $blend18 = ((($31)) + 348|0); //@line 2755 "../sokol\sokol_gfx.h"
  $blend_color = ((($blend18)) + 44|0); //@line 2755 "../sokol\sokol_gfx.h"
  $32 = $i14; //@line 2755 "../sokol\sokol_gfx.h"
  $arrayidx19 = (($blend_color) + ($32<<2)|0); //@line 2755 "../sokol\sokol_gfx.h"
  $33 = +HEAPF32[$arrayidx19>>2]; //@line 2755 "../sokol\sokol_gfx.h"
  $34 = $cmn$addr; //@line 2755 "../sokol\sokol_gfx.h"
  $blend_color20 = ((($34)) + 44|0); //@line 2755 "../sokol\sokol_gfx.h"
  $35 = $i14; //@line 2755 "../sokol\sokol_gfx.h"
  $arrayidx21 = (($blend_color20) + ($35<<2)|0); //@line 2755 "../sokol\sokol_gfx.h"
  HEAPF32[$arrayidx21>>2] = $33; //@line 2755 "../sokol\sokol_gfx.h"
  $36 = $i14; //@line 2754 "../sokol\sokol_gfx.h"
  $inc23 = (($36) + 1)|0; //@line 2754 "../sokol\sokol_gfx.h"
  $i14 = $inc23; //@line 2754 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 2757 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_stepmode($s) {
 $s = $s|0;
 var $0 = 0, $cmp = 0, $cond = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr; //@line 10462 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)==(1); //@line 10462 "../sokol\sokol_gfx.h"
 $cond = $cmp ? 0 : 1; //@line 10462 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($cond|0); //@line 10462 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_vertexformat($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $f$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $f$addr = $f;
 $0 = $f$addr; //@line 10466 "../sokol\sokol_gfx.h"
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 18; //@line 10467 "../sokol\sokol_gfx.h"
   break;
  }
  case 2:  {
   $retval = 19; //@line 10468 "../sokol\sokol_gfx.h"
   break;
  }
  case 3:  {
   $retval = 20; //@line 10469 "../sokol\sokol_gfx.h"
   break;
  }
  case 4:  {
   $retval = 21; //@line 10470 "../sokol\sokol_gfx.h"
   break;
  }
  case 5:  {
   $retval = 3; //@line 10471 "../sokol\sokol_gfx.h"
   break;
  }
  case 6:  {
   $retval = 7; //@line 10472 "../sokol\sokol_gfx.h"
   break;
  }
  case 7:  {
   $retval = 1; //@line 10473 "../sokol\sokol_gfx.h"
   break;
  }
  case 8:  {
   $retval = 5; //@line 10474 "../sokol\sokol_gfx.h"
   break;
  }
  case 9:  {
   $retval = 10; //@line 10475 "../sokol\sokol_gfx.h"
   break;
  }
  case 10:  {
   $retval = 14; //@line 10476 "../sokol\sokol_gfx.h"
   break;
  }
  case 11:  {
   $retval = 12; //@line 10477 "../sokol\sokol_gfx.h"
   break;
  }
  case 12:  {
   $retval = 11; //@line 10478 "../sokol\sokol_gfx.h"
   break;
  }
  case 13:  {
   $retval = 15; //@line 10479 "../sokol\sokol_gfx.h"
   break;
  }
  case 14:  {
   $retval = 13; //@line 10480 "../sokol\sokol_gfx.h"
   break;
  }
  default: {
   ___assert_fail((9413|0),(6868|0),10484,(17537|0)); //@line 10484 "../sokol\sokol_gfx.h"
   // unreachable; //@line 10484 "../sokol\sokol_gfx.h"
  }
  }
 } while(0);
 $1 = $retval; //@line 10487 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10487 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_indexformat($t) {
 $t = $t|0;
 var $0 = 0, $cmp = 0, $cond = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr; //@line 10458 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)==(2); //@line 10458 "../sokol\sokol_gfx.h"
 $cond = $cmp ? 0 : 1; //@line 10458 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($cond|0); //@line 10458 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_frontface($fw) {
 $fw = $fw|0;
 var $0 = 0, $cmp = 0, $cond = 0, $fw$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fw$addr = $fw;
 $0 = $fw$addr; //@line 10501 "../sokol\sokol_gfx.h"
 $cmp = ($0|0)==(1); //@line 10501 "../sokol\sokol_gfx.h"
 $cond = $cmp ? 0 : 1; //@line 10501 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($cond|0); //@line 10501 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_cullmode($cm) {
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $cm$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cm$addr = $cm;
 $0 = $cm$addr; //@line 10505 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 0; //@line 10506 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10507 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 2; //@line 10508 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10509,(17559|0)); //@line 10509 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10509 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10511 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10511 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_comparefunc($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $f$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $f$addr = $f;
 $0 = $f$addr; //@line 10597 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 0; //@line 10598 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10599 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 5; //@line 10600 "../sokol\sokol_gfx.h"
  break;
 }
 case 4:  {
  $retval = 2; //@line 10601 "../sokol\sokol_gfx.h"
  break;
 }
 case 5:  {
  $retval = 3; //@line 10602 "../sokol\sokol_gfx.h"
  break;
 }
 case 6:  {
  $retval = 6; //@line 10603 "../sokol\sokol_gfx.h"
  break;
 }
 case 7:  {
  $retval = 4; //@line 10604 "../sokol\sokol_gfx.h"
  break;
 }
 case 8:  {
  $retval = 7; //@line 10605 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10606,(17577|0)); //@line 10606 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10606 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10608 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10608 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_stencilop($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $op$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $op$addr = $op;
 $0 = $op$addr; //@line 10611 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 0; //@line 10612 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10613 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 2; //@line 10614 "../sokol\sokol_gfx.h"
  break;
 }
 case 4:  {
  $retval = 4; //@line 10615 "../sokol\sokol_gfx.h"
  break;
 }
 case 5:  {
  $retval = 5; //@line 10616 "../sokol\sokol_gfx.h"
  break;
 }
 case 6:  {
  $retval = 3; //@line 10617 "../sokol\sokol_gfx.h"
  break;
 }
 case 7:  {
  $retval = 6; //@line 10618 "../sokol\sokol_gfx.h"
  break;
 }
 case 8:  {
  $retval = 7; //@line 10619 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10620,(17598|0)); //@line 10620 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10620 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10622 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10622 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_blendop($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $op$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $op$addr = $op;
 $0 = $op$addr; //@line 10625 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 0; //@line 10626 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10627 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 2; //@line 10628 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10629,(17617|0)); //@line 10629 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10629 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10631 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10631 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_blendfactor($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $f$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $f$addr = $f;
 $0 = $f$addr; //@line 10634 "../sokol\sokol_gfx.h"
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 0; //@line 10635 "../sokol\sokol_gfx.h"
   break;
  }
  case 2:  {
   $retval = 1; //@line 10636 "../sokol\sokol_gfx.h"
   break;
  }
  case 3:  {
   $retval = 2; //@line 10637 "../sokol\sokol_gfx.h"
   break;
  }
  case 4:  {
   $retval = 3; //@line 10638 "../sokol\sokol_gfx.h"
   break;
  }
  case 5:  {
   $retval = 4; //@line 10639 "../sokol\sokol_gfx.h"
   break;
  }
  case 6:  {
   $retval = 5; //@line 10640 "../sokol\sokol_gfx.h"
   break;
  }
  case 7:  {
   $retval = 6; //@line 10641 "../sokol\sokol_gfx.h"
   break;
  }
  case 8:  {
   $retval = 7; //@line 10642 "../sokol\sokol_gfx.h"
   break;
  }
  case 9:  {
   $retval = 8; //@line 10643 "../sokol\sokol_gfx.h"
   break;
  }
  case 10:  {
   $retval = 9; //@line 10644 "../sokol\sokol_gfx.h"
   break;
  }
  case 11:  {
   $retval = 10; //@line 10645 "../sokol\sokol_gfx.h"
   break;
  }
  case 12:  {
   $retval = 11; //@line 10646 "../sokol\sokol_gfx.h"
   break;
  }
  case 13:  {
   $retval = 12; //@line 10647 "../sokol\sokol_gfx.h"
   break;
  }
  case 14:  {
   $retval = 11; //@line 10649 "../sokol\sokol_gfx.h"
   break;
  }
  case 15:  {
   $retval = 12; //@line 10650 "../sokol\sokol_gfx.h"
   break;
  }
  default: {
   ___assert_fail((9413|0),(6868|0),10652,(17634|0)); //@line 10652 "../sokol\sokol_gfx.h"
   // unreachable; //@line 10652 "../sokol\sokol_gfx.h"
  }
  }
 } while(0);
 $1 = $retval; //@line 10654 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10654 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_colorwritemask($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and10 = 0, $and17 = 0, $and3 = 0, $cmp = 0, $cmp11 = 0, $cmp18 = 0, $cmp4 = 0, $conv = 0, $conv16 = 0, $conv2 = 0;
 var $conv9 = 0, $m$addr = 0, $or = 0, $or14 = 0, $or21 = 0, $or7 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $m$addr = $m;
 $res = 0; //@line 10657 "../sokol\sokol_gfx.h"
 $0 = $m$addr; //@line 10658 "../sokol\sokol_gfx.h"
 $conv = $0&255; //@line 10658 "../sokol\sokol_gfx.h"
 $and = $conv & 1; //@line 10658 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($and|0); //@line 10658 "../sokol\sokol_gfx.h"
 if ($cmp) {
  $1 = $res; //@line 10659 "../sokol\sokol_gfx.h"
  $or = $1 | 1; //@line 10659 "../sokol\sokol_gfx.h"
  $res = $or; //@line 10659 "../sokol\sokol_gfx.h"
 }
 $2 = $m$addr; //@line 10661 "../sokol\sokol_gfx.h"
 $conv2 = $2&255; //@line 10661 "../sokol\sokol_gfx.h"
 $and3 = $conv2 & 2; //@line 10661 "../sokol\sokol_gfx.h"
 $cmp4 = (0)!=($and3|0); //@line 10661 "../sokol\sokol_gfx.h"
 if ($cmp4) {
  $3 = $res; //@line 10662 "../sokol\sokol_gfx.h"
  $or7 = $3 | 2; //@line 10662 "../sokol\sokol_gfx.h"
  $res = $or7; //@line 10662 "../sokol\sokol_gfx.h"
 }
 $4 = $m$addr; //@line 10664 "../sokol\sokol_gfx.h"
 $conv9 = $4&255; //@line 10664 "../sokol\sokol_gfx.h"
 $and10 = $conv9 & 4; //@line 10664 "../sokol\sokol_gfx.h"
 $cmp11 = (0)!=($and10|0); //@line 10664 "../sokol\sokol_gfx.h"
 if ($cmp11) {
  $5 = $res; //@line 10665 "../sokol\sokol_gfx.h"
  $or14 = $5 | 4; //@line 10665 "../sokol\sokol_gfx.h"
  $res = $or14; //@line 10665 "../sokol\sokol_gfx.h"
 }
 $6 = $m$addr; //@line 10667 "../sokol\sokol_gfx.h"
 $conv16 = $6&255; //@line 10667 "../sokol\sokol_gfx.h"
 $and17 = $conv16 & 8; //@line 10667 "../sokol\sokol_gfx.h"
 $cmp18 = (0)!=($and17|0); //@line 10667 "../sokol\sokol_gfx.h"
 if (!($cmp18)) {
  $8 = $res; //@line 10670 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($8|0); //@line 10670 "../sokol\sokol_gfx.h"
 }
 $7 = $res; //@line 10668 "../sokol\sokol_gfx.h"
 $or21 = $7 | 8; //@line 10668 "../sokol\sokol_gfx.h"
 $res = $or21; //@line 10668 "../sokol\sokol_gfx.h"
 $8 = $res; //@line 10670 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($8|0); //@line 10670 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_topology($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr; //@line 10490 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 1:  {
  $retval = 0; //@line 10491 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10492 "../sokol\sokol_gfx.h"
  break;
 }
 case 3:  {
  $retval = 2; //@line 10493 "../sokol\sokol_gfx.h"
  break;
 }
 case 4:  {
  $retval = 3; //@line 10494 "../sokol\sokol_gfx.h"
  break;
 }
 case 5:  {
  $retval = 4; //@line 10495 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10496,(17655|0)); //@line 10496 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10496 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10498 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10498 "../sokol\sokol_gfx.h"
}
function __sg_buffer_at($p,$buf_id) {
 $p = $p|0;
 $buf_id = $buf_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buf_id$addr = 0, $buffers = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $slot_index = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $buf_id$addr = $buf_id;
 $0 = $p$addr; //@line 12743 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12743 "../sokol\sokol_gfx.h"
 $1 = $buf_id$addr; //@line 12743 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12743 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12743 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((17673|0),(6868|0),12743,(17704|0)); //@line 12743 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12743 "../sokol\sokol_gfx.h"
 }
 $2 = $buf_id$addr; //@line 12744 "../sokol\sokol_gfx.h"
 $call = (__sg_slot_index($2)|0); //@line 12744 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 12744 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 12745 "../sokol\sokol_gfx.h"
 $cmp1 = ($3|0)>(0); //@line 12745 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((17718|0),(6868|0),12745,(17704|0)); //@line 12745 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12745 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index; //@line 12745 "../sokol\sokol_gfx.h"
 $5 = $p$addr; //@line 12745 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$5>>2]|0; //@line 12745 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12745 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $p$addr; //@line 12746 "../sokol\sokol_gfx.h"
  $buffers = ((($7)) + 96|0); //@line 12746 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$buffers>>2]|0; //@line 12746 "../sokol\sokol_gfx.h"
  $9 = $slot_index; //@line 12746 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*52)|0)|0); //@line 12746 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($arrayidx|0); //@line 12746 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((17718|0),(6868|0),12745,(17704|0)); //@line 12745 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12745 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_image_at($p,$img_id) {
 $p = $p|0;
 $img_id = $img_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $image_pool = 0, $images = 0, $img_id$addr = 0, $or$cond = 0, $p$addr = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $img_id$addr = $img_id;
 $0 = $p$addr; //@line 12750 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12750 "../sokol\sokol_gfx.h"
 $1 = $img_id$addr; //@line 12750 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12750 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12750 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((17775|0),(6868|0),12750,(17806|0)); //@line 12750 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12750 "../sokol\sokol_gfx.h"
 }
 $2 = $img_id$addr; //@line 12751 "../sokol\sokol_gfx.h"
 $call = (__sg_slot_index($2)|0); //@line 12751 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 12751 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 12752 "../sokol\sokol_gfx.h"
 $cmp1 = ($3|0)>(0); //@line 12752 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((17819|0),(6868|0),12752,(17806|0)); //@line 12752 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12752 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index; //@line 12752 "../sokol\sokol_gfx.h"
 $5 = $p$addr; //@line 12752 "../sokol\sokol_gfx.h"
 $image_pool = ((($5)) + 16|0); //@line 12752 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$image_pool>>2]|0; //@line 12752 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12752 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $p$addr; //@line 12753 "../sokol\sokol_gfx.h"
  $images = ((($7)) + 100|0); //@line 12753 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$images>>2]|0; //@line 12753 "../sokol\sokol_gfx.h"
  $9 = $slot_index; //@line 12753 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*104)|0)|0); //@line 12753 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($arrayidx|0); //@line 12753 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((17819|0),(6868|0),12752,(17806|0)); //@line 12752 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12752 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_shader_at($p,$shd_id) {
 $p = $p|0;
 $shd_id = $shd_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $shader_pool = 0, $shaders = 0, $shd_id$addr = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $shd_id$addr = $shd_id;
 $0 = $p$addr; //@line 12757 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12757 "../sokol\sokol_gfx.h"
 $1 = $shd_id$addr; //@line 12757 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12757 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12757 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((17893|0),(6868|0),12757,(17924|0)); //@line 12757 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12757 "../sokol\sokol_gfx.h"
 }
 $2 = $shd_id$addr; //@line 12758 "../sokol\sokol_gfx.h"
 $call = (__sg_slot_index($2)|0); //@line 12758 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 12758 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 12759 "../sokol\sokol_gfx.h"
 $cmp1 = ($3|0)>(0); //@line 12759 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((17938|0),(6868|0),12759,(17924|0)); //@line 12759 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12759 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index; //@line 12759 "../sokol\sokol_gfx.h"
 $5 = $p$addr; //@line 12759 "../sokol\sokol_gfx.h"
 $shader_pool = ((($5)) + 32|0); //@line 12759 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$shader_pool>>2]|0; //@line 12759 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12759 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $p$addr; //@line 12760 "../sokol\sokol_gfx.h"
  $shaders = ((($7)) + 104|0); //@line 12760 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$shaders>>2]|0; //@line 12760 "../sokol\sokol_gfx.h"
  $9 = $slot_index; //@line 12760 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*300)|0)|0); //@line 12760 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($arrayidx|0); //@line 12760 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((17938|0),(6868|0),12759,(17924|0)); //@line 12759 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12759 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_pipeline_at($p,$pip_id) {
 $p = $p|0;
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $pip_id$addr = 0, $pipeline_pool = 0, $pipelines = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pip_id$addr = $pip_id;
 $0 = $p$addr; //@line 12764 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12764 "../sokol\sokol_gfx.h"
 $1 = $pip_id$addr; //@line 12764 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12764 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12764 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((18015|0),(6868|0),12764,(18046|0)); //@line 12764 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12764 "../sokol\sokol_gfx.h"
 }
 $2 = $pip_id$addr; //@line 12765 "../sokol\sokol_gfx.h"
 $call = (__sg_slot_index($2)|0); //@line 12765 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 12765 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 12766 "../sokol\sokol_gfx.h"
 $cmp1 = ($3|0)>(0); //@line 12766 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((18062|0),(6868|0),12766,(18046|0)); //@line 12766 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12766 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index; //@line 12766 "../sokol\sokol_gfx.h"
 $5 = $p$addr; //@line 12766 "../sokol\sokol_gfx.h"
 $pipeline_pool = ((($5)) + 48|0); //@line 12766 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$pipeline_pool>>2]|0; //@line 12766 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12766 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $p$addr; //@line 12767 "../sokol\sokol_gfx.h"
  $pipelines = ((($7)) + 108|0); //@line 12767 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$pipelines>>2]|0; //@line 12767 "../sokol\sokol_gfx.h"
  $9 = $slot_index; //@line 12767 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*84)|0)|0); //@line 12767 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($arrayidx|0); //@line 12767 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18062|0),(6868|0),12766,(18046|0)); //@line 12766 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12766 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_pass_at($p,$pass_id) {
 $p = $p|0;
 $pass_id = $pass_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $pass_id$addr = 0, $pass_pool = 0, $passes = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pass_id$addr = $pass_id;
 $0 = $p$addr; //@line 12771 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 12771 "../sokol\sokol_gfx.h"
 $1 = $pass_id$addr; //@line 12771 "../sokol\sokol_gfx.h"
 $cmp = (0)!=($1|0); //@line 12771 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 12771 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((18137|0),(6868|0),12771,(18169|0)); //@line 12771 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12771 "../sokol\sokol_gfx.h"
 }
 $2 = $pass_id$addr; //@line 12772 "../sokol\sokol_gfx.h"
 $call = (__sg_slot_index($2)|0); //@line 12772 "../sokol\sokol_gfx.h"
 $slot_index = $call; //@line 12772 "../sokol\sokol_gfx.h"
 $3 = $slot_index; //@line 12773 "../sokol\sokol_gfx.h"
 $cmp1 = ($3|0)>(0); //@line 12773 "../sokol\sokol_gfx.h"
 if (!($cmp1)) {
  ___assert_fail((18181|0),(6868|0),12773,(18169|0)); //@line 12773 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12773 "../sokol\sokol_gfx.h"
 }
 $4 = $slot_index; //@line 12773 "../sokol\sokol_gfx.h"
 $5 = $p$addr; //@line 12773 "../sokol\sokol_gfx.h"
 $pass_pool = ((($5)) + 64|0); //@line 12773 "../sokol\sokol_gfx.h"
 $6 = HEAP32[$pass_pool>>2]|0; //@line 12773 "../sokol\sokol_gfx.h"
 $cmp3 = ($4|0)<($6|0); //@line 12773 "../sokol\sokol_gfx.h"
 if ($cmp3) {
  $7 = $p$addr; //@line 12774 "../sokol\sokol_gfx.h"
  $passes = ((($7)) + 112|0); //@line 12774 "../sokol\sokol_gfx.h"
  $8 = HEAP32[$passes>>2]|0; //@line 12774 "../sokol\sokol_gfx.h"
  $9 = $slot_index; //@line 12774 "../sokol\sokol_gfx.h"
  $arrayidx = (($8) + (($9*136)|0)|0); //@line 12774 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($arrayidx|0); //@line 12774 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18181|0),(6868|0),12773,(18169|0)); //@line 12773 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12773 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_wgpu_destroy_buffer($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buf$addr = 0, $cmp = 0, $tobool = 0, $wgpu = 0, $wgpu_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf$addr = $buf;
 $0 = $buf$addr; //@line 11302 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11302 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18236|0),(6868|0),11302,(18240|0)); //@line 11302 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11302 "../sokol\sokol_gfx.h"
 }
 $1 = $buf$addr; //@line 11303 "../sokol\sokol_gfx.h"
 $wgpu = ((($1)) + 48|0); //@line 11303 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$wgpu>>2]|0; //@line 11303 "../sokol\sokol_gfx.h"
 $wgpu_buf = $2; //@line 11303 "../sokol\sokol_gfx.h"
 $3 = $wgpu_buf; //@line 11304 "../sokol\sokol_gfx.h"
 $cmp = (0|0)!=($3|0); //@line 11304 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  STACKTOP = sp;return; //@line 11307 "../sokol\sokol_gfx.h"
 }
 $4 = $wgpu_buf; //@line 11305 "../sokol\sokol_gfx.h"
 _wgpuBufferRelease(($4|0)); //@line 11305 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11307 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_destroy_image($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $img$addr = 0, $msaa_tex = 0, $msaa_tex18 = 0;
 var $msaa_tex20 = 0, $sampler = 0, $tex_view = 0, $tex_view10 = 0, $tex_view12 = 0, $tobool = 0, $tobool1 = 0, $tobool15 = 0, $tobool7 = 0, $wgpu = 0, $wgpu11 = 0, $wgpu14 = 0, $wgpu17 = 0, $wgpu19 = 0, $wgpu2 = 0, $wgpu22 = 0, $wgpu4 = 0, $wgpu6 = 0, $wgpu9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $img$addr = $img;
 $0 = $img$addr; //@line 11416 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11416 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7443|0),(6868|0),11416,(18264|0)); //@line 11416 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11416 "../sokol\sokol_gfx.h"
 }
 $1 = $img$addr; //@line 11417 "../sokol\sokol_gfx.h"
 $wgpu = ((($1)) + 88|0); //@line 11417 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$wgpu>>2]|0; //@line 11417 "../sokol\sokol_gfx.h"
 $tobool1 = ($2|0)!=(0|0); //@line 11417 "../sokol\sokol_gfx.h"
 if ($tobool1) {
  $3 = $img$addr; //@line 11418 "../sokol\sokol_gfx.h"
  $wgpu2 = ((($3)) + 88|0); //@line 11418 "../sokol\sokol_gfx.h"
  $4 = HEAP32[$wgpu2>>2]|0; //@line 11418 "../sokol\sokol_gfx.h"
  _wgpuTextureRelease(($4|0)); //@line 11418 "../sokol\sokol_gfx.h"
  $5 = $img$addr; //@line 11419 "../sokol\sokol_gfx.h"
  $wgpu4 = ((($5)) + 88|0); //@line 11419 "../sokol\sokol_gfx.h"
  HEAP32[$wgpu4>>2] = 0; //@line 11419 "../sokol\sokol_gfx.h"
 }
 $6 = $img$addr; //@line 11421 "../sokol\sokol_gfx.h"
 $wgpu6 = ((($6)) + 88|0); //@line 11421 "../sokol\sokol_gfx.h"
 $tex_view = ((($wgpu6)) + 4|0); //@line 11421 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$tex_view>>2]|0; //@line 11421 "../sokol\sokol_gfx.h"
 $tobool7 = ($7|0)!=(0|0); //@line 11421 "../sokol\sokol_gfx.h"
 if ($tobool7) {
  $8 = $img$addr; //@line 11422 "../sokol\sokol_gfx.h"
  $wgpu9 = ((($8)) + 88|0); //@line 11422 "../sokol\sokol_gfx.h"
  $tex_view10 = ((($wgpu9)) + 4|0); //@line 11422 "../sokol\sokol_gfx.h"
  $9 = HEAP32[$tex_view10>>2]|0; //@line 11422 "../sokol\sokol_gfx.h"
  _wgpuTextureViewRelease(($9|0)); //@line 11422 "../sokol\sokol_gfx.h"
  $10 = $img$addr; //@line 11423 "../sokol\sokol_gfx.h"
  $wgpu11 = ((($10)) + 88|0); //@line 11423 "../sokol\sokol_gfx.h"
  $tex_view12 = ((($wgpu11)) + 4|0); //@line 11423 "../sokol\sokol_gfx.h"
  HEAP32[$tex_view12>>2] = 0; //@line 11423 "../sokol\sokol_gfx.h"
 }
 $11 = $img$addr; //@line 11425 "../sokol\sokol_gfx.h"
 $wgpu14 = ((($11)) + 88|0); //@line 11425 "../sokol\sokol_gfx.h"
 $msaa_tex = ((($wgpu14)) + 8|0); //@line 11425 "../sokol\sokol_gfx.h"
 $12 = HEAP32[$msaa_tex>>2]|0; //@line 11425 "../sokol\sokol_gfx.h"
 $tobool15 = ($12|0)!=(0|0); //@line 11425 "../sokol\sokol_gfx.h"
 if (!($tobool15)) {
  $16 = $img$addr; //@line 11430 "../sokol\sokol_gfx.h"
  $wgpu22 = ((($16)) + 88|0); //@line 11430 "../sokol\sokol_gfx.h"
  $sampler = ((($wgpu22)) + 12|0); //@line 11430 "../sokol\sokol_gfx.h"
  HEAP32[$sampler>>2] = 0; //@line 11430 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11431 "../sokol\sokol_gfx.h"
 }
 $13 = $img$addr; //@line 11426 "../sokol\sokol_gfx.h"
 $wgpu17 = ((($13)) + 88|0); //@line 11426 "../sokol\sokol_gfx.h"
 $msaa_tex18 = ((($wgpu17)) + 8|0); //@line 11426 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$msaa_tex18>>2]|0; //@line 11426 "../sokol\sokol_gfx.h"
 _wgpuTextureRelease(($14|0)); //@line 11426 "../sokol\sokol_gfx.h"
 $15 = $img$addr; //@line 11427 "../sokol\sokol_gfx.h"
 $wgpu19 = ((($15)) + 88|0); //@line 11427 "../sokol\sokol_gfx.h"
 $msaa_tex20 = ((($wgpu19)) + 8|0); //@line 11427 "../sokol\sokol_gfx.h"
 HEAP32[$msaa_tex20>>2] = 0; //@line 11427 "../sokol\sokol_gfx.h"
 $16 = $img$addr; //@line 11430 "../sokol\sokol_gfx.h"
 $wgpu22 = ((($16)) + 88|0); //@line 11430 "../sokol\sokol_gfx.h"
 $sampler = ((($wgpu22)) + 12|0); //@line 11430 "../sokol\sokol_gfx.h"
 HEAP32[$sampler>>2] = 0; //@line 11430 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11431 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_destroy_shader($shd) {
 $shd = $shd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $bind_group_layout = 0, $bind_group_layout6 = 0, $bind_group_layout7 = 0, $cmp = 0;
 var $inc = 0, $shd$addr = 0, $stage_index = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $wgpu = 0, $wgpu_stage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $shd$addr = $shd;
 $0 = $shd$addr; //@line 11517 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11517 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18287|0),(6868|0),11517,(18291|0)); //@line 11517 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11517 "../sokol\sokol_gfx.h"
 }
 $stage_index = 0; //@line 11518 "../sokol\sokol_gfx.h"
 while(1) {
  $1 = $stage_index; //@line 11518 "../sokol\sokol_gfx.h"
  $cmp = ($1|0)<(2); //@line 11518 "../sokol\sokol_gfx.h"
  if (!($cmp)) {
   break;
  }
  $2 = $shd$addr; //@line 11519 "../sokol\sokol_gfx.h"
  $wgpu = ((($2)) + 252|0); //@line 11519 "../sokol\sokol_gfx.h"
  $3 = $stage_index; //@line 11519 "../sokol\sokol_gfx.h"
  $arrayidx = (($wgpu) + (($3*24)|0)|0); //@line 11519 "../sokol\sokol_gfx.h"
  $wgpu_stage = $arrayidx; //@line 11519 "../sokol\sokol_gfx.h"
  $4 = $wgpu_stage; //@line 11520 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$4>>2]|0; //@line 11520 "../sokol\sokol_gfx.h"
  $tobool1 = ($5|0)!=(0|0); //@line 11520 "../sokol\sokol_gfx.h"
  if ($tobool1) {
   $6 = $wgpu_stage; //@line 11521 "../sokol\sokol_gfx.h"
   $7 = HEAP32[$6>>2]|0; //@line 11521 "../sokol\sokol_gfx.h"
   _wgpuShaderModuleRelease(($7|0)); //@line 11521 "../sokol\sokol_gfx.h"
   $8 = $wgpu_stage; //@line 11522 "../sokol\sokol_gfx.h"
   HEAP32[$8>>2] = 0; //@line 11522 "../sokol\sokol_gfx.h"
  }
  $9 = $wgpu_stage; //@line 11524 "../sokol\sokol_gfx.h"
  $bind_group_layout = ((($9)) + 4|0); //@line 11524 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$bind_group_layout>>2]|0; //@line 11524 "../sokol\sokol_gfx.h"
  $tobool4 = ($10|0)!=(0|0); //@line 11524 "../sokol\sokol_gfx.h"
  if ($tobool4) {
   $11 = $wgpu_stage; //@line 11525 "../sokol\sokol_gfx.h"
   $bind_group_layout6 = ((($11)) + 4|0); //@line 11525 "../sokol\sokol_gfx.h"
   $12 = HEAP32[$bind_group_layout6>>2]|0; //@line 11525 "../sokol\sokol_gfx.h"
   _wgpuBindGroupLayoutRelease(($12|0)); //@line 11525 "../sokol\sokol_gfx.h"
   $13 = $wgpu_stage; //@line 11526 "../sokol\sokol_gfx.h"
   $bind_group_layout7 = ((($13)) + 4|0); //@line 11526 "../sokol\sokol_gfx.h"
   HEAP32[$bind_group_layout7>>2] = 0; //@line 11526 "../sokol\sokol_gfx.h"
  }
  $14 = $stage_index; //@line 11518 "../sokol\sokol_gfx.h"
  $inc = (($14) + 1)|0; //@line 11518 "../sokol\sokol_gfx.h"
  $stage_index = $inc; //@line 11518 "../sokol\sokol_gfx.h"
 }
 STACKTOP = sp;return; //@line 11529 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_destroy_pipeline($pip) {
 $pip = $pip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $pip$addr = 0, $tobool = 0, $tobool2 = 0, $wgpu = 0, $wgpu3 = 0, $wgpu5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $0 = $pip$addr; //@line 11657 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11657 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7465|0),(6868|0),11657,(18315|0)); //@line 11657 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11657 "../sokol\sokol_gfx.h"
 }
 $1 = $pip$addr; //@line 11658 "../sokol\sokol_gfx.h"
 $wgpu = ((($1)) + 76|0); //@line 11658 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$wgpu>>2]|0; //@line 11658 "../sokol\sokol_gfx.h"
 $tobool2 = ($2|0)!=(0|0); //@line 11658 "../sokol\sokol_gfx.h"
 if (!($tobool2)) {
  STACKTOP = sp;return; //@line 11662 "../sokol\sokol_gfx.h"
 }
 $3 = $pip$addr; //@line 11659 "../sokol\sokol_gfx.h"
 $wgpu3 = ((($3)) + 76|0); //@line 11659 "../sokol\sokol_gfx.h"
 $4 = HEAP32[$wgpu3>>2]|0; //@line 11659 "../sokol\sokol_gfx.h"
 _wgpuRenderPipelineRelease(($4|0)); //@line 11659 "../sokol\sokol_gfx.h"
 $5 = $pip$addr; //@line 11660 "../sokol\sokol_gfx.h"
 $wgpu5 = ((($5)) + 76|0); //@line 11660 "../sokol\sokol_gfx.h"
 HEAP32[$wgpu5>>2] = 0; //@line 11660 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11662 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_destroy_pass($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx21 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $cmn = 0, $cmp = 0, $ds_att = 0, $ds_att29 = 0, $ds_att32 = 0, $i = 0, $inc = 0, $pass$addr = 0, $render_tex_view = 0;
 var $render_tex_view25 = 0, $render_tex_view30 = 0, $render_tex_view33 = 0, $render_tex_view5 = 0, $render_tex_view9 = 0, $resolve_tex_view = 0, $resolve_tex_view18 = 0, $resolve_tex_view22 = 0, $tobool = 0, $tobool1 = 0, $tobool13 = 0, $tobool26 = 0, $wgpu = 0, $wgpu10 = 0, $wgpu15 = 0, $wgpu19 = 0, $wgpu2 = 0, $wgpu28 = 0, $wgpu31 = 0, $wgpu6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $0 = $pass$addr; //@line 11724 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11724 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18341|0),(6868|0),11724,(18346|0)); //@line 11724 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11724 "../sokol\sokol_gfx.h"
 }
 $i = 0; //@line 11725 "../sokol\sokol_gfx.h"
 while(1) {
  $1 = $i; //@line 11725 "../sokol\sokol_gfx.h"
  $2 = $pass$addr; //@line 11725 "../sokol\sokol_gfx.h"
  $cmn = ((($2)) + 12|0); //@line 11725 "../sokol\sokol_gfx.h"
  $3 = HEAP32[$cmn>>2]|0; //@line 11725 "../sokol\sokol_gfx.h"
  $cmp = ($1|0)<($3|0); //@line 11725 "../sokol\sokol_gfx.h"
  $4 = $pass$addr;
  $wgpu = ((($4)) + 76|0);
  if (!($cmp)) {
   break;
  }
  $5 = $i; //@line 11726 "../sokol\sokol_gfx.h"
  $arrayidx = (($wgpu) + (($5*12)|0)|0); //@line 11726 "../sokol\sokol_gfx.h"
  $render_tex_view = ((($arrayidx)) + 4|0); //@line 11726 "../sokol\sokol_gfx.h"
  $6 = HEAP32[$render_tex_view>>2]|0; //@line 11726 "../sokol\sokol_gfx.h"
  $tobool1 = ($6|0)!=(0|0); //@line 11726 "../sokol\sokol_gfx.h"
  if ($tobool1) {
   $7 = $pass$addr; //@line 11727 "../sokol\sokol_gfx.h"
   $wgpu2 = ((($7)) + 76|0); //@line 11727 "../sokol\sokol_gfx.h"
   $8 = $i; //@line 11727 "../sokol\sokol_gfx.h"
   $arrayidx4 = (($wgpu2) + (($8*12)|0)|0); //@line 11727 "../sokol\sokol_gfx.h"
   $render_tex_view5 = ((($arrayidx4)) + 4|0); //@line 11727 "../sokol\sokol_gfx.h"
   $9 = HEAP32[$render_tex_view5>>2]|0; //@line 11727 "../sokol\sokol_gfx.h"
   _wgpuTextureViewRelease(($9|0)); //@line 11727 "../sokol\sokol_gfx.h"
   $10 = $pass$addr; //@line 11728 "../sokol\sokol_gfx.h"
   $wgpu6 = ((($10)) + 76|0); //@line 11728 "../sokol\sokol_gfx.h"
   $11 = $i; //@line 11728 "../sokol\sokol_gfx.h"
   $arrayidx8 = (($wgpu6) + (($11*12)|0)|0); //@line 11728 "../sokol\sokol_gfx.h"
   $render_tex_view9 = ((($arrayidx8)) + 4|0); //@line 11728 "../sokol\sokol_gfx.h"
   HEAP32[$render_tex_view9>>2] = 0; //@line 11728 "../sokol\sokol_gfx.h"
  }
  $12 = $pass$addr; //@line 11730 "../sokol\sokol_gfx.h"
  $wgpu10 = ((($12)) + 76|0); //@line 11730 "../sokol\sokol_gfx.h"
  $13 = $i; //@line 11730 "../sokol\sokol_gfx.h"
  $arrayidx12 = (($wgpu10) + (($13*12)|0)|0); //@line 11730 "../sokol\sokol_gfx.h"
  $resolve_tex_view = ((($arrayidx12)) + 8|0); //@line 11730 "../sokol\sokol_gfx.h"
  $14 = HEAP32[$resolve_tex_view>>2]|0; //@line 11730 "../sokol\sokol_gfx.h"
  $tobool13 = ($14|0)!=(0|0); //@line 11730 "../sokol\sokol_gfx.h"
  if ($tobool13) {
   $15 = $pass$addr; //@line 11731 "../sokol\sokol_gfx.h"
   $wgpu15 = ((($15)) + 76|0); //@line 11731 "../sokol\sokol_gfx.h"
   $16 = $i; //@line 11731 "../sokol\sokol_gfx.h"
   $arrayidx17 = (($wgpu15) + (($16*12)|0)|0); //@line 11731 "../sokol\sokol_gfx.h"
   $resolve_tex_view18 = ((($arrayidx17)) + 8|0); //@line 11731 "../sokol\sokol_gfx.h"
   $17 = HEAP32[$resolve_tex_view18>>2]|0; //@line 11731 "../sokol\sokol_gfx.h"
   _wgpuTextureViewRelease(($17|0)); //@line 11731 "../sokol\sokol_gfx.h"
   $18 = $pass$addr; //@line 11732 "../sokol\sokol_gfx.h"
   $wgpu19 = ((($18)) + 76|0); //@line 11732 "../sokol\sokol_gfx.h"
   $19 = $i; //@line 11732 "../sokol\sokol_gfx.h"
   $arrayidx21 = (($wgpu19) + (($19*12)|0)|0); //@line 11732 "../sokol\sokol_gfx.h"
   $resolve_tex_view22 = ((($arrayidx21)) + 8|0); //@line 11732 "../sokol\sokol_gfx.h"
   HEAP32[$resolve_tex_view22>>2] = 0; //@line 11732 "../sokol\sokol_gfx.h"
  }
  $20 = $i; //@line 11725 "../sokol\sokol_gfx.h"
  $inc = (($20) + 1)|0; //@line 11725 "../sokol\sokol_gfx.h"
  $i = $inc; //@line 11725 "../sokol\sokol_gfx.h"
 }
 $ds_att = ((($wgpu)) + 48|0); //@line 11735 "../sokol\sokol_gfx.h"
 $render_tex_view25 = ((($ds_att)) + 4|0); //@line 11735 "../sokol\sokol_gfx.h"
 $21 = HEAP32[$render_tex_view25>>2]|0; //@line 11735 "../sokol\sokol_gfx.h"
 $tobool26 = ($21|0)!=(0|0); //@line 11735 "../sokol\sokol_gfx.h"
 if (!($tobool26)) {
  STACKTOP = sp;return; //@line 11739 "../sokol\sokol_gfx.h"
 }
 $22 = $pass$addr; //@line 11736 "../sokol\sokol_gfx.h"
 $wgpu28 = ((($22)) + 76|0); //@line 11736 "../sokol\sokol_gfx.h"
 $ds_att29 = ((($wgpu28)) + 48|0); //@line 11736 "../sokol\sokol_gfx.h"
 $render_tex_view30 = ((($ds_att29)) + 4|0); //@line 11736 "../sokol\sokol_gfx.h"
 $23 = HEAP32[$render_tex_view30>>2]|0; //@line 11736 "../sokol\sokol_gfx.h"
 _wgpuTextureViewRelease(($23|0)); //@line 11736 "../sokol\sokol_gfx.h"
 $24 = $pass$addr; //@line 11737 "../sokol\sokol_gfx.h"
 $wgpu31 = ((($24)) + 76|0); //@line 11737 "../sokol\sokol_gfx.h"
 $ds_att32 = ((($wgpu31)) + 48|0); //@line 11737 "../sokol\sokol_gfx.h"
 $render_tex_view33 = ((($ds_att32)) + 4|0); //@line 11737 "../sokol\sokol_gfx.h"
 HEAP32[$render_tex_view33>>2] = 0; //@line 11737 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 11739 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_begin_pass($pass,$action,$w,$h) {
 $pass = $pass|0;
 $action = $action|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a136 = 0, $action$addr = 0, $arrayidx = 0, $arrayidx122 = 0, $arrayidx128 = 0, $arrayidx134 = 0, $arrayidx39 = 0, $arrayidx41 = 0, $arrayidx42 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx48 = 0, $arrayidx50 = 0, $arrayidx51 = 0, $arrayidx54 = 0;
 var $arrayidx56 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx62 = 0, $arrayidx63 = 0, $arrayidx65 = 0, $arrayidx69 = 0, $b = 0, $b130 = 0, $call = 0, $call103 = 0, $call105 = 0, $call111 = 0, $call150 = 0, $call157 = 0, $call164 = 0, $call78 = 0, $call82 = 0, $call89 = 0, $call92 = 0;
 var $call93 = 0, $call96 = 0, $call98 = 0, $clearColor = 0, $clearColor117 = 0, $clearColor123 = 0, $clearColor129 = 0, $clearColor135 = 0, $clearColor52 = 0, $clearColor58 = 0, $clearColor64 = 0, $clearDepth = 0, $clearDepth154 = 0, $clearStencil = 0, $clearStencil162 = 0, $cmn = 0, $cmn66 = 0, $cmn70 = 0, $cmp = 0, $cmp143 = 0;
 var $cmp38 = 0, $cmp67 = 0, $colorAttachmentCount = 0, $colorAttachmentCount139 = 0, $colorAttachments = 0, $colorAttachments140 = 0, $color_att_desc = 0, $colors = 0, $colors108 = 0, $colors113 = 0, $colors119 = 0, $colors125 = 0, $colors131 = 0, $colors43 = 0, $colors47 = 0, $colors53 = 0, $colors59 = 0, $cond = 0, $cond100 = 0, $cond107 = 0;
 var $conv = 0, $conv161 = 0, $depth = 0, $depth148 = 0, $depth152 = 0, $depth79 = 0, $depthLoadOp = 0, $depthLoadOp151 = 0, $depthStencilAttachment = 0, $depthStencilAttachment163 = 0, $ds_att = 0, $ds_att86 = 0, $ds_att_desc = 0, $g = 0, $g124 = 0, $h$addr = 0, $i = 0, $inc = 0, $loadOp = 0, $loadOp112 = 0;
 var $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $pass$addr = 0, $pass_desc = 0, $render_tex_view = 0, $render_tex_view87 = 0, $resolveTarget = 0, $resolveTarget138 = 0, $resolve_tex_view = 0, $sample_count = 0, $state = 0, $stencil = 0, $stencil155 = 0, $stencil159 = 0, $stencil83 = 0, $stencilLoadOp = 0, $stencilLoadOp158 = 0, $storeOp = 0, $tobool = 0;
 var $tobool1 = 0, $tobool101 = 0, $tobool13 = 0, $tobool14 = 0, $tobool166 = 0, $tobool18 = 0, $tobool20 = 0, $tobool24 = 0, $tobool26 = 0, $tobool30 = 0, $tobool34 = 0, $tobool5 = 0, $tobool75 = 0, $tobool9 = 0, $tobool91 = 0, $tobool94 = 0, $val = 0, $val115 = 0, $val121 = 0, $val127 = 0;
 var $val133 = 0, $val153 = 0, $val160 = 0, $val49 = 0, $val55 = 0, $val61 = 0, $val80 = 0, $val84 = 0, $w$addr = 0, $wgpu = 0, $wgpu73 = 0, $wgpu85 = 0, $wgpu_att = 0, $wgpu_color_att_desc = 0, $wgpu_depth_stencil_view = 0, $wgpu_ds_att_desc = 0, $wgpu_pass_desc = 0, $wgpu_render_view = 0, $wgpu_resolve_view = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $wgpu_pass_desc = sp + 260|0;
 $wgpu_color_att_desc = sp;
 $wgpu_ds_att_desc = sp + 224|0;
 $pass_desc = sp + 192|0;
 $color_att_desc = sp + 160|0;
 $ds_att_desc = sp + 128|0;
 $pass$addr = $pass;
 $action$addr = $action;
 $w$addr = $w;
 $h$addr = $h;
 $0 = $action$addr; //@line 11754 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11754 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18411|0),(6868|0),11754,(18418|0)); //@line 11754 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11754 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP8[(30893)>>0]|0; //@line 11755 "../sokol\sokol_gfx.h"
 $tobool1 = $1&1; //@line 11755 "../sokol\sokol_gfx.h"
 if ($tobool1) {
  ___assert_fail((18438|0),(6868|0),11755,(18418|0)); //@line 11755 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11755 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[(30940)>>2]|0; //@line 11756 "../sokol\sokol_gfx.h"
 $tobool5 = ($2|0)!=(0|0); //@line 11756 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((8964|0),(6868|0),11756,(18418|0)); //@line 11756 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11756 "../sokol\sokol_gfx.h"
 }
 $3 = HEAP32[(30904)>>2]|0; //@line 11757 "../sokol\sokol_gfx.h"
 $tobool9 = ($3|0)!=(0|0); //@line 11757 "../sokol\sokol_gfx.h"
 if (!($tobool9)) {
  ___assert_fail((16414|0),(6868|0),11757,(18418|0)); //@line 11757 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11757 "../sokol\sokol_gfx.h"
 }
 $4 = HEAP32[(30908)>>2]|0; //@line 11758 "../sokol\sokol_gfx.h"
 $tobool13 = ($4|0)!=(0|0); //@line 11758 "../sokol\sokol_gfx.h"
 $5 = HEAP32[(30912)>>2]|0; //@line 11758 "../sokol\sokol_gfx.h"
 $tobool14 = ($5|0)!=(0|0); //@line 11758 "../sokol\sokol_gfx.h"
 $or$cond = $tobool13 | $tobool14; //@line 11758 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((18456|0),(6868|0),11758,(18418|0)); //@line 11758 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11758 "../sokol\sokol_gfx.h"
 }
 $6 = HEAP32[(30916)>>2]|0; //@line 11759 "../sokol\sokol_gfx.h"
 $tobool18 = ($6|0)!=(0|0); //@line 11759 "../sokol\sokol_gfx.h"
 $7 = HEAP32[(30920)>>2]|0; //@line 11759 "../sokol\sokol_gfx.h"
 $tobool20 = ($7|0)!=(0|0); //@line 11759 "../sokol\sokol_gfx.h"
 $or$cond1 = $tobool18 | $tobool20; //@line 11759 "../sokol\sokol_gfx.h"
 if (!($or$cond1)) {
  ___assert_fail((18516|0),(6868|0),11759,(18418|0)); //@line 11759 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11759 "../sokol\sokol_gfx.h"
 }
 $8 = HEAP32[(30924)>>2]|0; //@line 11760 "../sokol\sokol_gfx.h"
 $tobool24 = ($8|0)!=(0|0); //@line 11760 "../sokol\sokol_gfx.h"
 $9 = HEAP32[(30928)>>2]|0; //@line 11760 "../sokol\sokol_gfx.h"
 $tobool26 = ($9|0)!=(0|0); //@line 11760 "../sokol\sokol_gfx.h"
 $or$cond2 = $tobool24 | $tobool26; //@line 11760 "../sokol\sokol_gfx.h"
 if (!($or$cond2)) {
  ___assert_fail((18578|0),(6868|0),11760,(18418|0)); //@line 11760 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11760 "../sokol\sokol_gfx.h"
 }
 HEAP8[(30893)>>0] = 1; //@line 11761 "../sokol\sokol_gfx.h"
 $10 = $w$addr; //@line 11762 "../sokol\sokol_gfx.h"
 HEAP32[(30896)>>2] = $10; //@line 11762 "../sokol\sokol_gfx.h"
 $11 = $h$addr; //@line 11763 "../sokol\sokol_gfx.h"
 HEAP32[(30900)>>2] = $11; //@line 11763 "../sokol\sokol_gfx.h"
 HEAP32[(30956)>>2] = 0; //@line 11764 "../sokol\sokol_gfx.h"
 HEAP32[(30960)>>2] = 0; //@line 11765 "../sokol\sokol_gfx.h"
 $12 = HEAP32[(30940)>>2]|0; //@line 11767 "../sokol\sokol_gfx.h"
 $tobool30 = ($12|0)!=(0|0); //@line 11767 "../sokol\sokol_gfx.h"
 if (!($tobool30)) {
  ___assert_fail((8964|0),(6868|0),11767,(18418|0)); //@line 11767 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11767 "../sokol\sokol_gfx.h"
 }
 $13 = $pass$addr; //@line 11768 "../sokol\sokol_gfx.h"
 $tobool34 = ($13|0)!=(0|0); //@line 11768 "../sokol\sokol_gfx.h"
 do {
  if ($tobool34) {
   ;HEAP32[$wgpu_pass_desc>>2]=0|0;HEAP32[$wgpu_pass_desc+4>>2]=0|0;HEAP32[$wgpu_pass_desc+8>>2]=0|0;HEAP32[$wgpu_pass_desc+12>>2]=0|0;HEAP32[$wgpu_pass_desc+16>>2]=0|0; //@line 11770 "../sokol\sokol_gfx.h"
   dest=$wgpu_color_att_desc; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 11772 "../sokol\sokol_gfx.h"
   $14 = $pass$addr; //@line 11773 "../sokol\sokol_gfx.h"
   $state = ((($14)) + 8|0); //@line 11773 "../sokol\sokol_gfx.h"
   $15 = HEAP32[$state>>2]|0; //@line 11773 "../sokol\sokol_gfx.h"
   $cmp = ($15|0)==(2); //@line 11773 "../sokol\sokol_gfx.h"
   if (!($cmp)) {
    ___assert_fail((18652|0),(6868|0),11773,(18418|0)); //@line 11773 "../sokol\sokol_gfx.h"
    // unreachable; //@line 11773 "../sokol\sokol_gfx.h"
   }
   $i = 0; //@line 11774 "../sokol\sokol_gfx.h"
   while(1) {
    $16 = $i; //@line 11774 "../sokol\sokol_gfx.h"
    $17 = $pass$addr; //@line 11774 "../sokol\sokol_gfx.h"
    $cmn = ((($17)) + 12|0); //@line 11774 "../sokol\sokol_gfx.h"
    $18 = HEAP32[$cmn>>2]|0; //@line 11774 "../sokol\sokol_gfx.h"
    $cmp38 = ($16|0)<($18|0); //@line 11774 "../sokol\sokol_gfx.h"
    $19 = $pass$addr;
    if (!($cmp38)) {
     break;
    }
    $wgpu = ((($19)) + 76|0); //@line 11775 "../sokol\sokol_gfx.h"
    $20 = $i; //@line 11775 "../sokol\sokol_gfx.h"
    $arrayidx = (($wgpu) + (($20*12)|0)|0); //@line 11775 "../sokol\sokol_gfx.h"
    $wgpu_att = $arrayidx; //@line 11775 "../sokol\sokol_gfx.h"
    $21 = $action$addr; //@line 11776 "../sokol\sokol_gfx.h"
    $colors = ((($21)) + 4|0); //@line 11776 "../sokol\sokol_gfx.h"
    $22 = $i; //@line 11776 "../sokol\sokol_gfx.h"
    $arrayidx39 = (($colors) + (($22*20)|0)|0); //@line 11776 "../sokol\sokol_gfx.h"
    $23 = HEAP32[$arrayidx39>>2]|0; //@line 11776 "../sokol\sokol_gfx.h"
    $call = (__sg_wgpu_load_op($23)|0); //@line 11776 "../sokol\sokol_gfx.h"
    $24 = $i; //@line 11776 "../sokol\sokol_gfx.h"
    $arrayidx41 = (($wgpu_color_att_desc) + ($24<<5)|0); //@line 11776 "../sokol\sokol_gfx.h"
    $loadOp = ((($arrayidx41)) + 8|0); //@line 11776 "../sokol\sokol_gfx.h"
    HEAP32[$loadOp>>2] = $call; //@line 11776 "../sokol\sokol_gfx.h"
    $25 = $i; //@line 11777 "../sokol\sokol_gfx.h"
    $arrayidx42 = (($wgpu_color_att_desc) + ($25<<5)|0); //@line 11777 "../sokol\sokol_gfx.h"
    $storeOp = ((($arrayidx42)) + 12|0); //@line 11777 "../sokol\sokol_gfx.h"
    HEAP32[$storeOp>>2] = 0; //@line 11777 "../sokol\sokol_gfx.h"
    $26 = $action$addr; //@line 11778 "../sokol\sokol_gfx.h"
    $colors43 = ((($26)) + 4|0); //@line 11778 "../sokol\sokol_gfx.h"
    $27 = $i; //@line 11778 "../sokol\sokol_gfx.h"
    $arrayidx44 = (($colors43) + (($27*20)|0)|0); //@line 11778 "../sokol\sokol_gfx.h"
    $val = ((($arrayidx44)) + 4|0); //@line 11778 "../sokol\sokol_gfx.h"
    $28 = +HEAPF32[$val>>2]; //@line 11778 "../sokol\sokol_gfx.h"
    $29 = $i; //@line 11778 "../sokol\sokol_gfx.h"
    $arrayidx46 = (($wgpu_color_att_desc) + ($29<<5)|0); //@line 11778 "../sokol\sokol_gfx.h"
    $clearColor = ((($arrayidx46)) + 16|0); //@line 11778 "../sokol\sokol_gfx.h"
    HEAPF32[$clearColor>>2] = $28; //@line 11778 "../sokol\sokol_gfx.h"
    $30 = $action$addr; //@line 11779 "../sokol\sokol_gfx.h"
    $colors47 = ((($30)) + 4|0); //@line 11779 "../sokol\sokol_gfx.h"
    $31 = $i; //@line 11779 "../sokol\sokol_gfx.h"
    $arrayidx48 = (($colors47) + (($31*20)|0)|0); //@line 11779 "../sokol\sokol_gfx.h"
    $val49 = ((($arrayidx48)) + 4|0); //@line 11779 "../sokol\sokol_gfx.h"
    $arrayidx50 = ((($val49)) + 4|0); //@line 11779 "../sokol\sokol_gfx.h"
    $32 = +HEAPF32[$arrayidx50>>2]; //@line 11779 "../sokol\sokol_gfx.h"
    $33 = $i; //@line 11779 "../sokol\sokol_gfx.h"
    $arrayidx51 = (($wgpu_color_att_desc) + ($33<<5)|0); //@line 11779 "../sokol\sokol_gfx.h"
    $clearColor52 = ((($arrayidx51)) + 16|0); //@line 11779 "../sokol\sokol_gfx.h"
    $g = ((($clearColor52)) + 4|0); //@line 11779 "../sokol\sokol_gfx.h"
    HEAPF32[$g>>2] = $32; //@line 11779 "../sokol\sokol_gfx.h"
    $34 = $action$addr; //@line 11780 "../sokol\sokol_gfx.h"
    $colors53 = ((($34)) + 4|0); //@line 11780 "../sokol\sokol_gfx.h"
    $35 = $i; //@line 11780 "../sokol\sokol_gfx.h"
    $arrayidx54 = (($colors53) + (($35*20)|0)|0); //@line 11780 "../sokol\sokol_gfx.h"
    $val55 = ((($arrayidx54)) + 4|0); //@line 11780 "../sokol\sokol_gfx.h"
    $arrayidx56 = ((($val55)) + 8|0); //@line 11780 "../sokol\sokol_gfx.h"
    $36 = +HEAPF32[$arrayidx56>>2]; //@line 11780 "../sokol\sokol_gfx.h"
    $37 = $i; //@line 11780 "../sokol\sokol_gfx.h"
    $arrayidx57 = (($wgpu_color_att_desc) + ($37<<5)|0); //@line 11780 "../sokol\sokol_gfx.h"
    $clearColor58 = ((($arrayidx57)) + 16|0); //@line 11780 "../sokol\sokol_gfx.h"
    $b = ((($clearColor58)) + 8|0); //@line 11780 "../sokol\sokol_gfx.h"
    HEAPF32[$b>>2] = $36; //@line 11780 "../sokol\sokol_gfx.h"
    $38 = $action$addr; //@line 11781 "../sokol\sokol_gfx.h"
    $colors59 = ((($38)) + 4|0); //@line 11781 "../sokol\sokol_gfx.h"
    $39 = $i; //@line 11781 "../sokol\sokol_gfx.h"
    $arrayidx60 = (($colors59) + (($39*20)|0)|0); //@line 11781 "../sokol\sokol_gfx.h"
    $val61 = ((($arrayidx60)) + 4|0); //@line 11781 "../sokol\sokol_gfx.h"
    $arrayidx62 = ((($val61)) + 12|0); //@line 11781 "../sokol\sokol_gfx.h"
    $40 = +HEAPF32[$arrayidx62>>2]; //@line 11781 "../sokol\sokol_gfx.h"
    $41 = $i; //@line 11781 "../sokol\sokol_gfx.h"
    $arrayidx63 = (($wgpu_color_att_desc) + ($41<<5)|0); //@line 11781 "../sokol\sokol_gfx.h"
    $clearColor64 = ((($arrayidx63)) + 16|0); //@line 11781 "../sokol\sokol_gfx.h"
    $a = ((($clearColor64)) + 12|0); //@line 11781 "../sokol\sokol_gfx.h"
    HEAPF32[$a>>2] = $40; //@line 11781 "../sokol\sokol_gfx.h"
    $42 = $wgpu_att; //@line 11782 "../sokol\sokol_gfx.h"
    $render_tex_view = ((($42)) + 4|0); //@line 11782 "../sokol\sokol_gfx.h"
    $43 = HEAP32[$render_tex_view>>2]|0; //@line 11782 "../sokol\sokol_gfx.h"
    $44 = $i; //@line 11782 "../sokol\sokol_gfx.h"
    $arrayidx65 = (($wgpu_color_att_desc) + ($44<<5)|0); //@line 11782 "../sokol\sokol_gfx.h"
    HEAP32[$arrayidx65>>2] = $43; //@line 11782 "../sokol\sokol_gfx.h"
    $45 = $wgpu_att; //@line 11783 "../sokol\sokol_gfx.h"
    $46 = HEAP32[$45>>2]|0; //@line 11783 "../sokol\sokol_gfx.h"
    $cmn66 = ((($46)) + 12|0); //@line 11783 "../sokol\sokol_gfx.h"
    $sample_count = ((($cmn66)) + 32|0); //@line 11783 "../sokol\sokol_gfx.h"
    $47 = HEAP32[$sample_count>>2]|0; //@line 11783 "../sokol\sokol_gfx.h"
    $cmp67 = ($47|0)>(1); //@line 11783 "../sokol\sokol_gfx.h"
    if ($cmp67) {
     $48 = $wgpu_att; //@line 11784 "../sokol\sokol_gfx.h"
     $resolve_tex_view = ((($48)) + 8|0); //@line 11784 "../sokol\sokol_gfx.h"
     $49 = HEAP32[$resolve_tex_view>>2]|0; //@line 11784 "../sokol\sokol_gfx.h"
     $50 = $i; //@line 11784 "../sokol\sokol_gfx.h"
     $arrayidx69 = (($wgpu_color_att_desc) + ($50<<5)|0); //@line 11784 "../sokol\sokol_gfx.h"
     $resolveTarget = ((($arrayidx69)) + 4|0); //@line 11784 "../sokol\sokol_gfx.h"
     HEAP32[$resolveTarget>>2] = $49; //@line 11784 "../sokol\sokol_gfx.h"
    }
    $51 = $i; //@line 11774 "../sokol\sokol_gfx.h"
    $inc = (($51) + 1)|0; //@line 11774 "../sokol\sokol_gfx.h"
    $i = $inc; //@line 11774 "../sokol\sokol_gfx.h"
   }
   $cmn70 = ((($19)) + 12|0); //@line 11787 "../sokol\sokol_gfx.h"
   $52 = HEAP32[$cmn70>>2]|0; //@line 11787 "../sokol\sokol_gfx.h"
   $colorAttachmentCount = ((($wgpu_pass_desc)) + 8|0); //@line 11787 "../sokol\sokol_gfx.h"
   HEAP32[$colorAttachmentCount>>2] = $52; //@line 11787 "../sokol\sokol_gfx.h"
   $colorAttachments = ((($wgpu_pass_desc)) + 12|0); //@line 11788 "../sokol\sokol_gfx.h"
   HEAP32[$colorAttachments>>2] = $wgpu_color_att_desc; //@line 11788 "../sokol\sokol_gfx.h"
   $53 = $pass$addr; //@line 11789 "../sokol\sokol_gfx.h"
   $wgpu73 = ((($53)) + 76|0); //@line 11789 "../sokol\sokol_gfx.h"
   $ds_att = ((($wgpu73)) + 48|0); //@line 11789 "../sokol\sokol_gfx.h"
   $54 = HEAP32[$ds_att>>2]|0; //@line 11789 "../sokol\sokol_gfx.h"
   $tobool75 = ($54|0)!=(0|0); //@line 11789 "../sokol\sokol_gfx.h"
   if ($tobool75) {
    ;HEAP32[$wgpu_ds_att_desc>>2]=0|0;HEAP32[$wgpu_ds_att_desc+4>>2]=0|0;HEAP32[$wgpu_ds_att_desc+8>>2]=0|0;HEAP32[$wgpu_ds_att_desc+12>>2]=0|0;HEAP32[$wgpu_ds_att_desc+16>>2]=0|0;HEAP32[$wgpu_ds_att_desc+20>>2]=0|0;HEAP32[$wgpu_ds_att_desc+24>>2]=0|0; //@line 11791 "../sokol\sokol_gfx.h"
    $55 = $action$addr; //@line 11792 "../sokol\sokol_gfx.h"
    $depth = ((($55)) + 84|0); //@line 11792 "../sokol\sokol_gfx.h"
    $56 = HEAP32[$depth>>2]|0; //@line 11792 "../sokol\sokol_gfx.h"
    $call78 = (__sg_wgpu_load_op($56)|0); //@line 11792 "../sokol\sokol_gfx.h"
    $depthLoadOp = ((($wgpu_ds_att_desc)) + 4|0); //@line 11792 "../sokol\sokol_gfx.h"
    HEAP32[$depthLoadOp>>2] = $call78; //@line 11792 "../sokol\sokol_gfx.h"
    $57 = $action$addr; //@line 11793 "../sokol\sokol_gfx.h"
    $depth79 = ((($57)) + 84|0); //@line 11793 "../sokol\sokol_gfx.h"
    $val80 = ((($depth79)) + 4|0); //@line 11793 "../sokol\sokol_gfx.h"
    $58 = +HEAPF32[$val80>>2]; //@line 11793 "../sokol\sokol_gfx.h"
    $clearDepth = ((($wgpu_ds_att_desc)) + 12|0); //@line 11793 "../sokol\sokol_gfx.h"
    HEAPF32[$clearDepth>>2] = $58; //@line 11793 "../sokol\sokol_gfx.h"
    $59 = $action$addr; //@line 11794 "../sokol\sokol_gfx.h"
    $stencil = ((($59)) + 92|0); //@line 11794 "../sokol\sokol_gfx.h"
    $60 = HEAP32[$stencil>>2]|0; //@line 11794 "../sokol\sokol_gfx.h"
    $call82 = (__sg_wgpu_load_op($60)|0); //@line 11794 "../sokol\sokol_gfx.h"
    $stencilLoadOp = ((($wgpu_ds_att_desc)) + 16|0); //@line 11794 "../sokol\sokol_gfx.h"
    HEAP32[$stencilLoadOp>>2] = $call82; //@line 11794 "../sokol\sokol_gfx.h"
    $61 = $action$addr; //@line 11795 "../sokol\sokol_gfx.h"
    $stencil83 = ((($61)) + 92|0); //@line 11795 "../sokol\sokol_gfx.h"
    $val84 = ((($stencil83)) + 4|0); //@line 11795 "../sokol\sokol_gfx.h"
    $62 = HEAP8[$val84>>0]|0; //@line 11795 "../sokol\sokol_gfx.h"
    $conv = $62&255; //@line 11795 "../sokol\sokol_gfx.h"
    $clearStencil = ((($wgpu_ds_att_desc)) + 24|0); //@line 11795 "../sokol\sokol_gfx.h"
    HEAP32[$clearStencil>>2] = $conv; //@line 11795 "../sokol\sokol_gfx.h"
    $63 = $pass$addr; //@line 11796 "../sokol\sokol_gfx.h"
    $wgpu85 = ((($63)) + 76|0); //@line 11796 "../sokol\sokol_gfx.h"
    $ds_att86 = ((($wgpu85)) + 48|0); //@line 11796 "../sokol\sokol_gfx.h"
    $render_tex_view87 = ((($ds_att86)) + 4|0); //@line 11796 "../sokol\sokol_gfx.h"
    $64 = HEAP32[$render_tex_view87>>2]|0; //@line 11796 "../sokol\sokol_gfx.h"
    HEAP32[$wgpu_ds_att_desc>>2] = $64; //@line 11796 "../sokol\sokol_gfx.h"
    $depthStencilAttachment = ((($wgpu_pass_desc)) + 16|0); //@line 11797 "../sokol\sokol_gfx.h"
    HEAP32[$depthStencilAttachment>>2] = $wgpu_ds_att_desc; //@line 11797 "../sokol\sokol_gfx.h"
    $65 = HEAP32[(30940)>>2]|0; //@line 11798 "../sokol\sokol_gfx.h"
    $call89 = (_wgpuCommandEncoderBeginRenderPass(($65|0),($wgpu_pass_desc|0))|0); //@line 11798 "../sokol\sokol_gfx.h"
    HEAP32[(30948)>>2] = $call89; //@line 11798 "../sokol\sokol_gfx.h"
   }
  } else {
   $66 = HEAP32[(30908)>>2]|0; //@line 11803 "../sokol\sokol_gfx.h"
   $tobool91 = ($66|0)!=(0|0); //@line 11803 "../sokol\sokol_gfx.h"
   if ($tobool91) {
    $67 = HEAP32[(30908)>>2]|0; //@line 11803 "../sokol\sokol_gfx.h"
    $call92 = (FUNCTION_TABLE_i[$67 & 0]()|0); //@line 11803 "../sokol\sokol_gfx.h"
    $cond = $call92;
   } else {
    $68 = HEAP32[(30912)>>2]|0; //@line 11803 "../sokol\sokol_gfx.h"
    $69 = HEAP32[(30932)>>2]|0; //@line 11803 "../sokol\sokol_gfx.h"
    $call93 = (FUNCTION_TABLE_ii[$68 & 255]($69)|0); //@line 11803 "../sokol\sokol_gfx.h"
    $cond = $call93;
   }
   $wgpu_render_view = $cond; //@line 11803 "../sokol\sokol_gfx.h"
   $70 = HEAP32[(30916)>>2]|0; //@line 11804 "../sokol\sokol_gfx.h"
   $tobool94 = ($70|0)!=(0|0); //@line 11804 "../sokol\sokol_gfx.h"
   if ($tobool94) {
    $71 = HEAP32[(30916)>>2]|0; //@line 11804 "../sokol\sokol_gfx.h"
    $call96 = (FUNCTION_TABLE_i[$71 & 0]()|0); //@line 11804 "../sokol\sokol_gfx.h"
    $cond100 = $call96;
   } else {
    $72 = HEAP32[(30920)>>2]|0; //@line 11804 "../sokol\sokol_gfx.h"
    $73 = HEAP32[(30932)>>2]|0; //@line 11804 "../sokol\sokol_gfx.h"
    $call98 = (FUNCTION_TABLE_ii[$72 & 255]($73)|0); //@line 11804 "../sokol\sokol_gfx.h"
    $cond100 = $call98;
   }
   $wgpu_resolve_view = $cond100; //@line 11804 "../sokol\sokol_gfx.h"
   $74 = HEAP32[(30924)>>2]|0; //@line 11805 "../sokol\sokol_gfx.h"
   $tobool101 = ($74|0)!=(0|0); //@line 11805 "../sokol\sokol_gfx.h"
   if ($tobool101) {
    $75 = HEAP32[(30924)>>2]|0; //@line 11805 "../sokol\sokol_gfx.h"
    $call103 = (FUNCTION_TABLE_i[$75 & 0]()|0); //@line 11805 "../sokol\sokol_gfx.h"
    $cond107 = $call103;
   } else {
    $76 = HEAP32[(30928)>>2]|0; //@line 11805 "../sokol\sokol_gfx.h"
    $77 = HEAP32[(30932)>>2]|0; //@line 11805 "../sokol\sokol_gfx.h"
    $call105 = (FUNCTION_TABLE_ii[$76 & 255]($77)|0); //@line 11805 "../sokol\sokol_gfx.h"
    $cond107 = $call105;
   }
   $wgpu_depth_stencil_view = $cond107; //@line 11805 "../sokol\sokol_gfx.h"
   ;HEAP32[$pass_desc>>2]=0|0;HEAP32[$pass_desc+4>>2]=0|0;HEAP32[$pass_desc+8>>2]=0|0;HEAP32[$pass_desc+12>>2]=0|0;HEAP32[$pass_desc+16>>2]=0|0; //@line 11808 "../sokol\sokol_gfx.h"
   ;HEAP32[$color_att_desc>>2]=0|0;HEAP32[$color_att_desc+4>>2]=0|0;HEAP32[$color_att_desc+8>>2]=0|0;HEAP32[$color_att_desc+12>>2]=0|0;HEAP32[$color_att_desc+16>>2]=0|0;HEAP32[$color_att_desc+20>>2]=0|0;HEAP32[$color_att_desc+24>>2]=0|0;HEAP32[$color_att_desc+28>>2]=0|0; //@line 11810 "../sokol\sokol_gfx.h"
   $78 = $action$addr; //@line 11811 "../sokol\sokol_gfx.h"
   $colors108 = ((($78)) + 4|0); //@line 11811 "../sokol\sokol_gfx.h"
   $79 = HEAP32[$colors108>>2]|0; //@line 11811 "../sokol\sokol_gfx.h"
   $call111 = (__sg_wgpu_load_op($79)|0); //@line 11811 "../sokol\sokol_gfx.h"
   $loadOp112 = ((($color_att_desc)) + 8|0); //@line 11811 "../sokol\sokol_gfx.h"
   HEAP32[$loadOp112>>2] = $call111; //@line 11811 "../sokol\sokol_gfx.h"
   $80 = $action$addr; //@line 11812 "../sokol\sokol_gfx.h"
   $colors113 = ((($80)) + 4|0); //@line 11812 "../sokol\sokol_gfx.h"
   $val115 = ((($colors113)) + 4|0); //@line 11812 "../sokol\sokol_gfx.h"
   $81 = +HEAPF32[$val115>>2]; //@line 11812 "../sokol\sokol_gfx.h"
   $clearColor117 = ((($color_att_desc)) + 16|0); //@line 11812 "../sokol\sokol_gfx.h"
   HEAPF32[$clearColor117>>2] = $81; //@line 11812 "../sokol\sokol_gfx.h"
   $82 = $action$addr; //@line 11813 "../sokol\sokol_gfx.h"
   $colors119 = ((($82)) + 4|0); //@line 11813 "../sokol\sokol_gfx.h"
   $val121 = ((($colors119)) + 4|0); //@line 11813 "../sokol\sokol_gfx.h"
   $arrayidx122 = ((($val121)) + 4|0); //@line 11813 "../sokol\sokol_gfx.h"
   $83 = +HEAPF32[$arrayidx122>>2]; //@line 11813 "../sokol\sokol_gfx.h"
   $clearColor123 = ((($color_att_desc)) + 16|0); //@line 11813 "../sokol\sokol_gfx.h"
   $g124 = ((($clearColor123)) + 4|0); //@line 11813 "../sokol\sokol_gfx.h"
   HEAPF32[$g124>>2] = $83; //@line 11813 "../sokol\sokol_gfx.h"
   $84 = $action$addr; //@line 11814 "../sokol\sokol_gfx.h"
   $colors125 = ((($84)) + 4|0); //@line 11814 "../sokol\sokol_gfx.h"
   $val127 = ((($colors125)) + 4|0); //@line 11814 "../sokol\sokol_gfx.h"
   $arrayidx128 = ((($val127)) + 8|0); //@line 11814 "../sokol\sokol_gfx.h"
   $85 = +HEAPF32[$arrayidx128>>2]; //@line 11814 "../sokol\sokol_gfx.h"
   $clearColor129 = ((($color_att_desc)) + 16|0); //@line 11814 "../sokol\sokol_gfx.h"
   $b130 = ((($clearColor129)) + 8|0); //@line 11814 "../sokol\sokol_gfx.h"
   HEAPF32[$b130>>2] = $85; //@line 11814 "../sokol\sokol_gfx.h"
   $86 = $action$addr; //@line 11815 "../sokol\sokol_gfx.h"
   $colors131 = ((($86)) + 4|0); //@line 11815 "../sokol\sokol_gfx.h"
   $val133 = ((($colors131)) + 4|0); //@line 11815 "../sokol\sokol_gfx.h"
   $arrayidx134 = ((($val133)) + 12|0); //@line 11815 "../sokol\sokol_gfx.h"
   $87 = +HEAPF32[$arrayidx134>>2]; //@line 11815 "../sokol\sokol_gfx.h"
   $clearColor135 = ((($color_att_desc)) + 16|0); //@line 11815 "../sokol\sokol_gfx.h"
   $a136 = ((($clearColor135)) + 12|0); //@line 11815 "../sokol\sokol_gfx.h"
   HEAPF32[$a136>>2] = $87; //@line 11815 "../sokol\sokol_gfx.h"
   $88 = $wgpu_render_view; //@line 11816 "../sokol\sokol_gfx.h"
   HEAP32[$color_att_desc>>2] = $88; //@line 11816 "../sokol\sokol_gfx.h"
   $89 = $wgpu_resolve_view; //@line 11817 "../sokol\sokol_gfx.h"
   $resolveTarget138 = ((($color_att_desc)) + 4|0); //@line 11817 "../sokol\sokol_gfx.h"
   HEAP32[$resolveTarget138>>2] = $89; //@line 11817 "../sokol\sokol_gfx.h"
   $colorAttachmentCount139 = ((($pass_desc)) + 8|0); //@line 11818 "../sokol\sokol_gfx.h"
   HEAP32[$colorAttachmentCount139>>2] = 1; //@line 11818 "../sokol\sokol_gfx.h"
   $colorAttachments140 = ((($pass_desc)) + 12|0); //@line 11819 "../sokol\sokol_gfx.h"
   HEAP32[$colorAttachments140>>2] = $color_att_desc; //@line 11819 "../sokol\sokol_gfx.h"
   ;HEAP32[$ds_att_desc>>2]=0|0;HEAP32[$ds_att_desc+4>>2]=0|0;HEAP32[$ds_att_desc+8>>2]=0|0;HEAP32[$ds_att_desc+12>>2]=0|0;HEAP32[$ds_att_desc+16>>2]=0|0;HEAP32[$ds_att_desc+20>>2]=0|0;HEAP32[$ds_att_desc+24>>2]=0|0; //@line 11821 "../sokol\sokol_gfx.h"
   $90 = $wgpu_depth_stencil_view; //@line 11822 "../sokol\sokol_gfx.h"
   HEAP32[$ds_att_desc>>2] = $90; //@line 11822 "../sokol\sokol_gfx.h"
   $91 = HEAP32[$ds_att_desc>>2]|0; //@line 11823 "../sokol\sokol_gfx.h"
   $cmp143 = (0|0)!=($91|0); //@line 11823 "../sokol\sokol_gfx.h"
   if ($cmp143) {
    $92 = $action$addr; //@line 11824 "../sokol\sokol_gfx.h"
    $depth148 = ((($92)) + 84|0); //@line 11824 "../sokol\sokol_gfx.h"
    $93 = HEAP32[$depth148>>2]|0; //@line 11824 "../sokol\sokol_gfx.h"
    $call150 = (__sg_wgpu_load_op($93)|0); //@line 11824 "../sokol\sokol_gfx.h"
    $depthLoadOp151 = ((($ds_att_desc)) + 4|0); //@line 11824 "../sokol\sokol_gfx.h"
    HEAP32[$depthLoadOp151>>2] = $call150; //@line 11824 "../sokol\sokol_gfx.h"
    $94 = $action$addr; //@line 11825 "../sokol\sokol_gfx.h"
    $depth152 = ((($94)) + 84|0); //@line 11825 "../sokol\sokol_gfx.h"
    $val153 = ((($depth152)) + 4|0); //@line 11825 "../sokol\sokol_gfx.h"
    $95 = +HEAPF32[$val153>>2]; //@line 11825 "../sokol\sokol_gfx.h"
    $clearDepth154 = ((($ds_att_desc)) + 12|0); //@line 11825 "../sokol\sokol_gfx.h"
    HEAPF32[$clearDepth154>>2] = $95; //@line 11825 "../sokol\sokol_gfx.h"
    $96 = $action$addr; //@line 11826 "../sokol\sokol_gfx.h"
    $stencil155 = ((($96)) + 92|0); //@line 11826 "../sokol\sokol_gfx.h"
    $97 = HEAP32[$stencil155>>2]|0; //@line 11826 "../sokol\sokol_gfx.h"
    $call157 = (__sg_wgpu_load_op($97)|0); //@line 11826 "../sokol\sokol_gfx.h"
    $stencilLoadOp158 = ((($ds_att_desc)) + 16|0); //@line 11826 "../sokol\sokol_gfx.h"
    HEAP32[$stencilLoadOp158>>2] = $call157; //@line 11826 "../sokol\sokol_gfx.h"
    $98 = $action$addr; //@line 11827 "../sokol\sokol_gfx.h"
    $stencil159 = ((($98)) + 92|0); //@line 11827 "../sokol\sokol_gfx.h"
    $val160 = ((($stencil159)) + 4|0); //@line 11827 "../sokol\sokol_gfx.h"
    $99 = HEAP8[$val160>>0]|0; //@line 11827 "../sokol\sokol_gfx.h"
    $conv161 = $99&255; //@line 11827 "../sokol\sokol_gfx.h"
    $clearStencil162 = ((($ds_att_desc)) + 24|0); //@line 11827 "../sokol\sokol_gfx.h"
    HEAP32[$clearStencil162>>2] = $conv161; //@line 11827 "../sokol\sokol_gfx.h"
    $depthStencilAttachment163 = ((($pass_desc)) + 16|0); //@line 11828 "../sokol\sokol_gfx.h"
    HEAP32[$depthStencilAttachment163>>2] = $ds_att_desc; //@line 11828 "../sokol\sokol_gfx.h"
    $100 = HEAP32[(30940)>>2]|0; //@line 11829 "../sokol\sokol_gfx.h"
    $call164 = (_wgpuCommandEncoderBeginRenderPass(($100|0),($pass_desc|0))|0); //@line 11829 "../sokol\sokol_gfx.h"
    HEAP32[(30948)>>2] = $call164; //@line 11829 "../sokol\sokol_gfx.h"
    break;
   } else {
    ___assert_fail((18695|0),(6868|0),11823,(18418|0)); //@line 11823 "../sokol\sokol_gfx.h"
    // unreachable; //@line 11823 "../sokol\sokol_gfx.h"
   }
  }
 } while(0);
 $101 = HEAP32[(30948)>>2]|0; //@line 11831 "../sokol\sokol_gfx.h"
 $tobool166 = ($101|0)!=(0|0); //@line 11831 "../sokol\sokol_gfx.h"
 if ($tobool166) {
  $102 = HEAP32[(30948)>>2]|0; //@line 11834 "../sokol\sokol_gfx.h"
  $103 = HEAP32[(31024)>>2]|0; //@line 11836 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetBindGroup(($102|0),0,($103|0),8,((30988)|0)); //@line 11834 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11839 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18723|0),(6868|0),11831,(18418|0)); //@line 11831 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11831 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_load_op($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $a$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $0 = $a$addr; //@line 10369 "../sokol\sokol_gfx.h"
 switch ($0|0) {
 case 3: case 1:  {
  $retval = 0; //@line 10372 "../sokol\sokol_gfx.h"
  break;
 }
 case 2:  {
  $retval = 1; //@line 10374 "../sokol\sokol_gfx.h"
  break;
 }
 default: {
  ___assert_fail((9413|0),(6868|0),10376,(18741|0)); //@line 10376 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10376 "../sokol\sokol_gfx.h"
 }
 }
 $1 = $retval; //@line 10379 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($1|0); //@line 10379 "../sokol\sokol_gfx.h"
}
function __sg_pass_ds_image($pass) {
 $pass = $pass|0;
 var $0 = 0, $call = 0, $pass$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $0 = $pass$addr; //@line 12352 "../sokol\sokol_gfx.h"
 $call = (__sg_wgpu_pass_ds_image($0)|0); //@line 12352 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return ($call|0); //@line 12352 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_pass_ds_image($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $2 = 0, $ds_att = 0, $pass$addr = 0, $tobool = 0, $wgpu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $0 = $pass$addr; //@line 11749 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11749 "../sokol\sokol_gfx.h"
 if ($tobool) {
  $1 = $pass$addr; //@line 11750 "../sokol\sokol_gfx.h"
  $wgpu = ((($1)) + 76|0); //@line 11750 "../sokol\sokol_gfx.h"
  $ds_att = ((($wgpu)) + 48|0); //@line 11750 "../sokol\sokol_gfx.h"
  $2 = HEAP32[$ds_att>>2]|0; //@line 11750 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($2|0); //@line 11750 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18341|0),(6868|0),11749,(18758|0)); //@line 11749 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11749 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_wgpu_pass_color_image($pass,$index) {
 $pass = $pass|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $cmp = 0, $cmp2 = 0, $index$addr = 0, $or$cond = 0, $or$cond1 = 0, $pass$addr = 0, $tobool = 0, $wgpu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $index$addr = $index;
 $0 = $pass$addr; //@line 11742 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11742 "../sokol\sokol_gfx.h"
 $1 = $index$addr; //@line 11742 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)>=(0); //@line 11742 "../sokol\sokol_gfx.h"
 $or$cond = $tobool & $cmp; //@line 11742 "../sokol\sokol_gfx.h"
 $2 = $index$addr; //@line 11742 "../sokol\sokol_gfx.h"
 $cmp2 = ($2|0)<(4); //@line 11742 "../sokol\sokol_gfx.h"
 $or$cond1 = $or$cond & $cmp2; //@line 11742 "../sokol\sokol_gfx.h"
 if ($or$cond1) {
  $3 = $pass$addr; //@line 11744 "../sokol\sokol_gfx.h"
  $wgpu = ((($3)) + 76|0); //@line 11744 "../sokol\sokol_gfx.h"
  $4 = $index$addr; //@line 11744 "../sokol\sokol_gfx.h"
  $arrayidx = (($wgpu) + (($4*12)|0)|0); //@line 11744 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$arrayidx>>2]|0; //@line 11744 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($5|0); //@line 11744 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18781|0),(6868|0),11742,(18840|0)); //@line 11742 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11742 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_wgpu_apply_pipeline($pip) {
 $pip = $pip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blend_color = 0, $cmn = 0;
 var $cmn16 = 0, $cmp = 0, $frombool = 0, $index_type = 0, $pip$addr = 0, $stencil_ref = 0, $tobool = 0, $tobool10 = 0, $tobool2 = 0, $tobool6 = 0, $wgpu = 0, $wgpu14 = 0, $wgpu17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $0 = $pip$addr; //@line 11926 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11926 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((7465|0),(6868|0),11926,(18923|0)); //@line 11926 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11926 "../sokol\sokol_gfx.h"
 }
 $1 = $pip$addr; //@line 11927 "../sokol\sokol_gfx.h"
 $wgpu = ((($1)) + 76|0); //@line 11927 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$wgpu>>2]|0; //@line 11927 "../sokol\sokol_gfx.h"
 $tobool2 = ($2|0)!=(0|0); //@line 11927 "../sokol\sokol_gfx.h"
 if (!($tobool2)) {
  ___assert_fail((18947|0),(6868|0),11927,(18923|0)); //@line 11927 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11927 "../sokol\sokol_gfx.h"
 }
 $3 = HEAP8[(30893)>>0]|0; //@line 11928 "../sokol\sokol_gfx.h"
 $tobool6 = $3&1; //@line 11928 "../sokol\sokol_gfx.h"
 if (!($tobool6)) {
  ___assert_fail((18866|0),(6868|0),11928,(18923|0)); //@line 11928 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11928 "../sokol\sokol_gfx.h"
 }
 $4 = HEAP32[(30948)>>2]|0; //@line 11929 "../sokol\sokol_gfx.h"
 $tobool10 = ($4|0)!=(0|0); //@line 11929 "../sokol\sokol_gfx.h"
 if ($tobool10) {
  $5 = $pip$addr; //@line 11930 "../sokol\sokol_gfx.h"
  $cmn = ((($5)) + 12|0); //@line 11930 "../sokol\sokol_gfx.h"
  $index_type = ((($cmn)) + 4|0); //@line 11930 "../sokol\sokol_gfx.h"
  $6 = HEAP32[$index_type>>2]|0; //@line 11930 "../sokol\sokol_gfx.h"
  $cmp = ($6|0)!=(1); //@line 11930 "../sokol\sokol_gfx.h"
  $frombool = $cmp&1; //@line 11930 "../sokol\sokol_gfx.h"
  HEAP8[(30894)>>0] = $frombool; //@line 11930 "../sokol\sokol_gfx.h"
  $7 = $pip$addr; //@line 11931 "../sokol\sokol_gfx.h"
  HEAP32[(30956)>>2] = $7; //@line 11931 "../sokol\sokol_gfx.h"
  $8 = $pip$addr; //@line 11932 "../sokol\sokol_gfx.h"
  $9 = HEAP32[$8>>2]|0; //@line 11932 "../sokol\sokol_gfx.h"
  HEAP32[(30960)>>2] = $9; //@line 11932 "../sokol\sokol_gfx.h"
  $10 = HEAP32[(30948)>>2]|0; //@line 11933 "../sokol\sokol_gfx.h"
  $11 = $pip$addr; //@line 11933 "../sokol\sokol_gfx.h"
  $wgpu14 = ((($11)) + 76|0); //@line 11933 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$wgpu14>>2]|0; //@line 11933 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetPipeline(($10|0),($12|0)); //@line 11933 "../sokol\sokol_gfx.h"
  $13 = HEAP32[(30948)>>2]|0; //@line 11934 "../sokol\sokol_gfx.h"
  $14 = $pip$addr; //@line 11934 "../sokol\sokol_gfx.h"
  $cmn16 = ((($14)) + 12|0); //@line 11934 "../sokol\sokol_gfx.h"
  $blend_color = ((($cmn16)) + 44|0); //@line 11934 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetBlendColor(($13|0),($blend_color|0)); //@line 11934 "../sokol\sokol_gfx.h"
  $15 = HEAP32[(30948)>>2]|0; //@line 11935 "../sokol\sokol_gfx.h"
  $16 = $pip$addr; //@line 11935 "../sokol\sokol_gfx.h"
  $wgpu17 = ((($16)) + 76|0); //@line 11935 "../sokol\sokol_gfx.h"
  $stencil_ref = ((($wgpu17)) + 4|0); //@line 11935 "../sokol\sokol_gfx.h"
  $17 = HEAP32[$stencil_ref>>2]|0; //@line 11935 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetStencilReference(($15|0),($17|0)); //@line 11935 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11936 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18723|0),(6868|0),11929,(18923|0)); //@line 11929 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11929 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_apply_bindings($pip,$vbs,$vb_offsets,$num_vbs,$ib,$ib_offset,$vs_imgs,$num_vs_imgs,$fs_imgs,$num_fs_imgs) {
 $pip = $pip|0;
 $vbs = $vbs|0;
 $vb_offsets = $vb_offsets|0;
 $num_vbs = $num_vbs|0;
 $ib = $ib|0;
 $ib_offset = $ib_offset|0;
 $vs_imgs = $vs_imgs|0;
 $num_vs_imgs = $num_vs_imgs|0;
 $fs_imgs = $fs_imgs|0;
 $num_fs_imgs = $num_fs_imgs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx17 = 0;
 var $arrayidx44 = 0, $bind_group_layout = 0, $bind_group_layout45 = 0, $call = 0, $call50 = 0, $cmn = 0, $cmp = 0, $cmp13 = 0, $cmp19 = 0, $cmp22 = 0, $cmp34 = 0, $cmp37 = 0, $fs_bgl = 0, $fs_img_bg = 0, $fs_imgs$addr = 0, $ib$addr = 0, $ib_offset$addr = 0, $inc = 0, $num_fs_imgs$addr = 0, $num_vbs$addr = 0;
 var $num_vs_imgs$addr = 0, $pip$addr = 0, $shader = 0, $shader26 = 0, $shader41 = 0, $shader6 = 0, $slot12 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool29 = 0, $tobool46 = 0, $tobool5 = 0, $vb_offsets$addr = 0, $vbs$addr = 0, $vs_bgl = 0, $vs_img_bg = 0, $vs_imgs$addr = 0, $wgpu = 0, $wgpu15 = 0;
 var $wgpu27 = 0, $wgpu42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $pip$addr = $pip;
 $vbs$addr = $vbs;
 $vb_offsets$addr = $vb_offsets;
 $num_vbs$addr = $num_vbs;
 $ib$addr = $ib;
 $ib_offset$addr = $ib_offset;
 $vs_imgs$addr = $vs_imgs;
 $num_vs_imgs$addr = $num_vs_imgs;
 $fs_imgs$addr = $fs_imgs;
 $num_fs_imgs$addr = $num_fs_imgs;
 $0 = HEAP8[(30893)>>0]|0; //@line 11968 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 11968 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18866|0),(6868|0),11968,(19052|0)); //@line 11968 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11968 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30948)>>2]|0; //@line 11969 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11969 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((18723|0),(6868|0),11969,(19052|0)); //@line 11969 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11969 "../sokol\sokol_gfx.h"
 }
 $2 = $pip$addr; //@line 11970 "../sokol\sokol_gfx.h"
 $shader = ((($2)) + 72|0); //@line 11970 "../sokol\sokol_gfx.h"
 $3 = HEAP32[$shader>>2]|0; //@line 11970 "../sokol\sokol_gfx.h"
 $tobool5 = ($3|0)!=(0|0); //@line 11970 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((18961|0),(6868|0),11970,(19052|0)); //@line 11970 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11970 "../sokol\sokol_gfx.h"
 }
 $4 = $pip$addr; //@line 11970 "../sokol\sokol_gfx.h"
 $cmn = ((($4)) + 12|0); //@line 11970 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$cmn>>2]|0; //@line 11970 "../sokol\sokol_gfx.h"
 $6 = $pip$addr; //@line 11970 "../sokol\sokol_gfx.h"
 $shader6 = ((($6)) + 72|0); //@line 11970 "../sokol\sokol_gfx.h"
 $7 = HEAP32[$shader6>>2]|0; //@line 11970 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$7>>2]|0; //@line 11970 "../sokol\sokol_gfx.h"
 $cmp = ($5|0)==($8|0); //@line 11970 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((18961|0),(6868|0),11970,(19052|0)); //@line 11970 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11970 "../sokol\sokol_gfx.h"
 }
 $9 = $ib$addr; //@line 11973 "../sokol\sokol_gfx.h"
 $tobool11 = ($9|0)!=(0|0); //@line 11973 "../sokol\sokol_gfx.h"
 if ($tobool11) {
  $10 = HEAP32[(30948)>>2]|0; //@line 11974 "../sokol\sokol_gfx.h"
  $11 = $ib$addr; //@line 11974 "../sokol\sokol_gfx.h"
  $wgpu = ((($11)) + 48|0); //@line 11974 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$wgpu>>2]|0; //@line 11974 "../sokol\sokol_gfx.h"
  $13 = $ib_offset$addr; //@line 11974 "../sokol\sokol_gfx.h"
  $14 = ($13|0)<(0); //@line 11974 "../sokol\sokol_gfx.h"
  $15 = $14 << 31 >> 31; //@line 11974 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetIndexBuffer(($10|0),($12|0),($13|0),($15|0)); //@line 11974 "../sokol\sokol_gfx.h"
 }
 $slot12 = 0; //@line 11978 "../sokol\sokol_gfx.h"
 while(1) {
  $16 = $slot12; //@line 11978 "../sokol\sokol_gfx.h"
  $17 = $num_vbs$addr; //@line 11978 "../sokol\sokol_gfx.h"
  $cmp13 = ($16>>>0)<($17>>>0); //@line 11978 "../sokol\sokol_gfx.h"
  if (!($cmp13)) {
   break;
  }
  $18 = HEAP32[(30948)>>2]|0; //@line 11979 "../sokol\sokol_gfx.h"
  $19 = $slot12; //@line 11979 "../sokol\sokol_gfx.h"
  $20 = $vbs$addr; //@line 11979 "../sokol\sokol_gfx.h"
  $21 = $slot12; //@line 11979 "../sokol\sokol_gfx.h"
  $arrayidx = (($20) + ($21<<2)|0); //@line 11979 "../sokol\sokol_gfx.h"
  $22 = HEAP32[$arrayidx>>2]|0; //@line 11979 "../sokol\sokol_gfx.h"
  $wgpu15 = ((($22)) + 48|0); //@line 11979 "../sokol\sokol_gfx.h"
  $23 = HEAP32[$wgpu15>>2]|0; //@line 11979 "../sokol\sokol_gfx.h"
  $24 = $vb_offsets$addr; //@line 11979 "../sokol\sokol_gfx.h"
  $25 = $slot12; //@line 11979 "../sokol\sokol_gfx.h"
  $arrayidx17 = (($24) + ($25<<2)|0); //@line 11979 "../sokol\sokol_gfx.h"
  $26 = HEAP32[$arrayidx17>>2]|0; //@line 11979 "../sokol\sokol_gfx.h"
  $27 = ($26|0)<(0); //@line 11979 "../sokol\sokol_gfx.h"
  $28 = $27 << 31 >> 31; //@line 11979 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetVertexBuffer(($18|0),($19|0),($23|0),($26|0),($28|0)); //@line 11979 "../sokol\sokol_gfx.h"
  $29 = $slot12; //@line 11978 "../sokol\sokol_gfx.h"
  $inc = (($29) + 1)|0; //@line 11978 "../sokol\sokol_gfx.h"
  $slot12 = $inc; //@line 11978 "../sokol\sokol_gfx.h"
 }
 $30 = $num_vs_imgs$addr; //@line 11983 "../sokol\sokol_gfx.h"
 $cmp19 = ($30|0)>(0); //@line 11983 "../sokol\sokol_gfx.h"
 do {
  if ($cmp19) {
   $31 = $num_vs_imgs$addr; //@line 11984 "../sokol\sokol_gfx.h"
   $cmp22 = ($31|0)>(8); //@line 11984 "../sokol\sokol_gfx.h"
   if ($cmp22) {
    $num_vs_imgs$addr = 8; //@line 11985 "../sokol\sokol_gfx.h"
   }
   $32 = $pip$addr; //@line 11987 "../sokol\sokol_gfx.h"
   $shader26 = ((($32)) + 72|0); //@line 11987 "../sokol\sokol_gfx.h"
   $33 = HEAP32[$shader26>>2]|0; //@line 11987 "../sokol\sokol_gfx.h"
   $wgpu27 = ((($33)) + 252|0); //@line 11987 "../sokol\sokol_gfx.h"
   $bind_group_layout = ((($wgpu27)) + 4|0); //@line 11987 "../sokol\sokol_gfx.h"
   $34 = HEAP32[$bind_group_layout>>2]|0; //@line 11987 "../sokol\sokol_gfx.h"
   $vs_bgl = $34; //@line 11987 "../sokol\sokol_gfx.h"
   $35 = $vs_bgl; //@line 11988 "../sokol\sokol_gfx.h"
   $tobool29 = ($35|0)!=(0|0); //@line 11988 "../sokol\sokol_gfx.h"
   if ($tobool29) {
    $36 = $vs_bgl; //@line 11989 "../sokol\sokol_gfx.h"
    $37 = $vs_imgs$addr; //@line 11989 "../sokol\sokol_gfx.h"
    $38 = $num_vs_imgs$addr; //@line 11989 "../sokol\sokol_gfx.h"
    $call = (__sg_wgpu_create_images_bindgroup($36,$37,$38)|0); //@line 11989 "../sokol\sokol_gfx.h"
    $vs_img_bg = $call; //@line 11989 "../sokol\sokol_gfx.h"
    $39 = HEAP32[(30948)>>2]|0; //@line 11990 "../sokol\sokol_gfx.h"
    $40 = $vs_img_bg; //@line 11990 "../sokol\sokol_gfx.h"
    _wgpuRenderPassEncoderSetBindGroup(($39|0),1,($40|0),0,(0|0)); //@line 11990 "../sokol\sokol_gfx.h"
    $41 = $vs_img_bg; //@line 11991 "../sokol\sokol_gfx.h"
    _wgpuBindGroupRelease(($41|0)); //@line 11991 "../sokol\sokol_gfx.h"
    break;
   } else {
    ___assert_fail((19076|0),(6868|0),11988,(19052|0)); //@line 11988 "../sokol\sokol_gfx.h"
    // unreachable; //@line 11988 "../sokol\sokol_gfx.h"
   }
  } else {
   $42 = HEAP32[(30948)>>2]|0; //@line 11994 "../sokol\sokol_gfx.h"
   $43 = HEAP32[(30952)>>2]|0; //@line 11994 "../sokol\sokol_gfx.h"
   _wgpuRenderPassEncoderSetBindGroup(($42|0),1,($43|0),0,(0|0)); //@line 11994 "../sokol\sokol_gfx.h"
  }
 } while(0);
 $44 = $num_fs_imgs$addr; //@line 11996 "../sokol\sokol_gfx.h"
 $cmp34 = ($44|0)>(0); //@line 11996 "../sokol\sokol_gfx.h"
 if (!($cmp34)) {
  $56 = HEAP32[(30948)>>2]|0; //@line 12007 "../sokol\sokol_gfx.h"
  $57 = HEAP32[(30952)>>2]|0; //@line 12007 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetBindGroup(($56|0),2,($57|0),0,(0|0)); //@line 12007 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12009 "../sokol\sokol_gfx.h"
 }
 $45 = $num_fs_imgs$addr; //@line 11997 "../sokol\sokol_gfx.h"
 $cmp37 = ($45|0)>(8); //@line 11997 "../sokol\sokol_gfx.h"
 if ($cmp37) {
  $num_fs_imgs$addr = 8; //@line 11998 "../sokol\sokol_gfx.h"
 }
 $46 = $pip$addr; //@line 12000 "../sokol\sokol_gfx.h"
 $shader41 = ((($46)) + 72|0); //@line 12000 "../sokol\sokol_gfx.h"
 $47 = HEAP32[$shader41>>2]|0; //@line 12000 "../sokol\sokol_gfx.h"
 $wgpu42 = ((($47)) + 252|0); //@line 12000 "../sokol\sokol_gfx.h"
 $arrayidx44 = ((($wgpu42)) + 24|0); //@line 12000 "../sokol\sokol_gfx.h"
 $bind_group_layout45 = ((($arrayidx44)) + 4|0); //@line 12000 "../sokol\sokol_gfx.h"
 $48 = HEAP32[$bind_group_layout45>>2]|0; //@line 12000 "../sokol\sokol_gfx.h"
 $fs_bgl = $48; //@line 12000 "../sokol\sokol_gfx.h"
 $49 = $fs_bgl; //@line 12001 "../sokol\sokol_gfx.h"
 $tobool46 = ($49|0)!=(0|0); //@line 12001 "../sokol\sokol_gfx.h"
 if (!($tobool46)) {
  ___assert_fail((19083|0),(6868|0),12001,(19052|0)); //@line 12001 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12001 "../sokol\sokol_gfx.h"
 }
 $50 = $fs_bgl; //@line 12002 "../sokol\sokol_gfx.h"
 $51 = $fs_imgs$addr; //@line 12002 "../sokol\sokol_gfx.h"
 $52 = $num_fs_imgs$addr; //@line 12002 "../sokol\sokol_gfx.h"
 $call50 = (__sg_wgpu_create_images_bindgroup($50,$51,$52)|0); //@line 12002 "../sokol\sokol_gfx.h"
 $fs_img_bg = $call50; //@line 12002 "../sokol\sokol_gfx.h"
 $53 = HEAP32[(30948)>>2]|0; //@line 12003 "../sokol\sokol_gfx.h"
 $54 = $fs_img_bg; //@line 12003 "../sokol\sokol_gfx.h"
 _wgpuRenderPassEncoderSetBindGroup(($53|0),2,($54|0),0,(0|0)); //@line 12003 "../sokol\sokol_gfx.h"
 $55 = $fs_img_bg; //@line 12004 "../sokol\sokol_gfx.h"
 _wgpuBindGroupRelease(($55|0)); //@line 12004 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 12009 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_create_images_bindgroup($bgl,$imgs,$num_imgs) {
 $bgl = $bgl|0;
 $imgs = $imgs|0;
 $num_imgs = $num_imgs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add6 = 0, $add9 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $bg = 0, $bg_desc = 0, $bgl$addr = 0, $bindingCount = 0, $bindings = 0, $call = 0, $cmp = 0;
 var $cmp4 = 0, $img_bgb = 0, $img_index = 0, $imgs$addr = 0, $inc = 0, $layout = 0, $mul = 0, $mul14 = 0, $mul5 = 0, $num_imgs$addr = 0, $sampler = 0, $sampler13 = 0, $smp_bdg = 0, $tex_bdg = 0, $tex_view = 0, $textureView = 0, $tobool = 0, $tobool16 = 0, $wgpu = 0, $wgpu12 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $img_bgb = sp;
 $bg_desc = sp + 516|0;
 $bgl$addr = $bgl;
 $imgs$addr = $imgs;
 $num_imgs$addr = $num_imgs;
 $0 = HEAP32[(30904)>>2]|0; //@line 11939 "../sokol\sokol_gfx.h"
 $tobool = ($0|0)!=(0|0); //@line 11939 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((16414|0),(6868|0),11939,(19090|0)); //@line 11939 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11939 "../sokol\sokol_gfx.h"
 }
 $1 = $num_imgs$addr; //@line 11940 "../sokol\sokol_gfx.h"
 $cmp = ($1|0)<=(8); //@line 11940 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  ___assert_fail((19123|0),(6868|0),11940,(19090|0)); //@line 11940 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11940 "../sokol\sokol_gfx.h"
 }
 _memset(($img_bgb|0),0,512)|0; //@line 11942 "../sokol\sokol_gfx.h"
 $img_index = 0; //@line 11943 "../sokol\sokol_gfx.h"
 while(1) {
  $2 = $img_index; //@line 11943 "../sokol\sokol_gfx.h"
  $3 = $num_imgs$addr; //@line 11943 "../sokol\sokol_gfx.h"
  $cmp4 = ($2|0)<($3|0); //@line 11943 "../sokol\sokol_gfx.h"
  if (!($cmp4)) {
   break;
  }
  $4 = $img_index; //@line 11944 "../sokol\sokol_gfx.h"
  $mul = $4<<1; //@line 11944 "../sokol\sokol_gfx.h"
  $add = (($mul) + 0)|0; //@line 11944 "../sokol\sokol_gfx.h"
  $arrayidx = (($img_bgb) + ($add<<5)|0); //@line 11944 "../sokol\sokol_gfx.h"
  $tex_bdg = $arrayidx; //@line 11944 "../sokol\sokol_gfx.h"
  $5 = $img_index; //@line 11945 "../sokol\sokol_gfx.h"
  $mul5 = $5<<1; //@line 11945 "../sokol\sokol_gfx.h"
  $add6 = (($mul5) + 1)|0; //@line 11945 "../sokol\sokol_gfx.h"
  $arrayidx7 = (($img_bgb) + ($add6<<5)|0); //@line 11945 "../sokol\sokol_gfx.h"
  $smp_bdg = $arrayidx7; //@line 11945 "../sokol\sokol_gfx.h"
  $6 = $img_index; //@line 11946 "../sokol\sokol_gfx.h"
  $7 = $tex_bdg; //@line 11946 "../sokol\sokol_gfx.h"
  HEAP32[$7>>2] = $6; //@line 11946 "../sokol\sokol_gfx.h"
  $8 = $imgs$addr; //@line 11947 "../sokol\sokol_gfx.h"
  $9 = $img_index; //@line 11947 "../sokol\sokol_gfx.h"
  $arrayidx8 = (($8) + ($9<<2)|0); //@line 11947 "../sokol\sokol_gfx.h"
  $10 = HEAP32[$arrayidx8>>2]|0; //@line 11947 "../sokol\sokol_gfx.h"
  $wgpu = ((($10)) + 88|0); //@line 11947 "../sokol\sokol_gfx.h"
  $tex_view = ((($wgpu)) + 4|0); //@line 11947 "../sokol\sokol_gfx.h"
  $11 = HEAP32[$tex_view>>2]|0; //@line 11947 "../sokol\sokol_gfx.h"
  $12 = $tex_bdg; //@line 11947 "../sokol\sokol_gfx.h"
  $textureView = ((($12)) + 28|0); //@line 11947 "../sokol\sokol_gfx.h"
  HEAP32[$textureView>>2] = $11; //@line 11947 "../sokol\sokol_gfx.h"
  $13 = $img_index; //@line 11948 "../sokol\sokol_gfx.h"
  $add9 = (($13) + 8)|0; //@line 11948 "../sokol\sokol_gfx.h"
  $14 = $smp_bdg; //@line 11948 "../sokol\sokol_gfx.h"
  HEAP32[$14>>2] = $add9; //@line 11948 "../sokol\sokol_gfx.h"
  $15 = $imgs$addr; //@line 11949 "../sokol\sokol_gfx.h"
  $16 = $img_index; //@line 11949 "../sokol\sokol_gfx.h"
  $arrayidx11 = (($15) + ($16<<2)|0); //@line 11949 "../sokol\sokol_gfx.h"
  $17 = HEAP32[$arrayidx11>>2]|0; //@line 11949 "../sokol\sokol_gfx.h"
  $wgpu12 = ((($17)) + 88|0); //@line 11949 "../sokol\sokol_gfx.h"
  $sampler = ((($wgpu12)) + 12|0); //@line 11949 "../sokol\sokol_gfx.h"
  $18 = HEAP32[$sampler>>2]|0; //@line 11949 "../sokol\sokol_gfx.h"
  $19 = $smp_bdg; //@line 11949 "../sokol\sokol_gfx.h"
  $sampler13 = ((($19)) + 24|0); //@line 11949 "../sokol\sokol_gfx.h"
  HEAP32[$sampler13>>2] = $18; //@line 11949 "../sokol\sokol_gfx.h"
  $20 = $img_index; //@line 11943 "../sokol\sokol_gfx.h"
  $inc = (($20) + 1)|0; //@line 11943 "../sokol\sokol_gfx.h"
  $img_index = $inc; //@line 11943 "../sokol\sokol_gfx.h"
 }
 ;HEAP32[$bg_desc>>2]=0|0;HEAP32[$bg_desc+4>>2]=0|0;HEAP32[$bg_desc+8>>2]=0|0;HEAP32[$bg_desc+12>>2]=0|0;HEAP32[$bg_desc+16>>2]=0|0; //@line 11952 "../sokol\sokol_gfx.h"
 $21 = $bgl$addr; //@line 11953 "../sokol\sokol_gfx.h"
 $layout = ((($bg_desc)) + 8|0); //@line 11953 "../sokol\sokol_gfx.h"
 HEAP32[$layout>>2] = $21; //@line 11953 "../sokol\sokol_gfx.h"
 $22 = $num_imgs$addr; //@line 11954 "../sokol\sokol_gfx.h"
 $mul14 = $22<<1; //@line 11954 "../sokol\sokol_gfx.h"
 $bindingCount = ((($bg_desc)) + 12|0); //@line 11954 "../sokol\sokol_gfx.h"
 HEAP32[$bindingCount>>2] = $mul14; //@line 11954 "../sokol\sokol_gfx.h"
 $bindings = ((($bg_desc)) + 16|0); //@line 11955 "../sokol\sokol_gfx.h"
 HEAP32[$bindings>>2] = $img_bgb; //@line 11955 "../sokol\sokol_gfx.h"
 $23 = HEAP32[(30904)>>2]|0; //@line 11956 "../sokol\sokol_gfx.h"
 $call = (_wgpuDeviceCreateBindGroup(($23|0),($bg_desc|0))|0); //@line 11956 "../sokol\sokol_gfx.h"
 $bg = $call; //@line 11956 "../sokol\sokol_gfx.h"
 $24 = $bg; //@line 11957 "../sokol\sokol_gfx.h"
 $tobool16 = ($24|0)!=(0|0); //@line 11957 "../sokol\sokol_gfx.h"
 if ($tobool16) {
  $25 = $bg; //@line 11958 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return ($25|0); //@line 11958 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((19139|0),(6868|0),11957,(19090|0)); //@line 11957 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11957 "../sokol\sokol_gfx.h"
 }
 return (0)|0;
}
function __sg_wgpu_apply_uniforms($stage_index,$ub_index,$data,$num_bytes) {
 $stage_index = $stage_index|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add74 = 0, $add75 = 0, $and = 0, $and76 = 0, $arrayidx = 0, $arrayidx56 = 0, $arrayidx57 = 0, $arrayidx66 = 0;
 var $arrayidx71 = 0, $arrayidx72 = 0, $arrayidx73 = 0, $cmn = 0, $cmn48 = 0, $cmn54 = 0, $cmp = 0, $cmp11 = 0, $cmp15 = 0, $cmp17 = 0, $cmp21 = 0, $cmp25 = 0, $cmp35 = 0, $cmp43 = 0, $cmp49 = 0, $cmp58 = 0, $cmp62 = 0, $cmp67 = 0, $cmp9 = 0, $data$addr = 0;
 var $dst_ptr = 0, $num_bytes$addr = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $shader = 0, $shader39 = 0, $shader47 = 0, $shader53 = 0, $stage_index$addr = 0, $tobool = 0, $tobool1 = 0, $tobool29 = 0, $tobool31 = 0, $tobool5 = 0, $ub_index$addr = 0, $uniform_blocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $stage_index$addr = $stage_index;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = HEAP8[(30893)>>0]|0; //@line 12012 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 12012 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18866|0),(6868|0),12012,(19288|0)); //@line 12012 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12012 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30948)>>2]|0; //@line 12013 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 12013 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((18723|0),(6868|0),12013,(19288|0)); //@line 12013 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12013 "../sokol\sokol_gfx.h"
 }
 $2 = $data$addr; //@line 12014 "../sokol\sokol_gfx.h"
 $tobool5 = ($2|0)!=(0|0); //@line 12014 "../sokol\sokol_gfx.h"
 $3 = $num_bytes$addr; //@line 12014 "../sokol\sokol_gfx.h"
 $cmp = ($3|0)>(0); //@line 12014 "../sokol\sokol_gfx.h"
 $or$cond = $tobool5 & $cmp; //@line 12014 "../sokol\sokol_gfx.h"
 if (!($or$cond)) {
  ___assert_fail((7786|0),(6868|0),12014,(19288|0)); //@line 12014 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12014 "../sokol\sokol_gfx.h"
 }
 $4 = $stage_index$addr; //@line 12015 "../sokol\sokol_gfx.h"
 $cmp9 = ($4>>>0)>=(0); //@line 12015 "../sokol\sokol_gfx.h"
 $5 = $stage_index$addr; //@line 12015 "../sokol\sokol_gfx.h"
 $cmp11 = ($5|0)<(2); //@line 12015 "../sokol\sokol_gfx.h"
 $or$cond1 = $cmp9 & $cmp11; //@line 12015 "../sokol\sokol_gfx.h"
 if (!($or$cond1)) {
  ___assert_fail((19312|0),(6868|0),12015,(19288|0)); //@line 12015 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12015 "../sokol\sokol_gfx.h"
 }
 $6 = $ub_index$addr; //@line 12016 "../sokol\sokol_gfx.h"
 $cmp15 = ($6|0)>=(0); //@line 12016 "../sokol\sokol_gfx.h"
 $7 = $ub_index$addr; //@line 12016 "../sokol\sokol_gfx.h"
 $cmp17 = ($7|0)<(4); //@line 12016 "../sokol\sokol_gfx.h"
 $or$cond2 = $cmp15 & $cmp17; //@line 12016 "../sokol\sokol_gfx.h"
 if (!($or$cond2)) {
  ___assert_fail((7731|0),(6868|0),12016,(19288|0)); //@line 12016 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12016 "../sokol\sokol_gfx.h"
 }
 $8 = HEAP32[(30984)>>2]|0; //@line 12017 "../sokol\sokol_gfx.h"
 $9 = $num_bytes$addr; //@line 12017 "../sokol\sokol_gfx.h"
 $add = (($8) + ($9))|0; //@line 12017 "../sokol\sokol_gfx.h"
 $10 = HEAP32[(30980)>>2]|0; //@line 12017 "../sokol\sokol_gfx.h"
 $cmp21 = ($add>>>0)<=($10>>>0); //@line 12017 "../sokol\sokol_gfx.h"
 if (!($cmp21)) {
  ___assert_fail((19376|0),(6868|0),12017,(19288|0)); //@line 12017 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12017 "../sokol\sokol_gfx.h"
 }
 $11 = HEAP32[(30984)>>2]|0; //@line 12018 "../sokol\sokol_gfx.h"
 $and = $11 & 255; //@line 12018 "../sokol\sokol_gfx.h"
 $cmp25 = ($and|0)==(0); //@line 12018 "../sokol\sokol_gfx.h"
 if (!($cmp25)) {
  ___assert_fail((19434|0),(6868|0),12018,(19288|0)); //@line 12018 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12018 "../sokol\sokol_gfx.h"
 }
 $12 = HEAP32[(30956)>>2]|0; //@line 12019 "../sokol\sokol_gfx.h"
 $tobool29 = ($12|0)!=(0|0); //@line 12019 "../sokol\sokol_gfx.h"
 if (!($tobool29)) {
  ___assert_fail((19472|0),(6868|0),12019,(19288|0)); //@line 12019 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12019 "../sokol\sokol_gfx.h"
 }
 $13 = HEAP32[(30956)>>2]|0; //@line 12019 "../sokol\sokol_gfx.h"
 $shader = ((($13)) + 72|0); //@line 12019 "../sokol\sokol_gfx.h"
 $14 = HEAP32[$shader>>2]|0; //@line 12019 "../sokol\sokol_gfx.h"
 $tobool31 = ($14|0)!=(0|0); //@line 12019 "../sokol\sokol_gfx.h"
 if (!($tobool31)) {
  ___assert_fail((19472|0),(6868|0),12019,(19288|0)); //@line 12019 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12019 "../sokol\sokol_gfx.h"
 }
 $15 = HEAP32[(30956)>>2]|0; //@line 12020 "../sokol\sokol_gfx.h"
 $16 = HEAP32[$15>>2]|0; //@line 12020 "../sokol\sokol_gfx.h"
 $17 = HEAP32[(30960)>>2]|0; //@line 12020 "../sokol\sokol_gfx.h"
 $cmp35 = ($16|0)==($17|0); //@line 12020 "../sokol\sokol_gfx.h"
 if (!($cmp35)) {
  ___assert_fail((19527|0),(6868|0),12020,(19288|0)); //@line 12020 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12020 "../sokol\sokol_gfx.h"
 }
 $18 = HEAP32[(30956)>>2]|0; //@line 12021 "../sokol\sokol_gfx.h"
 $shader39 = ((($18)) + 72|0); //@line 12021 "../sokol\sokol_gfx.h"
 $19 = HEAP32[$shader39>>2]|0; //@line 12021 "../sokol\sokol_gfx.h"
 $20 = HEAP32[$19>>2]|0; //@line 12021 "../sokol\sokol_gfx.h"
 $21 = HEAP32[(30956)>>2]|0; //@line 12021 "../sokol\sokol_gfx.h"
 $cmn = ((($21)) + 12|0); //@line 12021 "../sokol\sokol_gfx.h"
 $22 = HEAP32[$cmn>>2]|0; //@line 12021 "../sokol\sokol_gfx.h"
 $cmp43 = ($20|0)==($22|0); //@line 12021 "../sokol\sokol_gfx.h"
 if (!($cmp43)) {
  ___assert_fail((19589|0),(6868|0),12021,(19288|0)); //@line 12021 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12021 "../sokol\sokol_gfx.h"
 }
 $23 = $ub_index$addr; //@line 12022 "../sokol\sokol_gfx.h"
 $24 = HEAP32[(30956)>>2]|0; //@line 12022 "../sokol\sokol_gfx.h"
 $shader47 = ((($24)) + 72|0); //@line 12022 "../sokol\sokol_gfx.h"
 $25 = HEAP32[$shader47>>2]|0; //@line 12022 "../sokol\sokol_gfx.h"
 $cmn48 = ((($25)) + 12|0); //@line 12022 "../sokol\sokol_gfx.h"
 $26 = $stage_index$addr; //@line 12022 "../sokol\sokol_gfx.h"
 $arrayidx = (($cmn48) + (($26*120)|0)|0); //@line 12022 "../sokol\sokol_gfx.h"
 $27 = HEAP32[$arrayidx>>2]|0; //@line 12022 "../sokol\sokol_gfx.h"
 $cmp49 = ($23|0)<($27|0); //@line 12022 "../sokol\sokol_gfx.h"
 if (!($cmp49)) {
  ___assert_fail((19671|0),(6868|0),12022,(19288|0)); //@line 12022 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12022 "../sokol\sokol_gfx.h"
 }
 $28 = $num_bytes$addr; //@line 12023 "../sokol\sokol_gfx.h"
 $29 = HEAP32[(30956)>>2]|0; //@line 12023 "../sokol\sokol_gfx.h"
 $shader53 = ((($29)) + 72|0); //@line 12023 "../sokol\sokol_gfx.h"
 $30 = HEAP32[$shader53>>2]|0; //@line 12023 "../sokol\sokol_gfx.h"
 $cmn54 = ((($30)) + 12|0); //@line 12023 "../sokol\sokol_gfx.h"
 $31 = $stage_index$addr; //@line 12023 "../sokol\sokol_gfx.h"
 $arrayidx56 = (($cmn54) + (($31*120)|0)|0); //@line 12023 "../sokol\sokol_gfx.h"
 $uniform_blocks = ((($arrayidx56)) + 8|0); //@line 12023 "../sokol\sokol_gfx.h"
 $32 = $ub_index$addr; //@line 12023 "../sokol\sokol_gfx.h"
 $arrayidx57 = (($uniform_blocks) + ($32<<2)|0); //@line 12023 "../sokol\sokol_gfx.h"
 $33 = HEAP32[$arrayidx57>>2]|0; //@line 12023 "../sokol\sokol_gfx.h"
 $cmp58 = ($28|0)<=($33|0); //@line 12023 "../sokol\sokol_gfx.h"
 if (!($cmp58)) {
  ___assert_fail((19755|0),(6868|0),12023,(19288|0)); //@line 12023 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12023 "../sokol\sokol_gfx.h"
 }
 $34 = $num_bytes$addr; //@line 12024 "../sokol\sokol_gfx.h"
 $cmp62 = ($34|0)<=(65536); //@line 12024 "../sokol\sokol_gfx.h"
 if (!($cmp62)) {
  ___assert_fail((19852|0),(6868|0),12024,(19288|0)); //@line 12024 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12024 "../sokol\sokol_gfx.h"
 }
 $35 = HEAP32[(31032)>>2]|0; //@line 12025 "../sokol\sokol_gfx.h"
 $arrayidx66 = ((31068) + ($35<<2)|0); //@line 12025 "../sokol\sokol_gfx.h"
 $36 = HEAP32[$arrayidx66>>2]|0; //@line 12025 "../sokol\sokol_gfx.h"
 $cmp67 = (0|0)!=($36|0); //@line 12025 "../sokol\sokol_gfx.h"
 if ($cmp67) {
  $37 = HEAP32[(31032)>>2]|0; //@line 12027 "../sokol\sokol_gfx.h"
  $arrayidx71 = ((31068) + ($37<<2)|0); //@line 12027 "../sokol\sokol_gfx.h"
  $38 = HEAP32[$arrayidx71>>2]|0; //@line 12027 "../sokol\sokol_gfx.h"
  $39 = HEAP32[(30984)>>2]|0; //@line 12027 "../sokol\sokol_gfx.h"
  $add$ptr = (($38) + ($39)|0); //@line 12027 "../sokol\sokol_gfx.h"
  $dst_ptr = $add$ptr; //@line 12027 "../sokol\sokol_gfx.h"
  $40 = $dst_ptr; //@line 12028 "../sokol\sokol_gfx.h"
  $41 = $data$addr; //@line 12028 "../sokol\sokol_gfx.h"
  $42 = $num_bytes$addr; //@line 12028 "../sokol\sokol_gfx.h"
  _memcpy(($40|0),($41|0),($42|0))|0; //@line 12028 "../sokol\sokol_gfx.h"
  $43 = HEAP32[(30984)>>2]|0; //@line 12029 "../sokol\sokol_gfx.h"
  $44 = $stage_index$addr; //@line 12029 "../sokol\sokol_gfx.h"
  $arrayidx72 = ((30988) + ($44<<4)|0); //@line 12029 "../sokol\sokol_gfx.h"
  $45 = $ub_index$addr; //@line 12029 "../sokol\sokol_gfx.h"
  $arrayidx73 = (($arrayidx72) + ($45<<2)|0); //@line 12029 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx73>>2] = $43; //@line 12029 "../sokol\sokol_gfx.h"
  $46 = HEAP32[(30948)>>2]|0; //@line 12030 "../sokol\sokol_gfx.h"
  $47 = HEAP32[(31024)>>2]|0; //@line 12032 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderSetBindGroup(($46|0),0,($47|0),8,((30988)|0)); //@line 12030 "../sokol\sokol_gfx.h"
  $48 = HEAP32[(30984)>>2]|0; //@line 12035 "../sokol\sokol_gfx.h"
  $49 = $num_bytes$addr; //@line 12035 "../sokol\sokol_gfx.h"
  $add74 = (($48) + ($49))|0; //@line 12035 "../sokol\sokol_gfx.h"
  $add75 = (($add74) + 255)|0; //@line 12035 "../sokol\sokol_gfx.h"
  $and76 = $add75 & -256; //@line 12035 "../sokol\sokol_gfx.h"
  HEAP32[(30984)>>2] = $and76; //@line 12035 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12036 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((19873|0),(6868|0),12025,(19288|0)); //@line 12025 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12025 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_draw($base_element,$num_elements,$num_instances) {
 $base_element = $base_element|0;
 $num_elements = $num_elements|0;
 $num_instances = $num_instances|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $base_element$addr = 0, $num_elements$addr = 0, $num_instances$addr = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $base_element$addr = $base_element;
 $num_elements$addr = $num_elements;
 $num_instances$addr = $num_instances;
 $0 = HEAP8[(30893)>>0]|0; //@line 12039 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 12039 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18866|0),(6868|0),12039,(19923|0)); //@line 12039 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12039 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30948)>>2]|0; //@line 12040 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 12040 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((18723|0),(6868|0),12040,(19923|0)); //@line 12040 "../sokol\sokol_gfx.h"
  // unreachable; //@line 12040 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP8[(30894)>>0]|0; //@line 12041 "../sokol\sokol_gfx.h"
 $tobool5 = $2&1; //@line 12041 "../sokol\sokol_gfx.h"
 $3 = HEAP32[(30948)>>2]|0;
 $4 = $num_elements$addr;
 $5 = $num_instances$addr;
 $6 = $base_element$addr;
 if ($tobool5) {
  _wgpuRenderPassEncoderDrawIndexed(($3|0),($4|0),($5|0),($6|0),0,0); //@line 12042 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12047 "../sokol\sokol_gfx.h"
 } else {
  _wgpuRenderPassEncoderDraw(($3|0),($4|0),($5|0),($6|0),0); //@line 12045 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 12047 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_end_pass() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(30893)>>0]|0; //@line 11842 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 11842 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((18866|0),(6868|0),11842,(19937|0)); //@line 11842 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11842 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30948)>>2]|0; //@line 11843 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11843 "../sokol\sokol_gfx.h"
 if ($tobool1) {
  HEAP8[(30893)>>0] = 0; //@line 11844 "../sokol\sokol_gfx.h"
  $2 = HEAP32[(30948)>>2]|0; //@line 11845 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderEndPass(($2|0)); //@line 11845 "../sokol\sokol_gfx.h"
  $3 = HEAP32[(30948)>>2]|0; //@line 11846 "../sokol\sokol_gfx.h"
  _wgpuRenderPassEncoderRelease(($3|0)); //@line 11846 "../sokol\sokol_gfx.h"
  HEAP32[(30948)>>2] = 0; //@line 11847 "../sokol\sokol_gfx.h"
  return; //@line 11848 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((18723|0),(6868|0),11843,(19937|0)); //@line 11843 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11843 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_commit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx19 = 0, $arrayidx20 = 0, $arrayidx27 = 0, $call = 0, $call18 = 0;
 var $call28 = 0, $call29 = 0, $cmd_buf_desc = 0, $cmd_bufs = 0, $cmd_enc_desc = 0, $tobool = 0, $tobool1 = 0, $tobool14 = 0, $tobool21 = 0, $tobool5 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $cmd_bufs = sp + 16|0;
 $cmd_buf_desc = sp + 8|0;
 $cmd_enc_desc = sp;
 $0 = HEAP8[(30893)>>0]|0; //@line 11851 "../sokol\sokol_gfx.h"
 $tobool = $0&1; //@line 11851 "../sokol\sokol_gfx.h"
 if ($tobool) {
  ___assert_fail((18438|0),(6868|0),11851,(19955|0)); //@line 11851 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11851 "../sokol\sokol_gfx.h"
 }
 $1 = HEAP32[(30936)>>2]|0; //@line 11852 "../sokol\sokol_gfx.h"
 $tobool1 = ($1|0)!=(0|0); //@line 11852 "../sokol\sokol_gfx.h"
 if (!($tobool1)) {
  ___assert_fail((8913|0),(6868|0),11852,(19955|0)); //@line 11852 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11852 "../sokol\sokol_gfx.h"
 }
 $2 = HEAP32[(30940)>>2]|0; //@line 11853 "../sokol\sokol_gfx.h"
 $tobool5 = ($2|0)!=(0|0); //@line 11853 "../sokol\sokol_gfx.h"
 if (!($tobool5)) {
  ___assert_fail((8964|0),(6868|0),11853,(19955|0)); //@line 11853 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11853 "../sokol\sokol_gfx.h"
 }
 $3 = HEAP32[(30944)>>2]|0; //@line 11854 "../sokol\sokol_gfx.h"
 $tobool9 = ($3|0)!=(0|0); //@line 11854 "../sokol\sokol_gfx.h"
 if (!($tobool9)) {
  ___assert_fail((8988|0),(6868|0),11854,(19955|0)); //@line 11854 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11854 "../sokol\sokol_gfx.h"
 }
 __sg_wgpu_ubpool_flush(); //@line 11857 "../sokol\sokol_gfx.h"
 __sg_wgpu_staging_unmap(); //@line 11858 "../sokol\sokol_gfx.h"
 ;HEAP32[$cmd_buf_desc>>2]=0|0;HEAP32[$cmd_buf_desc+4>>2]=0|0; //@line 11863 "../sokol\sokol_gfx.h"
 $4 = HEAP32[(30944)>>2]|0; //@line 11864 "../sokol\sokol_gfx.h"
 $call = (_wgpuCommandEncoderFinish(($4|0),($cmd_buf_desc|0))|0); //@line 11864 "../sokol\sokol_gfx.h"
 HEAP32[$cmd_bufs>>2] = $call; //@line 11864 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$cmd_bufs>>2]|0; //@line 11865 "../sokol\sokol_gfx.h"
 $tobool14 = ($5|0)!=(0|0); //@line 11865 "../sokol\sokol_gfx.h"
 if (!($tobool14)) {
  ___assert_fail((19971|0),(6868|0),11865,(19955|0)); //@line 11865 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11865 "../sokol\sokol_gfx.h"
 }
 $6 = HEAP32[(30944)>>2]|0; //@line 11866 "../sokol\sokol_gfx.h"
 _wgpuCommandEncoderRelease(($6|0)); //@line 11866 "../sokol\sokol_gfx.h"
 HEAP32[(30944)>>2] = 0; //@line 11867 "../sokol\sokol_gfx.h"
 $7 = HEAP32[(30940)>>2]|0; //@line 11869 "../sokol\sokol_gfx.h"
 $call18 = (_wgpuCommandEncoderFinish(($7|0),($cmd_buf_desc|0))|0); //@line 11869 "../sokol\sokol_gfx.h"
 $arrayidx19 = ((($cmd_bufs)) + 4|0); //@line 11869 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx19>>2] = $call18; //@line 11869 "../sokol\sokol_gfx.h"
 $arrayidx20 = ((($cmd_bufs)) + 4|0); //@line 11870 "../sokol\sokol_gfx.h"
 $8 = HEAP32[$arrayidx20>>2]|0; //@line 11870 "../sokol\sokol_gfx.h"
 $tobool21 = ($8|0)!=(0|0); //@line 11870 "../sokol\sokol_gfx.h"
 if ($tobool21) {
  $9 = HEAP32[(30940)>>2]|0; //@line 11871 "../sokol\sokol_gfx.h"
  _wgpuCommandEncoderRelease(($9|0)); //@line 11871 "../sokol\sokol_gfx.h"
  HEAP32[(30940)>>2] = 0; //@line 11872 "../sokol\sokol_gfx.h"
  $10 = HEAP32[(30936)>>2]|0; //@line 11874 "../sokol\sokol_gfx.h"
  _wgpuQueueSubmit(($10|0),2,($cmd_bufs|0)); //@line 11874 "../sokol\sokol_gfx.h"
  $11 = HEAP32[$cmd_bufs>>2]|0; //@line 11876 "../sokol\sokol_gfx.h"
  _wgpuCommandBufferRelease(($11|0)); //@line 11876 "../sokol\sokol_gfx.h"
  $arrayidx27 = ((($cmd_bufs)) + 4|0); //@line 11877 "../sokol\sokol_gfx.h"
  $12 = HEAP32[$arrayidx27>>2]|0; //@line 11877 "../sokol\sokol_gfx.h"
  _wgpuCommandBufferRelease(($12|0)); //@line 11877 "../sokol\sokol_gfx.h"
  ;HEAP32[$cmd_enc_desc>>2]=0|0;HEAP32[$cmd_enc_desc+4>>2]=0|0; //@line 11881 "../sokol\sokol_gfx.h"
  $13 = HEAP32[(30904)>>2]|0; //@line 11882 "../sokol\sokol_gfx.h"
  $call28 = (_wgpuDeviceCreateCommandEncoder(($13|0),($cmd_enc_desc|0))|0); //@line 11882 "../sokol\sokol_gfx.h"
  HEAP32[(30944)>>2] = $call28; //@line 11882 "../sokol\sokol_gfx.h"
  $14 = HEAP32[(30904)>>2]|0; //@line 11883 "../sokol\sokol_gfx.h"
  $call29 = (_wgpuDeviceCreateCommandEncoder(($14|0),($cmd_enc_desc|0))|0); //@line 11883 "../sokol\sokol_gfx.h"
  HEAP32[(30940)>>2] = $call29; //@line 11883 "../sokol\sokol_gfx.h"
  __sg_wgpu_ubpool_next_frame(0); //@line 11886 "../sokol\sokol_gfx.h"
  __sg_wgpu_staging_next_frame(0); //@line 11887 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11888 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((19983|0),(6868|0),11870,(19955|0)); //@line 11870 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11870 "../sokol\sokol_gfx.h"
 }
}
function __sg_wgpu_ubpool_flush() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $cmp = 0, $cur = 0, $dst_buf = 0, $src_buf = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(31032)>>2]|0; //@line 10888 "../sokol\sokol_gfx.h"
 $cur = $0; //@line 10888 "../sokol\sokol_gfx.h"
 $1 = $cur; //@line 10889 "../sokol\sokol_gfx.h"
 $arrayidx = ((31068) + ($1<<2)|0); //@line 10889 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$arrayidx>>2]|0; //@line 10889 "../sokol\sokol_gfx.h"
 $tobool = ($2|0)!=(0|0); //@line 10889 "../sokol\sokol_gfx.h"
 if (!($tobool)) {
  ___assert_fail((9282|0),(6868|0),10889,(19995|0)); //@line 10889 "../sokol\sokol_gfx.h"
  // unreachable; //@line 10889 "../sokol\sokol_gfx.h"
 }
 $3 = $cur; //@line 10890 "../sokol\sokol_gfx.h"
 $arrayidx1 = ((31068) + ($3<<2)|0); //@line 10890 "../sokol\sokol_gfx.h"
 HEAP32[$arrayidx1>>2] = 0; //@line 10890 "../sokol\sokol_gfx.h"
 $4 = $cur; //@line 10891 "../sokol\sokol_gfx.h"
 $arrayidx2 = ((31036) + ($4<<2)|0); //@line 10891 "../sokol\sokol_gfx.h"
 $5 = HEAP32[$arrayidx2>>2]|0; //@line 10891 "../sokol\sokol_gfx.h"
 $src_buf = $5; //@line 10891 "../sokol\sokol_gfx.h"
 $6 = $src_buf; //@line 10892 "../sokol\sokol_gfx.h"
 _wgpuBufferUnmap(($6|0)); //@line 10892 "../sokol\sokol_gfx.h"
 $7 = HEAP32[(30984)>>2]|0; //@line 10893 "../sokol\sokol_gfx.h"
 $cmp = ($7>>>0)>(0); //@line 10893 "../sokol\sokol_gfx.h"
 if (!($cmp)) {
  STACKTOP = sp;return; //@line 10897 "../sokol\sokol_gfx.h"
 }
 $8 = HEAP32[(31020)>>2]|0; //@line 10894 "../sokol\sokol_gfx.h"
 $dst_buf = $8; //@line 10894 "../sokol\sokol_gfx.h"
 $9 = HEAP32[(30940)>>2]|0; //@line 10895 "../sokol\sokol_gfx.h"
 $10 = $src_buf; //@line 10895 "../sokol\sokol_gfx.h"
 $11 = $dst_buf; //@line 10895 "../sokol\sokol_gfx.h"
 $12 = HEAP32[(30984)>>2]|0; //@line 10895 "../sokol\sokol_gfx.h"
 _wgpuCommandEncoderCopyBufferToBuffer(($9|0),($10|0),0,0,($11|0),0,0,($12|0),0); //@line 10895 "../sokol\sokol_gfx.h"
 STACKTOP = sp;return; //@line 10897 "../sokol\sokol_gfx.h"
}
function __sg_wgpu_staging_unmap() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx2 = 0, $cur = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(31112)>>2]|0; //@line 11134 "../sokol\sokol_gfx.h"
 $cur = $0; //@line 11134 "../sokol\sokol_gfx.h"
 $1 = $cur; //@line 11135 "../sokol\sokol_gfx.h"
 $arrayidx = ((31148) + ($1<<2)|0); //@line 11135 "../sokol\sokol_gfx.h"
 $2 = HEAP32[$arrayidx>>2]|0; //@line 11135 "../sokol\sokol_gfx.h"
 $tobool = ($2|0)!=(0|0); //@line 11135 "../sokol\sokol_gfx.h"
 if ($tobool) {
  $3 = $cur; //@line 11136 "../sokol\sokol_gfx.h"
  $arrayidx1 = ((31148) + ($3<<2)|0); //@line 11136 "../sokol\sokol_gfx.h"
  HEAP32[$arrayidx1>>2] = 0; //@line 11136 "../sokol\sokol_gfx.h"
  $4 = $cur; //@line 11137 "../sokol\sokol_gfx.h"
  $arrayidx2 = ((31116) + ($4<<2)|0); //@line 11137 "../sokol\sokol_gfx.h"
  $5 = HEAP32[$arrayidx2>>2]|0; //@line 11137 "../sokol\sokol_gfx.h"
  _wgpuBufferUnmap(($5|0)); //@line 11137 "../sokol\sokol_gfx.h"
  STACKTOP = sp;return; //@line 11138 "../sokol\sokol_gfx.h"
 } else {
  ___assert_fail((9666|0),(6868|0),11135,(20017|0)); //@line 11135 "../sokol\sokol_gfx.h"
  // unreachable; //@line 11135 "../sokol\sokol_gfx.h"
 }
}
function _wgpu_start($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp17 = 0, $cmp5 = 0;
 var $cond = 0, $desc$addr = 0, $frame_cb = 0, $height = 0, $init_cb = 0, $shutdown_cb = 0, $title = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool13 = 0, $tobool9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr; //@line 12 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool = ($0|0)!=(0|0); //@line 12 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($tobool)) {
  ___assert_fail((20040|0),(20045|0),12,(20080|0)); //@line 12 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 12 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $1 = $desc$addr; //@line 13 "../sokol-samples/wgpu/wgpu_entry.c"
 $title = ((($1)) + 12|0); //@line 13 "../sokol-samples/wgpu/wgpu_entry.c"
 $2 = HEAP32[$title>>2]|0; //@line 13 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool1 = ($2|0)!=(0|0); //@line 13 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($tobool1)) {
  ___assert_fail((20091|0),(20045|0),13,(20080|0)); //@line 13 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 13 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $3 = $desc$addr; //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 $4 = HEAP32[$3>>2]|0; //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp = ($4|0)>(0); //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($cmp)) {
  ___assert_fail((20103|0),(20045|0),14,(20080|0)); //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $5 = $desc$addr; //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 $height = ((($5)) + 4|0); //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 $6 = HEAP32[$height>>2]|0; //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp5 = ($6|0)>(0); //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($cmp5)) {
  ___assert_fail((20103|0),(20045|0),14,(20080|0)); //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 14 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $7 = $desc$addr; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $init_cb = ((($7)) + 16|0); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $8 = HEAP32[$init_cb>>2]|0; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool9 = ($8|0)!=(0|0); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($tobool9)) {
  ___assert_fail((20143|0),(20045|0),15,(20080|0)); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $9 = $desc$addr; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $frame_cb = ((($9)) + 20|0); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $10 = HEAP32[$frame_cb>>2]|0; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool11 = ($10|0)!=(0|0); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($tobool11)) {
  ___assert_fail((20143|0),(20045|0),15,(20080|0)); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $11 = $desc$addr; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $shutdown_cb = ((($11)) + 24|0); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $12 = HEAP32[$shutdown_cb>>2]|0; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool13 = ($12|0)!=(0|0); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 if ($tobool13) {
  $13 = $desc$addr; //@line 16 "../sokol-samples/wgpu/wgpu_entry.c"
  dest=31180; src=$13; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 16 "../sokol-samples/wgpu/wgpu_entry.c"
  $14 = HEAP32[(31188)>>2]|0; //@line 17 "../sokol-samples/wgpu/wgpu_entry.c"
  $cmp17 = ($14|0)==(0); //@line 17 "../sokol-samples/wgpu/wgpu_entry.c"
  $15 = HEAP32[(31188)>>2]|0; //@line 17 "../sokol-samples/wgpu/wgpu_entry.c"
  $cond = $cmp17 ? 1 : $15; //@line 17 "../sokol-samples/wgpu/wgpu_entry.c"
  HEAP32[(31188)>>2] = $cond; //@line 17 "../sokol-samples/wgpu/wgpu_entry.c"
  $16 = $desc$addr; //@line 18 "../sokol-samples/wgpu/wgpu_entry.c"
  _wgpu_platform_start($16); //@line 18 "../sokol-samples/wgpu/wgpu_entry.c"
  STACKTOP = sp;return; //@line 19 "../sokol-samples/wgpu/wgpu_entry.c"
 } else {
  ___assert_fail((20143|0),(20045|0),15,(20080|0)); //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 15 "../sokol-samples/wgpu/wgpu_entry.c"
 }
}
function _wgpu_width() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(31236)>>2]|0; //@line 22 "../sokol-samples/wgpu/wgpu_entry.c"
 return ($0|0); //@line 22 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _wgpu_height() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(31240)>>2]|0; //@line 26 "../sokol-samples/wgpu/wgpu_entry.c"
 return ($0|0); //@line 26 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _wgpu_get_context($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $call = 0, $d3d11 = 0, $depth_format = 0, $depth_stencil_view_cb = 0, $depth_stencil_view_userdata_cb = 0, $gl = 0, $metal = 0, $render_view_cb = 0, $render_view_userdata_cb = 0, $resolve_view_cb = 0, $resolve_view_userdata_cb = 0, $sample_count = 0, $user_data = 0, $wgpu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_wgpu_get_color_format()|0); //@line 68 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$agg$result>>2] = $call; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $depth_format = ((($agg$result)) + 4|0); //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$depth_format>>2] = 0; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $sample_count = ((($agg$result)) + 8|0); //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $0 = HEAP32[(31188)>>2]|0; //@line 69 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$sample_count>>2] = $0; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $gl = ((($agg$result)) + 12|0); //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 ;HEAP8[$gl>>0]=0|0; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $metal = ((($agg$result)) + 16|0); //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 ;HEAP32[$metal>>2]=0|0;HEAP32[$metal+4>>2]=0|0;HEAP32[$metal+8>>2]=0|0;HEAP32[$metal+12>>2]=0|0;HEAP32[$metal+16>>2]=0|0;HEAP32[$metal+20>>2]=0|0; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $d3d11 = ((($agg$result)) + 40|0); //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 ;HEAP32[$d3d11>>2]=0|0;HEAP32[$d3d11+4>>2]=0|0;HEAP32[$d3d11+8>>2]=0|0;HEAP32[$d3d11+12>>2]=0|0;HEAP32[$d3d11+16>>2]=0|0;HEAP32[$d3d11+20>>2]=0|0;HEAP32[$d3d11+24>>2]=0|0; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $wgpu = ((($agg$result)) + 68|0); //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
 $1 = HEAP32[(31244)>>2]|0; //@line 71 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$wgpu>>2] = $1; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $render_view_cb = ((($wgpu)) + 4|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$render_view_cb>>2] = 0; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $render_view_userdata_cb = ((($wgpu)) + 8|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$render_view_userdata_cb>>2] = 210; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $resolve_view_cb = ((($wgpu)) + 12|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$resolve_view_cb>>2] = 0; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $resolve_view_userdata_cb = ((($wgpu)) + 16|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$resolve_view_userdata_cb>>2] = 211; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $depth_stencil_view_cb = ((($wgpu)) + 20|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$depth_stencil_view_cb>>2] = 0; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $depth_stencil_view_userdata_cb = ((($wgpu)) + 24|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$depth_stencil_view_userdata_cb>>2] = 212; //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 $user_data = ((($wgpu)) + 28|0); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$user_data>>2] = (-1414664179); //@line 70 "../sokol-samples/wgpu/wgpu_entry.c"
 return; //@line 67 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _wgpu_get_color_format() {
 var $0 = 0, $1 = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(31252)>>2]|0; //@line 58 "../sokol-samples/wgpu/wgpu_entry.c"
 switch ($0|0) {
 case 18:  {
  $retval = 23; //@line 59 "../sokol-samples/wgpu/wgpu_entry.c"
  break;
 }
 case 23:  {
  $retval = 27; //@line 60 "../sokol-samples/wgpu/wgpu_entry.c"
  break;
 }
 default: {
  $retval = 1; //@line 62 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 }
 $1 = $retval; //@line 64 "../sokol-samples/wgpu/wgpu_entry.c"
 STACKTOP = sp;return ($1|0); //@line 64 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _wgpu_get_render_view($user_data) {
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp1 = 0, $retval = 0, $tobool = 0, $tobool5 = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $user_data$addr = $user_data;
 $0 = $user_data$addr; //@line 30 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp = ((-1414664179)|0)==($0|0); //@line 30 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($cmp)) {
  ___assert_fail((20196|0),(20045|0),30,(20303|0)); //@line 30 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 30 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $1 = HEAP32[(31188)>>2]|0; //@line 31 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp1 = ($1|0)>(1); //@line 31 "../sokol-samples/wgpu/wgpu_entry.c"
 if ($cmp1) {
  $2 = HEAP32[(31268)>>2]|0; //@line 32 "../sokol-samples/wgpu/wgpu_entry.c"
  $tobool = ($2|0)!=(0|0); //@line 32 "../sokol-samples/wgpu/wgpu_entry.c"
  if (!($tobool)) {
   ___assert_fail((20324|0),(20045|0),32,(20303|0)); //@line 32 "../sokol-samples/wgpu/wgpu_entry.c"
   // unreachable; //@line 32 "../sokol-samples/wgpu/wgpu_entry.c"
  }
  $3 = HEAP32[(31268)>>2]|0; //@line 33 "../sokol-samples/wgpu/wgpu_entry.c"
  $retval = $3; //@line 33 "../sokol-samples/wgpu/wgpu_entry.c"
  $6 = $retval; //@line 39 "../sokol-samples/wgpu/wgpu_entry.c"
  STACKTOP = sp;return ($6|0); //@line 39 "../sokol-samples/wgpu/wgpu_entry.c"
 } else {
  $4 = HEAP32[(31264)>>2]|0; //@line 36 "../sokol-samples/wgpu/wgpu_entry.c"
  $tobool5 = ($4|0)!=(0|0); //@line 36 "../sokol-samples/wgpu/wgpu_entry.c"
  if (!($tobool5)) {
   ___assert_fail((20277|0),(20045|0),36,(20303|0)); //@line 36 "../sokol-samples/wgpu/wgpu_entry.c"
   // unreachable; //@line 36 "../sokol-samples/wgpu/wgpu_entry.c"
  }
  $5 = HEAP32[(31264)>>2]|0; //@line 37 "../sokol-samples/wgpu/wgpu_entry.c"
  $retval = $5; //@line 37 "../sokol-samples/wgpu/wgpu_entry.c"
  $6 = $retval; //@line 39 "../sokol-samples/wgpu/wgpu_entry.c"
  STACKTOP = sp;return ($6|0); //@line 39 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 return (0)|0;
}
function _wgpu_get_resolve_view($user_data) {
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $retval = 0, $tobool = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $user_data$addr = $user_data;
 $0 = $user_data$addr; //@line 42 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp = ((-1414664179)|0)==($0|0); //@line 42 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($cmp)) {
  ___assert_fail((20196|0),(20045|0),42,(20255|0)); //@line 42 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 42 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $1 = HEAP32[(31188)>>2]|0; //@line 43 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp1 = ($1|0)>(1); //@line 43 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($cmp1)) {
  $retval = 0; //@line 48 "../sokol-samples/wgpu/wgpu_entry.c"
  $4 = $retval; //@line 50 "../sokol-samples/wgpu/wgpu_entry.c"
  STACKTOP = sp;return ($4|0); //@line 50 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $2 = HEAP32[(31264)>>2]|0; //@line 44 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool = ($2|0)!=(0|0); //@line 44 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($tobool)) {
  ___assert_fail((20277|0),(20045|0),44,(20255|0)); //@line 44 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 44 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $3 = HEAP32[(31264)>>2]|0; //@line 45 "../sokol-samples/wgpu/wgpu_entry.c"
 $retval = $3; //@line 45 "../sokol-samples/wgpu/wgpu_entry.c"
 $4 = $retval; //@line 50 "../sokol-samples/wgpu/wgpu_entry.c"
 STACKTOP = sp;return ($4|0); //@line 50 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _wgpu_get_depth_stencil_view($user_data) {
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $cmp = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $user_data$addr = $user_data;
 $0 = $user_data$addr; //@line 53 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp = ((-1414664179)|0)==($0|0); //@line 53 "../sokol-samples/wgpu/wgpu_entry.c"
 if ($cmp) {
  $1 = HEAP32[(31272)>>2]|0; //@line 54 "../sokol-samples/wgpu/wgpu_entry.c"
  STACKTOP = sp;return ($1|0); //@line 54 "../sokol-samples/wgpu/wgpu_entry.c"
 } else {
  ___assert_fail((20196|0),(20045|0),53,(20227|0)); //@line 53 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 53 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 return (0)|0;
}
function _wgpu_swapchain_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayLayerCount = 0, $arrayLayerCount15 = 0, $call = 0, $call19 = 0, $call20 = 0;
 var $call5 = 0, $cmp = 0, $cmp1 = 0, $cmp6 = 0, $depth = 0, $depth14 = 0, $dimension = 0, $dimension10 = 0, $ds_desc = 0, $format = 0, $format16 = 0, $height = 0, $height13 = 0, $label = 0, $label8 = 0, $mipLevelCount = 0, $mipLevelCount17 = 0, $msaa_desc = 0, $or$cond = 0, $sampleCount = 0;
 var $sampleCount18 = 0, $size = 0, $size11 = 0, $tobool = 0, $usage = 0, $usage9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $ds_desc = sp + 44|0;
 $msaa_desc = sp;
 $0 = HEAP32[(31248)>>2]|0; //@line 81 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool = ($0|0)!=(0|0); //@line 81 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($tobool)) {
  ___assert_fail((20345|0),(20045|0),81,(20366|0)); //@line 81 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 81 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $1 = HEAP32[(31236)>>2]|0; //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp = ($1|0)>(0); //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
 $2 = HEAP32[(31240)>>2]|0; //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp1 = ($2|0)>(0); //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
 $or$cond = $cmp & $cmp1; //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($or$cond)) {
  ___assert_fail((20386|0),(20045|0),82,(20366|0)); //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
  // unreachable; //@line 82 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 HEAP32[$ds_desc>>2] = 0; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $label = ((($ds_desc)) + 4|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$label>>2] = 0; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $usage = ((($ds_desc)) + 8|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$usage>>2] = 16; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $dimension = ((($ds_desc)) + 12|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$dimension>>2] = 1; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $size = ((($ds_desc)) + 16|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $3 = HEAP32[(31236)>>2]|0; //@line 89 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$size>>2] = $3; //@line 88 "../sokol-samples/wgpu/wgpu_entry.c"
 $height = ((($size)) + 4|0); //@line 88 "../sokol-samples/wgpu/wgpu_entry.c"
 $4 = HEAP32[(31240)>>2]|0; //@line 90 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$height>>2] = $4; //@line 88 "../sokol-samples/wgpu/wgpu_entry.c"
 $depth = ((($size)) + 8|0); //@line 88 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$depth>>2] = 1; //@line 88 "../sokol-samples/wgpu/wgpu_entry.c"
 $arrayLayerCount = ((($ds_desc)) + 28|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$arrayLayerCount>>2] = 1; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $format = ((($ds_desc)) + 32|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$format>>2] = 38; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $mipLevelCount = ((($ds_desc)) + 36|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$mipLevelCount>>2] = 1; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $sampleCount = ((($ds_desc)) + 40|0); //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $5 = HEAP32[(31188)>>2]|0; //@line 96 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$sampleCount>>2] = $5; //@line 85 "../sokol-samples/wgpu/wgpu_entry.c"
 $6 = HEAP32[(31244)>>2]|0; //@line 98 "../sokol-samples/wgpu/wgpu_entry.c"
 $call = (_wgpuDeviceCreateTexture(($6|0),($ds_desc|0))|0); //@line 98 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[(31260)>>2] = $call; //@line 98 "../sokol-samples/wgpu/wgpu_entry.c"
 $7 = HEAP32[(31260)>>2]|0; //@line 99 "../sokol-samples/wgpu/wgpu_entry.c"
 $call5 = (_wgpuTextureCreateView(($7|0),(0|0))|0); //@line 99 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[(31272)>>2] = $call5; //@line 99 "../sokol-samples/wgpu/wgpu_entry.c"
 $8 = HEAP32[(31188)>>2]|0; //@line 102 "../sokol-samples/wgpu/wgpu_entry.c"
 $cmp6 = ($8|0)>(1); //@line 102 "../sokol-samples/wgpu/wgpu_entry.c"
 if (!($cmp6)) {
  STACKTOP = sp;return; //@line 119 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 HEAP32[$msaa_desc>>2] = 0; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $label8 = ((($msaa_desc)) + 4|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$label8>>2] = 0; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $usage9 = ((($msaa_desc)) + 8|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$usage9>>2] = 16; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $dimension10 = ((($msaa_desc)) + 12|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$dimension10>>2] = 1; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $size11 = ((($msaa_desc)) + 16|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $9 = HEAP32[(31236)>>2]|0; //@line 107 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$size11>>2] = $9; //@line 106 "../sokol-samples/wgpu/wgpu_entry.c"
 $height13 = ((($size11)) + 4|0); //@line 106 "../sokol-samples/wgpu/wgpu_entry.c"
 $10 = HEAP32[(31240)>>2]|0; //@line 108 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$height13>>2] = $10; //@line 106 "../sokol-samples/wgpu/wgpu_entry.c"
 $depth14 = ((($size11)) + 8|0); //@line 106 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$depth14>>2] = 1; //@line 106 "../sokol-samples/wgpu/wgpu_entry.c"
 $arrayLayerCount15 = ((($msaa_desc)) + 28|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$arrayLayerCount15>>2] = 1; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $format16 = ((($msaa_desc)) + 32|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $11 = HEAP32[(31252)>>2]|0; //@line 112 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$format16>>2] = $11; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $mipLevelCount17 = ((($msaa_desc)) + 36|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$mipLevelCount17>>2] = 1; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $sampleCount18 = ((($msaa_desc)) + 40|0); //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $12 = HEAP32[(31188)>>2]|0; //@line 114 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[$sampleCount18>>2] = $12; //@line 103 "../sokol-samples/wgpu/wgpu_entry.c"
 $13 = HEAP32[(31244)>>2]|0; //@line 116 "../sokol-samples/wgpu/wgpu_entry.c"
 $call19 = (_wgpuDeviceCreateTexture(($13|0),($msaa_desc|0))|0); //@line 116 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[(31256)>>2] = $call19; //@line 116 "../sokol-samples/wgpu/wgpu_entry.c"
 $14 = HEAP32[(31256)>>2]|0; //@line 117 "../sokol-samples/wgpu/wgpu_entry.c"
 $call20 = (_wgpuTextureCreateView(($14|0),(0|0))|0); //@line 117 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[(31268)>>2] = $call20; //@line 117 "../sokol-samples/wgpu/wgpu_entry.c"
 STACKTOP = sp;return; //@line 119 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _wgpu_swapchain_next_frame() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(31264)>>2]|0; //@line 122 "../sokol-samples/wgpu/wgpu_entry.c"
 $tobool = ($0|0)!=(0|0); //@line 122 "../sokol-samples/wgpu/wgpu_entry.c"
 if ($tobool) {
  $1 = HEAP32[(31264)>>2]|0; //@line 123 "../sokol-samples/wgpu/wgpu_entry.c"
  _wgpuTextureViewRelease(($1|0)); //@line 123 "../sokol-samples/wgpu/wgpu_entry.c"
 }
 $2 = HEAP32[(31248)>>2]|0; //@line 125 "../sokol-samples/wgpu/wgpu_entry.c"
 $call = (_wgpuSwapChainGetCurrentTextureView(($2|0))|0); //@line 125 "../sokol-samples/wgpu/wgpu_entry.c"
 HEAP32[(31264)>>2] = $call; //@line 125 "../sokol-samples/wgpu/wgpu_entry.c"
 return; //@line 126 "../sokol-samples/wgpu/wgpu_entry.c"
}
function _emsc_device_ready($device_id,$swapchain_id,$swapchain_fmt) {
 $device_id = $device_id|0;
 $swapchain_id = $swapchain_id|0;
 $swapchain_fmt = $swapchain_fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $device_id$addr = 0, $swapchain_fmt$addr = 0, $swapchain_id$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $device_id$addr = $device_id;
 $swapchain_id$addr = $swapchain_id;
 $swapchain_fmt$addr = $swapchain_fmt;
 $0 = $device_id$addr; //@line 30 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $1 = $0; //@line 30 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[(31244)>>2] = $1; //@line 30 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $2 = $swapchain_id$addr; //@line 31 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $3 = $2; //@line 31 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[(31248)>>2] = $3; //@line 31 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $4 = $swapchain_fmt$addr; //@line 32 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[(31252)>>2] = $4; //@line 32 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 STACKTOP = sp;return; //@line 33 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
}
function ___em_js__emsc_async_js_setup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20436|0); //@line 36 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
}
function _wgpu_platform_start($desc) {
 $desc = $desc|0;
 var $desc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 _emsc_update_canvas_size(); //@line 80 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 (_emscripten_set_resize_callback_on_thread((21343|0),(0|0),0,(213|0),((2)|0))|0); //@line 81 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 _emscripten_request_animation_frame_loop((214|0),(0|0)); //@line 82 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 STACKTOP = sp;return; //@line 83 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
}
function _emsc_update_canvas_size() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $conv = 0, $conv1 = 0, $conv3 = 0, $conv4 = 0, $h = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $w = sp + 8|0;
 $h = sp;
 (_emscripten_get_element_css_size((21343|0),($w|0),($h|0))|0); //@line 17 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $0 = +HEAPF64[$w>>3]; //@line 18 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $conv = (~~(($0))); //@line 18 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $1 = +HEAPF64[$h>>3]; //@line 18 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $conv1 = (~~(($1))); //@line 18 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 (_emscripten_set_canvas_element_size((21343|0),($conv|0),($conv1|0))|0); //@line 18 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $2 = +HEAPF64[$w>>3]; //@line 19 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $conv3 = (~~(($2))); //@line 19 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[(31236)>>2] = $conv3; //@line 19 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $3 = +HEAPF64[$h>>3]; //@line 20 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $conv4 = (~~(($3))); //@line 20 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[(31240)>>2] = $conv4; //@line 20 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $4 = HEAP32[(31236)>>2]|0; //@line 21 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $5 = HEAP32[(31240)>>2]|0; //@line 21 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[$vararg_buffer>>2] = $4; //@line 21 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0); //@line 21 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 HEAP32[$vararg_ptr1>>2] = $5; //@line 21 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 (_printf(21350,$vararg_buffer)|0); //@line 21 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 STACKTOP = sp;return; //@line 22 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
}
function _emsc_size_changed($event_type,$ui_event,$user_data) {
 $event_type = $event_type|0;
 $ui_event = $ui_event|0;
 $user_data = $user_data|0;
 var $event_type$addr = 0, $ui_event$addr = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $event_type$addr = $event_type;
 $ui_event$addr = $ui_event;
 $user_data$addr = $user_data;
 _emsc_update_canvas_size(); //@line 25 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 STACKTOP = sp;return 1; //@line 26 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
}
function _emsc_frame($time,$user_data) {
 $time = +$time;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $time$addr = 0.0, $tobool = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $time$addr = $time;
 $user_data$addr = $user_data;
 $0 = HEAP32[7965]|0; //@line 59 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
 switch ($0|0) {
 case 0:  {
  _emsc_async_js_setup(); //@line 61 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  HEAP32[7965] = 1; //@line 62 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  break;
 }
 case 1:  {
  $1 = HEAP32[(31244)>>2]|0; //@line 65 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  $tobool = ($1|0)!=(0|0); //@line 65 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  if ($tobool) {
   _wgpu_swapchain_init(); //@line 66 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
   $2 = HEAP32[(31196)>>2]|0; //@line 67 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
   FUNCTION_TABLE_v[$2 & 255](); //@line 67 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
   HEAP32[7965] = 2; //@line 68 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  }
  break;
 }
 case 2:  {
  _wgpu_swapchain_next_frame(); //@line 72 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  $3 = HEAP32[(31200)>>2]|0; //@line 73 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  FUNCTION_TABLE_v[$3 & 255](); //@line 73 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return 1; //@line 76 "../sokol-samples/wgpu/wgpu_entry_wasm.c"
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $conv = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_728($0)|0);
 $call1 = (___wasi_fd_close(($call|0))|0);
 $conv = $call1&65535;
 return ($conv|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr34 = 0, $buf9 = 0, $buf_size = 0, $call = 0, $call7 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp19 = 0, $cmp26 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$0 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len21 = 0, $iov_len25 = 0, $iov_len3 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovcnt$1 = 0, $iovs = 0, $num = 0;
 var $or = 0, $rem$0 = 0, $retval$1$ph = 0, $sub = 0, $sub$ptr$sub = 0, $sub23 = 0, $sub30 = 0, $sub39 = 0, $tobool = 0, $wbase = 0, $wend = 0, $wend16 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iovs = sp;
 $num = sp + 16|0;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $add;
 while(1) {
  $2 = HEAP32[$fd>>2]|0;
  $call = (___wasi_fd_write(($2|0),($iov$0|0),($iovcnt$0|0),($num|0))|0);
  $call7 = (___wasi_syscall_ret($call)|0);
  $tobool = ($call7|0)==(0);
  if ($tobool) {
   $$pr = HEAP32[$num>>2]|0;
   $3 = $$pr;
  } else {
   HEAP32[$num>>2] = -1;
   $3 = -1;
  }
  $cmp = ($rem$0|0)==($3|0);
  if ($cmp) {
   label = 6;
   break;
  }
  $cmp14 = ($3|0)<(0);
  if ($cmp14) {
   label = 8;
   break;
  }
  $sub23 = (($rem$0) - ($3))|0;
  $iov_len25 = ((($iov$0)) + 4|0);
  $9 = HEAP32[$iov_len25>>2]|0;
  $cmp26 = ($3>>>0)>($9>>>0);
  $incdec$ptr = ((($iov$0)) + 8|0);
  $iov$1 = $cmp26 ? $incdec$ptr : $iov$0;
  $dec = $cmp26 << 31 >> 31;
  $iovcnt$1 = (($iovcnt$0) + ($dec))|0;
  $sub30 = $cmp26 ? $9 : 0;
  $cnt$0 = (($3) - ($sub30))|0;
  $10 = HEAP32[$iov$1>>2]|0;
  $add$ptr34 = (($10) + ($cnt$0)|0);
  HEAP32[$iov$1>>2] = $add$ptr34;
  $iov_len38 = ((($iov$1)) + 4|0);
  $11 = HEAP32[$iov_len38>>2]|0;
  $sub39 = (($11) - ($cnt$0))|0;
  HEAP32[$iov_len38>>2] = $sub39;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $sub23;
 }
 if ((label|0) == 6) {
  $buf9 = ((($f)) + 44|0);
  $4 = HEAP32[$buf9>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$1$ph = $len;
 }
 else if ((label|0) == 8) {
  $wend16 = ((($f)) + 16|0);
  HEAP32[$wend16>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $7 = HEAP32[$f>>2]|0;
  $or = $7 | 32;
  HEAP32[$f>>2] = $or;
  $cmp19 = ($iovcnt$0|0)==(2);
  if ($cmp19) {
   $retval$1$ph = 0;
  } else {
   $iov_len21 = ((($iov$0)) + 4|0);
   $8 = HEAP32[$iov_len21>>2]|0;
   $sub = (($len) - ($8))|0;
   $retval$1$ph = $sub;
  }
 }
 STACKTOP = sp;return ($retval$1$ph|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $conv = 0, $fd = 0, $ret = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $conv = $whence&255;
 $3 = (___wasi_fd_seek(($2|0),($0|0),($1|0),($conv|0),($ret|0))|0);
 $call1 = (___wasi_syscall_ret($3)|0);
 $tobool = ($call1|0)==(0);
 if ($tobool) {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 } else {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___wasi_syscall_ret($code) {
 $code = $code|0;
 var $call = 0, $cmp = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($code<<16>>16)==(0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $conv = $code&65535;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $conv;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31340|0);
}
function _dummy_728($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___emscripten_stdout_close($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___emscripten_stdout_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function _islower($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(1536|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 61;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,215,216)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_657($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_657($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 21395;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (21396) : (21401);
  $spec$select416 = $tobool9 ? $$ : (21398);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 21414 : 21418;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 21422 : 21426;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_654($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_654($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (1232 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_654($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_654($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_654($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_654($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_654($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_654($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,24141,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_654($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,24141,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_654($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_654($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 255]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 61;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((768 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 21378;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 21378;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 21378 : (21380);
       $spec$select205 = $tobool291 ? $$ : (21379);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 21378;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 21378;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 21388 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 21378;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_654($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 255]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21378;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (21378 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 21378 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_654($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_654($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_654($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_654($f,48,$w$2,$add436,$xor444);
    _pad_654($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_654($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 255]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (1232 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function _pad_654($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_447()|0);
   $locale = ((($call)) + 176|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 25;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 25;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_447() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3496|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 255]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 255]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_657($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $call = 0, $cmp = 0, $narrow = 0, $or = 0, $spec$select = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isdigit($c)|0);
 $tobool = ($call|0)!=(0);
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(6);
 $narrow = $cmp | $tobool;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $cmp = ($call1|0)!=($call|0);
 $sub = $cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 255]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = (_memcpy(($call1|0),($s|0),($add|0))|0);
  $retval$0 = $call3;
 }
 return ($retval$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((31344|0));
 return (31352|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((31344|0));
 return;
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[873]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[873]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 255]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 7]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and13 = 0, $and14 = 0, $and2 = 0, $and247 = 0, $cmp = 0, $cmp10 = 0, $cmp1037 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0;
 var $d$addr$3 = 0, $dec = 0, $dec32 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $neg = 0, $or$cond = 0, $or$cond50 = 0, $s$addr$0$lcssa = 0;
 var $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool15 = 0, $tobool25 = 0, $tobool2530 = 0, $tobool28 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $tobool4 = 0, $tobool48 = 0, $tobool7 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $and247 = $0 & 3;
   $tobool48 = ($and247|0)!=(0);
   $tobool349 = ($n|0)!=(0);
   $or$cond50 = $tobool349 & $tobool48;
   if ($or$cond50) {
    $d$addr$051 = $d;$n$addr$053 = $n;$s$addr$052 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$052>>0]|0;
     HEAP8[$d$addr$051>>0] = $4;
     $tobool4 = ($4<<24>>24)==(0);
     if ($tobool4) {
      $d$addr$3 = $d$addr$051;$n$addr$4 = $n$addr$053;
      break L1;
     }
     $dec = (($n$addr$053) + -1)|0;
     $incdec$ptr = ((($s$addr$052)) + 1|0);
     $incdec$ptr5 = ((($d$addr$051)) + 1|0);
     $5 = $incdec$ptr;
     $and2 = $5 & 3;
     $tobool = ($and2|0)!=(0);
     $tobool3 = ($dec|0)!=(0);
     $or$cond = $tobool3 & $tobool;
     if ($or$cond) {
      $d$addr$051 = $incdec$ptr5;$n$addr$053 = $dec;$s$addr$052 = $incdec$ptr;
     } else {
      $d$addr$0$lcssa = $incdec$ptr5;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $incdec$ptr;$tobool3$lcssa = $tobool3;
      break;
     }
    }
   } else {
    $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $n;$s$addr$0$lcssa = $s;$tobool3$lcssa = $tobool349;
   }
   if ($tobool3$lcssa) {
    $$pr = HEAP8[$s$addr$0$lcssa>>0]|0;
    $tobool7 = ($$pr<<24>>24)==(0);
    if ($tobool7) {
     $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = $n$addr$0$lcssa;
    } else {
     $cmp1037 = ($n$addr$0$lcssa>>>0)>(3);
     L11: do {
      if ($cmp1037) {
       $n$addr$138 = $n$addr$0$lcssa;$wd$039 = $d$addr$0$lcssa;$ws$040 = $s$addr$0$lcssa;
       while(1) {
        $6 = HEAP32[$ws$040>>2]|0;
        $sub = (($6) + -16843009)|0;
        $neg = $6 & -2139062144;
        $and13 = $neg ^ -2139062144;
        $and14 = $and13 & $sub;
        $tobool15 = ($and14|0)==(0);
        if (!($tobool15)) {
         $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
         break L11;
        }
        HEAP32[$wd$039>>2] = $6;
        $sub19 = (($n$addr$138) + -4)|0;
        $incdec$ptr20 = ((($ws$040)) + 4|0);
        $incdec$ptr21 = ((($wd$039)) + 4|0);
        $cmp10 = ($sub19>>>0)>(3);
        if ($cmp10) {
         $n$addr$138 = $sub19;$wd$039 = $incdec$ptr21;$ws$040 = $incdec$ptr20;
        } else {
         $n$addr$1$lcssa = $sub19;$wd$0$lcssa = $incdec$ptr21;$ws$0$lcssa = $incdec$ptr20;
         break;
        }
       }
      } else {
       $n$addr$1$lcssa = $n$addr$0$lcssa;$wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
      }
     } while(0);
     $d$addr$1 = $wd$0$lcssa;$n$addr$2 = $n$addr$1$lcssa;$s$addr$1 = $ws$0$lcssa;
     label = 13;
    }
   } else {
    $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = 0;
   }
  } else {
   $d$addr$1 = $d;$n$addr$2 = $n;$s$addr$1 = $s;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $tobool2530 = ($n$addr$2|0)==(0);
   if ($tobool2530) {
    $d$addr$3 = $d$addr$1;$n$addr$4 = 0;
   } else {
    $d$addr$231 = $d$addr$1;$n$addr$333 = $n$addr$2;$s$addr$232 = $s$addr$1;
    while(1) {
     $7 = HEAP8[$s$addr$232>>0]|0;
     HEAP8[$d$addr$231>>0] = $7;
     $tobool28 = ($7<<24>>24)==(0);
     if ($tobool28) {
      $d$addr$3 = $d$addr$231;$n$addr$4 = $n$addr$333;
      break L17;
     }
     $dec32 = (($n$addr$333) + -1)|0;
     $incdec$ptr33 = ((($s$addr$232)) + 1|0);
     $incdec$ptr34 = ((($d$addr$231)) + 1|0);
     $tobool25 = ($dec32|0)==(0);
     if ($tobool25) {
      $d$addr$3 = $incdec$ptr34;$n$addr$4 = 0;
      break;
     } else {
      $d$addr$231 = $incdec$ptr34;$n$addr$333 = $dec32;$s$addr$232 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 (_memset(($d$addr$3|0),0,($n$addr$4|0))|0);
 return ($d$addr$3|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[872]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call10 = 0, $call10$lobit = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $lbf = 0, $lock = 0, $tobool = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[872]|0;
 $lock = ((($0)) + 76|0);
 $1 = HEAP32[$lock>>2]|0;
 $cmp = ($1|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($0)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $call1 = (_fputs($s,$0)|0);
 $cmp2 = ($call1|0)<(0);
 do {
  if ($cmp2) {
   $5 = -1;
  } else {
   $lbf = ((($0)) + 75|0);
   $2 = HEAP8[$lbf>>0]|0;
   $cmp3 = ($2<<24>>24)==(10);
   if (!($cmp3)) {
    $wpos = ((($0)) + 20|0);
    $3 = HEAP32[$wpos>>2]|0;
    $wend = ((($0)) + 16|0);
    $4 = HEAP32[$wend>>2]|0;
    $cmp5 = ($3>>>0)<($4>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($3)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$3>>0] = 10;
     $5 = 0;
     break;
    }
   }
   $call10 = (___overflow($0,10)|0);
   $call10$lobit = $call10 >> 31;
   $5 = $call10$lobit;
  }
 } while(0);
 $tobool = ($cond|0)==(0);
 if (!($tobool)) {
  ___unlockfile($0);
 }
 return ($5|0);
}
function __ZL28demangling_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__type_name$i = 0, $add$ptr = 0, $call = 0, $call13 = 0, $call4 = 0, $call9 = 0, $cond = 0;
 var $primaryException = 0, $thrown_object = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vfn = 0, $vfn12 = 0, $vtable = 0, $vtable11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $add$ptr = ((($0)) + 80|0);
   $1 = ((($0)) + 48|0);
   $call4 = (__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1)|0);
   if (!($call4)) {
    HEAP32[$vararg_buffer7>>2] = 21566;
    _abort_message(21516,$vararg_buffer7);
    // unreachable;
   }
   $2 = (__ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($1)|0);
   $3 = (getTempRet0() | 0);
   $4 = ($2|0)==(1126902529);
   $5 = ($3|0)==(1129074247);
   $6 = $4 & $5;
   if ($6) {
    $primaryException = ((($0)) + 44|0);
    $7 = HEAP32[$primaryException>>2]|0;
    $cond = $7;
   } else {
    $cond = $add$ptr;
   }
   HEAP32[$thrown_object>>2] = $cond;
   $8 = HEAP32[$0>>2]|0;
   $__type_name$i = ((($8)) + 4|0);
   $9 = HEAP32[$__type_name$i>>2]|0;
   $vtable = HEAP32[420]|0;
   $vfn = ((($vtable)) + 16|0);
   $10 = HEAP32[$vfn>>2]|0;
   $call9 = (FUNCTION_TABLE_iiii[$10 & 255](1680,$8,$thrown_object)|0);
   if ($call9) {
    $11 = HEAP32[$thrown_object>>2]|0;
    $vtable11 = HEAP32[$11>>2]|0;
    $vfn12 = ((($vtable11)) + 8|0);
    $12 = HEAP32[$vfn12>>2]|0;
    $call13 = (FUNCTION_TABLE_ii[$12 & 255]($11)|0);
    HEAP32[$vararg_buffer>>2] = 21566;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $9;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call13;
    _abort_message(21430,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 21566;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $9;
    _abort_message(21475,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(21554,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31356|0);
}
function __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[871]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cmp = 0, $cmp6 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_ptr = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,1704,1688,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    HEAP32[$info>>2] = $1;
    $static_ptr = ((($info)) + 4|0);
    HEAP32[$static_ptr>>2] = 0;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $number_of_dst_type = ((($info)) + 48|0);
    dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $2 = HEAP32[$vfn>>2]|0;
    $3 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$2 & 31]($1,$info,$3,1);
    $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp6 = ($4|0)==(1);
    if ($cmp6) {
     $5 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $5;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZL8is_equalPKSt9type_infoS1_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
      HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZL8is_equalPKSt9type_infoS1_b($x,$y,$use_strcmp) {
 $x = $x|0;
 $y = $y|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $__type_name$i = 0, $__type_name$i2 = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($use_strcmp) {
  $__type_name$i = ((($x)) + 4|0);
  $0 = HEAP32[$__type_name$i>>2]|0;
  $__type_name$i2 = ((($y)) + 4|0);
  $1 = HEAP32[$__type_name$i2>>2]|0;
  $call2 = (_strcmp($0,$1)|0);
  $cmp3 = ($call2|0)==(0);
  $retval$0 = $cmp3;
 } else {
  $cmp = ($x|0)==($y|0);
  $retval$0 = $cmp;
 }
 return ($retval$0|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   $number_to_static_ptr = ((($info)) + 36|0);
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $number_to_static_ptr11 = ((($info)) + 36|0);
    $2 = HEAP32[$number_to_static_ptr11>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr11>>2] = $add;
    $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = ((($info)) + 24|0);
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $number_to_static_ptr = ((($info)) + 36|0);
    HEAP32[$number_to_static_ptr>>2] = 1;
    $number_of_dst_type = ((($info)) + 48|0);
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp7 & $cmp5;
    if (!($or$cond)) {
     break;
    }
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $number_to_static_ptr26 = ((($info)) + 36|0);
    $6 = HEAP32[$number_to_static_ptr26>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr26>>2] = $add;
    $search_done27 = ((($info)) + 54|0);
    HEAP8[$search_done27>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = ((($info)) + 48|0);
   $4 = HEAP32[$number_of_dst_type17>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    $search_done23 = ((($info)) + 54|0);
    HEAP8[$search_done23>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 31]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 255]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $spec$select18 = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $spec$select18;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 31]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0;
 var $cmp11 = 0, $cmp33 = 0, $cmp34 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0, $tobool19 = 0, $vfn = 0;
 var $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZL8is_equalPKSt9type_infoS1_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $__base_type40 = ((($this)) + 8|0);
    $12 = HEAP32[$__base_type40>>2]|0;
    $vtable41 = HEAP32[$12>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $13 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$13 & 255]($12,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     do {
      if (!($cmp11)) {
       $found_our_static_ptr = ((($info)) + 52|0);
       HEAP8[$found_our_static_ptr>>0] = 0;
       $found_any_static_type = ((($info)) + 53|0);
       HEAP8[$found_any_static_type>>0] = 0;
       $__base_type = ((($this)) + 8|0);
       $5 = HEAP32[$__base_type>>2]|0;
       $vtable = HEAP32[$5>>2]|0;
       $vfn = ((($vtable)) + 20|0);
       $6 = HEAP32[$vfn>>2]|0;
       FUNCTION_TABLE_viiiiii[$6 & 31]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
       $7 = HEAP8[$found_any_static_type>>0]|0;
       $tobool16 = ($7<<24>>24)==(0);
       if ($tobool16) {
        HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
        break;
       } else {
        $8 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool19 = ($8<<24>>24)==(0);
        HEAP32[$is_dst_type_derived_from_static_type>>2] = 3;
        if ($tobool19) {
         break;
        } else {
         break L1;
        }
       }
      }
     } while(0);
     HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
     $number_to_dst_ptr = ((($info)) + 40|0);
     $9 = HEAP32[$number_to_dst_ptr>>2]|0;
     $add = (($9) + 1)|0;
     HEAP32[$number_to_dst_ptr>>2] = $add;
     $number_to_static_ptr = ((($info)) + 36|0);
     $10 = HEAP32[$number_to_static_ptr>>2]|0;
     $cmp33 = ($10|0)==(1);
     if (!($cmp33)) {
      break;
     }
     $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
     $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
     $cmp34 = ($11|0)==(2);
     if (!($cmp34)) {
      break;
     }
     $search_done = ((($info)) + 54|0);
     HEAP8[$search_done>>0] = 1;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 31]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call4 = 0, $call8 = 0, $terminateHandler = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $1 = ((($0)) + 48|0);
   $call4 = (__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1)|0);
   if ($call4) {
    $terminateHandler = ((($0)) + 12|0);
    $2 = HEAP32[$terminateHandler>>2]|0;
    __ZSt11__terminatePFvvE($2);
    // unreachable;
   }
  }
 }
 $call8 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($call8);
 // unreachable;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 255]();
 _abort_message(21705,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (217|0);
}
function ___cxa_pure_virtual() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _abort_message(21745,$vararg_buffer);
 // unreachable;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$thrown_type,0)|0);
 return ($call|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0;
 var $and44 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp33 = 0, $cmp70 = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $frombool74 = 0, $frombool77 = 0, $incdec$ptr = 0, $incdec$ptr69 = 0, $or2438 = 0, $or37 = 0;
 var $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool28 = 0, $tobool31 = 0, $tobool36 = 0, $tobool41 = 0, $tobool45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $found_our_static_ptr2 = ((($info)) + 52|0);
  $1 = HEAP8[$found_our_static_ptr2>>0]|0;
  $found_any_static_type5 = ((($info)) + 53|0);
  $2 = HEAP8[$found_any_static_type5>>0]|0;
  $arraydecay = ((($this)) + 16|0);
  $__base_count = ((($this)) + 12|0);
  $3 = HEAP32[$__base_count>>2]|0;
  $add$ptr = (((($this)) + 16|0) + ($3<<3)|0);
  HEAP8[$found_our_static_ptr2>>0] = 0;
  HEAP8[$found_any_static_type5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2>>0]|0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5>>0]|0;
  $or2438 = $5 | $2;
  $cmp = ($3|0)>(1);
  L4: do {
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $__flags = ((($this)) + 8|0);
    $search_done = ((($info)) + 54|0);
    $12 = $5;$9 = $4;$found_any_static_type$0 = $or2438;$found_our_static_ptr$0 = $or37;$p$0 = $incdec$ptr;
    while(1) {
     $6 = HEAP8[$search_done>>0]|0;
     $tobool28 = ($6<<24>>24)==(0);
     $7 = $found_any_static_type$0 & 1;
     $8 = $found_our_static_ptr$0 & 1;
     if (!($tobool28)) {
      $found_any_static_type$1$off0$in = $7;$found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     $tobool31 = ($9<<24>>24)==(0);
     if ($tobool31) {
      $tobool41 = ($12<<24>>24)==(0);
      if (!($tobool41)) {
       $13 = HEAP32[$__flags>>2]|0;
       $and44 = $13 & 1;
       $tobool45 = ($and44|0)==(0);
       if ($tobool45) {
        $found_any_static_type$1$off0$in = $7;$found_our_static_ptr$1$off0$in = $8;
        break L4;
       }
      }
     } else {
      $10 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
      $cmp33 = ($10|0)==(1);
      if ($cmp33) {
       $found_any_static_type$1$off0$in = $7;$found_our_static_ptr$1$off0$in = $8;
       break L4;
      }
      $11 = HEAP32[$__flags>>2]|0;
      $and = $11 & 2;
      $tobool36 = ($and|0)==(0);
      if ($tobool36) {
       $found_any_static_type$1$off0$in = $7;$found_our_static_ptr$1$off0$in = $8;
       break L4;
      }
     }
     HEAP8[$found_our_static_ptr2>>0] = 0;
     HEAP8[$found_any_static_type5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $14 = HEAP8[$found_our_static_ptr2>>0]|0;
     $or5850 = $14 | $8;
     $15 = HEAP8[$found_any_static_type5>>0]|0;
     $or6651 = $15 | $7;
     $incdec$ptr69 = ((($p$0)) + 8|0);
     $cmp70 = ($incdec$ptr69>>>0)<($add$ptr>>>0);
     if ($cmp70) {
      $12 = $15;$9 = $14;$found_any_static_type$0 = $or6651;$found_our_static_ptr$0 = $or5850;$p$0 = $incdec$ptr69;
     } else {
      $found_any_static_type$1$off0$in = $or6651;$found_our_static_ptr$1$off0$in = $or5850;
      break;
     }
    }
   } else {
    $found_any_static_type$1$off0$in = $or2438;$found_our_static_ptr$1$off0$in = $or37;
   }
  } while(0);
  $found_our_static_ptr$1$off0 = ($found_our_static_ptr$1$off0$in<<24>>24)!=(0);
  $found_any_static_type$1$off0 = ($found_any_static_type$1$off0$in<<24>>24)!=(0);
  $frombool74 = $found_our_static_ptr$1$off0&1;
  HEAP8[$found_our_static_ptr2>>0] = $frombool74;
  $frombool77 = $found_any_static_type$1$off0&1;
  HEAP8[$found_any_static_type5>>0] = $frombool77;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__base_count63 = 0, $__flags34 = 0, $__flags72 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $arraydecay62 = 0, $call = 0;
 var $call3 = 0, $cmp = 0, $cmp100 = 0, $cmp106 = 0, $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp27 = 0, $cmp5 = 0, $cmp51 = 0, $cmp53 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0, $does_dst_type_point_to_our_static_type$0 = 0, $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0;
 var $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $extract$t = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0, $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0;
 var $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr52 = 0, $path_dst_ptr_to_static_ptr99 = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $search_done110 = 0, $search_done55 = 0, $search_done79 = 0, $search_done92 = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0, $tobool22 = 0, $tobool25 = 0, $tobool30 = 0, $tobool36 = 0, $tobool74 = 0, $tobool80 = 0;
 var $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZL8is_equalPKSt9type_infoS1_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $arraydecay62 = ((($this)) + 16|0);
    $__base_count63 = ((($this)) + 12|0);
    $17 = HEAP32[$__base_count63>>2]|0;
    $add$ptr64 = (((($this)) + 16|0) + ($17<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay62,$info,$current_ptr,$path_below,$use_strcmp);
    $incdec$ptr69 = ((($this)) + 24|0);
    $cmp70 = ($17|0)>(1);
    if (!($cmp70)) {
     break;
    }
    $__flags72 = ((($this)) + 8|0);
    $18 = HEAP32[$__flags72>>2]|0;
    $and73 = $18 & 2;
    $tobool74 = ($and73|0)==(0);
    if ($tobool74) {
     $number_to_static_ptr76 = ((($info)) + 36|0);
     $19 = HEAP32[$number_to_static_ptr76>>2]|0;
     $cmp77 = ($19|0)==(1);
     if (!($cmp77)) {
      $and88 = $18 & 1;
      $tobool89 = ($and88|0)==(0);
      if ($tobool89) {
       $search_done110 = ((($info)) + 54|0);
       $p65$2 = $incdec$ptr69;
       while(1) {
        $24 = HEAP8[$search_done110>>0]|0;
        $tobool111 = ($24<<24>>24)==(0);
        if (!($tobool111)) {
         break L1;
        }
        $25 = HEAP32[$number_to_static_ptr76>>2]|0;
        $cmp115 = ($25|0)==(1);
        if ($cmp115) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2,$info,$current_ptr,$path_below,$use_strcmp);
        $incdec$ptr120 = ((($p65$2)) + 8|0);
        $cmp121 = ($incdec$ptr120>>>0)<($add$ptr64>>>0);
        if ($cmp121) {
         $p65$2 = $incdec$ptr120;
        } else {
         break L1;
        }
       }
      }
      $path_dst_ptr_to_static_ptr99 = ((($info)) + 24|0);
      $search_done92 = ((($info)) + 54|0);
      $p65$1 = $incdec$ptr69;
      while(1) {
       $21 = HEAP8[$search_done92>>0]|0;
       $tobool93 = ($21<<24>>24)==(0);
       if (!($tobool93)) {
        break L1;
       }
       $22 = HEAP32[$number_to_static_ptr76>>2]|0;
       $cmp97 = ($22|0)==(1);
       if ($cmp97) {
        $23 = HEAP32[$path_dst_ptr_to_static_ptr99>>2]|0;
        $cmp100 = ($23|0)==(1);
        if ($cmp100) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1,$info,$current_ptr,$path_below,$use_strcmp);
       $incdec$ptr105 = ((($p65$1)) + 8|0);
       $cmp106 = ($incdec$ptr105>>>0)<($add$ptr64>>>0);
       if ($cmp106) {
        $p65$1 = $incdec$ptr105;
       } else {
        break L1;
       }
      }
     }
    }
    $search_done79 = ((($info)) + 54|0);
    $p65$0 = $incdec$ptr69;
    while(1) {
     $20 = HEAP8[$search_done79>>0]|0;
     $tobool80 = ($20<<24>>24)==(0);
     if (!($tobool80)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0,$info,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr84 = ((($p65$0)) + 8|0);
     $cmp85 = ($incdec$ptr84>>>0)<($add$ptr64>>>0);
     if ($cmp85) {
      $p65$0 = $incdec$ptr84;
     } else {
      break L1;
     }
    }
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if (!($cmp11)) {
      $arraydecay = ((($this)) + 16|0);
      $__base_count = ((($this)) + 12|0);
      $5 = HEAP32[$__base_count>>2]|0;
      $add$ptr = (((($this)) + 16|0) + ($5<<3)|0);
      $found_our_static_ptr = ((($info)) + 52|0);
      $found_any_static_type = ((($info)) + 53|0);
      $search_done = ((($info)) + 54|0);
      $__flags34 = ((($this)) + 8|0);
      $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
      $does_dst_type_point_to_our_static_type$0 = 0;$is_dst_type_derived_from_static_type13$0$off0 = 0;$p$0 = $arraydecay;
      L33: while(1) {
       $cmp16 = ($p$0>>>0)<($add$ptr>>>0);
       if (!($cmp16)) {
        label = 18;
        break;
       }
       HEAP8[$found_our_static_ptr>>0] = 0;
       HEAP8[$found_any_static_type>>0] = 0;
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
       $6 = HEAP8[$search_done>>0]|0;
       $tobool18 = ($6<<24>>24)==(0);
       if (!($tobool18)) {
        label = 18;
        break;
       }
       $7 = HEAP8[$found_any_static_type>>0]|0;
       $tobool22 = ($7<<24>>24)==(0);
       do {
        if ($tobool22) {
         $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;$is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
        } else {
         $8 = HEAP8[$found_our_static_ptr>>0]|0;
         $tobool25 = ($8<<24>>24)==(0);
         if ($tobool25) {
          $11 = HEAP32[$__flags34>>2]|0;
          $and35 = $11 & 1;
          $tobool36 = ($and35|0)==(0);
          if ($tobool36) {
           $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
           label = 19;
           break L33;
          } else {
           $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;$is_dst_type_derived_from_static_type13$1$off0 = 1;
           break;
          }
         }
         $9 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
         $cmp27 = ($9|0)==(1);
         if ($cmp27) {
          $does_dst_type_point_to_our_static_type$274 = 1;
          label = 19;
          break L33;
         }
         $10 = HEAP32[$__flags34>>2]|0;
         $and = $10 & 2;
         $tobool30 = ($and|0)==(0);
         if ($tobool30) {
          $does_dst_type_point_to_our_static_type$274 = 1;
          label = 19;
          break L33;
         } else {
          $does_dst_type_point_to_our_static_type$1 = 1;$is_dst_type_derived_from_static_type13$1$off0 = 1;
         }
        }
       } while(0);
       $incdec$ptr = ((($p$0)) + 8|0);
       $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;$is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;$p$0 = $incdec$ptr;
      }
      if ((label|0) == 18) {
       if ($is_dst_type_derived_from_static_type13$0$off0) {
        $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
        label = 19;
       } else {
        $12 = 4;$does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
       }
      }
      if ((label|0) == 19) {
       $12 = 3;$does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
      }
      HEAP32[$is_dst_type_derived_from_static_type>>2] = $12;
      $13 = $does_dst_type_point_to_our_static_type$273 & 1;
      $extract$t = ($13<<24>>24)==(0);
      if (!($extract$t)) {
       break;
      }
     }
     HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
     $number_to_dst_ptr = ((($info)) + 40|0);
     $14 = HEAP32[$number_to_dst_ptr>>2]|0;
     $add = (($14) + 1)|0;
     HEAP32[$number_to_dst_ptr>>2] = $add;
     $number_to_static_ptr = ((($info)) + 36|0);
     $15 = HEAP32[$number_to_static_ptr>>2]|0;
     $cmp51 = ($15|0)==(1);
     if (!($cmp51)) {
      break;
     }
     $path_dst_ptr_to_static_ptr52 = ((($info)) + 24|0);
     $16 = HEAP32[$path_dst_ptr_to_static_ptr52>>2]|0;
     $cmp53 = ($16|0)==(2);
     if (!($cmp53)) {
      break;
     }
     $search_done55 = ((($info)) + 54|0);
     HEAP8[$search_done55>>0] = 1;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,0)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $arraydecay = ((($this)) + 16|0);
   $__base_count = ((($this)) + 12|0);
   $1 = HEAP32[$__base_count>>2]|0;
   $add$ptr = (((($this)) + 16|0) + ($1<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay,$info,$adjustedPtr,$path_below);
   $cmp = ($1|0)>(1);
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $2 = HEAP8[$search_done>>0]|0;
     $tobool = ($2<<24>>24)==(0);
     if (!($tobool)) {
      break L1;
     }
     $incdec$ptr6 = ((($p$0)) + 8|0);
     $cmp7 = ($incdec$ptr6>>>0)<($add$ptr>>>0);
     if ($cmp7) {
      $p$0 = $incdec$ptr6;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__offset_flags7$phi$trans$insert = 0, $add$ptr = 0, $add$ptr6 = 0, $and = 0, $and8 = 0, $cmp = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool9 = 0, $vfn = 0, $vtable5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($adjustedPtr|0)==(0|0);
 $__offset_flags7$phi$trans$insert = ((($this)) + 4|0);
 $$pre = HEAP32[$__offset_flags7$phi$trans$insert>>2]|0;
 if ($cmp) {
  $offset_to_base$0 = 0;
 } else {
  $shr = $$pre >> 8;
  $and = $$pre & 1;
  $tobool = ($and|0)==(0);
  if ($tobool) {
   $offset_to_base$0 = $shr;
  } else {
   $0 = HEAP32[$adjustedPtr>>2]|0;
   $add$ptr = (($0) + ($shr)|0);
   $1 = HEAP32[$add$ptr>>2]|0;
   $offset_to_base$0 = $1;
  }
 }
 $2 = HEAP32[$this>>2]|0;
 $vtable5 = HEAP32[$2>>2]|0;
 $vfn = ((($vtable5)) + 28|0);
 $3 = HEAP32[$vfn>>2]|0;
 $add$ptr6 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $and8 = $$pre & 2;
 $tobool9 = ($and8|0)==(0);
 $cond = $tobool9 ? 2 : $path_below;
 FUNCTION_TABLE_viiii[$3 & 31]($2,$info,$add$ptr6,$cond);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 20|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiiii[$4 & 31]($3,$info,$dst_ptr,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 24|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiii[$4 & 255]($3,$info,$add$ptr4,$cond,$use_strcmp);
 return;
}
function ___cxa_demangle($MangledName,$Buf,$N,$Status) {
 $MangledName = $MangledName|0;
 $Buf = $Buf|0;
 $N = $N|0;
 $Status = $Status|0;
 var $Buf$addr$0 = 0, $InternalStatus$0 = 0, $Parser = 0, $S = 0, $add$ptr = 0, $call = 0, $call14 = 0, $call16 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp22 = 0, $cmp6 = 0, $cond = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, $tobool19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4496|0);
 $Parser = sp;
 $S = sp + 4472|0;
 $cmp = ($MangledName|0)==(0|0);
 if ($cmp) {
  label = 3;
 } else {
  $cmp1 = ($Buf|0)!=(0|0);
  $cmp2 = ($N|0)==(0|0);
  $or$cond = $cmp1 & $cmp2;
  if ($or$cond) {
   label = 3;
  } else {
   $call = (_strlen($MangledName)|0);
   $add$ptr = (($MangledName) + ($call)|0);
   __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($Parser,$MangledName,$add$ptr);
   __ZN12_GLOBAL__N_112OutputStreamC2Ev($S);
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($Parser)|0);
   $cmp6 = ($call5|0)==(0|0);
   if ($cmp6) {
    $Buf$addr$0 = $Buf;$InternalStatus$0 = -2;
   } else {
    $call8 = (__ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf,$N,$S)|0);
    if ($call8) {
     __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call5,$S);
     __ZN12_GLOBAL__N_112OutputStreampLEc($S,0);
     if (!($cmp2)) {
      $call14 = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
      HEAP32[$N>>2] = $call14;
     }
     $call16 = (__ZN12_GLOBAL__N_112OutputStream9getBufferEv($S)|0);
     $Buf$addr$0 = $call16;$InternalStatus$0 = 0;
    } else {
     $Buf$addr$0 = $Buf;$InternalStatus$0 = -1;
    }
   }
   $tobool19 = ($Status|0)==(0|0);
   if (!($tobool19)) {
    HEAP32[$Status>>2] = $InternalStatus$0;
   }
   $cmp22 = ($InternalStatus$0|0)==(0);
   $cond = $cmp22 ? $Buf$addr$0 : 0;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($Parser);
   $retval$0 = $cond;
  }
 }
 if ((label|0) == 3) {
  $tobool = ($Status|0)==(0|0);
  if ($tobool) {
   $retval$0 = 0;
  } else {
   HEAP32[$Status>>2] = -3;
   $retval$0 = 0;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this,$0,$1);
 return;
}
function __ZN12_GLOBAL__N_112OutputStreamC2Ev($this) {
 $this = $this|0;
 var $CurrentPackIndex = 0, $CurrentPackMax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPackIndex = ((($this)) + 12|0);
 HEAP32[$CurrentPackIndex>>2] = -1;
 $CurrentPackMax = ((($this)) + 16|0);
 HEAP32[$CurrentPackMax>>2] = -1;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $Encoding = 0, $Encoding20 = 0, $Last = 0, $Last37 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $call = 0, $call12 = 0, $call18 = 0, $call2 = 0;
 var $call21 = 0, $call22 = 0, $call25 = 0, $call28 = 0, $call3 = 0, $call30 = 0, $call33 = 0, $call40 = 0, $call44 = 0, $call48 = 0, $call49 = 0, $call49$ = 0, $call5 = 0, $call50 = 0, $call8 = 0, $cmp = 0, $cmp13 = 0, $cmp23 = 0, $cmp35 = 0, $cmp41 = 0;
 var $cmp51 = 0, $cmp6 = 0, $ref$tmp = 0, $ref$tmp29 = 0, $retval$0 = 0, $retval$2 = 0, $retval$4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp24$byval_copy = sp + 72|0;
 $agg$tmp17$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $Encoding = sp + 40|0;
 $ref$tmp = sp + 32|0;
 $agg$tmp17 = sp + 24|0;
 $Encoding20 = sp + 16|0;
 $agg$tmp24 = sp + 8|0;
 $ref$tmp29 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,21877);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call2)|0);
   HEAP32[$Encoding>>2] = $call3;
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    $retval$0 = 0;
   } else {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp6 = ($call5<<24>>24)==(46);
    if ($cmp6) {
     $0 = HEAP32[$this>>2]|0;
     $Last = ((($this)) + 4|0);
     $1 = HEAP32[$Last>>2]|0;
     __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp,$0,$1);
     $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$Encoding,$ref$tmp)|0);
     HEAP32[$Encoding>>2] = $call8;
     $2 = HEAP32[$Last>>2]|0;
     HEAP32[$this>>2] = $2;
     $3 = $call8;
    } else {
     $3 = $call3;
    }
    $call12 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
    $cmp13 = ($call12|0)==(0);
    $spec$select = $cmp13 ? $3 : 0;
    $retval$0 = $spec$select;
   }
   $retval$4 = $retval$0;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,21880);
   ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
   $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp17$byval_copy)|0);
   if (!($call18)) {
    $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48)|0);
    $call50 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
    $cmp51 = ($call50|0)==(0);
    $call49$ = $cmp51 ? $call49 : 0;
    $retval$4 = $call49$;
    break;
   }
   $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call21)|0);
   HEAP32[$Encoding20>>2] = $call22;
   $cmp23 = ($call22|0)==(0|0);
   if ($cmp23) {
    $retval$2 = 0;
   } else {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp24,21885);
    ;HEAP32[$agg$tmp24$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;HEAP32[$agg$tmp24$byval_copy+4>>2]=HEAP32[$agg$tmp24+4>>2]|0;
    $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp24$byval_copy)|0);
    if ($call25) {
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp29,$this,0);
     $call30 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp29)|0);
     $4 = $call28 & $call30;
     if ($4) {
      $retval$2 = 0;
     } else {
      $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
      $cmp35 = ($call33<<24>>24)==(46);
      if ($cmp35) {
       $Last37 = ((($this)) + 4|0);
       $5 = HEAP32[$Last37>>2]|0;
       HEAP32[$this>>2] = $5;
      }
      $call40 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
      $cmp41 = ($call40|0)==(0);
      if ($cmp41) {
       $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this,21899,$Encoding20)|0);
       $retval$2 = $call44;
      } else {
       $retval$2 = 0;
      }
     }
    } else {
     $retval$2 = 0;
    }
   }
   $retval$4 = $retval$2;
  }
 } while(0);
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf,$N,$S) {
 $Buf = $Buf|0;
 $N = $N|0;
 $S = $S|0;
 var $0 = 0, $Buf$addr$0 = 0, $BufferSize$0 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($Buf|0)==(0|0);
 if ($cmp) {
  $call = (_malloc(1024)|0);
  $cmp1 = ($call|0)==(0|0);
  if ($cmp1) {
   $retval$0 = 0;
  } else {
   $Buf$addr$0 = $call;$BufferSize$0 = 1024;
   label = 4;
  }
 } else {
  $0 = HEAP32[$N>>2]|0;
  $Buf$addr$0 = $Buf;$BufferSize$0 = $0;
  label = 4;
 }
 if ((label|0) == 4) {
  __ZN12_GLOBAL__N_112OutputStream5resetEPcm($S,$Buf$addr$0,$BufferSize$0);
  $retval$0 = 1;
 }
 return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $RHSComponentCache = 0, $cmp = 0, $vfn = 0, $vfn3 = 0, $vtable = 0, $vtable2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $0 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$0 & 255]($this,$S);
 $RHSComponentCache = ((($this)) + 5|0);
 $1 = HEAP8[$RHSComponentCache>>0]|0;
 $cmp = ($1<<24>>24)==(1);
 if (!($cmp)) {
  $vtable2 = HEAP32[$this>>2]|0;
  $vfn3 = ((($vtable2)) + 20|0);
  $2 = HEAP32[$vfn3>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($this,$S);
 }
 return;
}
function __ZN12_GLOBAL__N_112OutputStreampLEc($this,$C) {
 $this = $this|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $CurrentPosition = 0, $arrayidx = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_112OutputStream4growEm($this,1);
 $0 = HEAP32[$this>>2]|0;
 $CurrentPosition = ((($this)) + 4|0);
 $1 = HEAP32[$CurrentPosition>>2]|0;
 $inc = (($1) + 1)|0;
 HEAP32[$CurrentPosition>>2] = $inc;
 $arrayidx = (($0) + ($1)|0);
 HEAP8[$arrayidx>>0] = $C;
 return;
}
function __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($this) {
 $this = $this|0;
 var $0 = 0, $CurrentPosition = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 $0 = HEAP32[$CurrentPosition>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_112OutputStream9getBufferEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $ForwardTemplateRefs = 0, $Names = 0, $Subs = 0, $TemplateParams = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($ASTAllocator);
 $ForwardTemplateRefs = ((($this)) + 332|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($ForwardTemplateRefs);
 $TemplateParams = ((($this)) + 288|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($TemplateParams);
 $Subs = ((($this)) + 148|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($Subs);
 $Names = ((($this)) + 8|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($Names);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this)|0);
 if (!($call)) {
  $0 = HEAP32[$this>>2]|0;
  _free($0);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this)|0);
 if (!($call)) {
  $0 = HEAP32[$this>>2]|0;
  _free($0);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this)|0);
 if (!($call)) {
  $0 = HEAP32[$this>>2]|0;
  _free($0);
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) {
 $this = $this|0;
 var $0 = 0, $arraydecay = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arraydecay = ((($this)) + 12|0);
 $cmp = ($0|0)==($arraydecay|0);
 return ($cmp|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) {
 $this = $this|0;
 var $0 = 0, $arraydecay = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arraydecay = ((($this)) + 12|0);
 $cmp = ($0|0)==($arraydecay|0);
 return ($cmp|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) {
 $this = $this|0;
 var $0 = 0, $arraydecay = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arraydecay = ((($this)) + 12|0);
 $cmp = ($0|0)==($arraydecay|0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this);
 return;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $BlockList = 0, $Current = 0, $cmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $BlockList = ((($this)) + 4096|0);
 while(1) {
  $0 = HEAP32[$BlockList>>2]|0;
  $tobool = ($0|0)==(0|0);
  if ($tobool) {
   break;
  }
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$BlockList>>2] = $1;
  $cmp = ($this|0)==($0|0);
  if (!($cmp)) {
   _free($0);
  }
 }
 HEAP32[$this>>2] = 0;
 $Current = ((($this)) + 4|0);
 HEAP32[$Current>>2] = 0;
 HEAP32[$BlockList>>2] = $this;
 return;
}
function __ZN12_GLOBAL__N_112OutputStream4growEm($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $2 = 0, $BufferCapacity = 0, $CurrentPosition = 0, $add = 0, $call = 0, $cmp = 0, $cmp14 = 0, $cmp6 = 0, $mul = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 $0 = HEAP32[$CurrentPosition>>2]|0;
 $add = (($0) + ($N))|0;
 $BufferCapacity = ((($this)) + 8|0);
 $1 = HEAP32[$BufferCapacity>>2]|0;
 $cmp = ($add>>>0)<($1>>>0);
 if (!($cmp)) {
  $mul = $1 << 1;
  $cmp6 = ($mul>>>0)<($add>>>0);
  $spec$store$select = $cmp6 ? $add : $mul;
  HEAP32[$BufferCapacity>>2] = $spec$store$select;
  $2 = HEAP32[$this>>2]|0;
  $call = (_realloc($2,$spec$store$select)|0);
  HEAP32[$this>>2] = $call;
  $cmp14 = ($call|0)==(0|0);
  if ($cmp14) {
   __ZSt9terminatev();
   // unreachable;
  }
 }
 return;
}
function __ZN12_GLOBAL__N_112OutputStream5resetEPcm($this,$Buffer_,$BufferCapacity_) {
 $this = $this|0;
 $Buffer_ = $Buffer_|0;
 $BufferCapacity_ = $BufferCapacity_|0;
 var $BufferCapacity = 0, $CurrentPosition = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 HEAP32[$CurrentPosition>>2] = 0;
 HEAP32[$this>>2] = $Buffer_;
 $BufferCapacity = ((($this)) + 8|0);
 HEAP32[$BufferCapacity>>2] = $BufferCapacity_;
 return;
}
function __ZN12_GLOBAL__N_110StringViewC2EPKc($this,$Str) {
 $this = $this|0;
 $Str = $Str|0;
 var $Last = 0, $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $Str;
 $Last = ((($this)) + 4|0);
 $call = (_strlen($Str)|0);
 $add$ptr = (($Str) + ($call)|0);
 HEAP32[$Last>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Last = 0, $add$ptr = 0, $agg$tmp = 0, $call = 0, $call2 = 0, $ref$tmp = 0, $retval$0 = 0;
 var $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 16|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp,$0,$1);
 $2 = $S;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($ref$tmp,$tmpcast$byval_copy)|0);
 if ($call) {
  $call2 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($S)|0);
  $12 = HEAP32[$this>>2]|0;
  $add$ptr = (($12) + ($call2)|0);
  HEAP32[$this>>2] = $add$ptr;
  $retval$0 = 1;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Arg = 0, $Attrs = 0, $CVQualifiers = 0, $CVQualifiers63 = 0, $EndsWithTemplateArgs = 0, $IsEndOfEncoding = 0, $Name = 0, $NameInfo = 0, $Names = 0, $Names49 = 0, $ReferenceQualifier = 0, $ReferenceQualifier64 = 0, $ReturnType = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call12 = 0;
 var $call15 = 0, $call18 = 0, $call20 = 0, $call21 = 0, $call23 = 0, $call28 = 0, $call39 = 0, $call44 = 0, $call47 = 0, $call5 = 0, $call50 = 0, $call52 = 0, $call6 = 0, $call60 = 0, $call65 = 0, $call7 = 0, $call8 = 0, $cmp24 = 0, $cmp40 = 0, $cmp53 = 0;
 var $cmp9 = 0, $ref$tmp = 0, $ref$tmp46 = 0, $ref$tmp62 = 0, $retval$10 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, $tobool35 = 0, $tobool36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp$byval_copy = sp + 88|0;
 $IsEndOfEncoding = sp + 80|0;
 $NameInfo = sp + 64|0;
 $Name = sp + 60|0;
 $Attrs = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $Arg = sp + 40|0;
 $ref$tmp = sp + 32|0;
 $ReturnType = sp + 24|0;
 $ref$tmp46 = sp + 16|0;
 $Ty = sp + 8|0;
 $ref$tmp62 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 switch ($call<<24>>24) {
 case 84: case 71:  {
  $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv($call5)|0);
  $retval$10 = $call6;
  break;
 }
 default: {
  HEAP32[$IsEndOfEncoding>>2] = $this;
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($NameInfo,$this);
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call7,$NameInfo)|0);
  HEAP32[$Name>>2] = $call8;
  $cmp9 = ($call8|0)==(0|0);
  if ($cmp9) {
   $retval$9 = 0;
  } else {
   $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this,$NameInfo)|0);
   if ($call12) {
    $retval$9 = 0;
   } else {
    $call15 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding)|0);
    if ($call15) {
     $retval$9 = $call8;
    } else {
     HEAP32[$Attrs>>2] = 0;
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27109);
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
     $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
     do {
      if ($call18) {
       $Names = ((($this)) + 8|0);
       $call20 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
       while(1) {
        $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
        if ($call21) {
         label = 11;
         break;
        }
        $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call7)|0);
        HEAP32[$Arg>>2] = $call23;
        $cmp24 = ($call23|0)==(0|0);
        if ($cmp24) {
         label = 12;
         break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg);
       }
       if ((label|0) == 11) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call20);
        $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
        HEAP32[$Attrs>>2] = $call28;
        label = 13;
        break;
       }
       else if ((label|0) == 12) {
        $retval$8 = 0;
        break;
       }
      } else {
       label = 13;
      }
     } while(0);
     if ((label|0) == 13) {
      HEAP32[$ReturnType>>2] = 0;
      $0 = HEAP8[$NameInfo>>0]|0;
      $tobool35 = ($0<<24>>24)==(0);
      if ($tobool35) {
       $EndsWithTemplateArgs = ((($NameInfo)) + 1|0);
       $1 = HEAP8[$EndsWithTemplateArgs>>0]|0;
       $tobool36 = ($1<<24>>24)==(0);
       if ($tobool36) {
        label = 16;
       } else {
        $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7)|0);
        HEAP32[$ReturnType>>2] = $call39;
        $cmp40 = ($call39|0)==(0|0);
        if ($cmp40) {
         $retval$7 = 0;
        } else {
         label = 16;
        }
       }
      } else {
       label = 16;
      }
      do {
       if ((label|0) == 16) {
        $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,118)|0);
        if ($call44) {
         __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp46);
         $CVQualifiers = ((($NameInfo)) + 4|0);
         $ReferenceQualifier = ((($NameInfo)) + 8|0);
         $call47 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this,$ReturnType,$Name,$ref$tmp46,$Attrs,$CVQualifiers,$ReferenceQualifier)|0);
         $retval$7 = $call47;
         break;
        }
        $Names49 = ((($this)) + 8|0);
        $call50 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names49)|0);
        while(1) {
         $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7)|0);
         HEAP32[$Ty>>2] = $call52;
         $cmp53 = ($call52|0)==(0|0);
         if ($cmp53) {
          label = 21;
          break;
         }
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names49,$Ty);
         $call60 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding)|0);
         if ($call60) {
          label = 22;
          break;
         }
        }
        if ((label|0) == 21) {
         $retval$7 = 0;
         break;
        }
        else if ((label|0) == 22) {
         __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp62,$this,$call50);
         $CVQualifiers63 = ((($NameInfo)) + 4|0);
         $ReferenceQualifier64 = ((($NameInfo)) + 8|0);
         $call65 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this,$ReturnType,$Name,$ref$tmp62,$Attrs,$CVQualifiers63,$ReferenceQualifier64)|0);
         $retval$7 = $call65;
         break;
        }
       }
      } while(0);
      $retval$8 = $retval$7;
     }
     $retval$9 = $retval$8;
    }
   }
  }
  $retval$10 = $retval$9;
 }
 }
 STACKTOP = sp;return ($retval$10|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$Lookahead) {
 $this = $this|0;
 $Lookahead = $Lookahead|0;
 var $0 = 0, $1 = 0, $2 = 0, $Last = 0, $arrayidx = 0, $cmp = 0, $retval$0 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($0) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>($Lookahead>>>0);
 if ($cmp) {
  $arrayidx = (($1) + ($Lookahead)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $retval$0 = $2;
 } else {
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($this,$First_,$Last_) {
 $this = $this|0;
 $First_ = $First_|0;
 $Last_ = $Last_|0;
 var $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $First_;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $Last_;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 return ($sub$ptr$sub|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,$C) {
 $this = $this|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $2 = 0, $Last = 0, $cmp = 0, $cmp4 = 0, $incdec$ptr = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $2 = HEAP8[$0>>0]|0;
  $cmp4 = ($2<<24>>24)==($C<<24>>24);
  if ($cmp4) {
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $retval$0 = 1;
  } else {
   $retval$0 = 0;
  }
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$result,$this,$AllowNegative) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $AllowNegative = $AllowNegative|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call2 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $conv = 0, $conv11 = 0, $incdec$ptr = 0, $isdigit = 0, $isdigit3 = 0, $isdigittmp = 0, $isdigittmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 if ($AllowNegative) {
  (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,110)|0);
 }
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call2|0)==(0);
 if ($cmp) {
  label = 6;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $2 = HEAP8[$1>>0]|0;
  $conv = $2 << 24 >> 24;
  $isdigittmp = (($conv) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $4 = $1;
   while(1) {
    $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
    $cmp9 = ($call8|0)==(0);
    if ($cmp9) {
     break;
    }
    $3 = HEAP8[$4>>0]|0;
    $conv11 = $3 << 24 >> 24;
    $isdigittmp2 = (($conv11) + -48)|0;
    $isdigit3 = ($isdigittmp2>>>0)<(10);
    if (!($isdigit3)) {
     break;
    }
    $incdec$ptr = ((($4)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    $4 = $incdec$ptr;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result,$0,$4);
  } else {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 }
 return;
}
function __ZNK12_GLOBAL__N_110StringView5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $AfterQuals$1 = 0, $Child = 0, $P = 0, $P289 = 0, $Ptr = 0, $Ref = 0, $Ref265 = 0, $Res = 0, $Result = 0, $Sub = 0, $Subs = 0, $TA = 0, $TA318 = 0, $TryToParseTemplateArgs = 0, $TryToParseTemplateArgs311 = 0, $add = 0, $add$ptr = 0, $add$ptr145 = 0, $add$ptr149 = 0;
 var $add$ptr153 = 0, $add$ptr157 = 0, $add$ptr161 = 0, $add$ptr165 = 0, $add$ptr169 = 0, $add$ptr173 = 0, $add$ptr183 = 0, $call = 0, $call10 = 0, $call100 = 0, $call104 = 0, $call108 = 0, $call112 = 0, $call116 = 0, $call120 = 0, $call124 = 0, $call128 = 0, $call132 = 0, $call135 = 0, $call138 = 0;
 var $call142 = 0, $call146 = 0, $call150 = 0, $call154 = 0, $call158 = 0, $call16 = 0, $call162 = 0, $call166 = 0, $call170 = 0, $call174 = 0, $call176 = 0, $call177 = 0, $call179 = 0, $call180 = 0, $call184 = 0, $call185 = 0, $call188 = 0, $call192 = 0, $call193 = 0, $call195 = 0;
 var $call196 = 0, $call198 = 0, $call199 = 0, $call201 = 0, $call202 = 0, $call204 = 0, $call216 = 0, $call217 = 0, $call219 = 0, $call22 = 0, $call220 = 0, $call226 = 0, $call231 = 0, $call235 = 0, $call243 = 0, $call244 = 0, $call248 = 0, $call254 = 0, $call255 = 0, $call259 = 0;
 var $call266 = 0, $call267 = 0, $call272 = 0, $call278 = 0, $call279 = 0, $call283 = 0, $call290 = 0, $call291 = 0, $call295 = 0, $call299 = 0, $call306 = 0, $call307 = 0, $call314 = 0, $call320 = 0, $call324 = 0, $call330 = 0, $call331 = 0, $call4 = 0, $call41 = 0, $call42 = 0;
 var $call45 = 0, $call46 = 0, $call48 = 0, $call52 = 0, $call56 = 0, $call60 = 0, $call64 = 0, $call68 = 0, $call72 = 0, $call76 = 0, $call80 = 0, $call84 = 0, $call88 = 0, $call92 = 0, $call96 = 0, $cmp = 0, $cmp12 = 0, $cmp221 = 0, $cmp228 = 0, $cmp232 = 0;
 var $cmp245 = 0, $cmp256 = 0, $cmp268 = 0, $cmp280 = 0, $cmp292 = 0, $cmp308 = 0, $cmp316 = 0, $cmp321 = 0, $cmp333 = 0, $cmp6 = 0, $conv = 0, $conv139 = 0, $inc14 = 0, $inc8 = 0, $incdec$ptr = 0, $incdec$ptr103 = 0, $incdec$ptr107 = 0, $incdec$ptr111 = 0, $incdec$ptr115 = 0, $incdec$ptr119 = 0;
 var $incdec$ptr123 = 0, $incdec$ptr127 = 0, $incdec$ptr131 = 0, $incdec$ptr242 = 0, $incdec$ptr253 = 0, $incdec$ptr264 = 0, $incdec$ptr277 = 0, $incdec$ptr288 = 0, $incdec$ptr51 = 0, $incdec$ptr55 = 0, $incdec$ptr59 = 0, $incdec$ptr63 = 0, $incdec$ptr67 = 0, $incdec$ptr71 = 0, $incdec$ptr75 = 0, $incdec$ptr79 = 0, $incdec$ptr83 = 0, $incdec$ptr87 = 0, $incdec$ptr91 = 0, $incdec$ptr95 = 0;
 var $incdec$ptr99 = 0, $ref$tmp = 0, $ref$tmp271 = 0, $retval$0 = 0, $retval$10 = 0, $retval$9$ph = 0, $spec$select = 0, $spec$select28 = 0, $tobool = 0, $tobool224 = 0, $tobool312 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $Result = sp + 56|0;
 $Res = sp + 48|0;
 $Child = sp + 40|0;
 $TA = sp + 36|0;
 $Ptr = sp + 32|0;
 $Ref = sp + 28|0;
 $ref$tmp = sp + 24|0;
 $Ref265 = sp + 20|0;
 $ref$tmp271 = sp + 16|0;
 $P = sp + 12|0;
 $P289 = sp + 8|0;
 $Sub = sp + 4|0;
 $TA318 = sp;
 HEAP32[$Result>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 75: case 86: case 114:  {
   $cmp = ($call<<24>>24)==(114);
   $spec$select = $cmp&1;
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$spec$select)|0);
   $cmp6 = ($call4<<24>>24)==(86);
   $inc8 = $cmp ? 2 : 1;
   $AfterQuals$1 = $cmp6 ? $inc8 : $spec$select;
   $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$AfterQuals$1)|0);
   $cmp12 = ($call10<<24>>24)==(75);
   $inc14 = $cmp12&1;
   $spec$select28 = (($AfterQuals$1) + ($inc14))|0;
   $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$spec$select28)|0);
   switch ($call16<<24>>24) {
   case 70:  {
    break;
   }
   case 68:  {
    $add = (($spec$select28) + 1)|0;
    $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$add)|0);
    switch ($call22<<24>>24) {
    case 120: case 119: case 79: case 111:  {
     break;
    }
    default: {
     label = 5;
     break L1;
    }
    }
    break;
   }
   default: {
    label = 5;
    break L1;
   }
   }
   $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($call41)|0);
   HEAP32[$Result>>2] = $call42;
   $39 = $call42;
   label = 81;
   break;
  }
  case 85:  {
   label = 5;
   break;
  }
  case 118:  {
   $0 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,27567)|0);
   $retval$10 = $call48;
   break;
  }
  case 119:  {
   $1 = HEAP32[$this>>2]|0;
   $incdec$ptr51 = ((($1)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr51;
   $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this)|0);
   $retval$10 = $call52;
   break;
  }
  case 98:  {
   $2 = HEAP32[$this>>2]|0;
   $incdec$ptr55 = ((($2)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr55;
   $call56 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,27572)|0);
   $retval$10 = $call56;
   break;
  }
  case 99:  {
   $3 = HEAP32[$this>>2]|0;
   $incdec$ptr59 = ((($3)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr59;
   $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,27577)|0);
   $retval$10 = $call60;
   break;
  }
  case 97:  {
   $4 = HEAP32[$this>>2]|0;
   $incdec$ptr63 = ((($4)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr63;
   $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,27582)|0);
   $retval$10 = $call64;
   break;
  }
  case 104:  {
   $5 = HEAP32[$this>>2]|0;
   $incdec$ptr67 = ((($5)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr67;
   $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this,27594)|0);
   $retval$10 = $call68;
   break;
  }
  case 115:  {
   $6 = HEAP32[$this>>2]|0;
   $incdec$ptr71 = ((($6)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr71;
   $call72 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,27608)|0);
   $retval$10 = $call72;
   break;
  }
  case 116:  {
   $7 = HEAP32[$this>>2]|0;
   $incdec$ptr75 = ((($7)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr75;
   $call76 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,27614)|0);
   $retval$10 = $call76;
   break;
  }
  case 105:  {
   $8 = HEAP32[$this>>2]|0;
   $incdec$ptr79 = ((($8)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr79;
   $call80 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,27629)|0);
   $retval$10 = $call80;
   break;
  }
  case 106:  {
   $9 = HEAP32[$this>>2]|0;
   $incdec$ptr83 = ((($9)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr83;
   $call84 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this,27633)|0);
   $retval$10 = $call84;
   break;
  }
  case 108:  {
   $10 = HEAP32[$this>>2]|0;
   $incdec$ptr87 = ((($10)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr87;
   $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,27646)|0);
   $retval$10 = $call88;
   break;
  }
  case 109:  {
   $11 = HEAP32[$this>>2]|0;
   $incdec$ptr91 = ((($11)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr91;
   $call92 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this,27651)|0);
   $retval$10 = $call92;
   break;
  }
  case 120:  {
   $12 = HEAP32[$this>>2]|0;
   $incdec$ptr95 = ((($12)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr95;
   $call96 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,21933)|0);
   $retval$10 = $call96;
   break;
  }
  case 121:  {
   $13 = HEAP32[$this>>2]|0;
   $incdec$ptr99 = ((($13)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr99;
   $call100 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this)|0);
   $retval$10 = $call100;
   break;
  }
  case 110:  {
   $14 = HEAP32[$this>>2]|0;
   $incdec$ptr103 = ((($14)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr103;
   $call104 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,21943)|0);
   $retval$10 = $call104;
   break;
  }
  case 111:  {
   $15 = HEAP32[$this>>2]|0;
   $incdec$ptr107 = ((($15)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr107;
   $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this,21952)|0);
   $retval$10 = $call108;
   break;
  }
  case 102:  {
   $16 = HEAP32[$this>>2]|0;
   $incdec$ptr111 = ((($16)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr111;
   $call112 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,27665)|0);
   $retval$10 = $call112;
   break;
  }
  case 100:  {
   $17 = HEAP32[$this>>2]|0;
   $incdec$ptr115 = ((($17)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr115;
   $call116 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this)|0);
   $retval$10 = $call116;
   break;
  }
  case 101:  {
   $18 = HEAP32[$this>>2]|0;
   $incdec$ptr119 = ((($18)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr119;
   $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,21970)|0);
   $retval$10 = $call120;
   break;
  }
  case 103:  {
   $19 = HEAP32[$this>>2]|0;
   $incdec$ptr123 = ((($19)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr123;
   $call124 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,21982)|0);
   $retval$10 = $call124;
   break;
  }
  case 122:  {
   $20 = HEAP32[$this>>2]|0;
   $incdec$ptr127 = ((($20)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr127;
   $call128 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,21993)|0);
   $retval$10 = $call128;
   break;
  }
  case 117:  {
   $21 = HEAP32[$this>>2]|0;
   $incdec$ptr131 = ((($21)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr131;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Res,$this);
   $call132 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Res)|0);
   if ($call132) {
    $retval$0 = 0;
   } else {
    $call135 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Res)|0);
    $retval$0 = $call135;
   }
   $retval$10 = $retval$0;
   break;
  }
  case 68:  {
   $call138 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv139 = $call138 << 24 >> 24;
   do {
    switch ($conv139|0) {
    case 100:  {
     $22 = HEAP32[$this>>2]|0;
     $add$ptr = ((($22)) + 2|0);
     HEAP32[$this>>2] = $add$ptr;
     $call142 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,21997)|0);
     $retval$10 = $call142;
     break L1;
     break;
    }
    case 101:  {
     $23 = HEAP32[$this>>2]|0;
     $add$ptr145 = ((($23)) + 2|0);
     HEAP32[$this>>2] = $add$ptr145;
     $call146 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,22007)|0);
     $retval$10 = $call146;
     break L1;
     break;
    }
    case 102:  {
     $24 = HEAP32[$this>>2]|0;
     $add$ptr149 = ((($24)) + 2|0);
     HEAP32[$this>>2] = $add$ptr149;
     $call150 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,22018)|0);
     $retval$10 = $call150;
     break L1;
     break;
    }
    case 104:  {
     $25 = HEAP32[$this>>2]|0;
     $add$ptr153 = ((($25)) + 2|0);
     HEAP32[$this>>2] = $add$ptr153;
     $call154 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,22028)|0);
     $retval$10 = $call154;
     break L1;
     break;
    }
    case 105:  {
     $26 = HEAP32[$this>>2]|0;
     $add$ptr157 = ((($26)) + 2|0);
     HEAP32[$this>>2] = $add$ptr157;
     $call158 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,22038)|0);
     $retval$10 = $call158;
     break L1;
     break;
    }
    case 115:  {
     $27 = HEAP32[$this>>2]|0;
     $add$ptr161 = ((($27)) + 2|0);
     HEAP32[$this>>2] = $add$ptr161;
     $call162 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,22047)|0);
     $retval$10 = $call162;
     break L1;
     break;
    }
    case 97:  {
     $28 = HEAP32[$this>>2]|0;
     $add$ptr165 = ((($28)) + 2|0);
     HEAP32[$this>>2] = $add$ptr165;
     $call166 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,22056)|0);
     $retval$10 = $call166;
     break L1;
     break;
    }
    case 99:  {
     $29 = HEAP32[$this>>2]|0;
     $add$ptr169 = ((($29)) + 2|0);
     HEAP32[$this>>2] = $add$ptr169;
     $call170 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,22061)|0);
     $retval$10 = $call170;
     break L1;
     break;
    }
    case 110:  {
     $30 = HEAP32[$this>>2]|0;
     $add$ptr173 = ((($30)) + 2|0);
     HEAP32[$this>>2] = $add$ptr173;
     $call174 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,22076)|0);
     $retval$10 = $call174;
     break L1;
     break;
    }
    case 84: case 116:  {
     $call176 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call177 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($call176)|0);
     HEAP32[$Result>>2] = $call177;
     $39 = $call177;
     label = 81;
     break L1;
     break;
    }
    case 118:  {
     $call179 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call180 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv($call179)|0);
     HEAP32[$Result>>2] = $call180;
     $39 = $call180;
     label = 81;
     break L1;
     break;
    }
    case 112:  {
     $31 = HEAP32[$this>>2]|0;
     $add$ptr183 = ((($31)) + 2|0);
     HEAP32[$this>>2] = $add$ptr183;
     $call184 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call185 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call184)|0);
     HEAP32[$Child>>2] = $call185;
     $tobool = ($call185|0)==(0|0);
     if ($tobool) {
      $retval$10 = 0;
      break L1;
     } else {
      $call188 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this,$Child)|0);
      HEAP32[$Result>>2] = $call188;
      label = 82;
      break L1;
     }
     break;
    }
    case 120: case 119: case 79: case 111:  {
     $call192 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call193 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($call192)|0);
     HEAP32[$Result>>2] = $call193;
     $39 = $call193;
     label = 81;
     break L1;
     break;
    }
    default: {
     $retval$10 = 0;
     break L1;
    }
    }
   } while(0);
   break;
  }
  case 70:  {
   $call195 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call196 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($call195)|0);
   HEAP32[$Result>>2] = $call196;
   $39 = $call196;
   label = 81;
   break;
  }
  case 65:  {
   $call198 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call199 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv($call198)|0);
   HEAP32[$Result>>2] = $call199;
   $39 = $call199;
   label = 81;
   break;
  }
  case 77:  {
   $call201 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call202 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv($call201)|0);
   HEAP32[$Result>>2] = $call202;
   $39 = $call202;
   label = 81;
   break;
  }
  case 84:  {
   $call204 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   switch ($call204<<24>>24) {
   case 101: case 117: case 115:  {
    $call216 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call217 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($call216)|0);
    HEAP32[$Result>>2] = $call217;
    $39 = $call217;
    label = 81;
    break L1;
    break;
   }
   default: {
   }
   }
   $call219 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call220 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call219)|0);
   HEAP32[$Result>>2] = $call220;
   $cmp221 = ($call220|0)==(0|0);
   if ($cmp221) {
    $retval$10 = 0;
   } else {
    $TryToParseTemplateArgs = ((($this)) + 360|0);
    $32 = HEAP8[$TryToParseTemplateArgs>>0]|0;
    $tobool224 = ($32<<24>>24)==(0);
    if ($tobool224) {
     label = 82;
    } else {
     $call226 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     $cmp228 = ($call226<<24>>24)==(73);
     if ($cmp228) {
      $call231 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call219,0)|0);
      HEAP32[$TA>>2] = $call231;
      $cmp232 = ($call231|0)==(0|0);
      if ($cmp232) {
       $retval$10 = 0;
       break L1;
      } else {
       $call235 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Result,$TA)|0);
       HEAP32[$Result>>2] = $call235;
       label = 82;
       break L1;
      }
     } else {
      label = 82;
     }
    }
   }
   break;
  }
  case 80:  {
   $33 = HEAP32[$this>>2]|0;
   $incdec$ptr242 = ((($33)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr242;
   $call243 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call244 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call243)|0);
   HEAP32[$Ptr>>2] = $call244;
   $cmp245 = ($call244|0)==(0|0);
   if ($cmp245) {
    $retval$10 = 0;
    break L1;
   } else {
    $call248 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$Ptr)|0);
    HEAP32[$Result>>2] = $call248;
    label = 82;
    break L1;
   }
   break;
  }
  case 82:  {
   $34 = HEAP32[$this>>2]|0;
   $incdec$ptr253 = ((($34)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr253;
   $call254 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call255 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call254)|0);
   HEAP32[$Ref>>2] = $call255;
   $cmp256 = ($call255|0)==(0|0);
   if ($cmp256) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp>>2] = 0;
    $call259 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this,$Ref,$ref$tmp)|0);
    HEAP32[$Result>>2] = $call259;
    label = 82;
    break L1;
   }
   break;
  }
  case 79:  {
   $35 = HEAP32[$this>>2]|0;
   $incdec$ptr264 = ((($35)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr264;
   $call266 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call267 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call266)|0);
   HEAP32[$Ref265>>2] = $call267;
   $cmp268 = ($call267|0)==(0|0);
   if ($cmp268) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp271>>2] = 1;
    $call272 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this,$Ref265,$ref$tmp271)|0);
    HEAP32[$Result>>2] = $call272;
    label = 82;
    break L1;
   }
   break;
  }
  case 67:  {
   $36 = HEAP32[$this>>2]|0;
   $incdec$ptr277 = ((($36)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr277;
   $call278 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call279 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call278)|0);
   HEAP32[$P>>2] = $call279;
   $cmp280 = ($call279|0)==(0|0);
   if ($cmp280) {
    $retval$10 = 0;
    break L1;
   } else {
    $call283 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this,$P)|0);
    HEAP32[$Result>>2] = $call283;
    label = 82;
    break L1;
   }
   break;
  }
  case 71:  {
   $37 = HEAP32[$this>>2]|0;
   $incdec$ptr288 = ((($37)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr288;
   $call290 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call291 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call290)|0);
   HEAP32[$P289>>2] = $call291;
   $cmp292 = ($call291|0)==(0|0);
   if ($cmp292) {
    $retval$10 = 0;
    break L1;
   } else {
    $call295 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this,$P289)|0);
    HEAP32[$Result>>2] = $call295;
    label = 82;
    break L1;
   }
   break;
  }
  case 83:  {
   $call299 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   switch ($call299<<24>>24) {
   case 116: case 0:  {
    label = 80;
    break L1;
    break;
   }
   default: {
   }
   }
   $call306 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call307 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call306)|0);
   HEAP32[$Sub>>2] = $call307;
   $cmp308 = ($call307|0)==(0|0);
   if ($cmp308) {
    $retval$9$ph = 0;
   } else {
    $TryToParseTemplateArgs311 = ((($this)) + 360|0);
    $38 = HEAP8[$TryToParseTemplateArgs311>>0]|0;
    $tobool312 = ($38<<24>>24)==(0);
    if ($tobool312) {
     $retval$9$ph = $call307;
    } else {
     $call314 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     $cmp316 = ($call314<<24>>24)==(73);
     if ($cmp316) {
      $call320 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call306,0)|0);
      HEAP32[$TA318>>2] = $call320;
      $cmp321 = ($call320|0)==(0|0);
      if ($cmp321) {
       $retval$10 = 0;
       break L1;
      } else {
       $call324 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Sub,$TA318)|0);
       HEAP32[$Result>>2] = $call324;
       label = 82;
       break L1;
      }
     } else {
      $retval$9$ph = $call307;
     }
    }
   }
   $retval$10 = $retval$9$ph;
   break;
  }
  default: {
   label = 80;
  }
  }
 } while(0);
 if ((label|0) == 5) {
  $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call46 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($call45)|0);
  HEAP32[$Result>>2] = $call46;
  $39 = $call46;
  label = 81;
 }
 else if ((label|0) == 80) {
  $call330 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call331 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($call330)|0);
  HEAP32[$Result>>2] = $call331;
  $39 = $call331;
  label = 81;
 }
 if ((label|0) == 81) {
  $cmp333 = ($39|0)==(0|0);
  if ($cmp333) {
   $retval$10 = 0;
  } else {
   label = 82;
  }
 }
 if ((label|0) == 82) {
  $Subs = ((($this)) + 148|0);
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$Result);
  $$pre = HEAP32[$Result>>2]|0;
  $retval$10 = $$pre;
 }
 STACKTOP = sp;return ($retval$10|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($this) {
 $this = $this|0;
 var $CVQuals = 0, $E = 0, $ExceptionSpec = 0, $Names = 0, $Names53 = 0, $Params = 0, $ReferenceQualifier = 0, $ReturnType = 0, $T = 0, $T71 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $agg$tmp63 = 0, $agg$tmp63$byval_copy = 0;
 var $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $call = 0, $call10 = 0, $call13 = 0, $call19 = 0, $call2 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $call3 = 0, $call32 = 0, $call44 = 0, $call48 = 0, $call49 = 0, $call54 = 0, $call57 = 0, $call6 = 0, $call60 = 0;
 var $call64 = 0, $call68 = 0, $call73 = 0, $call8 = 0, $call82 = 0, $call9 = 0, $cmp = 0, $cmp25 = 0, $cmp50 = 0, $cmp74 = 0, $ref$tmp = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $agg$tmp67$byval_copy = sp + 144|0;
 $agg$tmp63$byval_copy = sp + 136|0;
 $agg$tmp42$byval_copy = sp + 128|0;
 $agg$tmp18$byval_copy = sp + 120|0;
 $agg$tmp5$byval_copy = sp + 112|0;
 $agg$tmp$byval_copy = sp + 104|0;
 $CVQuals = sp + 100|0;
 $ExceptionSpec = sp + 96|0;
 $agg$tmp = sp + 88|0;
 $agg$tmp5 = sp + 80|0;
 $E = sp + 72|0;
 $agg$tmp18 = sp + 64|0;
 $T = sp + 56|0;
 $ref$tmp = sp + 48|0;
 $agg$tmp42 = sp + 40|0;
 $ReturnType = sp + 32|0;
 $ReferenceQualifier = sp + 152|0;
 $agg$tmp63 = sp + 24|0;
 $agg$tmp67 = sp + 16|0;
 $T71 = sp + 8|0;
 $Params = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
 HEAP32[$CVQuals>>2] = $call;
 HEAP32[$ExceptionSpec>>2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26810);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call2) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,26813)|0);
   HEAP32[$ExceptionSpec>>2] = $call3;
   label = 14;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5,26822);
   ;HEAP32[$agg$tmp5$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$agg$tmp5$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
   $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp5$byval_copy)|0);
   if ($call6) {
    $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call8)|0);
    HEAP32[$E>>2] = $call9;
    $cmp = ($call9|0)==(0|0);
    if ($cmp) {
     $retval$9 = 0;
     break;
    }
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call10) {
     $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this,$E)|0);
     HEAP32[$ExceptionSpec>>2] = $call13;
     label = 14;
     break;
    } else {
     $retval$9 = 0;
     break;
    }
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18,26825);
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp18$byval_copy)|0);
   if ($call19) {
    $Names = ((($this)) + 8|0);
    $call21 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
    while(1) {
     $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call22) {
      label = 12;
      break;
     }
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call23)|0);
     HEAP32[$T>>2] = $call24;
     $cmp25 = ($call24|0)==(0|0);
     if ($cmp25) {
      label = 13;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$T);
    }
    if ((label|0) == 12) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call21);
     $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
     HEAP32[$ExceptionSpec>>2] = $call32;
     label = 14;
     break;
    }
    else if ((label|0) == 13) {
     $retval$9 = 0;
     break;
    }
   } else {
    label = 14;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42,26828);
  ;HEAP32[$agg$tmp42$byval_copy>>2]=HEAP32[$agg$tmp42>>2]|0;HEAP32[$agg$tmp42$byval_copy+4>>2]=HEAP32[$agg$tmp42+4>>2]|0;
  (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp42$byval_copy)|0);
  $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,70)|0);
  if ($call44) {
   (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,89)|0);
   $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48)|0);
   HEAP32[$ReturnType>>2] = $call49;
   $cmp50 = ($call49|0)==(0|0);
   if ($cmp50) {
    $retval$8 = 0;
   } else {
    HEAP8[$ReferenceQualifier>>0] = 0;
    $Names53 = ((($this)) + 8|0);
    $call54 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names53)|0);
    while(1) {
     $call57 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call57) {
      label = 27;
      break;
     }
     $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,118)|0);
     if (!($call60)) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63,26831);
      ;HEAP32[$agg$tmp63$byval_copy>>2]=HEAP32[$agg$tmp63>>2]|0;HEAP32[$agg$tmp63$byval_copy+4>>2]=HEAP32[$agg$tmp63+4>>2]|0;
      $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp63$byval_copy)|0);
      if ($call64) {
       label = 21;
       break;
      }
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67,26834);
      ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;HEAP32[$agg$tmp67$byval_copy+4>>2]=HEAP32[$agg$tmp67+4>>2]|0;
      $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp67$byval_copy)|0);
      if ($call68) {
       label = 23;
       break;
      }
      $call73 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48)|0);
      HEAP32[$T71>>2] = $call73;
      $cmp74 = ($call73|0)==(0|0);
      if ($cmp74) {
       label = 26;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names53,$T71);
     }
    }
    if ((label|0) == 21) {
     HEAP8[$ReferenceQualifier>>0] = 1;
     label = 27;
    }
    else if ((label|0) == 23) {
     HEAP8[$ReferenceQualifier>>0] = 2;
     label = 27;
    }
    else if ((label|0) == 26) {
     $retval$7 = 0;
    }
    if ((label|0) == 27) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Params,$this,$call54);
     $call82 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this,$ReturnType,$Params,$CVQuals,$ReferenceQualifier,$ExceptionSpec)|0);
     $retval$7 = $call82;
    }
    $retval$8 = $retval$7;
   }
   $retval$9 = $retval$8;
  } else {
   $retval$9 = 0;
  }
 }
 STACKTOP = sp;return ($retval$9|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($this) {
 $this = $this|0;
 var $Child = 0, $Child19 = 0, $Last = 0, $Proto = 0, $ProtoSourceName = 0, $Qual = 0, $Quals = 0, $SaveFirst = 0, $SaveLast = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call11 = 0, $call12 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call21 = 0, $call25 = 0;
 var $call29 = 0, $call30 = 0, $call31 = 0, $call37 = 0, $call4 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $cmp32 = 0, $cmp35 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 72|0;
 $Qual = sp + 64|0;
 $agg$tmp = sp + 56|0;
 $ProtoSourceName = sp + 48|0;
 $Proto = sp;
 $SaveFirst = sp + 36|0;
 $SaveLast = sp + 24|0;
 $Child = sp + 20|0;
 $Child19 = sp + 16|0;
 $Quals = sp + 12|0;
 $Ty = sp + 8|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,85)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Qual,$this);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Qual)|0);
  do {
   if ($call2) {
    $retval$3 = 0;
   } else {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26625);
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
    $call4 = (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Qual,$agg$tmp$byval_copy)|0);
    if (!($call4)) {
     $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($call20)|0);
     HEAP32[$Child19>>2] = $call21;
     $cmp22 = ($call21|0)==(0|0);
     if ($cmp22) {
      $retval$2 = 0;
     } else {
      $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$Child19,$Qual)|0);
      $retval$2 = $call25;
     }
     $retval$3 = $retval$2;
     break;
    }
    __ZNK12_GLOBAL__N_110StringView9dropFrontEm($ProtoSourceName,$Qual,9);
    __ZN12_GLOBAL__N_110StringViewC2Ev($Proto);
    $call6 = (__ZNK12_GLOBAL__N_110StringView5beginEv($ProtoSourceName)|0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveFirst,$this,$call6);
    $Last = ((($this)) + 4|0);
    $call7 = (__ZNK12_GLOBAL__N_110StringView3endEv($ProtoSourceName)|0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveLast,$Last,$call7);
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Proto,$this);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveLast);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveFirst);
    $call8 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Proto)|0);
    if ($call8) {
     $retval$1 = 0;
    } else {
     $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($call11)|0);
     HEAP32[$Child>>2] = $call12;
     $cmp = ($call12|0)==(0|0);
     if ($cmp) {
      $retval$0 = 0;
     } else {
      $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$Child,$Proto)|0);
      $retval$0 = $call15;
     }
     $retval$1 = $retval$0;
    }
    $retval$3 = $retval$1;
   }
  } while(0);
  $retval$5 = $retval$3;
 } else {
  $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
  HEAP32[$Quals>>2] = $call29;
  $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call30)|0);
  HEAP32[$Ty>>2] = $call31;
  $cmp32 = ($call31|0)==(0|0);
  if ($cmp32) {
   $retval$4 = 0;
  } else {
   $cmp35 = ($call29|0)==(0);
   if ($cmp35) {
    $retval$4 = $call31;
   } else {
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this,$Ty,$Quals)|0);
    HEAP32[$Ty>>2] = $call37;
    $retval$4 = $call37;
   }
  }
  $retval$5 = $retval$4;
 }
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($ASTAllocator,22737)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($ASTAllocator,26606)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($ASTAllocator,27671)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Int = 0, $R = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $call2 = 0, $cmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Int = sp + 8|0;
 $R = sp;
 HEAP32[$Int>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Int)|0);
 if ($call) {
  label = 3;
 } else {
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
  $0 = HEAP32[$Int>>2]|0;
  $cmp = ($call2>>>0)<($0>>>0);
  if ($cmp) {
   label = 3;
  } else {
   $1 = HEAP32[$this>>2]|0;
   $add$ptr = (($1) + ($0)|0);
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($R,$1,$add$ptr);
   $2 = HEAP32[$this>>2]|0;
   $add$ptr5 = (($2) + ($0)|0);
   HEAP32[$this>>2] = $add$ptr5;
   $3 = $R;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = $agg$result;
   $10 = $9;
   HEAP32[$10>>2] = $5;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = $8;
  }
 }
 if ((label|0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($this) {
 $this = $this|0;
 var $E = 0, $call = 0, $call10 = 0, $call13 = 0, $call2 = 0, $call3 = 0, $call6 = 0, $call7 = 0, $cmp = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $E = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,68)|0);
 do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,116)|0);
   if (!($call2)) {
    $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,84)|0);
    if (!($call3)) {
     $retval$1 = 0;
     break;
    }
   }
   $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call6)|0);
   HEAP32[$E>>2] = $call7;
   $cmp = ($call7|0)==(0|0);
   if ($cmp) {
    $retval$0 = 0;
   } else {
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call10) {
     $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,26596,$E)|0);
     $retval$0 = $call13;
    } else {
     $retval$0 = 0;
    }
   }
   $retval$1 = $retval$0;
  } else {
   $retval$1 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $DimExpr = 0, $DimensionNumber = 0, $ElemType = 0, $ElemType31 = 0, $ElemType41 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call10 = 0, $call12 = 0, $call14 = 0, $call15 = 0, $call19 = 0, $call2 = 0, $call2$off = 0, $call22 = 0, $call24 = 0, $call25 = 0, $call28 = 0;
 var $call33 = 0, $call37 = 0, $call42 = 0, $call43 = 0, $call47 = 0, $call7 = 0, $cmp16 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $tobool = 0, $tobool34 = 0, $tobool44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 40|0;
 $agg$tmp = sp + 32|0;
 $DimensionNumber = sp + 24|0;
 $ElemType = sp + 20|0;
 $DimExpr = sp + 16|0;
 $ElemType31 = sp + 12|0;
 $ElemType41 = sp + 8|0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26471);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $call2$off = (($call2) + -49)<<24>>24;
   $0 = ($call2$off&255)<(9);
   if ($0) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($DimensionNumber,$this,0);
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    do {
     if ($call7) {
      $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,112)|0);
      if ($call10) {
       $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$DimensionNumber)|0);
       $retval$1 = $call12;
       break;
      }
      $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call14)|0);
      HEAP32[$ElemType>>2] = $call15;
      $cmp16 = ($call15|0)==(0|0);
      if ($cmp16) {
       $retval$0 = 0;
      } else {
       $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$ElemType,$DimensionNumber)|0);
       $retval$0 = $call19;
      }
      $retval$1 = $retval$0;
     } else {
      $retval$1 = 0;
     }
    } while(0);
    $retval$5 = $retval$1;
    break;
   }
   $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   if ($call22) {
    $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call42)|0);
    HEAP32[$ElemType41>>2] = $call43;
    $tobool44 = ($call43|0)==(0|0);
    if ($tobool44) {
     $retval$4 = 0;
    } else {
     __ZN12_GLOBAL__N_110StringViewC2Ev($ref$tmp);
     $call47 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$ElemType41,$ref$tmp)|0);
     $retval$4 = $call47;
    }
    $retval$5 = $retval$4;
    break;
   }
   $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call24)|0);
   HEAP32[$DimExpr>>2] = $call25;
   $tobool = ($call25|0)==(0|0);
   if ($tobool) {
    $retval$3 = 0;
   } else {
    $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call28) {
     $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call24)|0);
     HEAP32[$ElemType31>>2] = $call33;
     $tobool34 = ($call33|0)==(0|0);
     if ($tobool34) {
      $retval$2 = 0;
     } else {
      $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$ElemType31,$DimExpr)|0);
      $retval$2 = $call37;
     }
     $retval$3 = $retval$2;
    } else {
     $retval$3 = 0;
    }
   }
   $retval$5 = $retval$3;
  } else {
   $retval$5 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv($this) {
 $this = $this|0;
 var $Dimension = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call10 = 0, $call11 = 0, $call14 = 0, $call2 = 0, $call20 = 0, $call21 = 0, $call25 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $conv = 0, $isdigit = 0, $isdigittmp = 0, $retval$1 = 0;
 var $retval$2 = 0, $retval$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $Dimension = sp;
 $agg$tmp = sp + 16|0;
 $Ty = sp + 8|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,65)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($Dimension);
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
  $conv = $call2 << 24 >> 24;
  $isdigittmp = (($conv) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp,$this,0);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($Dimension,$agg$tmp$byval_copy);
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   if ($call5) {
    label = 8;
   } else {
    $retval$2 = 0;
   }
  } else {
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   if ($call8) {
    label = 8;
   } else {
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call10)|0);
    $cmp = ($call11|0)==(0|0);
    if ($cmp) {
     $retval$2 = 0;
    } else {
     $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call14) {
      __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($Dimension,$call11);
      label = 8;
     } else {
      $retval$2 = 0;
     }
    }
   }
  }
  if ((label|0) == 8) {
   $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call20)|0);
   HEAP32[$Ty>>2] = $call21;
   $cmp22 = ($call21|0)==(0|0);
   if ($cmp22) {
    $retval$1 = 0;
   } else {
    $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this,$Ty,$Dimension)|0);
    $retval$1 = $call25;
   }
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else {
  $retval$3 = 0;
 }
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv($this) {
 $this = $this|0;
 var $ClassType = 0, $MemberType = 0, $call = 0, $call11 = 0, $call2 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp8 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ClassType = sp + 4|0;
 $MemberType = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,77)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2)|0);
  HEAP32[$ClassType>>2] = $call3;
  $cmp = ($call3|0)==(0|0);
  if ($cmp) {
   $retval$1 = 0;
  } else {
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2)|0);
   HEAP32[$MemberType>>2] = $call7;
   $cmp8 = ($call7|0)==(0|0);
   if ($cmp8) {
    $retval$0 = 0;
   } else {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$ClassType,$MemberType)|0);
    $retval$0 = $call11;
   }
   $retval$1 = $retval$0;
  }
  $retval$2 = $retval$1;
 } else {
  $retval$2 = 0;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($this) {
 $this = $this|0;
 var $ElabSpef = 0, $Name = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call = 0, $call13 = 0, $call14 = 0, $call17 = 0, $call19 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp7$byval_copy = sp + 56|0;
 $agg$tmp2$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $ElabSpef = sp;
 $agg$tmp = sp + 32|0;
 $agg$tmp2 = sp + 24|0;
 $agg$tmp7 = sp + 16|0;
 $Name = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2Ev($ElabSpef);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25527);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef,25530);
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,25537);
   ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp2$byval_copy)|0);
   if ($call3) {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef,25540);
    break;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,25546);
   ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp7$byval_copy)|0);
   if ($call8) {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef,25549);
   }
  }
 } while(0);
 $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call13,0)|0);
 HEAP32[$Name>>2] = $call14;
 $cmp = ($call14|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call17 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ElabSpef)|0);
  if ($call17) {
   $retval$0 = $call14;
  } else {
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$ElabSpef,$Name)|0);
   $retval$0 = $call19;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ForwardTemplateRefs = 0, $Index = 0, $ParsingLambdaParams = 0, $PermitForwardTemplateReferences = 0, $TemplateParams = 0, $call = 0, $call12 = 0, $call16 = 0, $call2 = 0, $call21 = 0, $call25 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $inc = 0;
 var $ref$tmp = 0, $retval$1 = 0, $retval$2 = 0, $tobool = 0, $tobool14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Index = sp + 4|0;
 $ref$tmp = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,84)|0);
 if ($call) {
  HEAP32[$Index>>2] = 0;
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
  if ($call2) {
   $3 = 0;
   label = 5;
  } else {
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Index)|0);
   if ($call4) {
    $retval$1 = 0;
   } else {
    $0 = HEAP32[$Index>>2]|0;
    $inc = (($0) + 1)|0;
    HEAP32[$Index>>2] = $inc;
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call7) {
     $3 = $inc;
     label = 5;
    } else {
     $retval$1 = 0;
    }
   }
  }
  do {
   if ((label|0) == 5) {
    $ParsingLambdaParams = ((($this)) + 362|0);
    $1 = HEAP8[$ParsingLambdaParams>>0]|0;
    $tobool = ($1<<24>>24)==(0);
    if (!($tobool)) {
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,22056)|0);
     $retval$1 = $call12;
     break;
    }
    $PermitForwardTemplateReferences = ((($this)) + 361|0);
    $2 = HEAP8[$PermitForwardTemplateReferences>>0]|0;
    $tobool14 = ($2<<24>>24)==(0);
    if (!($tobool14)) {
     $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this,$Index)|0);
     $ForwardTemplateRefs = ((($this)) + 332|0);
     HEAP32[$ref$tmp>>2] = $call16;
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($ForwardTemplateRefs,$ref$tmp);
     $retval$1 = $call16;
     break;
    }
    $TemplateParams = ((($this)) + 288|0);
    $call21 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams)|0);
    $cmp = ($3>>>0)<($call21>>>0);
    if ($cmp) {
     $call25 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams,$3)|0);
     $4 = HEAP32[$call25>>2]|0;
     $retval$1 = $4;
    } else {
     $retval$1 = 0;
    }
   }
  } while(0);
  $retval$2 = $retval$1;
 } else {
  $retval$2 = 0;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($this,$TagTemplates) {
 $this = $this|0;
 $TagTemplates = $TagTemplates|0;
 var $0 = 0, $Arg = 0, $Arg30 = 0, $Names = 0, $OldParams = 0, $TableEntry = 0, $TemplateParams = 0, $call = 0, $call10 = 0, $call11 = 0, $call18 = 0, $call21 = 0, $call31 = 0, $call32 = 0, $call4 = 0, $call42 = 0, $call5 = 0, $cmp = 0, $cmp19 = 0, $cmp33 = 0;
 var $ref$tmp = 0, $ref$tmp41 = 0, $retval$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $OldParams = sp + 32|0;
 $Arg = sp + 28|0;
 $TableEntry = sp + 24|0;
 $ref$tmp = sp + 16|0;
 $Arg30 = sp + 8|0;
 $ref$tmp41 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,73)|0);
 do {
  if ($call) {
   $TemplateParams = ((($this)) + 288|0);
   if ($TagTemplates) {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($TemplateParams);
   }
   $Names = ((($this)) + 8|0);
   $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call5) {
     label = 16;
     break;
    }
    if ($TagTemplates) {
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($OldParams,$TemplateParams);
     $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call10)|0);
     HEAP32[$Arg>>2] = $call11;
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($TemplateParams,$OldParams);
     $cmp = ($call11|0)==(0|0);
     if ($cmp) {
      label = 12;
      break;
     }
     $0 = $call11;
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg);
     HEAP32[$TableEntry>>2] = $0;
     $call18 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call11)|0);
     $cmp19 = ($call18<<24>>24)==(28);
     if ($cmp19) {
      __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($ref$tmp,$call11);
      $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
      HEAP32[$TableEntry>>2] = $call21;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($TemplateParams,$TableEntry);
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
    } else {
     $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call31)|0);
     HEAP32[$Arg30>>2] = $call32;
     $cmp33 = ($call32|0)==(0|0);
     if ($cmp33) {
      label = 15;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg30);
    }
   }
   if ((label|0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
    $retval$6 = 0;
    break;
   }
   else if ((label|0) == 15) {
    $retval$6 = 0;
    break;
   }
   else if ((label|0) == 16) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp41,$this,$call4);
    $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp41)|0);
    $retval$6 = $call42;
    break;
   }
  } else {
   $retval$6 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$6|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($ASTAllocator,$args,22438)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($ASTAllocator,$args,22370)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $Index = 0, $SpecialSub$0 = 0, $SpecialSub$1 = 0, $Subs = 0, $Subs43 = 0, $Subs54 = 0, $WithTags = 0, $call = 0, $call12 = 0, $call17 = 0, $call2 = 0;
 var $call22 = 0, $call27 = 0, $call3 = 0, $call32 = 0, $call36 = 0, $call37 = 0, $call41 = 0, $call44 = 0, $call48 = 0, $call50 = 0, $call53 = 0, $call55 = 0, $call60 = 0, $call7 = 0, $cmp = 0, $cmp56 = 0, $conv = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr10 = 0;
 var $incdec$ptr15 = 0, $incdec$ptr20 = 0, $incdec$ptr25 = 0, $incdec$ptr30 = 0, $ref$tmp = 0, $ref$tmp11 = 0, $ref$tmp16 = 0, $ref$tmp21 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $retval$1 = 0, $retval$2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 28|0;
 $ref$tmp11 = sp + 24|0;
 $ref$tmp16 = sp + 20|0;
 $ref$tmp21 = sp + 16|0;
 $ref$tmp26 = sp + 12|0;
 $ref$tmp31 = sp + 8|0;
 $WithTags = sp + 4|0;
 $Index = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,83)|0);
 L1: do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $conv = $call2 << 24 >> 24;
   $call3 = (_islower($conv)|0);
   $tobool = ($call3|0)==(0);
   if ($tobool) {
    $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call41) {
     $Subs43 = ((($this)) + 148|0);
     $call44 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs43)|0);
     if ($call44) {
      $retval$2 = 0;
      break;
     }
     $call48 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs43,0)|0);
     $6 = HEAP32[$call48>>2]|0;
     $retval$2 = $6;
     break;
    }
    HEAP32[$Index>>2] = 0;
    $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this,$Index)|0);
    if ($call50) {
     $retval$1 = 0;
    } else {
     $7 = HEAP32[$Index>>2]|0;
     $inc = (($7) + 1)|0;
     HEAP32[$Index>>2] = $inc;
     $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call53) {
      $Subs54 = ((($this)) + 148|0);
      $call55 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Subs54)|0);
      $cmp56 = ($inc>>>0)<($call55>>>0);
      if ($cmp56) {
       $call60 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs54,$inc)|0);
       $8 = HEAP32[$call60>>2]|0;
       $retval$1 = $8;
      } else {
       $retval$1 = 0;
      }
     } else {
      $retval$1 = 0;
     }
    }
    $retval$2 = $retval$1;
    break;
   }
   switch ($conv|0) {
   case 97:  {
    $0 = HEAP32[$this>>2]|0;
    $incdec$ptr = ((($0)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    HEAP32[$ref$tmp>>2] = 0;
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
    $SpecialSub$0 = $call7;
    break;
   }
   case 98:  {
    $1 = HEAP32[$this>>2]|0;
    $incdec$ptr10 = ((($1)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr10;
    HEAP32[$ref$tmp11>>2] = 1;
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp11)|0);
    $SpecialSub$0 = $call12;
    break;
   }
   case 115:  {
    $2 = HEAP32[$this>>2]|0;
    $incdec$ptr15 = ((($2)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr15;
    HEAP32[$ref$tmp16>>2] = 2;
    $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp16)|0);
    $SpecialSub$0 = $call17;
    break;
   }
   case 105:  {
    $3 = HEAP32[$this>>2]|0;
    $incdec$ptr20 = ((($3)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr20;
    HEAP32[$ref$tmp21>>2] = 3;
    $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp21)|0);
    $SpecialSub$0 = $call22;
    break;
   }
   case 111:  {
    $4 = HEAP32[$this>>2]|0;
    $incdec$ptr25 = ((($4)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr25;
    HEAP32[$ref$tmp26>>2] = 4;
    $call27 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp26)|0);
    $SpecialSub$0 = $call27;
    break;
   }
   case 100:  {
    $5 = HEAP32[$this>>2]|0;
    $incdec$ptr30 = ((($5)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr30;
    HEAP32[$ref$tmp31>>2] = 5;
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp31)|0);
    $SpecialSub$0 = $call32;
    break;
   }
   default: {
    $retval$2 = 0;
    break L1;
   }
   }
   $call36 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($call36,$SpecialSub$0)|0);
   HEAP32[$WithTags>>2] = $call37;
   $cmp = ($call37|0)==($SpecialSub$0|0);
   if ($cmp) {
    $SpecialSub$1 = $SpecialSub$0;
   } else {
    $Subs = ((($this)) + 148|0);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$WithTags);
    $SpecialSub$1 = $call37;
   }
   $retval$2 = $SpecialSub$1;
  } else {
   $retval$2 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this,$Elem) {
 $this = $this|0;
 $Elem = $Elem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Cap = 0, $Last = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $Cap = ((($this)) + 8|0);
 $1 = HEAP32[$Cap>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this)|0);
  $mul = $call << 1;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this,$mul);
  $$pre = HEAP32[$Last>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[$Elem>>2]|0;
 $incdec$ptr = ((($3)) + 4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this,$NewCap) {
 $this = $this|0;
 $NewCap = $NewCap|0;
 var $$in = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $Cap = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $add$ptr = 0, $add$ptr19 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i$i = 0, $cmp12 = 0, $mul = 0, $mul8 = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this)|0);
 do {
  if ($call2) {
   $mul = $NewCap << 2;
   $call3 = (_malloc($mul)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    __ZSt9terminatev();
    // unreachable;
   }
   $0 = HEAP32[$this>>2]|0;
   $Last = ((($this)) + 4|0);
   $1 = HEAP32[$Last>>2]|0;
   $sub$ptr$rhs$cast$i$i = $0;
   $sub$ptr$sub$i$i = (($1) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    _memmove(($call3|0),($0|0),($sub$ptr$sub$i$i|0))|0;
   }
   HEAP32[$this>>2] = $call3;
   $$in = $call3;$Last17$pre$phiZ2D = $Last;
  } else {
   $2 = HEAP32[$this>>2]|0;
   $mul8 = $NewCap << 2;
   $call9 = (_realloc($2,$mul8)|0);
   HEAP32[$this>>2] = $call9;
   $cmp12 = ($call9|0)==(0|0);
   if ($cmp12) {
    __ZSt9terminatev();
    // unreachable;
   } else {
    $$pre7 = ((($this)) + 4|0);
    $$in = $call9;$Last17$pre$phiZ2D = $$pre7;
    break;
   }
  }
 } while(0);
 $add$ptr = (($$in) + ($call<<2)|0);
 HEAP32[$Last17$pre$phiZ2D>>2] = $add$ptr;
 $add$ptr19 = (($$in) + ($NewCap<<2)|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr19;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $N$addr = 0, $SN = 0, $call = 0, $call2 = 0, $call3 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $N$addr = sp + 8|0;
 $SN = sp;
 HEAP32[$N$addr>>2] = $N;
 $0 = $N;
 while(1) {
  $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,66)|0);
  if (!($call)) {
   $retval$2 = $0;
   break;
  }
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($SN,$this);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($SN)|0);
  if ($call2) {
   label = 5;
   break;
  }
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$N$addr,$SN)|0);
  HEAP32[$N$addr>>2] = $call3;
  $0 = $call3;
 }
 if ((label|0) == 5) {
  $retval$2 = 0;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this)|0);
 $add$ptr = (($call) + ($Index<<2)|0);
 return ($add$ptr|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this,$Out) {
 $this = $this|0;
 $Out = $Out|0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $Id$0 = 0, $add35 = 0, $add36 = 0, $call = 0, $call$off = 0, $call13 = 0, $call13$off = 0, $cmp = 0, $cmp15 = 0, $cmp19 = 0, $cmp4 = 0, $conv33 = 0, $incdec$ptr = 0, $mul31 = 0, $or$cond = 0, $retval$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $cmp = ($call<<24>>24)>(47);
 if ($cmp) {
  $cmp4 = ($call<<24>>24)<(58);
  $call$off = (($call) + -65)<<24>>24;
  $0 = ($call$off&255)<(26);
  $or$cond = $cmp4 | $0;
  if ($or$cond) {
   $Id$0 = 0;
   while(1) {
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp15 = ($call13<<24>>24)>(47);
    if (!($cmp15)) {
     break;
    }
    $cmp19 = ($call13<<24>>24)<(58);
    if ($cmp19) {
     $$sink = -48;
    } else {
     $call13$off = (($call13) + -65)<<24>>24;
     $1 = ($call13$off&255)<(26);
     if ($1) {
      $$sink = -55;
     } else {
      break;
     }
    }
    $mul31 = ($Id$0*36)|0;
    $conv33 = $call13 << 24 >> 24;
    $add35 = (($mul31) + ($$sink))|0;
    $add36 = (($add35) + ($conv33))|0;
    $2 = HEAP32[$this>>2]|0;
    $incdec$ptr = ((($2)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    $Id$0 = $add36;
   }
   HEAP32[$Out>>2] = $Id$0;
   $retval$0 = 0;
  } else {
   $retval$0 = 1;
  }
 } else {
  $retval$0 = 1;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $$pre = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $BlockList = 0, $Current = 0, $Current7$phi$trans$insert = 0, $Current7$pre$phiZ2D = 0, $add = 0, $add$ptr = 0, $add$ptr13 = 0, $add2 = 0, $add8$pre$phiZ2D = 0, $and = 0, $call = 0, $cmp = 0, $cmp3 = 0;
 var $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($N) + 15)|0;
 $and = $add & -16;
 $BlockList = ((($this)) + 4096|0);
 $0 = HEAP32[$BlockList>>2]|0;
 $Current = ((($0)) + 4|0);
 $1 = HEAP32[$Current>>2]|0;
 $add2 = (($1) + ($and))|0;
 $cmp = ($add2>>>0)>(4087);
 do {
  if ($cmp) {
   $cmp3 = ($and>>>0)>(4088);
   if ($cmp3) {
    $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this,$and)|0);
    $retval$0 = $call;
    break;
   } else {
    __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this);
    $$pre = HEAP32[$BlockList>>2]|0;
    $Current7$phi$trans$insert = ((($$pre)) + 4|0);
    $$pre6 = HEAP32[$Current7$phi$trans$insert>>2]|0;
    $$pre7 = (($$pre6) + ($and))|0;
    $2 = $$pre;$3 = $$pre6;$Current7$pre$phiZ2D = $Current7$phi$trans$insert;$add8$pre$phiZ2D = $$pre7;
    label = 5;
    break;
   }
  } else {
   $2 = $0;$3 = $1;$Current7$pre$phiZ2D = $Current;$add8$pre$phiZ2D = $add2;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$Current7$pre$phiZ2D>>2] = $add8$pre$phiZ2D;
  $add$ptr = ((($2)) + 8|0);
  $add$ptr13 = (($add$ptr) + ($3)|0);
  $retval$0 = $add$ptr13;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($this,$Base_,$Tag_) {
 $this = $this|0;
 $Base_ = $Base_|0;
 $Tag_ = $Tag_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ArrayCache = 0, $Base = 0, $FunctionCache = 0, $RHSComponentCache = 0, $Tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Base_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $ArrayCache = ((($Base_)) + 6|0);
 $1 = HEAP8[$ArrayCache>>0]|0;
 $FunctionCache = ((($Base_)) + 7|0);
 $2 = HEAP8[$FunctionCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,8,$0,$1,$2);
 HEAP32[$this>>2] = (3884);
 $Base = ((($this)) + 8|0);
 HEAP32[$Base>>2] = $Base_;
 $Tag = ((($this)) + 12|0);
 $3 = $Tag_;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $Tag;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,$K_,$RHSComponentCache_,$ArrayCache_,$FunctionCache_) {
 $this = $this|0;
 $K_ = $K_|0;
 $RHSComponentCache_ = $RHSComponentCache_|0;
 $ArrayCache_ = $ArrayCache_|0;
 $FunctionCache_ = $FunctionCache_|0;
 var $ArrayCache = 0, $FunctionCache = 0, $K = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3928);
 $K = ((($this)) + 4|0);
 HEAP8[$K>>0] = $K_;
 $RHSComponentCache = ((($this)) + 5|0);
 HEAP8[$RHSComponentCache>>0] = $RHSComponentCache_;
 $ArrayCache = ((($this)) + 6|0);
 HEAP8[$ArrayCache>>0] = $ArrayCache_;
 $FunctionCache = ((($this)) + 7|0);
 HEAP8[$FunctionCache>>0] = $FunctionCache_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Base = 0, $Tag = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0;
 var $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22091);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Tag = ((($this)) + 12|0);
 $2 = $Tag;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp2;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22097);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_110StringViewC2Ev($this) {
 $this = $this|0;
 var $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($this,$R) {
 $this = $this|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $2 = 0, $CurrentPosition = 0, $add = 0, $add$ptr = 0, $call = 0, $call2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($R)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  __ZN12_GLOBAL__N_112OutputStream4growEm($this,$call);
  $0 = HEAP32[$this>>2]|0;
  $CurrentPosition = ((($this)) + 4|0);
  $1 = HEAP32[$CurrentPosition>>2]|0;
  $add$ptr = (($0) + ($1)|0);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5beginEv($R)|0);
  _memmove(($add$ptr|0),($call2|0),($call|0))|0;
  $2 = HEAP32[$CurrentPosition>>2]|0;
  $add = (($2) + ($call))|0;
  HEAP32[$CurrentPosition>>2] = $add;
 }
 return;
}
function __ZNK12_GLOBAL__N_110StringView4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 return ($sub$ptr$sub|0);
}
function __ZNK12_GLOBAL__N_110StringView5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _llvm_trap();
 // unreachable;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this,$NBytes) {
 $this = $this|0;
 $NBytes = $NBytes|0;
 var $0 = 0, $1 = 0, $BlockList = 0, $Current = 0, $add = 0, $add$ptr = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($NBytes) + 8)|0;
 $call = (_malloc($add)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  __ZSt9terminatev();
  // unreachable;
 } else {
  $BlockList = ((($this)) + 4096|0);
  $0 = HEAP32[$BlockList>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$call>>2] = $1;
  $Current = ((($call)) + 4|0);
  HEAP32[$Current>>2] = 0;
  HEAP32[$0>>2] = $call;
  $add$ptr = ((($call)) + 8|0);
  return ($add$ptr|0);
 }
 return (0)|0;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this) {
 $this = $this|0;
 var $0 = 0, $BlockList = 0, $Current = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_malloc(4096)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  __ZSt9terminatev();
  // unreachable;
 } else {
  $BlockList = ((($this)) + 4096|0);
  $0 = HEAP32[$BlockList>>2]|0;
  HEAP32[$call>>2] = $0;
  $Current = ((($call)) + 4|0);
  HEAP32[$Current>>2] = 0;
  HEAP32[$BlockList>>2] = $call;
  return;
 }
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($this,$SSK_) {
 $this = $this|0;
 $SSK_ = $SSK_|0;
 var $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,36,1,1,1);
 HEAP32[$this>>2] = (3972);
 $SSK = ((($this)) + 8|0);
 HEAP32[$SSK>>2] = $SSK_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $SSK = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp15$byval_copy = sp + 88|0;
 $agg$tmp12$byval_copy = sp + 80|0;
 $agg$tmp9$byval_copy = sp + 72|0;
 $agg$tmp6$byval_copy = sp + 64|0;
 $agg$tmp3$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp3 = sp + 32|0;
 $agg$tmp6 = sp + 24|0;
 $agg$tmp9 = sp + 16|0;
 $agg$tmp12 = sp + 8|0;
 $agg$tmp15 = sp;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22241);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,22256);
  ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,27678);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,22274);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp9$byval_copy);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,22287);
  ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,22300);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp15$byval_copy);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22186);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22196);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22209);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22216);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22224);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22232);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($this,$Ty_,$Postfix_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Postfix_ = $Postfix_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Postfix = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,5,1,1,1);
 HEAP32[$this>>2] = (4016);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Postfix = ((($this)) + 12|0);
 $0 = $Postfix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Postfix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Postfix = 0, $Ty = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$s);
 $Postfix = ((($this)) + 12|0);
 $2 = $Postfix;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($this,$Pointee_,$RK_) {
 $this = $this|0;
 $Pointee_ = $Pointee_|0;
 $RK_ = $RK_|0;
 var $0 = 0, $Pointee = 0, $Printing = 0, $RHSComponentCache = 0, $RK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Pointee_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,12,$0,1,1);
 HEAP32[$this>>2] = (4060);
 $Pointee = ((($this)) + 8|0);
 HEAP32[$Pointee>>2] = $Pointee_;
 $RK = ((($this)) + 12|0);
 HEAP32[$RK>>2] = $RK_;
 $Printing = ((($this)) + 16|0);
 HEAP8[$Printing>>0] = 0;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Pointee = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $call = 0, $call10 = 0, $call8 = 0, $cmp = 0, $cond = 0, $second = 0, $tobool = 0;
 var $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp15$byval_copy = sp + 56|0;
 $agg$tmp12$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $SavePrinting = sp + 32|0;
 $Collapsed = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp12 = sp + 8|0;
 $agg$tmp15 = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed,$this,$s);
  $second = ((($Collapsed)) + 4|0);
  $1 = HEAP32[$second>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$s);
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22449);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call8) {
   label = 6;
  } else {
   $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$s)|0);
   if ($call10) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,22451);
   ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp12$byval_copy);
  }
  $3 = HEAP32[$Collapsed>>2]|0;
  $cmp = ($3|0)==(0);
  $cond = $cmp ? 22453 : 22455;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,$cond);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp15$byval_copy);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call4 = 0, $second = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $SavePrinting = sp + 16|0;
 $Collapsed = sp + 8|0;
 $agg$tmp = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed,$this,$s);
  $second = ((($Collapsed)) + 4|0);
  $1 = HEAP32[$second>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call) {
   label = 4;
  } else {
   $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$s)|0);
   if ($call4) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22447);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$s);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($this,$Restore_,$NewVal) {
 $this = $this|0;
 $Restore_ = $Restore_|0;
 $NewVal = $NewVal|0;
 var $0 = 0, $OriginalValue = 0, $ShouldRestore = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $NewVal&1;
 HEAP32[$this>>2] = $Restore_;
 $OriginalValue = ((($this)) + 4|0);
 $0 = HEAP8[$Restore_>>0]|0;
 HEAP8[$OriginalValue>>0] = $0;
 $ShouldRestore = ((($this)) + 5|0);
 HEAP8[$ShouldRestore>>0] = 1;
 HEAP8[$Restore_>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($agg$result,$this,$S) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $S = $S|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $Pointee = 0, $Pointee3 = 0, $RK = 0, $RK5 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp$i$i$i = 0, $second$i$i = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RK = ((($this)) + 12|0);
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$RK>>2]|0;
 HEAP32[$agg$result>>2] = $0;
 $second$i$i = ((($agg$result)) + 4|0);
 $1 = HEAP32[$Pointee>>2]|0;
 HEAP32[$second$i$i>>2] = $1;
 $$in = $1;$7 = $0;
 while(1) {
  $2 = $$in;
  $3 = $$in;
  $vtable = HEAP32[$3>>2]|0;
  $vfn = ((($vtable)) + 12|0);
  $4 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$4 & 255]($2,$S)|0);
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call)|0);
  $cmp = ($call2<<24>>24)==(12);
  if (!($cmp)) {
   break;
  }
  $Pointee3 = ((($call)) + 8|0);
  $5 = HEAP32[$Pointee3>>2]|0;
  HEAP32[$second$i$i>>2] = $5;
  $RK5 = ((($call)) + 12|0);
  $6 = HEAP32[$RK5>>2]|0;
  $cmp$i$i$i = ($6|0)<($7|0);
  $8 = $cmp$i$i$i ? $6 : $7;
  HEAP32[$agg$result>>2] = $8;
  $$in = $5;$7 = $8;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $ArrayCache = 0, $call = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ArrayCache = ((($this)) + 6|0);
 $0 = HEAP8[$ArrayCache>>0]|0;
 $cmp = ($0<<24>>24)==(2);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 4|0);
  $1 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$1 & 255]($this,$S)|0);
  $retval$0 = $call;
 } else {
  $cmp3 = ($0<<24>>24)==(0);
  $retval$0 = $cmp3;
 }
 return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $FunctionCache = 0, $call = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $FunctionCache = ((($this)) + 7|0);
 $0 = HEAP8[$FunctionCache>>0]|0;
 $cmp = ($0<<24>>24)==(2);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 8|0);
  $1 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$1 & 255]($this,$S)|0);
  $retval$0 = $call;
 } else {
  $cmp3 = ($0<<24>>24)==(0);
  $retval$0 = $cmp3;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $OriginalValue = 0, $ShouldRestore = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ShouldRestore = ((($this)) + 5|0);
 $0 = HEAP8[$ShouldRestore>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $OriginalValue = ((($this)) + 4|0);
  $1 = HEAP8[$OriginalValue>>0]|0;
  $2 = HEAP32[$this>>2]|0;
  HEAP8[$2>>0] = $1;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($this) {
 $this = $this|0;
 var $0 = 0, $K = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $K = ((($this)) + 4|0);
 $0 = HEAP8[$K>>0]|0;
 return ($0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $RHSComponentCache = 0, $call = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($this)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $cmp = ($0<<24>>24)==(2);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $1 = HEAP32[$vtable>>2]|0;
  $call = (FUNCTION_TABLE_iii[$1 & 255]($this,$S)|0);
  $retval$0 = $call;
 } else {
  $cmp3 = ($0<<24>>24)==(0);
  $retval$0 = $cmp3;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($this,$Pointee_) {
 $this = $this|0;
 $Pointee_ = $Pointee_|0;
 var $0 = 0, $Pointee = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Pointee_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,11,$0,1,1);
 HEAP32[$this>>2] = (4104);
 $Pointee = ((($this)) + 8|0);
 HEAP32[$Pointee>>2] = $Pointee_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Pointee = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Pointee = 0, $Protocol = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $call = 0, $call10 = 0, $call13 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $tmpcast$byval_copy = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp25$byval_copy = sp + 88|0;
 $tmpcast$byval_copy = sp + 80|0;
 $agg$tmp21$byval_copy = sp + 72|0;
 $agg$tmp18$byval_copy = sp + 64|0;
 $agg$tmp15$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp15 = sp + 32|0;
 $agg$tmp18 = sp + 24|0;
 $agg$tmp21 = sp + 16|0;
 $agg$tmp23 = sp;
 $agg$tmp25 = sp + 8|0;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(10);
 do {
  if ($cmp) {
   $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0)|0);
   if ($call3) {
    $6 = HEAP32[$Pointee>>2]|0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,22522);
    ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp21$byval_copy);
    $Protocol = ((($6)) + 12|0);
    $7 = $Protocol;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = $agg$tmp23;
    $14 = $13;
    HEAP32[$14>>2] = $9;
    $15 = (($13) + 4)|0;
    $16 = $15;
    HEAP32[$16>>2] = $12;
    ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp23+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25,22526);
    ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;HEAP32[$agg$tmp25$byval_copy+4>>2]=HEAP32[$agg$tmp25+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp25$byval_copy);
    break;
   } else {
    $$pre = HEAP32[$Pointee>>2]|0;
    $1 = $$pre;
    label = 4;
    break;
   }
  } else {
   $1 = $0;
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$s);
  $3 = HEAP32[$Pointee>>2]|0;
  $call6 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($3,$s)|0);
  if ($call6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22449);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $4 = HEAP32[$Pointee>>2]|0;
  $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($4,$s)|0);
  if ($call10) {
   label = 8;
  } else {
   $5 = HEAP32[$Pointee>>2]|0;
   $call13 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($5,$s)|0);
   if ($call13) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,22451);
   ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp15$byval_copy);
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18,22520);
  ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp18$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Pointee = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(10);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0)|0);
  if (!($call3)) {
   $$pre = HEAP32[$Pointee>>2]|0;
   $1 = $$pre;
   label = 4;
  }
 } else {
  $1 = $0;
  label = 4;
 }
 if ((label|0) == 4) {
  $call5 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call5) {
   label = 6;
  } else {
   $2 = HEAP32[$Pointee>>2]|0;
   $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($2,$s)|0);
   if ($call8) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22447);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $3 = HEAP32[$Pointee>>2]|0;
  $vtable = HEAP32[$3>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $4 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$4 & 255]($3,$s);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Ty = 0, $call = 0, $call5 = 0, $cmp = 0, $ref$tmp = 0, $ref$tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp + 8|0;
 $ref$tmp3 = sp;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(7);
 if ($cmp) {
  __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($ref$tmp,$0);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp3,22508);
  $call5 = (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($ref$tmp,$ref$tmp3)|0);
  $1 = $call5;
 } else {
  $1 = 0;
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = $Name;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($LHS,$RHS) {
 $LHS = $LHS|0;
 $RHS = $RHS|0;
 var $0 = 0, $1 = 0, $2 = 0, $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($LHS)|0);
 $call1 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($RHS)|0);
 $cmp = ($call|0)==($call1|0);
 L1: do {
  if ($cmp) {
   $call2 = (__ZNK12_GLOBAL__N_110StringView5beginEv($LHS)|0);
   $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($LHS)|0);
   $call4 = (__ZNK12_GLOBAL__N_110StringView5beginEv($RHS)|0);
   $__first1$addr$0$i$i = $call2;$__first2$addr$0$i$i = $call4;
   while(1) {
    $cmp$i$i = ($__first1$addr$0$i$i|0)==($call3|0);
    if ($cmp$i$i) {
     $2 = 1;
     break L1;
    }
    $0 = HEAP8[$__first1$addr$0$i$i>>0]|0;
    $1 = HEAP8[$__first2$addr$0$i$i>>0]|0;
    $cmp$i$i$i = ($0<<24>>24)==($1<<24>>24);
    if (!($cmp$i$i$i)) {
     $2 = 0;
     break L1;
    }
    $incdec$ptr$i$i = ((($__first1$addr$0$i$i)) + 1|0);
    $incdec$ptr1$i$i = ((($__first2$addr$0$i$i)) + 1|0);
    $__first1$addr$0$i$i = $incdec$ptr$i$i;$__first2$addr$0$i$i = $incdec$ptr1$i$i;
   }
  } else {
   $2 = 0;
  }
 } while(0);
 return ($2|0);
}
function __ZNK12_GLOBAL__N_110StringView3endEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($this,$Name_,$TemplateArgs_) {
 $this = $this|0;
 $Name_ = $Name_|0;
 $TemplateArgs_ = $TemplateArgs_|0;
 var $Name = 0, $TemplateArgs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,32,1,1,1);
 HEAP32[$this>>2] = (4148);
 $Name = ((($this)) + 8|0);
 HEAP32[$Name>>2] = $Name_;
 $TemplateArgs = ((($this)) + 12|0);
 HEAP32[$TemplateArgs>>2] = $TemplateArgs_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Name = 0, $TemplateArgs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 $TemplateArgs = ((($this)) + 12|0);
 $1 = HEAP32[$TemplateArgs>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Name = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = HEAP32[$Name>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($this,$Other) {
 $this = $this|0;
 $Other = $Other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Cap = 0, $Cap11 = 0, $Last = 0, $Last10 = 0, $Last9 = 0, $add$ptr = 0, $call = 0, $call2 = 0, $call3 = 0, $call6 = 0, $cmp$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other)|0);
  $sub$ptr$lhs$cast$i$i = $call3;
  $sub$ptr$rhs$cast$i$i = $call2;
  $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
  $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
  if (!($cmp$i$i)) {
   $0 = HEAP32[$this>>2]|0;
   _memmove(($0|0),($call2|0),($sub$ptr$sub$i$i|0))|0;
  }
  $1 = HEAP32[$this>>2]|0;
  $call6 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other)|0);
  $add$ptr = (($1) + ($call6<<2)|0);
  $Last = ((($this)) + 4|0);
  HEAP32[$Last>>2] = $add$ptr;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
 } else {
  $2 = HEAP32[$Other>>2]|0;
  HEAP32[$this>>2] = $2;
  $Last9 = ((($Other)) + 4|0);
  $3 = HEAP32[$Last9>>2]|0;
  $Last10 = ((($this)) + 4|0);
  HEAP32[$Last10>>2] = $3;
  $Cap = ((($Other)) + 8|0);
  $4 = HEAP32[$Cap>>2]|0;
  $Cap11 = ((($this)) + 8|0);
  HEAP32[$Cap11>>2] = $4;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Arg10 = 0, $Args = 0, $Names = 0, $add$ptr = 0, $call = 0, $call11 = 0, $call12 = 0, $call18 = 0, $call2 = 0, $call22 = 0, $call28 = 0, $call29 = 0, $call3 = 0, $call32 = 0, $call37 = 0, $call38 = 0, $call39 = 0;
 var $call4 = 0, $call40 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp13 = 0, $cmp24 = 0, $cmp30 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $retval$5 = 0, $spec$select = 0, $spec$select6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Arg10 = sp + 8|0;
 $Args = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 88:  {
   $0 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    $retval$5 = 0;
   } else {
    $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    $spec$select = $call4 ? $call3 : 0;
    STACKTOP = sp;return ($spec$select|0);
   }
   break;
  }
  case 74:  {
   $1 = HEAP32[$this>>2]|0;
   $incdec$ptr7 = ((($1)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr7;
   $Names = ((($this)) + 8|0);
   $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call9) {
     label = 9;
     break;
    }
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call11)|0);
    HEAP32[$Arg10>>2] = $call12;
    $cmp13 = ($call12|0)==(0|0);
    if ($cmp13) {
     label = 8;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg10);
   }
   if ((label|0) == 8) {
    $retval$5 = 0;
    break L1;
   }
   else if ((label|0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Args,$this,$call8);
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$Args)|0);
    $retval$5 = $call18;
    break L1;
   }
   break;
  }
  case 76:  {
   $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp24 = ($call22<<24>>24)==(90);
   if (!($cmp24)) {
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($call37)|0);
    $retval$5 = $call38;
    break L1;
   }
   $2 = HEAP32[$this>>2]|0;
   $add$ptr = ((($2)) + 2|0);
   HEAP32[$this>>2] = $add$ptr;
   $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call28)|0);
   $cmp30 = ($call29|0)==(0|0);
   if ($cmp30) {
    $retval$5 = 0;
   } else {
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    $spec$select6 = $call32 ? $call29 : 0;
    $retval$5 = $spec$select6;
   }
   break;
  }
  default: {
   $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call39)|0);
   $retval$5 = $call40;
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($this,$Other) {
 $this = $this|0;
 $Other = $Other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Cap = 0, $Cap17 = 0, $Cap23 = 0, $Cap24 = 0, $Last = 0, $Last15 = 0, $Last16 = 0, $Last21 = 0;
 var $Last22 = 0, $add$ptr = 0, $call = 0, $call2 = 0, $call4 = 0, $call5 = 0, $call9 = 0, $cmp$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this)|0);
 do {
  if ($call) {
   if (!($call2)) {
    $0 = HEAP32[$this>>2]|0;
    _free($0);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this);
   }
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other)|0);
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other)|0);
   $sub$ptr$lhs$cast$i$i = $call5;
   $sub$ptr$rhs$cast$i$i = $call4;
   $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    $1 = HEAP32[$this>>2]|0;
    _memmove(($1|0),($call4|0),($sub$ptr$sub$i$i|0))|0;
   }
   $2 = HEAP32[$this>>2]|0;
   $call9 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other)|0);
   $add$ptr = (($2) + ($call9<<2)|0);
   $Last = ((($this)) + 4|0);
   HEAP32[$Last>>2] = $add$ptr;
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
  } else {
   if ($call2) {
    $3 = HEAP32[$Other>>2]|0;
    HEAP32[$this>>2] = $3;
    $Last15 = ((($Other)) + 4|0);
    $4 = HEAP32[$Last15>>2]|0;
    $Last16 = ((($this)) + 4|0);
    HEAP32[$Last16>>2] = $4;
    $Cap = ((($Other)) + 8|0);
    $5 = HEAP32[$Cap>>2]|0;
    $Cap17 = ((($this)) + 8|0);
    HEAP32[$Cap17>>2] = $5;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
    break;
   } else {
    $6 = HEAP32[$this>>2]|0;
    $7 = HEAP32[$Other>>2]|0;
    HEAP32[$this>>2] = $7;
    HEAP32[$Other>>2] = $6;
    $Last21 = ((($this)) + 4|0);
    $Last22 = ((($Other)) + 4|0);
    $8 = HEAP32[$Last21>>2]|0;
    $9 = HEAP32[$Last22>>2]|0;
    HEAP32[$Last21>>2] = $9;
    HEAP32[$Last22>>2] = $8;
    $Cap23 = ((($this)) + 8|0);
    $Cap24 = ((($Other)) + 8|0);
    $10 = HEAP32[$Cap23>>2]|0;
    $11 = HEAP32[$Cap24>>2]|0;
    HEAP32[$Cap23>>2] = $11;
    HEAP32[$Cap24>>2] = $10;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Elements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Elements = ((($this)) + 8|0);
 $0 = $Elements;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($this,$Elem) {
 $this = $this|0;
 $Elem = $Elem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Cap = 0, $Last = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $Cap = ((($this)) + 8|0);
 $1 = HEAP32[$Cap>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this)|0);
  $mul = $call << 1;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this,$mul);
  $$pre = HEAP32[$Last>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[$Elem>>2]|0;
 $incdec$ptr = ((($3)) + 4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$result,$this,$FromPosition) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $FromPosition = $FromPosition|0;
 var $Names = 0, $add$ptr = 0, $call = 0, $call3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Names = ((($this)) + 8|0);
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($Names)|0);
 $add$ptr = (($call) + ($FromPosition<<2)|0);
 $call3 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($Names)|0);
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result,$this,$add$ptr,$call3);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($Names,$FromPosition);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($this,$Params_) {
 $this = $this|0;
 $Params_ = $Params_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,30,1,1,1);
 HEAP32[$this>>2] = (4192);
 $Params = ((($this)) + 8|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Params = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $call2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp5$byval_copy = sp + 40|0;
 $agg$tmp3$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp3 = sp + 8|0;
 $agg$tmp5 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22633);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Params = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 $call2 = (__ZNK12_GLOBAL__N_112OutputStream4backEv($S)|0);
 $cmp = ($call2<<24>>24)==(62);
 if ($cmp) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,22449);
  ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5,22526);
 ;HEAP32[$agg$tmp5$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$agg$tmp5$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp5$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $FirstElement$0$off0 = 0, $FirstElement$1$off0 = 0, $Idx$0 = 0, $NumElements = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp5 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $NumElements = ((($this)) + 4|0);
 $FirstElement$0$off0 = 1;$Idx$0 = 0;
 while(1) {
  $0 = HEAP32[$NumElements>>2]|0;
  $cmp = ($Idx$0|0)==($0|0);
  if ($cmp) {
   break;
  }
  $call = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
  if (!($FirstElement$0$off0)) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22635);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  }
  $call3 = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
  $1 = HEAP32[$this>>2]|0;
  $arrayidx = (($1) + ($Idx$0<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
  $call4 = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
  $cmp5 = ($call3|0)==($call4|0);
  if ($cmp5) {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S,$call);
   $FirstElement$1$off0 = $FirstElement$0$off0;
  } else {
   $FirstElement$1$off0 = 0;
  }
  $inc = (($Idx$0) + 1)|0;
  $FirstElement$0$off0 = $FirstElement$1$off0;$Idx$0 = $inc;
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_112OutputStream4backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $CurrentPosition = 0, $arrayidx = 0, $cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 $0 = HEAP32[$CurrentPosition>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $cond = 0;
 } else {
  $sub = (($0) + -1)|0;
  $1 = HEAP32[$this>>2]|0;
  $arrayidx = (($1) + ($sub)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $cond = $2;
 }
 return ($cond|0);
}
function __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($this,$NewPos) {
 $this = $this|0;
 $NewPos = $NewPos|0;
 var $CurrentPosition = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 HEAP32[$CurrentPosition>>2] = $NewPos;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result,$this,$begin,$end) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 var $ASTAllocator = 0, $call = 0, $cmp$i$i = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $begin;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $ASTAllocator = ((($this)) + 368|0);
 $call = (__ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($ASTAllocator,$sub$ptr$div)|0);
 $cmp$i$i = ($sub$ptr$sub|0)==(0);
 if (!($cmp$i$i)) {
  _memmove(($call|0),($begin|0),($sub$ptr$sub|0))|0;
 }
 __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($agg$result,$call,$sub$ptr$div);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $0 = 0, $Last = 0, $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $add$ptr = (($0) + ($Index<<2)|0);
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($this,$sz) {
 $this = $this|0;
 $sz = $sz|0;
 var $call = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $sz << 2;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,$mul)|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($this,$Elements_,$NumElements_) {
 $this = $this|0;
 $Elements_ = $Elements_|0;
 $NumElements_ = $NumElements_|0;
 var $NumElements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $Elements_;
 $NumElements = ((($this)) + 4|0);
 HEAP32[$NumElements>>2] = $NumElements_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this,$NewCap) {
 $this = $this|0;
 $NewCap = $NewCap|0;
 var $$in = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $Cap = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $add$ptr = 0, $add$ptr19 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i$i = 0, $cmp12 = 0, $mul = 0, $mul8 = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this)|0);
 do {
  if ($call2) {
   $mul = $NewCap << 2;
   $call3 = (_malloc($mul)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    __ZSt9terminatev();
    // unreachable;
   }
   $0 = HEAP32[$this>>2]|0;
   $Last = ((($this)) + 4|0);
   $1 = HEAP32[$Last>>2]|0;
   $sub$ptr$rhs$cast$i$i = $0;
   $sub$ptr$sub$i$i = (($1) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    _memmove(($call3|0),($0|0),($sub$ptr$sub$i$i|0))|0;
   }
   HEAP32[$this>>2] = $call3;
   $$in = $call3;$Last17$pre$phiZ2D = $Last;
  } else {
   $2 = HEAP32[$this>>2]|0;
   $mul8 = $NewCap << 2;
   $call9 = (_realloc($2,$mul8)|0);
   HEAP32[$this>>2] = $call9;
   $cmp12 = ($call9|0)==(0|0);
   if ($cmp12) {
    __ZSt9terminatev();
    // unreachable;
   } else {
    $$pre7 = ((($this)) + 4|0);
    $$in = $call9;$Last17$pre$phiZ2D = $$pre7;
    break;
   }
  }
 } while(0);
 $add$ptr = (($$in) + ($call<<2)|0);
 HEAP32[$Last17$pre$phiZ2D>>2] = $add$ptr;
 $add$ptr19 = (($$in) + ($NewCap<<2)|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr19;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($this,$Data_) {
 $this = $this|0;
 $Data_ = $Data_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ArrayCache = 0, $Data = 0, $FunctionCache = 0, $RHSComponentCache = 0, $__first$addr$0$i = 0, $__first$addr$0$i1 = 0, $__first$addr$0$i8 = 0;
 var $call = 0, $call$i = 0, $call$i11 = 0, $call$i4 = 0, $call10 = 0, $call17 = 0, $call19 = 0, $call4 = 0, $call8 = 0, $cmp$i = 0, $cmp$i2 = 0, $cmp$i9 = 0, $incdec$ptr$i = 0, $incdec$ptr$i12 = 0, $incdec$ptr$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,27,1,1,1);
 HEAP32[$this>>2] = (4236);
 $Data = ((($this)) + 8|0);
 $0 = $Data_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Data;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $RHSComponentCache = ((($this)) + 5|0);
 HEAP8[$RHSComponentCache>>0] = 2;
 $FunctionCache = ((($this)) + 7|0);
 HEAP8[$FunctionCache>>0] = 2;
 $ArrayCache = ((($this)) + 6|0);
 HEAP8[$ArrayCache>>0] = 2;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data)|0);
 $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data)|0);
 $__first$addr$0$i = $call;
 while(1) {
  $cmp$i = ($__first$addr$0$i|0)==($call4|0);
  if ($cmp$i) {
   label = 4;
   break;
  }
  $10 = HEAP32[$__first$addr$0$i>>2]|0;
  $call$i = (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_($10)|0);
  $incdec$ptr$i = ((($__first$addr$0$i)) + 4|0);
  if ($call$i) {
   $__first$addr$0$i = $incdec$ptr$i;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP8[$ArrayCache>>0] = 1;
 }
 $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data)|0);
 $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data)|0);
 $__first$addr$0$i1 = $call8;
 while(1) {
  $cmp$i2 = ($__first$addr$0$i1|0)==($call10|0);
  if ($cmp$i2) {
   label = 8;
   break;
  }
  $11 = HEAP32[$__first$addr$0$i1>>2]|0;
  $call$i4 = (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_($11)|0);
  $incdec$ptr$i5 = ((($__first$addr$0$i1)) + 4|0);
  if ($call$i4) {
   $__first$addr$0$i1 = $incdec$ptr$i5;
  } else {
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP8[$FunctionCache>>0] = 1;
 }
 $call17 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data)|0);
 $call19 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data)|0);
 $__first$addr$0$i8 = $call17;
 while(1) {
  $cmp$i9 = ($__first$addr$0$i8|0)==($call19|0);
  if ($cmp$i9) {
   label = 12;
   break;
  }
  $12 = HEAP32[$__first$addr$0$i8>>2]|0;
  $call$i11 = (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_($12)|0);
  $incdec$ptr$i12 = ((($__first$addr$0$i8)) + 4|0);
  if ($call$i11) {
   $__first$addr$0$i8 = $incdec$ptr$i12;
  } else {
   break;
  }
 }
 if ((label|0) == 12) {
  HEAP8[$RHSComponentCache>>0] = 1;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $NumElements = 0, $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $NumElements = ((($this)) + 4|0);
 $1 = HEAP32[$NumElements>>2]|0;
 $add$ptr = (($0) + ($1<<2)|0);
 return ($add$ptr|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_($P) {
 $P = $P|0;
 var $0 = 0, $ArrayCache = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ArrayCache = ((($P)) + 6|0);
 $0 = HEAP8[$ArrayCache>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 return ($cmp|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_($P) {
 $P = $P|0;
 var $0 = 0, $FunctionCache = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $FunctionCache = ((($P)) + 7|0);
 $0 = HEAP8[$FunctionCache>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 return ($cmp|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_($P) {
 $P = $P|0;
 var $0 = 0, $RHSComponentCache = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($P)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 return ($cmp|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($call3,$S)|0);
  $1 = $call4;
 } else {
  $1 = 0;
 }
 return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($call3,$S)|0);
  $1 = $call4;
 } else {
  $1 = 0;
 }
 return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($call3,$S)|0);
  $1 = $call4;
 } else {
  $1 = 0;
 }
 return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cond = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $vtable = HEAP32[$call3>>2]|0;
  $vfn = ((($vtable)) + 12|0);
  $1 = HEAP32[$vfn>>2]|0;
  $call4 = (FUNCTION_TABLE_iii[$1 & 255]($call3,$S)|0);
  $cond = $call4;
 } else {
  $cond = $this;
 }
 return ($cond|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $vtable = HEAP32[$call3>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($call3,$S);
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $vtable = HEAP32[$call3>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($call3,$S);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $CurrentPackIndex = 0, $CurrentPackMax = 0, $Data = 0, $call2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPackMax = ((($S)) + 16|0);
 $0 = HEAP32[$CurrentPackMax>>2]|0;
 $cmp = ($0|0)==(-1);
 if ($cmp) {
  $Data = ((($this)) + 8|0);
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
  HEAP32[$CurrentPackMax>>2] = $call2;
  $CurrentPackIndex = ((($S)) + 12|0);
  HEAP32[$CurrentPackIndex>>2] = 0;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $NumElements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $NumElements = ((($this)) + 4|0);
 $0 = HEAP32[$NumElements>>2]|0;
 return ($0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($this,$Idx) {
 $this = $this|0;
 $Idx = $Idx|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arrayidx = (($0) + ($Idx<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 return ($1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $add$ptr = ((($this)) + 44|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Arg = 0, $Base = 0, $Callee = 0;
 var $Child = 0, $Cond = 0, $E = 0, $E175 = 0, $E303 = 0, $E751 = 0, $Ex = 0, $Ex140 = 0, $Ex157 = 0, $Ex385 = 0, $Ex422 = 0, $Ex488 = 0, $Ex562 = 0, $Ex609 = 0, $Ex645 = 0, $Ex716 = 0, $Ex773 = 0, $FP = 0, $Global = 0, $Index = 0;
 var $L = 0, $LHS = 0, $LHS206 = 0, $LHS532 = 0, $Names = 0, $Names297 = 0, $Names684 = 0, $Names745 = 0, $Pack = 0, $R = 0, $R660 = 0, $RHS = 0, $RHS212 = 0, $RHS538 = 0, $T = 0, $T556 = 0, $T603 = 0, $Ty = 0, $Ty634 = 0, $Ty68 = 0;
 var $Ty727 = 0, $Ty738 = 0, $Ty83 = 0, $add$ptr = 0, $add$ptr119 = 0, $add$ptr125 = 0, $add$ptr139 = 0, $add$ptr151 = 0, $add$ptr168 = 0, $add$ptr174 = 0, $add$ptr189 = 0, $add$ptr205 = 0, $add$ptr223 = 0, $add$ptr229 = 0, $add$ptr240 = 0, $add$ptr246 = 0, $add$ptr252 = 0, $add$ptr263 = 0, $add$ptr269 = 0, $add$ptr280 = 0;
 var $add$ptr296 = 0, $add$ptr325 = 0, $add$ptr331 = 0, $add$ptr337 = 0, $add$ptr34 = 0, $add$ptr343 = 0, $add$ptr354 = 0, $add$ptr360 = 0, $add$ptr366 = 0, $add$ptr372 = 0, $add$ptr378 = 0, $add$ptr40 = 0, $add$ptr403 = 0, $add$ptr409 = 0, $add$ptr415 = 0, $add$ptr421 = 0, $add$ptr440 = 0, $add$ptr446 = 0, $add$ptr452 = 0, $add$ptr46 = 0;
 var $add$ptr463 = 0, $add$ptr469 = 0, $add$ptr475 = 0, $add$ptr481 = 0, $add$ptr498 = 0, $add$ptr504 = 0, $add$ptr52 = 0, $add$ptr526 = 0, $add$ptr555 = 0, $add$ptr573 = 0, $add$ptr579 = 0, $add$ptr58 = 0, $add$ptr585 = 0, $add$ptr591 = 0, $add$ptr602 = 0, $add$ptr620 = 0, $add$ptr633 = 0, $add$ptr644 = 0, $add$ptr655 = 0, $add$ptr67 = 0;
 var $add$ptr683 = 0, $add$ptr715 = 0, $add$ptr726 = 0, $add$ptr737 = 0, $add$ptr768 = 0, $add$ptr772 = 0, $add$ptr82 = 0, $add$ptr99 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp121 = 0, $agg$tmp121$byval_copy = 0, $agg$tmp127 = 0, $agg$tmp127$byval_copy = 0, $agg$tmp170 = 0, $agg$tmp170$byval_copy = 0, $agg$tmp225 = 0, $agg$tmp225$byval_copy = 0, $agg$tmp231 = 0, $agg$tmp231$byval_copy = 0;
 var $agg$tmp242 = 0, $agg$tmp242$byval_copy = 0, $agg$tmp248 = 0, $agg$tmp248$byval_copy = 0, $agg$tmp254 = 0, $agg$tmp254$byval_copy = 0, $agg$tmp265 = 0, $agg$tmp265$byval_copy = 0, $agg$tmp271 = 0, $agg$tmp271$byval_copy = 0, $agg$tmp30 = 0, $agg$tmp30$byval_copy = 0, $agg$tmp327 = 0, $agg$tmp327$byval_copy = 0, $agg$tmp333 = 0, $agg$tmp333$byval_copy = 0, $agg$tmp339 = 0, $agg$tmp339$byval_copy = 0, $agg$tmp345 = 0, $agg$tmp345$byval_copy = 0;
 var $agg$tmp356 = 0, $agg$tmp356$byval_copy = 0, $agg$tmp36 = 0, $agg$tmp36$byval_copy = 0, $agg$tmp362 = 0, $agg$tmp362$byval_copy = 0, $agg$tmp368 = 0, $agg$tmp368$byval_copy = 0, $agg$tmp374 = 0, $agg$tmp374$byval_copy = 0, $agg$tmp382 = 0, $agg$tmp382$byval_copy = 0, $agg$tmp405 = 0, $agg$tmp405$byval_copy = 0, $agg$tmp411 = 0, $agg$tmp411$byval_copy = 0, $agg$tmp417 = 0, $agg$tmp417$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0;
 var $agg$tmp442 = 0, $agg$tmp442$byval_copy = 0, $agg$tmp448 = 0, $agg$tmp448$byval_copy = 0, $agg$tmp454 = 0, $agg$tmp454$byval_copy = 0, $agg$tmp465 = 0, $agg$tmp465$byval_copy = 0, $agg$tmp471 = 0, $agg$tmp471$byval_copy = 0, $agg$tmp477 = 0, $agg$tmp477$byval_copy = 0, $agg$tmp48 = 0, $agg$tmp48$byval_copy = 0, $agg$tmp485 = 0, $agg$tmp485$byval_copy = 0, $agg$tmp500 = 0, $agg$tmp500$byval_copy = 0, $agg$tmp54 = 0, $agg$tmp54$byval_copy = 0;
 var $agg$tmp575 = 0, $agg$tmp575$byval_copy = 0, $agg$tmp581 = 0, $agg$tmp581$byval_copy = 0, $agg$tmp587 = 0, $agg$tmp587$byval_copy = 0, $agg$tmp593 = 0, $agg$tmp593$byval_copy = 0, $arrayidx = 0, $arrayidx135 = 0, $arrayidx236 = 0, $arrayidx259 = 0, $arrayidx276 = 0, $arrayidx321 = 0, $arrayidx350 = 0, $arrayidx396 = 0, $arrayidx433 = 0, $arrayidx459 = 0, $arrayidx521 = 0, $arrayidx551 = 0;
 var $arrayidx598 = 0, $arrayidx711 = 0, $arrayidx78 = 0, $call = 0, $call100 = 0, $call101 = 0, $call105 = 0, $call106 = 0, $call108 = 0, $call114 = 0, $call120 = 0, $call122 = 0, $call126 = 0, $call128 = 0, $call130 = 0, $call131 = 0, $call141 = 0, $call142 = 0, $call147 = 0, $call15 = 0;
 var $call152 = 0, $call153 = 0, $call159 = 0, $call163 = 0, $call169 = 0, $call171 = 0, $call176 = 0, $call177 = 0, $call182 = 0, $call185 = 0, $call186 = 0, $call19 = 0, $call190 = 0, $call191 = 0, $call196 = 0, $call2 = 0, $call20 = 0, $call200 = 0, $call207 = 0, $call208 = 0;
 var $call214 = 0, $call218 = 0, $call22 = 0, $call224 = 0, $call226 = 0, $call23 = 0, $call230 = 0, $call232 = 0, $call241 = 0, $call243 = 0, $call247 = 0, $call249 = 0, $call253 = 0, $call255 = 0, $call264 = 0, $call266 = 0, $call270 = 0, $call272 = 0, $call281 = 0, $call282 = 0;
 var $call287 = 0, $call29 = 0, $call291 = 0, $call298 = 0, $call3 = 0, $call300 = 0, $call304 = 0, $call305 = 0, $call31 = 0, $call316 = 0, $call326 = 0, $call328 = 0, $call332 = 0, $call334 = 0, $call338 = 0, $call340 = 0, $call344 = 0, $call346 = 0, $call35 = 0, $call355 = 0;
 var $call357 = 0, $call361 = 0, $call363 = 0, $call367 = 0, $call369 = 0, $call37 = 0, $call373 = 0, $call375 = 0, $call379 = 0, $call381 = 0, $call383 = 0, $call386 = 0, $call387 = 0, $call391 = 0, $call399 = 0, $call4 = 0, $call400 = 0, $call404 = 0, $call406 = 0, $call41 = 0;
 var $call410 = 0, $call412 = 0, $call416 = 0, $call418 = 0, $call423 = 0, $call424 = 0, $call428 = 0, $call43 = 0, $call436 = 0, $call437 = 0, $call441 = 0, $call443 = 0, $call447 = 0, $call449 = 0, $call453 = 0, $call455 = 0, $call464 = 0, $call466 = 0, $call47 = 0, $call470 = 0;
 var $call472 = 0, $call476 = 0, $call478 = 0, $call482 = 0, $call484 = 0, $call486 = 0, $call489 = 0, $call49 = 0, $call490 = 0, $call494 = 0, $call499 = 0, $call501 = 0, $call505 = 0, $call506 = 0, $call511 = 0, $call515 = 0, $call527 = 0, $call528 = 0, $call53 = 0, $call534 = 0;
 var $call540 = 0, $call544 = 0, $call55 = 0, $call557 = 0, $call558 = 0, $call564 = 0, $call568 = 0, $call574 = 0, $call576 = 0, $call580 = 0, $call582 = 0, $call586 = 0, $call588 = 0, $call59 = 0, $call592 = 0, $call594 = 0, $call6 = 0, $call60 = 0, $call604 = 0, $call605 = 0;
 var $call611 = 0, $call615 = 0, $call621 = 0, $call622 = 0, $call626 = 0, $call629 = 0, $call630 = 0, $call635 = 0, $call636 = 0, $call64 = 0, $call640 = 0, $call646 = 0, $call647 = 0, $call651 = 0, $call656 = 0, $call661 = 0, $call662 = 0, $call666 = 0, $call672 = 0, $call673 = 0;
 var $call677 = 0, $call685 = 0, $call687 = 0, $call69 = 0, $call690 = 0, $call691 = 0, $call7 = 0, $call70 = 0, $call701 = 0, $call705 = 0, $call717 = 0, $call718 = 0, $call722 = 0, $call728 = 0, $call729 = 0, $call733 = 0, $call739 = 0, $call74 = 0, $call740 = 0, $call746 = 0;
 var $call748 = 0, $call753 = 0, $call763 = 0, $call769 = 0, $call774 = 0, $call775 = 0, $call779 = 0, $call783 = 0, $call784 = 0, $call84 = 0, $call85 = 0, $call9 = 0, $call90 = 0, $call94 = 0, $cmp = 0, $cmp102 = 0, $cmp109 = 0, $cmp143 = 0, $cmp154 = 0, $cmp160 = 0;
 var $cmp178 = 0, $cmp192 = 0, $cmp197 = 0, $cmp209 = 0, $cmp215 = 0, $cmp283 = 0, $cmp288 = 0, $cmp306 = 0, $cmp388 = 0, $cmp425 = 0, $cmp491 = 0, $cmp507 = 0, $cmp512 = 0, $cmp523 = 0, $cmp529 = 0, $cmp535 = 0, $cmp541 = 0, $cmp559 = 0, $cmp565 = 0, $cmp606 = 0;
 var $cmp61 = 0, $cmp612 = 0, $cmp623 = 0, $cmp637 = 0, $cmp648 = 0, $cmp663 = 0, $cmp674 = 0, $cmp692 = 0, $cmp71 = 0, $cmp719 = 0, $cmp730 = 0, $cmp741 = 0, $cmp754 = 0, $cmp776 = 0, $cmp86 = 0, $cmp91 = 0, $conv = 0, $conv136 = 0, $conv16 = 0, $conv237 = 0;
 var $conv26 = 0, $conv260 = 0, $conv277 = 0, $conv322 = 0, $conv351 = 0, $conv397 = 0, $conv434 = 0, $conv460 = 0, $conv552 = 0, $conv599 = 0, $conv712 = 0, $conv79 = 0, $frombool = 0, $isdigit = 0, $isdigittmp = 0, $ref$tmp = 0, $ref$tmp146 = 0, $ref$tmp181 = 0, $ref$tmp314 = 0, $ref$tmp315 = 0;
 var $ref$tmp700 = 0, $ref$tmp762 = 0, $retval$0 = 0, $retval$1 = 0, $retval$10 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$15 = 0, $retval$16 = 0, $retval$17 = 0, $retval$2 = 0, $retval$21 = 0, $retval$22 = 0, $retval$23 = 0, $retval$24 = 0, $retval$25 = 0, $retval$26 = 0, $retval$27 = 0;
 var $retval$28 = 0, $retval$29 = 0, $retval$3 = 0, $retval$30 = 0, $retval$31 = 0, $retval$32 = 0, $retval$33 = 0, $retval$34 = 0, $retval$35 = 0, $retval$36 = 0, $retval$37 = 0, $retval$42 = 0, $retval$43 = 0, $retval$47 = 0, $retval$48 = 0, $retval$49 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $agg$tmp593$byval_copy = sp + 864|0;
 $agg$tmp587$byval_copy = sp + 856|0;
 $agg$tmp581$byval_copy = sp + 848|0;
 $agg$tmp575$byval_copy = sp + 840|0;
 $agg$tmp500$byval_copy = sp + 832|0;
 $agg$tmp485$byval_copy = sp + 824|0;
 $agg$tmp477$byval_copy = sp + 816|0;
 $agg$tmp471$byval_copy = sp + 808|0;
 $agg$tmp465$byval_copy = sp + 800|0;
 $agg$tmp454$byval_copy = sp + 792|0;
 $agg$tmp448$byval_copy = sp + 784|0;
 $agg$tmp442$byval_copy = sp + 776|0;
 $agg$tmp417$byval_copy = sp + 768|0;
 $agg$tmp411$byval_copy = sp + 760|0;
 $agg$tmp405$byval_copy = sp + 752|0;
 $agg$tmp382$byval_copy = sp + 744|0;
 $agg$tmp374$byval_copy = sp + 736|0;
 $agg$tmp368$byval_copy = sp + 728|0;
 $agg$tmp362$byval_copy = sp + 720|0;
 $agg$tmp356$byval_copy = sp + 712|0;
 $agg$tmp345$byval_copy = sp + 704|0;
 $agg$tmp339$byval_copy = sp + 696|0;
 $agg$tmp333$byval_copy = sp + 688|0;
 $agg$tmp327$byval_copy = sp + 680|0;
 $agg$tmp271$byval_copy = sp + 672|0;
 $agg$tmp265$byval_copy = sp + 664|0;
 $agg$tmp254$byval_copy = sp + 656|0;
 $agg$tmp248$byval_copy = sp + 648|0;
 $agg$tmp242$byval_copy = sp + 640|0;
 $agg$tmp231$byval_copy = sp + 632|0;
 $agg$tmp225$byval_copy = sp + 624|0;
 $agg$tmp170$byval_copy = sp + 616|0;
 $agg$tmp127$byval_copy = sp + 608|0;
 $agg$tmp121$byval_copy = sp + 600|0;
 $agg$tmp54$byval_copy = sp + 592|0;
 $agg$tmp48$byval_copy = sp + 584|0;
 $agg$tmp42$byval_copy = sp + 576|0;
 $agg$tmp36$byval_copy = sp + 568|0;
 $agg$tmp30$byval_copy = sp + 560|0;
 $agg$tmp$byval_copy = sp + 552|0;
 $Global = sp + 874|0;
 $agg$tmp = sp + 544|0;
 $agg$tmp30 = sp + 536|0;
 $agg$tmp36 = sp + 528|0;
 $agg$tmp42 = sp + 520|0;
 $agg$tmp48 = sp + 512|0;
 $agg$tmp54 = sp + 504|0;
 $Ty = sp + 500|0;
 $Ty68 = sp + 496|0;
 $Ty83 = sp + 492|0;
 $Ex = sp + 488|0;
 $Callee = sp + 484|0;
 $E = sp + 480|0;
 $ref$tmp = sp + 472|0;
 $agg$tmp121 = sp + 464|0;
 $agg$tmp127 = sp + 456|0;
 $Ex140 = sp + 448|0;
 $ref$tmp146 = sp + 873|0;
 $T = sp + 444|0;
 $Ex157 = sp + 440|0;
 $agg$tmp170 = sp + 432|0;
 $E175 = sp + 424|0;
 $ref$tmp181 = sp + 872|0;
 $LHS = sp + 420|0;
 $RHS = sp + 416|0;
 $LHS206 = sp + 412|0;
 $RHS212 = sp + 408|0;
 $agg$tmp225 = sp + 400|0;
 $agg$tmp231 = sp + 392|0;
 $agg$tmp242 = sp + 384|0;
 $agg$tmp248 = sp + 376|0;
 $agg$tmp254 = sp + 368|0;
 $agg$tmp265 = sp + 360|0;
 $agg$tmp271 = sp + 352|0;
 $Base = sp + 348|0;
 $Index = sp + 344|0;
 $E303 = sp + 340|0;
 $ref$tmp314 = sp + 336|0;
 $ref$tmp315 = sp + 328|0;
 $agg$tmp327 = sp + 320|0;
 $agg$tmp333 = sp + 312|0;
 $agg$tmp339 = sp + 304|0;
 $agg$tmp345 = sp + 296|0;
 $agg$tmp356 = sp + 288|0;
 $agg$tmp362 = sp + 280|0;
 $agg$tmp368 = sp + 272|0;
 $agg$tmp374 = sp + 264|0;
 $agg$tmp382 = sp + 256|0;
 $Ex385 = sp + 248|0;
 $agg$tmp405 = sp + 240|0;
 $agg$tmp411 = sp + 232|0;
 $agg$tmp417 = sp + 224|0;
 $Ex422 = sp + 216|0;
 $agg$tmp442 = sp + 208|0;
 $agg$tmp448 = sp + 200|0;
 $agg$tmp454 = sp + 192|0;
 $agg$tmp465 = sp + 184|0;
 $agg$tmp471 = sp + 176|0;
 $agg$tmp477 = sp + 168|0;
 $agg$tmp485 = sp + 160|0;
 $Ex488 = sp + 152|0;
 $agg$tmp500 = sp + 144|0;
 $L = sp + 136|0;
 $R = sp + 132|0;
 $Cond = sp + 128|0;
 $LHS532 = sp + 124|0;
 $RHS538 = sp + 120|0;
 $T556 = sp + 116|0;
 $Ex562 = sp + 112|0;
 $agg$tmp575 = sp + 104|0;
 $agg$tmp581 = sp + 96|0;
 $agg$tmp587 = sp + 88|0;
 $agg$tmp593 = sp + 80|0;
 $T603 = sp + 72|0;
 $Ex609 = sp + 68|0;
 $Child = sp + 64|0;
 $Ty634 = sp + 60|0;
 $Ex645 = sp + 56|0;
 $R660 = sp + 52|0;
 $FP = sp + 48|0;
 $Arg = sp + 44|0;
 $Pack = sp + 40|0;
 $ref$tmp700 = sp + 32|0;
 $Ex716 = sp + 28|0;
 $Ty727 = sp + 24|0;
 $Ty738 = sp + 20|0;
 $E751 = sp + 16|0;
 $ref$tmp762 = sp + 8|0;
 $Ex773 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23164);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 $frombool = $call&1;
 HEAP8[$Global>>0] = $frombool;
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call2>>>0)<(2);
 L1: do {
  if ($cmp) {
   $retval$49 = 0;
  } else {
   $0 = HEAP32[$this>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $conv = $1 << 24 >> 24;
   do {
    switch ($conv|0) {
    case 76:  {
     $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($call3)|0);
     $retval$49 = $call4;
     break L1;
     break;
    }
    case 84:  {
     $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call6)|0);
     $retval$49 = $call7;
     break L1;
     break;
    }
    case 102:  {
     $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
     switch ($call9<<24>>24) {
     case 112:  {
      label = 7;
      break;
     }
     case 76:  {
      $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,2)|0);
      $conv16 = $call15 << 24 >> 24;
      $isdigittmp = (($conv16) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       label = 7;
      } else {
       label = 8;
      }
      break;
     }
     default: {
      label = 8;
     }
     }
     if ((label|0) == 7) {
      $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($call19)|0);
      $retval$49 = $call20;
      break L1;
     }
     else if ((label|0) == 8) {
      $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv($call22)|0);
      $retval$49 = $call23;
      break L1;
     }
     break;
    }
    case 97:  {
     $arrayidx = ((($0)) + 1|0);
     $2 = HEAP8[$arrayidx>>0]|0;
     $conv26 = $2 << 24 >> 24;
     switch ($conv26|0) {
     case 97:  {
      $add$ptr = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr;
      $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp30,22455);
      ;HEAP32[$agg$tmp30$byval_copy>>2]=HEAP32[$agg$tmp30>>2]|0;HEAP32[$agg$tmp30$byval_copy+4>>2]=HEAP32[$agg$tmp30+4>>2]|0;
      $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call29,$agg$tmp30$byval_copy)|0);
      $retval$49 = $call31;
      break L1;
      break;
     }
     case 100:  {
      $add$ptr34 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr34;
      $call35 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp36,22453);
      ;HEAP32[$agg$tmp36$byval_copy>>2]=HEAP32[$agg$tmp36>>2]|0;HEAP32[$agg$tmp36$byval_copy+4>>2]=HEAP32[$agg$tmp36+4>>2]|0;
      $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call35,$agg$tmp36$byval_copy)|0);
      $retval$49 = $call37;
      break L1;
      break;
     }
     case 110:  {
      $add$ptr40 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr40;
      $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42,22453);
      ;HEAP32[$agg$tmp42$byval_copy>>2]=HEAP32[$agg$tmp42>>2]|0;HEAP32[$agg$tmp42$byval_copy+4>>2]=HEAP32[$agg$tmp42+4>>2]|0;
      $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call41,$agg$tmp42$byval_copy)|0);
      $retval$49 = $call43;
      break L1;
      break;
     }
     case 78:  {
      $add$ptr46 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr46;
      $call47 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp48,23167);
      ;HEAP32[$agg$tmp48$byval_copy>>2]=HEAP32[$agg$tmp48>>2]|0;HEAP32[$agg$tmp48$byval_copy+4>>2]=HEAP32[$agg$tmp48+4>>2]|0;
      $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call47,$agg$tmp48$byval_copy)|0);
      $retval$49 = $call49;
      break L1;
      break;
     }
     case 83:  {
      $add$ptr52 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr52;
      $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp54,23170);
      ;HEAP32[$agg$tmp54$byval_copy>>2]=HEAP32[$agg$tmp54>>2]|0;HEAP32[$agg$tmp54$byval_copy+4>>2]=HEAP32[$agg$tmp54+4>>2]|0;
      $call55 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call53,$agg$tmp54$byval_copy)|0);
      $retval$49 = $call55;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr58 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr58;
      $call59 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call59)|0);
      HEAP32[$Ty>>2] = $call60;
      $cmp61 = ($call60|0)==(0|0);
      if ($cmp61) {
       $retval$0 = 0;
      } else {
       $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,23172,$Ty)|0);
       $retval$0 = $call64;
      }
      $retval$49 = $retval$0;
      break L1;
      break;
     }
     case 122:  {
      $add$ptr67 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr67;
      $call69 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call70 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call69)|0);
      HEAP32[$Ty68>>2] = $call70;
      $cmp71 = ($call70|0)==(0|0);
      if ($cmp71) {
       $retval$1 = 0;
      } else {
       $call74 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,23172,$Ty68)|0);
       $retval$1 = $call74;
      }
      $retval$49 = $retval$1;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $arrayidx78 = ((($0)) + 1|0);
     $3 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $3 << 24 >> 24;
     switch ($conv79|0) {
     case 99:  {
      $add$ptr82 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr82;
      $call84 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call85 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call84)|0);
      HEAP32[$Ty83>>2] = $call85;
      $cmp86 = ($call85|0)==(0|0);
      if ($cmp86) {
       $retval$3 = 0;
      } else {
       $call90 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call84)|0);
       HEAP32[$Ex>>2] = $call90;
       $cmp91 = ($call90|0)==(0|0);
       if ($cmp91) {
        $retval$2 = 0;
       } else {
        $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$Ty83,$Ex)|0);
        $retval$2 = $call94;
       }
       $retval$3 = $retval$2;
      }
      $retval$49 = $retval$3;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr99 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr99;
      $call100 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call101 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100)|0);
      HEAP32[$Callee>>2] = $call101;
      $cmp102 = ($call101|0)==(0|0);
      do {
       if ($cmp102) {
        $retval$7 = 0;
       } else {
        $Names = ((($this)) + 8|0);
        $call105 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
        while(1) {
         $call106 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
         if ($call106) {
          label = 33;
          break;
         }
         $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100)|0);
         HEAP32[$E>>2] = $call108;
         $cmp109 = ($call108|0)==(0|0);
         if ($cmp109) {
          label = 31;
          break;
         }
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$E);
        }
        if ((label|0) == 31) {
         $retval$7 = 0;
         break;
        }
        else if ((label|0) == 33) {
         __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call105);
         $call114 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$Callee,$ref$tmp)|0);
         $retval$7 = $call114;
         break;
        }
       }
      } while(0);
      $retval$49 = $retval$7;
      break L1;
      break;
     }
     case 109:  {
      $add$ptr119 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr119;
      $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp121,23182);
      ;HEAP32[$agg$tmp121$byval_copy>>2]=HEAP32[$agg$tmp121>>2]|0;HEAP32[$agg$tmp121$byval_copy+4>>2]=HEAP32[$agg$tmp121+4>>2]|0;
      $call122 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call120,$agg$tmp121$byval_copy)|0);
      $retval$49 = $call122;
      break L1;
      break;
     }
     case 111:  {
      $add$ptr125 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr125;
      $call126 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127,23184);
      ;HEAP32[$agg$tmp127$byval_copy>>2]=HEAP32[$agg$tmp127>>2]|0;HEAP32[$agg$tmp127$byval_copy+4>>2]=HEAP32[$agg$tmp127+4>>2]|0;
      $call128 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call126,$agg$tmp127$byval_copy)|0);
      $retval$49 = $call128;
      break L1;
      break;
     }
     case 118:  {
      $call130 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv($call130)|0);
      $retval$49 = $call131;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $arrayidx135 = ((($0)) + 1|0);
     $4 = HEAP8[$arrayidx135>>0]|0;
     $conv136 = $4 << 24 >> 24;
     switch ($conv136|0) {
     case 97:  {
      $add$ptr139 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr139;
      $call141 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call142 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call141)|0);
      HEAP32[$Ex140>>2] = $call142;
      $cmp143 = ($call142|0)==(0|0);
      if ($cmp143) {
       $retval$8 = 0;
      } else {
       HEAP8[$ref$tmp146>>0] = 1;
       $call147 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this,$Ex140,$Global,$ref$tmp146)|0);
       $retval$8 = $call147;
      }
      $retval$49 = $retval$8;
      break L1;
      break;
     }
     case 99:  {
      $add$ptr151 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr151;
      $call152 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call153 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call152)|0);
      HEAP32[$T>>2] = $call153;
      $cmp154 = ($call153|0)==(0|0);
      if ($cmp154) {
       $retval$10 = 0;
      } else {
       $call159 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call152)|0);
       HEAP32[$Ex157>>2] = $call159;
       $cmp160 = ($call159|0)==(0|0);
       if ($cmp160) {
        $retval$9 = 0;
       } else {
        $call163 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$T,$Ex157)|0);
        $retval$9 = $call163;
       }
       $retval$10 = $retval$9;
      }
      $retval$49 = $retval$10;
      break L1;
      break;
     }
     case 101:  {
      $add$ptr168 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr168;
      $call169 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp170,22520);
      ;HEAP32[$agg$tmp170$byval_copy>>2]=HEAP32[$agg$tmp170>>2]|0;HEAP32[$agg$tmp170$byval_copy+4>>2]=HEAP32[$agg$tmp170+4>>2]|0;
      $call171 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call169,$agg$tmp170$byval_copy)|0);
      $retval$49 = $call171;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr174 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr174;
      $call176 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call177 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call176)|0);
      HEAP32[$E175>>2] = $call177;
      $cmp178 = ($call177|0)==(0|0);
      if ($cmp178) {
       $retval$11 = 0;
      } else {
       HEAP8[$ref$tmp181>>0] = 0;
       $call182 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this,$E175,$Global,$ref$tmp181)|0);
       $retval$11 = $call182;
      }
      $retval$49 = $retval$11;
      break L1;
      break;
     }
     case 110:  {
      $call185 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call186 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call185)|0);
      $retval$49 = $call186;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr189 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr189;
      $call190 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call191 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190)|0);
      HEAP32[$LHS>>2] = $call191;
      $cmp192 = ($call191|0)==(0|0);
      if ($cmp192) {
       $retval$13 = 0;
      } else {
       $call196 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190)|0);
       HEAP32[$RHS>>2] = $call196;
       $cmp197 = ($call196|0)==(0|0);
       if ($cmp197) {
        $retval$12 = 0;
       } else {
        $call200 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this,$LHS,23186,$RHS)|0);
        $retval$12 = $call200;
       }
       $retval$13 = $retval$12;
      }
      $retval$49 = $retval$13;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr205 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr205;
      $call207 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call208 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207)|0);
      HEAP32[$LHS206>>2] = $call208;
      $cmp209 = ($call208|0)==(0|0);
      if ($cmp209) {
       $retval$15 = 0;
      } else {
       $call214 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207)|0);
       HEAP32[$RHS212>>2] = $call214;
       $cmp215 = ($call214|0)==(0|0);
       if ($cmp215) {
        $retval$14 = 0;
       } else {
        $call218 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this,$LHS206,$RHS212)|0);
        $retval$14 = $call218;
       }
       $retval$15 = $retval$14;
      }
      $retval$49 = $retval$15;
      break L1;
      break;
     }
     case 118:  {
      $add$ptr223 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr223;
      $call224 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp225,23189);
      ;HEAP32[$agg$tmp225$byval_copy>>2]=HEAP32[$agg$tmp225>>2]|0;HEAP32[$agg$tmp225$byval_copy+4>>2]=HEAP32[$agg$tmp225+4>>2]|0;
      $call226 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call224,$agg$tmp225$byval_copy)|0);
      $retval$49 = $call226;
      break L1;
      break;
     }
     case 86:  {
      $add$ptr229 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr229;
      $call230 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp231,23191);
      ;HEAP32[$agg$tmp231$byval_copy>>2]=HEAP32[$agg$tmp231>>2]|0;HEAP32[$agg$tmp231$byval_copy+4>>2]=HEAP32[$agg$tmp231+4>>2]|0;
      $call232 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call230,$agg$tmp231$byval_copy)|0);
      $retval$49 = $call232;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $arrayidx236 = ((($0)) + 1|0);
     $5 = HEAP8[$arrayidx236>>0]|0;
     $conv237 = $5 << 24 >> 24;
     switch ($conv237|0) {
     case 111:  {
      $add$ptr240 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr240;
      $call241 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp242,23194);
      ;HEAP32[$agg$tmp242$byval_copy>>2]=HEAP32[$agg$tmp242>>2]|0;HEAP32[$agg$tmp242$byval_copy+4>>2]=HEAP32[$agg$tmp242+4>>2]|0;
      $call243 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call241,$agg$tmp242$byval_copy)|0);
      $retval$49 = $call243;
      break L1;
      break;
     }
     case 79:  {
      $add$ptr246 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr246;
      $call247 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp248,23196);
      ;HEAP32[$agg$tmp248$byval_copy>>2]=HEAP32[$agg$tmp248>>2]|0;HEAP32[$agg$tmp248$byval_copy+4>>2]=HEAP32[$agg$tmp248+4>>2]|0;
      $call249 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call247,$agg$tmp248$byval_copy)|0);
      $retval$49 = $call249;
      break L1;
      break;
     }
     case 113:  {
      $add$ptr252 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr252;
      $call253 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp254,23199);
      ;HEAP32[$agg$tmp254$byval_copy>>2]=HEAP32[$agg$tmp254>>2]|0;HEAP32[$agg$tmp254$byval_copy+4>>2]=HEAP32[$agg$tmp254+4>>2]|0;
      $call255 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call253,$agg$tmp254$byval_copy)|0);
      $retval$49 = $call255;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $arrayidx259 = ((($0)) + 1|0);
     $6 = HEAP8[$arrayidx259>>0]|0;
     $conv260 = $6 << 24 >> 24;
     switch ($conv260|0) {
     case 101:  {
      $add$ptr263 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr263;
      $call264 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp265,23202);
      ;HEAP32[$agg$tmp265$byval_copy>>2]=HEAP32[$agg$tmp265>>2]|0;HEAP32[$agg$tmp265$byval_copy+4>>2]=HEAP32[$agg$tmp265+4>>2]|0;
      $call266 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call264,$agg$tmp265$byval_copy)|0);
      $retval$49 = $call266;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr269 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr269;
      $call270 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp271,22526);
      ;HEAP32[$agg$tmp271$byval_copy>>2]=HEAP32[$agg$tmp271>>2]|0;HEAP32[$agg$tmp271$byval_copy+4>>2]=HEAP32[$agg$tmp271+4>>2]|0;
      $call272 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call270,$agg$tmp271$byval_copy)|0);
      $retval$49 = $call272;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $arrayidx276 = ((($0)) + 1|0);
     $7 = HEAP8[$arrayidx276>>0]|0;
     $conv277 = $7 << 24 >> 24;
     switch ($conv277|0) {
     case 120:  {
      $add$ptr280 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr280;
      $call281 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call282 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281)|0);
      HEAP32[$Base>>2] = $call282;
      $cmp283 = ($call282|0)==(0|0);
      if ($cmp283) {
       $retval$17 = 0;
      } else {
       $call287 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281)|0);
       HEAP32[$Index>>2] = $call287;
       $cmp288 = ($call287|0)==(0|0);
       if ($cmp288) {
        $retval$16 = 0;
       } else {
        $call291 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Base,$Index)|0);
        $retval$16 = $call291;
       }
       $retval$17 = $retval$16;
      }
      $retval$49 = $retval$17;
      break L1;
      break;
     }
     case 108:  {
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     $add$ptr296 = ((($0)) + 2|0);
     HEAP32[$this>>2] = $add$ptr296;
     $Names297 = ((($this)) + 8|0);
     $call298 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names297)|0);
     while(1) {
      $call300 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call300) {
       label = 82;
       break;
      }
      $call304 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call305 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call304)|0);
      HEAP32[$E303>>2] = $call305;
      $cmp306 = ($call305|0)==(0|0);
      if ($cmp306) {
       label = 81;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names297,$E303);
     }
     if ((label|0) == 81) {
      $retval$49 = 0;
      break L1;
     }
     else if ((label|0) == 82) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp315,$this,$call298);
      $call316 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp314,$ref$tmp315)|0);
      $retval$49 = $call316;
      break L1;
     }
     break;
    }
    case 108:  {
     $arrayidx321 = ((($0)) + 1|0);
     $8 = HEAP8[$arrayidx321>>0]|0;
     $conv322 = $8 << 24 >> 24;
     switch ($conv322|0) {
     case 101:  {
      $add$ptr325 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr325;
      $call326 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp327,23205);
      ;HEAP32[$agg$tmp327$byval_copy>>2]=HEAP32[$agg$tmp327>>2]|0;HEAP32[$agg$tmp327$byval_copy+4>>2]=HEAP32[$agg$tmp327+4>>2]|0;
      $call328 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call326,$agg$tmp327$byval_copy)|0);
      $retval$49 = $call328;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr331 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr331;
      $call332 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp333,23208);
      ;HEAP32[$agg$tmp333$byval_copy>>2]=HEAP32[$agg$tmp333>>2]|0;HEAP32[$agg$tmp333$byval_copy+4>>2]=HEAP32[$agg$tmp333+4>>2]|0;
      $call334 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call332,$agg$tmp333$byval_copy)|0);
      $retval$49 = $call334;
      break L1;
      break;
     }
     case 83:  {
      $add$ptr337 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr337;
      $call338 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp339,23211);
      ;HEAP32[$agg$tmp339$byval_copy>>2]=HEAP32[$agg$tmp339>>2]|0;HEAP32[$agg$tmp339$byval_copy+4>>2]=HEAP32[$agg$tmp339+4>>2]|0;
      $call340 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call338,$agg$tmp339$byval_copy)|0);
      $retval$49 = $call340;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr343 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr343;
      $call344 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp345,22633);
      ;HEAP32[$agg$tmp345$byval_copy>>2]=HEAP32[$agg$tmp345>>2]|0;HEAP32[$agg$tmp345$byval_copy+4>>2]=HEAP32[$agg$tmp345+4>>2]|0;
      $call346 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call344,$agg$tmp345$byval_copy)|0);
      $retval$49 = $call346;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $arrayidx350 = ((($0)) + 1|0);
     $9 = HEAP8[$arrayidx350>>0]|0;
     $conv351 = $9 << 24 >> 24;
     switch ($conv351|0) {
     case 105:  {
      $add$ptr354 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr354;
      $call355 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp356,23054);
      ;HEAP32[$agg$tmp356$byval_copy>>2]=HEAP32[$agg$tmp356>>2]|0;HEAP32[$agg$tmp356$byval_copy+4>>2]=HEAP32[$agg$tmp356+4>>2]|0;
      $call357 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call355,$agg$tmp356$byval_copy)|0);
      $retval$49 = $call357;
      break L1;
      break;
     }
     case 73:  {
      $add$ptr360 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr360;
      $call361 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp362,23215);
      ;HEAP32[$agg$tmp362$byval_copy>>2]=HEAP32[$agg$tmp362>>2]|0;HEAP32[$agg$tmp362$byval_copy+4>>2]=HEAP32[$agg$tmp362+4>>2]|0;
      $call363 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call361,$agg$tmp362$byval_copy)|0);
      $retval$49 = $call363;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr366 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr366;
      $call367 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp368,22520);
      ;HEAP32[$agg$tmp368$byval_copy>>2]=HEAP32[$agg$tmp368>>2]|0;HEAP32[$agg$tmp368$byval_copy+4>>2]=HEAP32[$agg$tmp368+4>>2]|0;
      $call369 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call367,$agg$tmp368$byval_copy)|0);
      $retval$49 = $call369;
      break L1;
      break;
     }
     case 76:  {
      $add$ptr372 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr372;
      $call373 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp374,23218);
      ;HEAP32[$agg$tmp374$byval_copy>>2]=HEAP32[$agg$tmp374>>2]|0;HEAP32[$agg$tmp374$byval_copy+4>>2]=HEAP32[$agg$tmp374+4>>2]|0;
      $call375 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call373,$agg$tmp374$byval_copy)|0);
      $retval$49 = $call375;
      break L1;
      break;
     }
     case 109:  {
      $add$ptr378 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr378;
      $call379 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      if ($call379) {
       $call381 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp382,23221);
       ;HEAP32[$agg$tmp382$byval_copy>>2]=HEAP32[$agg$tmp382>>2]|0;HEAP32[$agg$tmp382$byval_copy+4>>2]=HEAP32[$agg$tmp382+4>>2]|0;
       $call383 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call381,$agg$tmp382$byval_copy)|0);
       $retval$49 = $call383;
       break L1;
      }
      $call386 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call387 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call386)|0);
      HEAP32[$Ex385>>2] = $call387;
      $cmp388 = ($call387|0)==(0|0);
      if ($cmp388) {
       $retval$21 = 0;
      } else {
       $call391 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this,$Ex385,23221)|0);
       $retval$21 = $call391;
      }
      $retval$49 = $retval$21;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $arrayidx396 = ((($0)) + 1|0);
     $10 = HEAP8[$arrayidx396>>0]|0;
     $conv397 = $10 << 24 >> 24;
     switch ($conv397|0) {
     case 119: case 97:  {
      $call399 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call400 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv($call399)|0);
      $retval$49 = $call400;
      break L1;
      break;
     }
     case 101:  {
      $add$ptr403 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr403;
      $call404 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp405,23224);
      ;HEAP32[$agg$tmp405$byval_copy>>2]=HEAP32[$agg$tmp405>>2]|0;HEAP32[$agg$tmp405$byval_copy+4>>2]=HEAP32[$agg$tmp405+4>>2]|0;
      $call406 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call404,$agg$tmp405$byval_copy)|0);
      $retval$49 = $call406;
      break L1;
      break;
     }
     case 103:  {
      $add$ptr409 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr409;
      $call410 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp411,23054);
      ;HEAP32[$agg$tmp411$byval_copy>>2]=HEAP32[$agg$tmp411>>2]|0;HEAP32[$agg$tmp411$byval_copy+4>>2]=HEAP32[$agg$tmp411+4>>2]|0;
      $call412 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call410,$agg$tmp411$byval_copy)|0);
      $retval$49 = $call412;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr415 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr415;
      $call416 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp417,23227);
      ;HEAP32[$agg$tmp417$byval_copy>>2]=HEAP32[$agg$tmp417>>2]|0;HEAP32[$agg$tmp417$byval_copy+4>>2]=HEAP32[$agg$tmp417+4>>2]|0;
      $call418 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call416,$agg$tmp417$byval_copy)|0);
      $retval$49 = $call418;
      break L1;
      break;
     }
     case 120:  {
      $add$ptr421 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr421;
      $call423 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call424 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call423)|0);
      HEAP32[$Ex422>>2] = $call424;
      $cmp425 = ($call424|0)==(0|0);
      if ($cmp425) {
       $retval$22 = 0;
      } else {
       $call428 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$Ex422)|0);
       $retval$22 = $call428;
      }
      $retval$49 = $retval$22;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $arrayidx433 = ((($0)) + 1|0);
     $11 = HEAP8[$arrayidx433>>0]|0;
     $conv434 = $11 << 24 >> 24;
     switch ($conv434|0) {
     case 110:  {
      $call436 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call437 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call436)|0);
      $retval$49 = $call437;
      break L1;
      break;
     }
     case 111:  {
      $add$ptr440 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr440;
      $call441 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp442,23229);
      ;HEAP32[$agg$tmp442$byval_copy>>2]=HEAP32[$agg$tmp442>>2]|0;HEAP32[$agg$tmp442$byval_copy+4>>2]=HEAP32[$agg$tmp442+4>>2]|0;
      $call443 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call441,$agg$tmp442$byval_copy)|0);
      $retval$49 = $call443;
      break L1;
      break;
     }
     case 114:  {
      $add$ptr446 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr446;
      $call447 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp448,23232);
      ;HEAP32[$agg$tmp448$byval_copy>>2]=HEAP32[$agg$tmp448>>2]|0;HEAP32[$agg$tmp448$byval_copy+4>>2]=HEAP32[$agg$tmp448+4>>2]|0;
      $call449 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call447,$agg$tmp448$byval_copy)|0);
      $retval$49 = $call449;
      break L1;
      break;
     }
     case 82:  {
      $add$ptr452 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr452;
      $call453 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp454,23234);
      ;HEAP32[$agg$tmp454$byval_copy>>2]=HEAP32[$agg$tmp454>>2]|0;HEAP32[$agg$tmp454$byval_copy+4>>2]=HEAP32[$agg$tmp454+4>>2]|0;
      $call455 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call453,$agg$tmp454$byval_copy)|0);
      $retval$49 = $call455;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $arrayidx459 = ((($0)) + 1|0);
     $12 = HEAP8[$arrayidx459>>0]|0;
     $conv460 = $12 << 24 >> 24;
     switch ($conv460|0) {
     case 109:  {
      $add$ptr463 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr463;
      $call464 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp465,23237);
      ;HEAP32[$agg$tmp465$byval_copy>>2]=HEAP32[$agg$tmp465>>2]|0;HEAP32[$agg$tmp465$byval_copy+4>>2]=HEAP32[$agg$tmp465+4>>2]|0;
      $call466 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call464,$agg$tmp465$byval_copy)|0);
      $retval$49 = $call466;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr469 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr469;
      $call470 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp471,23241);
      ;HEAP32[$agg$tmp471$byval_copy>>2]=HEAP32[$agg$tmp471>>2]|0;HEAP32[$agg$tmp471$byval_copy+4>>2]=HEAP32[$agg$tmp471+4>>2]|0;
      $call472 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call470,$agg$tmp471$byval_copy)|0);
      $retval$49 = $call472;
      break L1;
      break;
     }
     case 76:  {
      $add$ptr475 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr475;
      $call476 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp477,23243);
      ;HEAP32[$agg$tmp477$byval_copy>>2]=HEAP32[$agg$tmp477>>2]|0;HEAP32[$agg$tmp477$byval_copy+4>>2]=HEAP32[$agg$tmp477+4>>2]|0;
      $call478 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call476,$agg$tmp477$byval_copy)|0);
      $retval$49 = $call478;
      break L1;
      break;
     }
     case 112:  {
      $add$ptr481 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr481;
      $call482 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      if ($call482) {
       $call484 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp485,23246);
       ;HEAP32[$agg$tmp485$byval_copy>>2]=HEAP32[$agg$tmp485>>2]|0;HEAP32[$agg$tmp485$byval_copy+4>>2]=HEAP32[$agg$tmp485+4>>2]|0;
       $call486 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call484,$agg$tmp485$byval_copy)|0);
       $retval$49 = $call486;
       break L1;
      }
      $call489 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call490 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call489)|0);
      HEAP32[$Ex488>>2] = $call490;
      $cmp491 = ($call490|0)==(0|0);
      if ($cmp491) {
       $retval$23 = 0;
      } else {
       $call494 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this,$Ex488,23246)|0);
       $retval$23 = $call494;
      }
      $retval$49 = $retval$23;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr498 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr498;
      $call499 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp500,23241);
      ;HEAP32[$agg$tmp500$byval_copy>>2]=HEAP32[$agg$tmp500>>2]|0;HEAP32[$agg$tmp500$byval_copy+4>>2]=HEAP32[$agg$tmp500+4>>2]|0;
      $call501 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call499,$agg$tmp500$byval_copy)|0);
      $retval$49 = $call501;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr504 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr504;
      $call505 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call506 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505)|0);
      HEAP32[$L>>2] = $call506;
      $cmp507 = ($call506|0)==(0|0);
      if ($cmp507) {
       $retval$25 = 0;
      } else {
       $call511 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505)|0);
       HEAP32[$R>>2] = $call511;
       $cmp512 = ($call511|0)==(0|0);
       if ($cmp512) {
        $retval$24 = 0;
       } else {
        $call515 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this,$L,23249,$R)|0);
        $retval$24 = $call515;
       }
       $retval$25 = $retval$24;
      }
      $retval$49 = $retval$25;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $arrayidx521 = ((($0)) + 1|0);
     $13 = HEAP8[$arrayidx521>>0]|0;
     $cmp523 = ($13<<24>>24)==(117);
     if (!($cmp523)) {
      $retval$49 = 0;
      break L1;
     }
     $add$ptr526 = ((($0)) + 2|0);
     HEAP32[$this>>2] = $add$ptr526;
     $call527 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call528 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527)|0);
     HEAP32[$Cond>>2] = $call528;
     $cmp529 = ($call528|0)==(0|0);
     if ($cmp529) {
      $retval$28 = 0;
     } else {
      $call534 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527)|0);
      HEAP32[$LHS532>>2] = $call534;
      $cmp535 = ($call534|0)==(0|0);
      if ($cmp535) {
       $retval$27 = 0;
      } else {
       $call540 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527)|0);
       HEAP32[$RHS538>>2] = $call540;
       $cmp541 = ($call540|0)==(0|0);
       if ($cmp541) {
        $retval$26 = 0;
       } else {
        $call544 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$Cond,$LHS532,$RHS538)|0);
        $retval$26 = $call544;
       }
       $retval$27 = $retval$26;
      }
      $retval$28 = $retval$27;
     }
     $retval$49 = $retval$28;
     break L1;
     break;
    }
    case 114:  {
     $arrayidx551 = ((($0)) + 1|0);
     $14 = HEAP8[$arrayidx551>>0]|0;
     $conv552 = $14 << 24 >> 24;
     switch ($conv552|0) {
     case 99:  {
      $add$ptr555 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr555;
      $call557 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call558 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call557)|0);
      HEAP32[$T556>>2] = $call558;
      $cmp559 = ($call558|0)==(0|0);
      if ($cmp559) {
       $retval$30 = 0;
      } else {
       $call564 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call557)|0);
       HEAP32[$Ex562>>2] = $call564;
       $cmp565 = ($call564|0)==(0|0);
       if ($cmp565) {
        $retval$29 = 0;
       } else {
        $call568 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$T556,$Ex562)|0);
        $retval$29 = $call568;
       }
       $retval$30 = $retval$29;
      }
      $retval$49 = $retval$30;
      break L1;
      break;
     }
     case 109:  {
      $add$ptr573 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr573;
      $call574 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp575,23252);
      ;HEAP32[$agg$tmp575$byval_copy>>2]=HEAP32[$agg$tmp575>>2]|0;HEAP32[$agg$tmp575$byval_copy+4>>2]=HEAP32[$agg$tmp575+4>>2]|0;
      $call576 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call574,$agg$tmp575$byval_copy)|0);
      $retval$49 = $call576;
      break L1;
      break;
     }
     case 77:  {
      $add$ptr579 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr579;
      $call580 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp581,23254);
      ;HEAP32[$agg$tmp581$byval_copy>>2]=HEAP32[$agg$tmp581>>2]|0;HEAP32[$agg$tmp581$byval_copy+4>>2]=HEAP32[$agg$tmp581+4>>2]|0;
      $call582 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call580,$agg$tmp581$byval_copy)|0);
      $retval$49 = $call582;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr585 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr585;
      $call586 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp587,23257);
      ;HEAP32[$agg$tmp587$byval_copy>>2]=HEAP32[$agg$tmp587>>2]|0;HEAP32[$agg$tmp587$byval_copy+4>>2]=HEAP32[$agg$tmp587+4>>2]|0;
      $call588 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call586,$agg$tmp587$byval_copy)|0);
      $retval$49 = $call588;
      break L1;
      break;
     }
     case 83:  {
      $add$ptr591 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr591;
      $call592 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp593,23260);
      ;HEAP32[$agg$tmp593$byval_copy>>2]=HEAP32[$agg$tmp593>>2]|0;HEAP32[$agg$tmp593$byval_copy+4>>2]=HEAP32[$agg$tmp593+4>>2]|0;
      $call594 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call592,$agg$tmp593$byval_copy)|0);
      $retval$49 = $call594;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $arrayidx598 = ((($0)) + 1|0);
     $15 = HEAP8[$arrayidx598>>0]|0;
     $conv599 = $15 << 24 >> 24;
     switch ($conv599|0) {
     case 99:  {
      $add$ptr602 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr602;
      $call604 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call605 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call604)|0);
      HEAP32[$T603>>2] = $call605;
      $cmp606 = ($call605|0)==(0|0);
      if ($cmp606) {
       $retval$32 = 0;
      } else {
       $call611 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call604)|0);
       HEAP32[$Ex609>>2] = $call611;
       $cmp612 = ($call611|0)==(0|0);
       if ($cmp612) {
        $retval$31 = 0;
       } else {
        $call615 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$T603,$Ex609)|0);
        $retval$31 = $call615;
       }
       $retval$32 = $retval$31;
      }
      $retval$49 = $retval$32;
      break L1;
      break;
     }
     case 112:  {
      $add$ptr620 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr620;
      $call621 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call622 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call621)|0);
      HEAP32[$Child>>2] = $call622;
      $cmp623 = ($call622|0)==(0|0);
      if ($cmp623) {
       $retval$33 = 0;
      } else {
       $call626 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this,$Child)|0);
       $retval$33 = $call626;
      }
      $retval$49 = $retval$33;
      break L1;
      break;
     }
     case 114:  {
      $call629 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call630 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call629)|0);
      $retval$49 = $call630;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr633 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr633;
      $call635 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call636 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call635)|0);
      HEAP32[$Ty634>>2] = $call636;
      $cmp637 = ($call636|0)==(0|0);
      if ($cmp637) {
       $retval$34 = 0;
      } else {
       $call640 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,23264,$Ty634)|0);
       $retval$34 = $call640;
      }
      $retval$49 = $retval$34;
      break L1;
      break;
     }
     case 122:  {
      $add$ptr644 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr644;
      $call646 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call647 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call646)|0);
      HEAP32[$Ex645>>2] = $call647;
      $cmp648 = ($call647|0)==(0|0);
      if ($cmp648) {
       $retval$35 = 0;
      } else {
       $call651 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,23264,$Ex645)|0);
       $retval$35 = $call651;
      }
      $retval$49 = $retval$35;
      break L1;
      break;
     }
     case 90:  {
      $add$ptr655 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr655;
      $call656 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
      switch ($call656<<24>>24) {
      case 84:  {
       $call661 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call662 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call661)|0);
       HEAP32[$R660>>2] = $call662;
       $cmp663 = ($call662|0)==(0|0);
       if ($cmp663) {
        $retval$36 = 0;
       } else {
        $call666 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$R660)|0);
        $retval$36 = $call666;
       }
       $retval$49 = $retval$36;
       break L1;
       break;
      }
      case 102:  {
       $call672 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call673 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($call672)|0);
       HEAP32[$FP>>2] = $call673;
       $cmp674 = ($call673|0)==(0|0);
       if ($cmp674) {
        $retval$37 = 0;
       } else {
        $call677 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$FP)|0);
        $retval$37 = $call677;
       }
       $retval$49 = $retval$37;
       break L1;
       break;
      }
      default: {
       $retval$49 = 0;
       break L1;
      }
      }
      break;
     }
     case 80:  {
      $add$ptr683 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr683;
      $Names684 = ((($this)) + 8|0);
      $call685 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names684)|0);
      while(1) {
       $call687 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
       if ($call687) {
        label = 172;
        break;
       }
       $call690 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call691 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call690)|0);
       HEAP32[$Arg>>2] = $call691;
       $cmp692 = ($call691|0)==(0|0);
       if ($cmp692) {
        label = 171;
        break;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names684,$Arg);
      }
      if ((label|0) == 171) {
       $retval$49 = 0;
       break L1;
      }
      else if ((label|0) == 172) {
       __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp700,$this,$call685);
       $call701 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp700)|0);
       HEAP32[$Pack>>2] = $call701;
       $call705 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$Pack)|0);
       $retval$49 = $call705;
       break L1;
      }
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $arrayidx711 = ((($0)) + 1|0);
     $16 = HEAP8[$arrayidx711>>0]|0;
     $conv712 = $16 << 24 >> 24;
     switch ($conv712|0) {
     case 101:  {
      $add$ptr715 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr715;
      $call717 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call718 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call717)|0);
      HEAP32[$Ex716>>2] = $call718;
      $cmp719 = ($call718|0)==(0|0);
      if ($cmp719) {
       $retval$42 = 0;
      } else {
       $call722 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,23273,$Ex716)|0);
       $retval$42 = $call722;
      }
      $retval$49 = $retval$42;
      break L1;
      break;
     }
     case 105:  {
      $add$ptr726 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr726;
      $call728 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call729 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call728)|0);
      HEAP32[$Ty727>>2] = $call729;
      $cmp730 = ($call729|0)==(0|0);
      if ($cmp730) {
       $retval$43 = 0;
      } else {
       $call733 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,23273,$Ty727)|0);
       $retval$43 = $call733;
      }
      $retval$49 = $retval$43;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr737 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr737;
      $call739 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call740 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call739)|0);
      HEAP32[$Ty738>>2] = $call740;
      $cmp741 = ($call740|0)==(0|0);
      do {
       if ($cmp741) {
        $retval$47 = 0;
       } else {
        $Names745 = ((($this)) + 8|0);
        $call746 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names745)|0);
        while(1) {
         $call748 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
         if ($call748) {
          label = 186;
          break;
         }
         $call753 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call739)|0);
         HEAP32[$E751>>2] = $call753;
         $cmp754 = ($call753|0)==(0|0);
         if ($cmp754) {
          label = 185;
          break;
         }
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names745,$E751);
        }
        if ((label|0) == 185) {
         $retval$47 = 0;
         break;
        }
        else if ((label|0) == 186) {
         __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp762,$this,$call746);
         $call763 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$Ty738,$ref$tmp762)|0);
         $retval$47 = $call763;
         break;
        }
       }
      } while(0);
      $retval$49 = $retval$47;
      break L1;
      break;
     }
     case 114:  {
      $add$ptr768 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr768;
      $call769 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,23282)|0);
      $retval$49 = $call769;
      break L1;
      break;
     }
     case 119:  {
      $add$ptr772 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr772;
      $call774 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call775 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call774)|0);
      HEAP32[$Ex773>>2] = $call775;
      $cmp776 = ($call775|0)==(0|0);
      if ($cmp776) {
       $retval$48 = 0;
      } else {
       $call779 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$Ex773)|0);
       $retval$48 = $call779;
      }
      $retval$49 = $retval$48;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $call783 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call784 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call783)|0);
     $retval$49 = $call784;
     break L1;
     break;
    }
    default: {
     $retval$49 = 0;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return ($retval$49|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $N = 0, $T = 0, $agg$tmp = 0;
 var $agg$tmp$byval_copy = 0, $agg$tmp11 = 0, $agg$tmp11$byval_copy = 0, $agg$tmp111 = 0, $agg$tmp111$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp33 = 0, $agg$tmp33$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp45 = 0, $agg$tmp45$byval_copy = 0, $agg$tmp51 = 0, $agg$tmp51$byval_copy = 0, $agg$tmp57 = 0, $agg$tmp57$byval_copy = 0, $agg$tmp6 = 0;
 var $agg$tmp6$byval_copy = 0, $agg$tmp63 = 0, $agg$tmp63$byval_copy = 0, $agg$tmp69 = 0, $agg$tmp69$byval_copy = 0, $agg$tmp75 = 0, $agg$tmp75$byval_copy = 0, $agg$tmp81 = 0, $agg$tmp81$byval_copy = 0, $agg$tmp87 = 0, $agg$tmp87$byval_copy = 0, $agg$tmp93 = 0, $agg$tmp93$byval_copy = 0, $call = 0, $call103 = 0, $call104 = 0, $call108 = 0, $call109 = 0, $call112 = 0, $call114 = 0;
 var $call115 = 0, $call116 = 0, $call12 = 0, $call121 = 0, $call122 = 0, $call126 = 0, $call131 = 0, $call133 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call22 = 0, $call26 = 0, $call28 = 0, $call3 = 0, $call32 = 0, $call34 = 0, $call38 = 0, $call4 = 0, $call40 = 0;
 var $call44 = 0, $call46 = 0, $call50 = 0, $call52 = 0, $call56 = 0, $call58 = 0, $call62 = 0, $call64 = 0, $call68 = 0, $call7 = 0, $call70 = 0, $call74 = 0, $call76 = 0, $call80 = 0, $call82 = 0, $call86 = 0, $call88 = 0, $call9 = 0, $call92 = 0, $call94 = 0;
 var $call98 = 0, $call99 = 0, $cmp = 0, $cmp123 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr107 = 0, $incdec$ptr19 = 0, $incdec$ptr25 = 0, $incdec$ptr31 = 0, $incdec$ptr37 = 0, $incdec$ptr43 = 0, $incdec$ptr49 = 0, $incdec$ptr55 = 0, $incdec$ptr61 = 0, $incdec$ptr67 = 0, $incdec$ptr73 = 0, $incdec$ptr79 = 0, $incdec$ptr85 = 0;
 var $incdec$ptr91 = 0, $incdec$ptr97 = 0, $ref$tmp = 0, $ref$tmp14 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $agg$tmp111$byval_copy = sp + 296|0;
 $agg$tmp93$byval_copy = sp + 288|0;
 $agg$tmp87$byval_copy = sp + 280|0;
 $agg$tmp81$byval_copy = sp + 272|0;
 $agg$tmp75$byval_copy = sp + 264|0;
 $agg$tmp69$byval_copy = sp + 256|0;
 $agg$tmp63$byval_copy = sp + 248|0;
 $agg$tmp57$byval_copy = sp + 240|0;
 $agg$tmp51$byval_copy = sp + 232|0;
 $agg$tmp45$byval_copy = sp + 224|0;
 $agg$tmp39$byval_copy = sp + 216|0;
 $agg$tmp33$byval_copy = sp + 208|0;
 $agg$tmp27$byval_copy = sp + 200|0;
 $agg$tmp21$byval_copy = sp + 192|0;
 $agg$tmp11$byval_copy = sp + 184|0;
 $agg$tmp6$byval_copy = sp + 176|0;
 $agg$tmp$byval_copy = sp + 168|0;
 $agg$tmp = sp + 160|0;
 $agg$tmp6 = sp + 152|0;
 $ref$tmp = sp + 144|0;
 $agg$tmp11 = sp + 136|0;
 $ref$tmp14 = sp + 128|0;
 $agg$tmp21 = sp + 120|0;
 $agg$tmp27 = sp + 112|0;
 $agg$tmp33 = sp + 104|0;
 $agg$tmp39 = sp + 96|0;
 $agg$tmp45 = sp + 88|0;
 $agg$tmp51 = sp + 80|0;
 $agg$tmp57 = sp + 72|0;
 $agg$tmp63 = sp + 64|0;
 $agg$tmp69 = sp + 56|0;
 $agg$tmp75 = sp + 48|0;
 $agg$tmp81 = sp + 40|0;
 $agg$tmp87 = sp + 32|0;
 $agg$tmp93 = sp + 24|0;
 $agg$tmp111 = sp + 16|0;
 $T = sp + 8|0;
 $N = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,76)|0);
 L1: do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $conv = $call2 << 24 >> 24;
   do {
    switch ($conv|0) {
    case 84:  {
     $retval$3 = 0;
     break L1;
     break;
    }
    case 119:  {
     $0 = HEAP32[$this>>2]|0;
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr;
     $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22737);
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
     $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call3,$agg$tmp$byval_copy)|0);
     $retval$3 = $call4;
     break L1;
     break;
    }
    case 98:  {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,22745);
     ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp6$byval_copy)|0);
     if ($call7) {
      HEAP32[$ref$tmp>>2] = 0;
      $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
      $retval$3 = $call9;
      break L1;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11,22749);
     ;HEAP32[$agg$tmp11$byval_copy>>2]=HEAP32[$agg$tmp11>>2]|0;HEAP32[$agg$tmp11$byval_copy+4>>2]=HEAP32[$agg$tmp11+4>>2]|0;
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp11$byval_copy)|0);
     if (!($call12)) {
      $retval$3 = 0;
      break L1;
     }
     HEAP32[$ref$tmp14>>2] = 1;
     $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this,$ref$tmp14)|0);
     $retval$3 = $call15;
     break L1;
     break;
    }
    case 99:  {
     $1 = HEAP32[$this>>2]|0;
     $incdec$ptr19 = ((($1)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr19;
     $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,27577);
     ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
     $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call20,$agg$tmp21$byval_copy)|0);
     $retval$3 = $call22;
     break L1;
     break;
    }
    case 97:  {
     $2 = HEAP32[$this>>2]|0;
     $incdec$ptr25 = ((($2)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr25;
     $call26 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27,27582);
     ;HEAP32[$agg$tmp27$byval_copy>>2]=HEAP32[$agg$tmp27>>2]|0;HEAP32[$agg$tmp27$byval_copy+4>>2]=HEAP32[$agg$tmp27+4>>2]|0;
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call26,$agg$tmp27$byval_copy)|0);
     $retval$3 = $call28;
     break L1;
     break;
    }
    case 104:  {
     $3 = HEAP32[$this>>2]|0;
     $incdec$ptr31 = ((($3)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr31;
     $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp33,27594);
     ;HEAP32[$agg$tmp33$byval_copy>>2]=HEAP32[$agg$tmp33>>2]|0;HEAP32[$agg$tmp33$byval_copy+4>>2]=HEAP32[$agg$tmp33+4>>2]|0;
     $call34 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call32,$agg$tmp33$byval_copy)|0);
     $retval$3 = $call34;
     break L1;
     break;
    }
    case 115:  {
     $4 = HEAP32[$this>>2]|0;
     $incdec$ptr37 = ((($4)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr37;
     $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp39,27608);
     ;HEAP32[$agg$tmp39$byval_copy>>2]=HEAP32[$agg$tmp39>>2]|0;HEAP32[$agg$tmp39$byval_copy+4>>2]=HEAP32[$agg$tmp39+4>>2]|0;
     $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call38,$agg$tmp39$byval_copy)|0);
     $retval$3 = $call40;
     break L1;
     break;
    }
    case 116:  {
     $5 = HEAP32[$this>>2]|0;
     $incdec$ptr43 = ((($5)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr43;
     $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp45,27614);
     ;HEAP32[$agg$tmp45$byval_copy>>2]=HEAP32[$agg$tmp45>>2]|0;HEAP32[$agg$tmp45$byval_copy+4>>2]=HEAP32[$agg$tmp45+4>>2]|0;
     $call46 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call44,$agg$tmp45$byval_copy)|0);
     $retval$3 = $call46;
     break L1;
     break;
    }
    case 105:  {
     $6 = HEAP32[$this>>2]|0;
     $incdec$ptr49 = ((($6)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr49;
     $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp51,31872);
     ;HEAP32[$agg$tmp51$byval_copy>>2]=HEAP32[$agg$tmp51>>2]|0;HEAP32[$agg$tmp51$byval_copy+4>>2]=HEAP32[$agg$tmp51+4>>2]|0;
     $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call50,$agg$tmp51$byval_copy)|0);
     $retval$3 = $call52;
     break L1;
     break;
    }
    case 106:  {
     $7 = HEAP32[$this>>2]|0;
     $incdec$ptr55 = ((($7)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr55;
     $call56 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57,22753);
     ;HEAP32[$agg$tmp57$byval_copy>>2]=HEAP32[$agg$tmp57>>2]|0;HEAP32[$agg$tmp57$byval_copy+4>>2]=HEAP32[$agg$tmp57+4>>2]|0;
     $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call56,$agg$tmp57$byval_copy)|0);
     $retval$3 = $call58;
     break L1;
     break;
    }
    case 108:  {
     $8 = HEAP32[$this>>2]|0;
     $incdec$ptr61 = ((($8)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr61;
     $call62 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63,22755);
     ;HEAP32[$agg$tmp63$byval_copy>>2]=HEAP32[$agg$tmp63>>2]|0;HEAP32[$agg$tmp63$byval_copy+4>>2]=HEAP32[$agg$tmp63+4>>2]|0;
     $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call62,$agg$tmp63$byval_copy)|0);
     $retval$3 = $call64;
     break L1;
     break;
    }
    case 109:  {
     $9 = HEAP32[$this>>2]|0;
     $incdec$ptr67 = ((($9)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr67;
     $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp69,22757);
     ;HEAP32[$agg$tmp69$byval_copy>>2]=HEAP32[$agg$tmp69>>2]|0;HEAP32[$agg$tmp69$byval_copy+4>>2]=HEAP32[$agg$tmp69+4>>2]|0;
     $call70 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call68,$agg$tmp69$byval_copy)|0);
     $retval$3 = $call70;
     break L1;
     break;
    }
    case 120:  {
     $10 = HEAP32[$this>>2]|0;
     $incdec$ptr73 = ((($10)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr73;
     $call74 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp75,22760);
     ;HEAP32[$agg$tmp75$byval_copy>>2]=HEAP32[$agg$tmp75>>2]|0;HEAP32[$agg$tmp75$byval_copy+4>>2]=HEAP32[$agg$tmp75+4>>2]|0;
     $call76 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call74,$agg$tmp75$byval_copy)|0);
     $retval$3 = $call76;
     break L1;
     break;
    }
    case 121:  {
     $11 = HEAP32[$this>>2]|0;
     $incdec$ptr79 = ((($11)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr79;
     $call80 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp81,22763);
     ;HEAP32[$agg$tmp81$byval_copy>>2]=HEAP32[$agg$tmp81>>2]|0;HEAP32[$agg$tmp81$byval_copy+4>>2]=HEAP32[$agg$tmp81+4>>2]|0;
     $call82 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call80,$agg$tmp81$byval_copy)|0);
     $retval$3 = $call82;
     break L1;
     break;
    }
    case 110:  {
     $12 = HEAP32[$this>>2]|0;
     $incdec$ptr85 = ((($12)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr85;
     $call86 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87,21943);
     ;HEAP32[$agg$tmp87$byval_copy>>2]=HEAP32[$agg$tmp87>>2]|0;HEAP32[$agg$tmp87$byval_copy+4>>2]=HEAP32[$agg$tmp87+4>>2]|0;
     $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call86,$agg$tmp87$byval_copy)|0);
     $retval$3 = $call88;
     break L1;
     break;
    }
    case 111:  {
     $13 = HEAP32[$this>>2]|0;
     $incdec$ptr91 = ((($13)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr91;
     $call92 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp93,21952);
     ;HEAP32[$agg$tmp93$byval_copy>>2]=HEAP32[$agg$tmp93>>2]|0;HEAP32[$agg$tmp93$byval_copy+4>>2]=HEAP32[$agg$tmp93+4>>2]|0;
     $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call92,$agg$tmp93$byval_copy)|0);
     $retval$3 = $call94;
     break L1;
     break;
    }
    case 102:  {
     $14 = HEAP32[$this>>2]|0;
     $incdec$ptr97 = ((($14)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr97;
     $call98 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call99 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv($call98)|0);
     $retval$3 = $call99;
     break L1;
     break;
    }
    case 100:  {
     $15 = HEAP32[$this>>2]|0;
     $incdec$ptr102 = ((($15)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr102;
     $call103 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call104 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv($call103)|0);
     $retval$3 = $call104;
     break L1;
     break;
    }
    case 101:  {
     $16 = HEAP32[$this>>2]|0;
     $incdec$ptr107 = ((($16)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr107;
     $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call109 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv($call108)|0);
     $retval$3 = $call109;
     break L1;
     break;
    }
    case 95:  {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp111,21877);
     ;HEAP32[$agg$tmp111$byval_copy>>2]=HEAP32[$agg$tmp111>>2]|0;HEAP32[$agg$tmp111$byval_copy+4>>2]=HEAP32[$agg$tmp111+4>>2]|0;
     $call112 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp111$byval_copy)|0);
     if (!($call112)) {
      $retval$3 = 0;
      break L1;
     }
     $call114 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call115 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call114)|0);
     $cmp = ($call115|0)==(0|0);
     if (!($cmp)) {
      $call116 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call116) {
       $retval$3 = $call115;
       break L1;
      }
     }
     $retval$3 = 0;
     break L1;
     break;
    }
    default: {
     $call121 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call122 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call121)|0);
     HEAP32[$T>>2] = $call122;
     $cmp123 = ($call122|0)==(0|0);
     if ($cmp123) {
      $retval$2 = 0;
     } else {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($N,$this,0);
      $call126 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($N)|0);
      $call133 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call126) {
       $spec$select = $call133 ? $call122 : 0;
       $retval$1 = $spec$select;
      } else {
       if ($call133) {
        $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$T,$N)|0);
        $retval$1 = $call131;
       } else {
        $retval$1 = 0;
       }
      }
      $retval$2 = $retval$1;
     }
     $retval$3 = $retval$2;
     break L1;
    }
    }
   } while(0);
  } else {
   $retval$3 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($this,$Lit) {
 $this = $this|0;
 $Lit = $Lit|0;
 var $Tmp = 0, $call = 0, $call2 = 0, $call3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Tmp = sp;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Tmp,$this,1);
 $call = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Tmp)|0);
 if ($call) {
  $retval$0 = 0;
 } else {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
  if ($call2) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this,$Lit,$Tmp)|0);
   $retval$0 = $call3;
  } else {
   $retval$0 = 0;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Data = 0, $__begin$0 = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call15 = 0, $call18 = 0, $call3 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $incdec$ptr = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Data = sp;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call>>>0)<(9);
 if ($cmp) {
  $retval$4 = 0;
 } else {
  $0 = HEAP32[$this>>2]|0;
  $add$ptr = ((($0)) + 8|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data,$0,$add$ptr);
  $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Data)|0);
  $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Data)|0);
  $__begin$0 = $call3;
  while(1) {
   $cmp5 = ($__begin$0|0)==($call4|0);
   if ($cmp5) {
    label = 5;
    break;
   }
   $1 = HEAP8[$__begin$0>>0]|0;
   $conv = $1 << 24 >> 24;
   $call6 = (_isxdigit($conv)|0);
   $tobool = ($call6|0)==(0);
   $incdec$ptr = ((($__begin$0)) + 1|0);
   if ($tobool) {
    $retval$3 = 0;
    break;
   } else {
    $__begin$0 = $incdec$ptr;
   }
  }
  if ((label|0) == 5) {
   $2 = HEAP32[$this>>2]|0;
   $add$ptr14 = ((($2)) + 8|0);
   HEAP32[$this>>2] = $add$ptr14;
   $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call15) {
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Data)|0);
    $retval$3 = $call18;
   } else {
    $retval$3 = 0;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Data = 0, $__begin$0 = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call15 = 0, $call18 = 0, $call3 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $incdec$ptr = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Data = sp;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call>>>0)<(17);
 if ($cmp) {
  $retval$4 = 0;
 } else {
  $0 = HEAP32[$this>>2]|0;
  $add$ptr = ((($0)) + 16|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data,$0,$add$ptr);
  $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Data)|0);
  $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Data)|0);
  $__begin$0 = $call3;
  while(1) {
   $cmp5 = ($__begin$0|0)==($call4|0);
   if ($cmp5) {
    label = 5;
    break;
   }
   $1 = HEAP8[$__begin$0>>0]|0;
   $conv = $1 << 24 >> 24;
   $call6 = (_isxdigit($conv)|0);
   $tobool = ($call6|0)==(0);
   $incdec$ptr = ((($__begin$0)) + 1|0);
   if ($tobool) {
    $retval$3 = 0;
    break;
   } else {
    $__begin$0 = $incdec$ptr;
   }
  }
  if ((label|0) == 5) {
   $2 = HEAP32[$this>>2]|0;
   $add$ptr14 = ((($2)) + 16|0);
   HEAP32[$this>>2] = $add$ptr14;
   $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call15) {
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Data)|0);
    $retval$3 = $call18;
   } else {
    $retval$3 = 0;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Data = 0, $__begin$0 = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call15 = 0, $call18 = 0, $call3 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $incdec$ptr = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Data = sp;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call>>>0)<(21);
 if ($cmp) {
  $retval$4 = 0;
 } else {
  $0 = HEAP32[$this>>2]|0;
  $add$ptr = ((($0)) + 20|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data,$0,$add$ptr);
  $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Data)|0);
  $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Data)|0);
  $__begin$0 = $call3;
  while(1) {
   $cmp5 = ($__begin$0|0)==($call4|0);
   if ($cmp5) {
    label = 5;
    break;
   }
   $1 = HEAP8[$__begin$0>>0]|0;
   $conv = $1 << 24 >> 24;
   $call6 = (_isxdigit($conv)|0);
   $tobool = ($call6|0)==(0);
   $incdec$ptr = ((($__begin$0)) + 1|0);
   if ($tobool) {
    $retval$3 = 0;
    break;
   } else {
    $__begin$0 = $incdec$ptr;
   }
  }
  if ((label|0) == 5) {
   $2 = HEAP32[$this>>2]|0;
   $add$ptr14 = ((($2)) + 20|0);
   HEAP32[$this>>2] = $add$ptr14;
   $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call15) {
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Data)|0);
    $retval$3 = $call18;
   } else {
    $retval$3 = 0;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($this,$Ty_,$Integer_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Integer_ = $Integer_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Integer = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,60,1,1,1);
 HEAP32[$this>>2] = (4280);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Integer = ((($this)) + 12|0);
 $0 = $Integer_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Integer;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Integer = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Integer = ((($this)) + 12|0);
 $1 = $Integer;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp4;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($this,$Contents_) {
 $this = $this|0;
 $Contents_ = $Contents_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Contents = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,64,1,1,1);
 HEAP32[$this>>2] = (4324);
 $Contents = ((($this)) + 8|0);
 $0 = $Contents_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Contents;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $add$ptr = 0, $add$ptr32 = 0, $add22 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call29 = 0, $call3 = 0, $cmp = 0, $cmp1$i$i = 0, $cmp5 = 0;
 var $cond = 0, $cond$v = 0, $cond21 = 0, $cond21$v = 0, $conv = 0, $conv10 = 0, $conv23 = 0, $e$0 = 0, $incdec$ptr$add = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $incdec$ptr2$i$i = 0, $incdec$ptr25 = 0, $isdigit = 0, $isdigit21 = 0, $isdigittmp = 0, $isdigittmp20 = 0, $num = 0, $scevgep = 0, $shl = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $t$0$add = 0, $t$0$idx = 0, $t$0$ptr = 0, $uglygep = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 64|0;
 $vararg_buffer = sp + 48|0;
 $0 = sp + 40|0;
 $num = sp;
 $agg$tmp = sp + 56|0;
 $Contents = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Contents)|0);
 $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($Contents)|0);
 $add$ptr = ((($call3)) + 1|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>(20);
 if ($cmp) {
  $scevgep = ((($0)) + 8|0);
  $e$0 = $0;$t$0$idx = 0;
  while(1) {
   $cmp5 = ($t$0$idx|0)==(20);
   if ($cmp5) {
    break;
   }
   $t$0$ptr = (($call) + ($t$0$idx)|0);
   $1 = HEAP8[$t$0$ptr>>0]|0;
   $conv = $1 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $cond$v = $isdigit ? 0 : 9;
   $cond = (($cond$v) + ($conv))|0;
   $t$0$add = $t$0$idx | 1;
   $incdec$ptr$ptr = (($call) + ($t$0$add)|0);
   $2 = HEAP8[$incdec$ptr$ptr>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $isdigittmp20 = (($conv10) + -48)|0;
   $isdigit21 = ($isdigittmp20>>>0)<(10);
   $cond21$v = $isdigit21 ? 208 : 169;
   $cond21 = (($cond21$v) + ($conv10))|0;
   $shl = $cond << 4;
   $add22 = (($cond21) + ($shl))|0;
   $conv23 = $add22&255;
   HEAP8[$e$0>>0] = $conv23;
   $incdec$ptr$add = (($t$0$idx) + 2)|0;
   $incdec$ptr25 = ((($e$0)) + 1|0);
   $e$0 = $incdec$ptr25;$t$0$idx = $incdec$ptr$add;
  }
  $uglygep = ((($scevgep)) + 2|0);
  $__first$addr$0$i$i = $0;$__last$addr$0$i$i = $uglygep;
  while(1) {
   $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
   $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
   if (!($cmp1$i$i)) {
    break;
   }
   $3 = HEAP8[$__first$addr$0$i$i>>0]|0;
   $4 = HEAP8[$incdec$ptr$i$i>>0]|0;
   HEAP8[$__first$addr$0$i$i>>0] = $4;
   HEAP8[$incdec$ptr$i$i>>0] = $3;
   $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
   $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  dest=$num; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $5 = +HEAPF64[$0>>3];
  HEAPF64[$vararg_buffer>>3] = $5;
  $call29 = (_snprintf($num,40,22819,$vararg_buffer)|0);
  $add$ptr32 = (($num) + ($call29)|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp,$num,$add$ptr32);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($this,$Contents_) {
 $this = $this|0;
 $Contents_ = $Contents_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Contents = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,63,1,1,1);
 HEAP32[$this>>2] = (4368);
 $Contents = ((($this)) + 8|0);
 $0 = $Contents_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Contents;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $add$ptr = 0, $add$ptr32 = 0, $add22 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call29 = 0, $call3 = 0, $cmp = 0, $cmp1$i$i = 0, $cmp5 = 0;
 var $cond = 0, $cond$v = 0, $cond21 = 0, $cond21$v = 0, $conv = 0, $conv10 = 0, $conv23 = 0, $e$0 = 0, $incdec$ptr$add = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $incdec$ptr2$i$i = 0, $incdec$ptr25 = 0, $isdigit = 0, $isdigit21 = 0, $isdigittmp = 0, $isdigittmp20 = 0, $num = 0, $scevgep = 0, $shl = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $t$0$add = 0, $t$0$idx = 0, $t$0$ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp$byval_copy = sp + 56|0;
 $vararg_buffer = sp + 40|0;
 $0 = sp + 32|0;
 $num = sp;
 $agg$tmp = sp + 48|0;
 $Contents = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Contents)|0);
 $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($Contents)|0);
 $add$ptr = ((($call3)) + 1|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>(16);
 if ($cmp) {
  $scevgep = ((($0)) + 8|0);
  $e$0 = $0;$t$0$idx = 0;
  while(1) {
   $cmp5 = ($t$0$idx|0)==(16);
   if ($cmp5) {
    break;
   }
   $t$0$ptr = (($call) + ($t$0$idx)|0);
   $1 = HEAP8[$t$0$ptr>>0]|0;
   $conv = $1 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $cond$v = $isdigit ? 0 : 9;
   $cond = (($cond$v) + ($conv))|0;
   $t$0$add = $t$0$idx | 1;
   $incdec$ptr$ptr = (($call) + ($t$0$add)|0);
   $2 = HEAP8[$incdec$ptr$ptr>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $isdigittmp20 = (($conv10) + -48)|0;
   $isdigit21 = ($isdigittmp20>>>0)<(10);
   $cond21$v = $isdigit21 ? 208 : 169;
   $cond21 = (($cond21$v) + ($conv10))|0;
   $shl = $cond << 4;
   $add22 = (($cond21) + ($shl))|0;
   $conv23 = $add22&255;
   HEAP8[$e$0>>0] = $conv23;
   $incdec$ptr$add = (($t$0$idx) + 2)|0;
   $incdec$ptr25 = ((($e$0)) + 1|0);
   $e$0 = $incdec$ptr25;$t$0$idx = $incdec$ptr$add;
  }
  $__first$addr$0$i$i = $0;$__last$addr$0$i$i = $scevgep;
  while(1) {
   $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
   $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
   if (!($cmp1$i$i)) {
    break;
   }
   $3 = HEAP8[$__first$addr$0$i$i>>0]|0;
   $4 = HEAP8[$incdec$ptr$i$i>>0]|0;
   HEAP8[$__first$addr$0$i$i>>0] = $4;
   HEAP8[$incdec$ptr$i$i>>0] = $3;
   $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
   $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  ;HEAP32[$num>>2]=0|0;HEAP32[$num+4>>2]=0|0;HEAP32[$num+8>>2]=0|0;HEAP32[$num+12>>2]=0|0;HEAP32[$num+16>>2]=0|0;HEAP32[$num+20>>2]=0|0;HEAP32[$num+24>>2]=0|0;HEAP32[$num+28>>2]=0|0;
  $5 = +HEAPF64[$0>>3];
  HEAPF64[$vararg_buffer>>3] = $5;
  $call29 = (_snprintf($num,32,22880,$vararg_buffer)|0);
  $add$ptr32 = (($num) + ($call29)|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp,$num,$add$ptr32);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($this,$Contents_) {
 $this = $this|0;
 $Contents_ = $Contents_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Contents = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,62,1,1,1);
 HEAP32[$this>>2] = (4412);
 $Contents = ((($this)) + 8|0);
 $0 = $Contents_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Contents;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add22 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $call30 = 0, $cmp = 0, $cmp1$i$i = 0, $cmp5 = 0;
 var $cond = 0, $cond$v = 0, $cond21 = 0, $cond21$v = 0, $conv = 0, $conv10 = 0, $conv23 = 0, $conv29 = 0.0, $e$0 = 0, $incdec$ptr$add = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $incdec$ptr2$i$i = 0, $incdec$ptr25 = 0, $isdigit = 0, $isdigit21 = 0, $isdigittmp = 0, $isdigittmp20 = 0, $num = 0, $scevgep = 0;
 var $shl = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $t$0$add = 0, $t$0$idx = 0, $t$0$ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp$byval_copy = sp + 48|0;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 40|0;
 $num = sp;
 $agg$tmp = sp + 32|0;
 $Contents = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Contents)|0);
 $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($Contents)|0);
 $add$ptr = ((($call3)) + 1|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>(8);
 if ($cmp) {
  $scevgep = ((($0)) + 4|0);
  $e$0 = $0;$t$0$idx = 0;
  while(1) {
   $cmp5 = ($t$0$idx|0)==(8);
   if ($cmp5) {
    break;
   }
   $t$0$ptr = (($call) + ($t$0$idx)|0);
   $1 = HEAP8[$t$0$ptr>>0]|0;
   $conv = $1 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $cond$v = $isdigit ? 0 : 9;
   $cond = (($cond$v) + ($conv))|0;
   $t$0$add = $t$0$idx | 1;
   $incdec$ptr$ptr = (($call) + ($t$0$add)|0);
   $2 = HEAP8[$incdec$ptr$ptr>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $isdigittmp20 = (($conv10) + -48)|0;
   $isdigit21 = ($isdigittmp20>>>0)<(10);
   $cond21$v = $isdigit21 ? 208 : 169;
   $cond21 = (($cond21$v) + ($conv10))|0;
   $shl = $cond << 4;
   $add22 = (($cond21) + ($shl))|0;
   $conv23 = $add22&255;
   HEAP8[$e$0>>0] = $conv23;
   $incdec$ptr$add = (($t$0$idx) + 2)|0;
   $incdec$ptr25 = ((($e$0)) + 1|0);
   $e$0 = $incdec$ptr25;$t$0$idx = $incdec$ptr$add;
  }
  $__first$addr$0$i$i = $0;$__last$addr$0$i$i = $scevgep;
  while(1) {
   $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
   $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
   if (!($cmp1$i$i)) {
    break;
   }
   $3 = HEAP8[$__first$addr$0$i$i>>0]|0;
   $4 = HEAP8[$incdec$ptr$i$i>>0]|0;
   HEAP8[$__first$addr$0$i$i>>0] = $4;
   HEAP8[$incdec$ptr$i$i>>0] = $3;
   $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
   $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  ;HEAP32[$num>>2]=0|0;HEAP32[$num+4>>2]=0|0;HEAP32[$num+8>>2]=0|0;HEAP32[$num+12>>2]=0|0;HEAP32[$num+16>>2]=0|0;HEAP32[$num+20>>2]=0|0;
  $5 = +HEAPF32[$0>>2];
  $conv29 = $5;
  HEAPF64[$vararg_buffer>>3] = $conv29;
  $call30 = (_snprintf($num,24,22939,$vararg_buffer)|0);
  $add$ptr33 = (($num) + ($call30)|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp,$num,$add$ptr33);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 $tobool = ($0|0)!=(0);
 __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($call,$tobool);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($this,$Value_) {
 $this = $this|0;
 $Value_ = $Value_|0;
 var $Value = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $Value_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,59,1,1,1);
 HEAP32[$this>>2] = (4456);
 $Value = ((($this)) + 8|0);
 HEAP8[$Value>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Value = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Value = ((($this)) + 8|0);
 $0 = HEAP8[$Value>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23004);
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22999);
 }
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $args1;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $agg$tmp5;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($call,$tmpcast$byval_copy,$tmpcast1$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($this,$Type_,$Value_) {
 $this = $this|0;
 $Type_ = $Type_|0;
 $Value_ = $Value_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Type = 0, $Value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,61,1,1,1);
 HEAP32[$this>>2] = (4500);
 $Type = ((($this)) + 8|0);
 $0 = $Type_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Type;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Value = ((($this)) + 16|0);
 $10 = $Value_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $Value;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Type = 0, $Value = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp11 = 0, $agg$tmp11$byval_copy = 0, $agg$tmp13 = 0, $agg$tmp13$byval_copy = 0, $agg$tmp16 = 0;
 var $agg$tmp24 = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $call = 0, $call21 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $cmp9 = 0, $tmpcast$byval_copy = 0, $tmpcast7$byval_copy = 0, $tmpcast8$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $tmpcast7$byval_copy = sp + 104|0;
 $tmpcast$byval_copy = sp + 96|0;
 $agg$tmp13$byval_copy = sp + 88|0;
 $agg$tmp11$byval_copy = sp + 80|0;
 $agg$tmp6$byval_copy = sp + 72|0;
 $tmpcast8$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp3 = sp + 16|0;
 $agg$tmp6 = sp + 40|0;
 $agg$tmp11 = sp + 32|0;
 $agg$tmp13 = sp + 24|0;
 $agg$tmp16 = sp + 8|0;
 $agg$tmp24 = sp;
 $Type = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($Type)|0);
 $cmp = ($call>>>0)>(3);
 if ($cmp) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  $0 = $Type;
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = (($0) + 4)|0;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = $agg$tmp3;
  $7 = $6;
  HEAP32[$7>>2] = $2;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = $5;
  ;HEAP32[$tmpcast8$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$tmpcast8$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast8$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,22447);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 }
 $Value = ((($this)) + 16|0);
 $call8 = (__ZNK12_GLOBAL__N_110StringViewixEm($Value)|0);
 $10 = HEAP8[$call8>>0]|0;
 $cmp9 = ($10<<24>>24)==(110);
 if ($cmp9) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11,23054);
  ;HEAP32[$agg$tmp11$byval_copy>>2]=HEAP32[$agg$tmp11>>2]|0;HEAP32[$agg$tmp11$byval_copy+4>>2]=HEAP32[$agg$tmp11+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp11$byval_copy);
  __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp13,$Value,1);
  ;HEAP32[$agg$tmp13$byval_copy>>2]=HEAP32[$agg$tmp13>>2]|0;HEAP32[$agg$tmp13$byval_copy+4>>2]=HEAP32[$agg$tmp13+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp13$byval_copy);
 } else {
  $11 = $Value;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $agg$tmp16;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp16>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp16+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 }
 $call21 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($Type)|0);
 $cmp22 = ($call21>>>0)<(4);
 if ($cmp22) {
  $21 = $Type;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $agg$tmp24;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  ;HEAP32[$tmpcast7$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;HEAP32[$tmpcast7$byval_copy+4>>2]=HEAP32[$agg$tmp24+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast7$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_110StringViewixEm($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($this)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$result,$this,$N) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $Last = 0, $add$ptr = 0, $call = 0, $cmp = 0, $spec$select = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($this)|0);
 $cmp = ($call>>>0)>($N>>>0);
 $sub = (($call) + -1)|0;
 $spec$select = $cmp ? $N : $sub;
 $0 = HEAP32[$this>>2]|0;
 $add$ptr = (($0) + ($spec$select)|0);
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result,$add$ptr,$1);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($this,$Elements_) {
 $this = $this|0;
 $Elements_ = $Elements_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Elements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,28,1,1,1);
 HEAP32[$this>>2] = (4544);
 $Elements = ((($this)) + 8|0);
 $0 = $Elements_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Elements;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Elements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Elements = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Elements,$S);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($this) {
 $this = $this|0;
 var $Num = 0, $Num17 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call = 0, $call10 = 0, $call13 = 0, $call18 = 0, $call21 = 0, $call3 = 0, $call5 = 0, $call8 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp7$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $agg$tmp = sp + 32|0;
 $Num = sp + 24|0;
 $agg$tmp7 = sp + 16|0;
 $ref$tmp = sp + 8|0;
 $Num17 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25410);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Num,$this,0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
  if ($call3) {
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Num)|0);
   $retval$0 = $call5;
  } else {
   $retval$0 = 0;
  }
  $retval$2 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,25413);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp7$byval_copy)|0);
  if ($call8) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp,$this,0);
   $call10 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp)|0);
   if ($call10) {
    $retval$2 = 0;
   } else {
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,112)|0);
    if ($call13) {
     (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Num17,$this,0);
     $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call18) {
      $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Num17)|0);
      $retval$1 = $call21;
     } else {
      $retval$1 = 0;
     }
     $retval$2 = $retval$1;
    } else {
     $retval$2 = 0;
    }
   }
  } else {
   $retval$2 = 0;
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Init = 0, $IsLeftFold = 0, $OperatorName = 0, $Pack = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp102 = 0;
 var $agg$tmp102$byval_copy = 0, $agg$tmp107 = 0, $agg$tmp107$byval_copy = 0, $agg$tmp112 = 0, $agg$tmp112$byval_copy = 0, $agg$tmp117 = 0, $agg$tmp117$byval_copy = 0, $agg$tmp122 = 0, $agg$tmp122$byval_copy = 0, $agg$tmp127 = 0, $agg$tmp127$byval_copy = 0, $agg$tmp132 = 0, $agg$tmp132$byval_copy = 0, $agg$tmp137 = 0, $agg$tmp137$byval_copy = 0, $agg$tmp142 = 0, $agg$tmp142$byval_copy = 0, $agg$tmp147 = 0, $agg$tmp147$byval_copy = 0, $agg$tmp152 = 0;
 var $agg$tmp152$byval_copy = 0, $agg$tmp157 = 0, $agg$tmp157$byval_copy = 0, $agg$tmp162 = 0, $agg$tmp162$byval_copy = 0, $agg$tmp167 = 0, $agg$tmp167$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp37 = 0, $agg$tmp37$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0, $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp52 = 0;
 var $agg$tmp52$byval_copy = 0, $agg$tmp57 = 0, $agg$tmp57$byval_copy = 0, $agg$tmp62 = 0, $agg$tmp62$byval_copy = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $agg$tmp77 = 0, $agg$tmp77$byval_copy = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp87 = 0, $agg$tmp87$byval_copy = 0, $agg$tmp92 = 0, $agg$tmp92$byval_copy = 0, $agg$tmp97 = 0, $agg$tmp97$byval_copy = 0, $call = 0;
 var $call103 = 0, $call108 = 0, $call113 = 0, $call118 = 0, $call123 = 0, $call128 = 0, $call133 = 0, $call138 = 0, $call143 = 0, $call148 = 0, $call153 = 0, $call158 = 0, $call163 = 0, $call168 = 0, $call19 = 0, $call2 = 0, $call203 = 0, $call204 = 0, $call210 = 0, $call219 = 0;
 var $call23 = 0, $call28 = 0, $call33 = 0, $call38 = 0, $call43 = 0, $call48 = 0, $call53 = 0, $call58 = 0, $call63 = 0, $call68 = 0, $call73 = 0, $call78 = 0, $call83 = 0, $call88 = 0, $call93 = 0, $call98 = 0, $cmp205 = 0, $cmp211 = 0, $incdec$ptr = 0, $ref$tmp = 0;
 var $ref$tmp100 = 0, $ref$tmp105 = 0, $ref$tmp110 = 0, $ref$tmp115 = 0, $ref$tmp120 = 0, $ref$tmp125 = 0, $ref$tmp130 = 0, $ref$tmp135 = 0, $ref$tmp140 = 0, $ref$tmp145 = 0, $ref$tmp150 = 0, $ref$tmp155 = 0, $ref$tmp160 = 0, $ref$tmp165 = 0, $ref$tmp170 = 0, $ref$tmp25 = 0, $ref$tmp30 = 0, $ref$tmp35 = 0, $ref$tmp40 = 0, $ref$tmp45 = 0;
 var $ref$tmp50 = 0, $ref$tmp55 = 0, $ref$tmp60 = 0, $ref$tmp65 = 0, $ref$tmp70 = 0, $ref$tmp75 = 0, $ref$tmp80 = 0, $ref$tmp85 = 0, $ref$tmp90 = 0, $ref$tmp95 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $storemerge = 0, $tobool215 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(768|0);
 $agg$tmp167$byval_copy = sp + 752|0;
 $agg$tmp162$byval_copy = sp + 744|0;
 $agg$tmp157$byval_copy = sp + 736|0;
 $agg$tmp152$byval_copy = sp + 728|0;
 $agg$tmp147$byval_copy = sp + 720|0;
 $agg$tmp142$byval_copy = sp + 712|0;
 $agg$tmp137$byval_copy = sp + 704|0;
 $agg$tmp132$byval_copy = sp + 696|0;
 $agg$tmp127$byval_copy = sp + 688|0;
 $agg$tmp122$byval_copy = sp + 680|0;
 $agg$tmp117$byval_copy = sp + 672|0;
 $agg$tmp112$byval_copy = sp + 664|0;
 $agg$tmp107$byval_copy = sp + 656|0;
 $agg$tmp102$byval_copy = sp + 648|0;
 $agg$tmp97$byval_copy = sp + 640|0;
 $agg$tmp92$byval_copy = sp + 632|0;
 $agg$tmp87$byval_copy = sp + 624|0;
 $agg$tmp82$byval_copy = sp + 616|0;
 $agg$tmp77$byval_copy = sp + 608|0;
 $agg$tmp72$byval_copy = sp + 600|0;
 $agg$tmp67$byval_copy = sp + 592|0;
 $agg$tmp62$byval_copy = sp + 584|0;
 $agg$tmp57$byval_copy = sp + 576|0;
 $agg$tmp52$byval_copy = sp + 568|0;
 $agg$tmp47$byval_copy = sp + 560|0;
 $agg$tmp42$byval_copy = sp + 552|0;
 $agg$tmp37$byval_copy = sp + 544|0;
 $agg$tmp32$byval_copy = sp + 536|0;
 $agg$tmp27$byval_copy = sp + 528|0;
 $agg$tmp22$byval_copy = sp + 520|0;
 $agg$tmp$byval_copy = sp + 512|0;
 $IsLeftFold = sp + 760|0;
 $OperatorName = sp + 248|0;
 $agg$tmp = sp + 504|0;
 $ref$tmp = sp + 240|0;
 $agg$tmp22 = sp + 496|0;
 $ref$tmp25 = sp + 232|0;
 $agg$tmp27 = sp + 488|0;
 $ref$tmp30 = sp + 224|0;
 $agg$tmp32 = sp + 480|0;
 $ref$tmp35 = sp + 216|0;
 $agg$tmp37 = sp + 472|0;
 $ref$tmp40 = sp + 208|0;
 $agg$tmp42 = sp + 464|0;
 $ref$tmp45 = sp + 200|0;
 $agg$tmp47 = sp + 456|0;
 $ref$tmp50 = sp + 192|0;
 $agg$tmp52 = sp + 448|0;
 $ref$tmp55 = sp + 184|0;
 $agg$tmp57 = sp + 440|0;
 $ref$tmp60 = sp + 176|0;
 $agg$tmp62 = sp + 432|0;
 $ref$tmp65 = sp + 168|0;
 $agg$tmp67 = sp + 424|0;
 $ref$tmp70 = sp + 160|0;
 $agg$tmp72 = sp + 416|0;
 $ref$tmp75 = sp + 152|0;
 $agg$tmp77 = sp + 408|0;
 $ref$tmp80 = sp + 144|0;
 $agg$tmp82 = sp + 400|0;
 $ref$tmp85 = sp + 136|0;
 $agg$tmp87 = sp + 392|0;
 $ref$tmp90 = sp + 128|0;
 $agg$tmp92 = sp + 384|0;
 $ref$tmp95 = sp + 120|0;
 $agg$tmp97 = sp + 376|0;
 $ref$tmp100 = sp + 112|0;
 $agg$tmp102 = sp + 368|0;
 $ref$tmp105 = sp + 104|0;
 $agg$tmp107 = sp + 360|0;
 $ref$tmp110 = sp + 96|0;
 $agg$tmp112 = sp + 352|0;
 $ref$tmp115 = sp + 88|0;
 $agg$tmp117 = sp + 344|0;
 $ref$tmp120 = sp + 80|0;
 $agg$tmp122 = sp + 336|0;
 $ref$tmp125 = sp + 72|0;
 $agg$tmp127 = sp + 328|0;
 $ref$tmp130 = sp + 64|0;
 $agg$tmp132 = sp + 320|0;
 $ref$tmp135 = sp + 56|0;
 $agg$tmp137 = sp + 312|0;
 $ref$tmp140 = sp + 48|0;
 $agg$tmp142 = sp + 304|0;
 $ref$tmp145 = sp + 40|0;
 $agg$tmp147 = sp + 296|0;
 $ref$tmp150 = sp + 32|0;
 $agg$tmp152 = sp + 288|0;
 $ref$tmp155 = sp + 24|0;
 $agg$tmp157 = sp + 280|0;
 $ref$tmp160 = sp + 16|0;
 $agg$tmp162 = sp + 272|0;
 $ref$tmp165 = sp + 8|0;
 $agg$tmp167 = sp + 264|0;
 $ref$tmp170 = sp;
 $Pack = sp + 260|0;
 $Init = sp + 256|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,102)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
  switch ($call2<<24>>24) {
  case 76: case 108:  {
   $storemerge = 1;
   label = 4;
   break;
  }
  case 82: case 114:  {
   $storemerge = 0;
   label = 4;
   break;
  }
  default: {
   $retval$2 = 0;
  }
  }
  if ((label|0) == 4) {
   HEAP8[$IsLeftFold>>0] = $storemerge;
   $0 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   __ZN12_GLOBAL__N_110StringViewC2Ev($OperatorName);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25263);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
   do {
    if ($call19) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp,22455);
     $1 = $ref$tmp;
     $2 = $1;
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 4)|0;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $7 = $OperatorName;
     $8 = $7;
     HEAP32[$8>>2] = $3;
     $9 = (($7) + 4)|0;
     $10 = $9;
     HEAP32[$10>>2] = $6;
     label = 66;
    } else {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22,25266);
     ;HEAP32[$agg$tmp22$byval_copy>>2]=HEAP32[$agg$tmp22>>2]|0;HEAP32[$agg$tmp22$byval_copy+4>>2]=HEAP32[$agg$tmp22+4>>2]|0;
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp22$byval_copy)|0);
     if ($call23) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp25,22453);
      $11 = $ref$tmp25;
      $12 = $11;
      $13 = HEAP32[$12>>2]|0;
      $14 = (($11) + 4)|0;
      $15 = $14;
      $16 = HEAP32[$15>>2]|0;
      $17 = $OperatorName;
      $18 = $17;
      HEAP32[$18>>2] = $13;
      $19 = (($17) + 4)|0;
      $20 = $19;
      HEAP32[$20>>2] = $16;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27,25269);
     ;HEAP32[$agg$tmp27$byval_copy>>2]=HEAP32[$agg$tmp27>>2]|0;HEAP32[$agg$tmp27$byval_copy+4>>2]=HEAP32[$agg$tmp27+4>>2]|0;
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp27$byval_copy)|0);
     if ($call28) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp30,23167);
      $21 = $ref$tmp30;
      $22 = $21;
      $23 = HEAP32[$22>>2]|0;
      $24 = (($21) + 4)|0;
      $25 = $24;
      $26 = HEAP32[$25>>2]|0;
      $27 = $OperatorName;
      $28 = $27;
      HEAP32[$28>>2] = $23;
      $29 = (($27) + 4)|0;
      $30 = $29;
      HEAP32[$30>>2] = $26;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp32,25272);
     ;HEAP32[$agg$tmp32$byval_copy>>2]=HEAP32[$agg$tmp32>>2]|0;HEAP32[$agg$tmp32$byval_copy+4>>2]=HEAP32[$agg$tmp32+4>>2]|0;
     $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp32$byval_copy)|0);
     if ($call33) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp35,23170);
      $31 = $ref$tmp35;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = $OperatorName;
      $38 = $37;
      HEAP32[$38>>2] = $33;
      $39 = (($37) + 4)|0;
      $40 = $39;
      HEAP32[$40>>2] = $36;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp37,25275);
     ;HEAP32[$agg$tmp37$byval_copy>>2]=HEAP32[$agg$tmp37>>2]|0;HEAP32[$agg$tmp37$byval_copy+4>>2]=HEAP32[$agg$tmp37+4>>2]|0;
     $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp37$byval_copy)|0);
     if ($call38) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp40,23182);
      $41 = $ref$tmp40;
      $42 = $41;
      $43 = HEAP32[$42>>2]|0;
      $44 = (($41) + 4)|0;
      $45 = $44;
      $46 = HEAP32[$45>>2]|0;
      $47 = $OperatorName;
      $48 = $47;
      HEAP32[$48>>2] = $43;
      $49 = (($47) + 4)|0;
      $50 = $49;
      HEAP32[$50>>2] = $46;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42,25278);
     ;HEAP32[$agg$tmp42$byval_copy>>2]=HEAP32[$agg$tmp42>>2]|0;HEAP32[$agg$tmp42$byval_copy+4>>2]=HEAP32[$agg$tmp42+4>>2]|0;
     $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp42$byval_copy)|0);
     if ($call43) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp45,23186);
      $51 = $ref$tmp45;
      $52 = $51;
      $53 = HEAP32[$52>>2]|0;
      $54 = (($51) + 4)|0;
      $55 = $54;
      $56 = HEAP32[$55>>2]|0;
      $57 = $OperatorName;
      $58 = $57;
      HEAP32[$58>>2] = $53;
      $59 = (($57) + 4)|0;
      $60 = $59;
      HEAP32[$60>>2] = $56;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp47,25281);
     ;HEAP32[$agg$tmp47$byval_copy>>2]=HEAP32[$agg$tmp47>>2]|0;HEAP32[$agg$tmp47$byval_copy+4>>2]=HEAP32[$agg$tmp47+4>>2]|0;
     $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp47$byval_copy)|0);
     if ($call48) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp50,23189);
      $61 = $ref$tmp50;
      $62 = $61;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($61) + 4)|0;
      $65 = $64;
      $66 = HEAP32[$65>>2]|0;
      $67 = $OperatorName;
      $68 = $67;
      HEAP32[$68>>2] = $63;
      $69 = (($67) + 4)|0;
      $70 = $69;
      HEAP32[$70>>2] = $66;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp52,25284);
     ;HEAP32[$agg$tmp52$byval_copy>>2]=HEAP32[$agg$tmp52>>2]|0;HEAP32[$agg$tmp52$byval_copy+4>>2]=HEAP32[$agg$tmp52+4>>2]|0;
     $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp52$byval_copy)|0);
     if ($call53) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp55,23191);
      $71 = $ref$tmp55;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = $OperatorName;
      $78 = $77;
      HEAP32[$78>>2] = $73;
      $79 = (($77) + 4)|0;
      $80 = $79;
      HEAP32[$80>>2] = $76;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57,25287);
     ;HEAP32[$agg$tmp57$byval_copy>>2]=HEAP32[$agg$tmp57>>2]|0;HEAP32[$agg$tmp57$byval_copy+4>>2]=HEAP32[$agg$tmp57+4>>2]|0;
     $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp57$byval_copy)|0);
     if ($call58) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp60,23194);
      $81 = $ref$tmp60;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = $OperatorName;
      $88 = $87;
      HEAP32[$88>>2] = $83;
      $89 = (($87) + 4)|0;
      $90 = $89;
      HEAP32[$90>>2] = $86;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp62,25290);
     ;HEAP32[$agg$tmp62$byval_copy>>2]=HEAP32[$agg$tmp62>>2]|0;HEAP32[$agg$tmp62$byval_copy+4>>2]=HEAP32[$agg$tmp62+4>>2]|0;
     $call63 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp62$byval_copy)|0);
     if ($call63) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp65,23196);
      $91 = $ref$tmp65;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = $OperatorName;
      $98 = $97;
      HEAP32[$98>>2] = $93;
      $99 = (($97) + 4)|0;
      $100 = $99;
      HEAP32[$100>>2] = $96;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67,25293);
     ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;HEAP32[$agg$tmp67$byval_copy+4>>2]=HEAP32[$agg$tmp67+4>>2]|0;
     $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp67$byval_copy)|0);
     if ($call68) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp70,23199);
      $101 = $ref$tmp70;
      $102 = $101;
      $103 = HEAP32[$102>>2]|0;
      $104 = (($101) + 4)|0;
      $105 = $104;
      $106 = HEAP32[$105>>2]|0;
      $107 = $OperatorName;
      $108 = $107;
      HEAP32[$108>>2] = $103;
      $109 = (($107) + 4)|0;
      $110 = $109;
      HEAP32[$110>>2] = $106;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp72,25296);
     ;HEAP32[$agg$tmp72$byval_copy>>2]=HEAP32[$agg$tmp72>>2]|0;HEAP32[$agg$tmp72$byval_copy+4>>2]=HEAP32[$agg$tmp72+4>>2]|0;
     $call73 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp72$byval_copy)|0);
     if ($call73) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp75,23202);
      $111 = $ref$tmp75;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = (($111) + 4)|0;
      $115 = $114;
      $116 = HEAP32[$115>>2]|0;
      $117 = $OperatorName;
      $118 = $117;
      HEAP32[$118>>2] = $113;
      $119 = (($117) + 4)|0;
      $120 = $119;
      HEAP32[$120>>2] = $116;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp77,25299);
     ;HEAP32[$agg$tmp77$byval_copy>>2]=HEAP32[$agg$tmp77>>2]|0;HEAP32[$agg$tmp77$byval_copy+4>>2]=HEAP32[$agg$tmp77+4>>2]|0;
     $call78 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp77$byval_copy)|0);
     if ($call78) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp80,22526);
      $121 = $ref$tmp80;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = $OperatorName;
      $128 = $127;
      HEAP32[$128>>2] = $123;
      $129 = (($127) + 4)|0;
      $130 = $129;
      HEAP32[$130>>2] = $126;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp82,25302);
     ;HEAP32[$agg$tmp82$byval_copy>>2]=HEAP32[$agg$tmp82>>2]|0;HEAP32[$agg$tmp82$byval_copy+4>>2]=HEAP32[$agg$tmp82+4>>2]|0;
     $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp82$byval_copy)|0);
     if ($call83) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp85,23205);
      $131 = $ref$tmp85;
      $132 = $131;
      $133 = HEAP32[$132>>2]|0;
      $134 = (($131) + 4)|0;
      $135 = $134;
      $136 = HEAP32[$135>>2]|0;
      $137 = $OperatorName;
      $138 = $137;
      HEAP32[$138>>2] = $133;
      $139 = (($137) + 4)|0;
      $140 = $139;
      HEAP32[$140>>2] = $136;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87,25305);
     ;HEAP32[$agg$tmp87$byval_copy>>2]=HEAP32[$agg$tmp87>>2]|0;HEAP32[$agg$tmp87$byval_copy+4>>2]=HEAP32[$agg$tmp87+4>>2]|0;
     $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp87$byval_copy)|0);
     if ($call88) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp90,23208);
      $141 = $ref$tmp90;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = (($141) + 4)|0;
      $145 = $144;
      $146 = HEAP32[$145>>2]|0;
      $147 = $OperatorName;
      $148 = $147;
      HEAP32[$148>>2] = $143;
      $149 = (($147) + 4)|0;
      $150 = $149;
      HEAP32[$150>>2] = $146;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp92,25308);
     ;HEAP32[$agg$tmp92$byval_copy>>2]=HEAP32[$agg$tmp92>>2]|0;HEAP32[$agg$tmp92$byval_copy+4>>2]=HEAP32[$agg$tmp92+4>>2]|0;
     $call93 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp92$byval_copy)|0);
     if ($call93) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp95,23211);
      $151 = $ref$tmp95;
      $152 = $151;
      $153 = HEAP32[$152>>2]|0;
      $154 = (($151) + 4)|0;
      $155 = $154;
      $156 = HEAP32[$155>>2]|0;
      $157 = $OperatorName;
      $158 = $157;
      HEAP32[$158>>2] = $153;
      $159 = (($157) + 4)|0;
      $160 = $159;
      HEAP32[$160>>2] = $156;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp97,25311);
     ;HEAP32[$agg$tmp97$byval_copy>>2]=HEAP32[$agg$tmp97>>2]|0;HEAP32[$agg$tmp97$byval_copy+4>>2]=HEAP32[$agg$tmp97+4>>2]|0;
     $call98 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp97$byval_copy)|0);
     if ($call98) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp100,22633);
      $161 = $ref$tmp100;
      $162 = $161;
      $163 = HEAP32[$162>>2]|0;
      $164 = (($161) + 4)|0;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = $OperatorName;
      $168 = $167;
      HEAP32[$168>>2] = $163;
      $169 = (($167) + 4)|0;
      $170 = $169;
      HEAP32[$170>>2] = $166;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp102,25314);
     ;HEAP32[$agg$tmp102$byval_copy>>2]=HEAP32[$agg$tmp102>>2]|0;HEAP32[$agg$tmp102$byval_copy+4>>2]=HEAP32[$agg$tmp102+4>>2]|0;
     $call103 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp102$byval_copy)|0);
     if ($call103) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp105,23054);
      $171 = $ref$tmp105;
      $172 = $171;
      $173 = HEAP32[$172>>2]|0;
      $174 = (($171) + 4)|0;
      $175 = $174;
      $176 = HEAP32[$175>>2]|0;
      $177 = $OperatorName;
      $178 = $177;
      HEAP32[$178>>2] = $173;
      $179 = (($177) + 4)|0;
      $180 = $179;
      HEAP32[$180>>2] = $176;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp107,25317);
     ;HEAP32[$agg$tmp107$byval_copy>>2]=HEAP32[$agg$tmp107>>2]|0;HEAP32[$agg$tmp107$byval_copy+4>>2]=HEAP32[$agg$tmp107+4>>2]|0;
     $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp107$byval_copy)|0);
     if ($call108) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp110,23215);
      $181 = $ref$tmp110;
      $182 = $181;
      $183 = HEAP32[$182>>2]|0;
      $184 = (($181) + 4)|0;
      $185 = $184;
      $186 = HEAP32[$185>>2]|0;
      $187 = $OperatorName;
      $188 = $187;
      HEAP32[$188>>2] = $183;
      $189 = (($187) + 4)|0;
      $190 = $189;
      HEAP32[$190>>2] = $186;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp112,25320);
     ;HEAP32[$agg$tmp112$byval_copy>>2]=HEAP32[$agg$tmp112>>2]|0;HEAP32[$agg$tmp112$byval_copy+4>>2]=HEAP32[$agg$tmp112+4>>2]|0;
     $call113 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp112$byval_copy)|0);
     if ($call113) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp115,22520);
      $191 = $ref$tmp115;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = (($191) + 4)|0;
      $195 = $194;
      $196 = HEAP32[$195>>2]|0;
      $197 = $OperatorName;
      $198 = $197;
      HEAP32[$198>>2] = $193;
      $199 = (($197) + 4)|0;
      $200 = $199;
      HEAP32[$200>>2] = $196;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp117,25323);
     ;HEAP32[$agg$tmp117$byval_copy>>2]=HEAP32[$agg$tmp117>>2]|0;HEAP32[$agg$tmp117$byval_copy+4>>2]=HEAP32[$agg$tmp117+4>>2]|0;
     $call118 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp117$byval_copy)|0);
     if ($call118) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp120,23218);
      $201 = $ref$tmp120;
      $202 = $201;
      $203 = HEAP32[$202>>2]|0;
      $204 = (($201) + 4)|0;
      $205 = $204;
      $206 = HEAP32[$205>>2]|0;
      $207 = $OperatorName;
      $208 = $207;
      HEAP32[$208>>2] = $203;
      $209 = (($207) + 4)|0;
      $210 = $209;
      HEAP32[$210>>2] = $206;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp122,25326);
     ;HEAP32[$agg$tmp122$byval_copy>>2]=HEAP32[$agg$tmp122>>2]|0;HEAP32[$agg$tmp122$byval_copy+4>>2]=HEAP32[$agg$tmp122+4>>2]|0;
     $call123 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp122$byval_copy)|0);
     if ($call123) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp125,23224);
      $211 = $ref$tmp125;
      $212 = $211;
      $213 = HEAP32[$212>>2]|0;
      $214 = (($211) + 4)|0;
      $215 = $214;
      $216 = HEAP32[$215>>2]|0;
      $217 = $OperatorName;
      $218 = $217;
      HEAP32[$218>>2] = $213;
      $219 = (($217) + 4)|0;
      $220 = $219;
      HEAP32[$220>>2] = $216;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127,25329);
     ;HEAP32[$agg$tmp127$byval_copy>>2]=HEAP32[$agg$tmp127>>2]|0;HEAP32[$agg$tmp127$byval_copy+4>>2]=HEAP32[$agg$tmp127+4>>2]|0;
     $call128 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp127$byval_copy)|0);
     if ($call128) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp130,23229);
      $221 = $ref$tmp130;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + 4)|0;
      $225 = $224;
      $226 = HEAP32[$225>>2]|0;
      $227 = $OperatorName;
      $228 = $227;
      HEAP32[$228>>2] = $223;
      $229 = (($227) + 4)|0;
      $230 = $229;
      HEAP32[$230>>2] = $226;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp132,25332);
     ;HEAP32[$agg$tmp132$byval_copy>>2]=HEAP32[$agg$tmp132>>2]|0;HEAP32[$agg$tmp132$byval_copy+4>>2]=HEAP32[$agg$tmp132+4>>2]|0;
     $call133 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp132$byval_copy)|0);
     if ($call133) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp135,23232);
      $231 = $ref$tmp135;
      $232 = $231;
      $233 = HEAP32[$232>>2]|0;
      $234 = (($231) + 4)|0;
      $235 = $234;
      $236 = HEAP32[$235>>2]|0;
      $237 = $OperatorName;
      $238 = $237;
      HEAP32[$238>>2] = $233;
      $239 = (($237) + 4)|0;
      $240 = $239;
      HEAP32[$240>>2] = $236;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp137,25335);
     ;HEAP32[$agg$tmp137$byval_copy>>2]=HEAP32[$agg$tmp137>>2]|0;HEAP32[$agg$tmp137$byval_copy+4>>2]=HEAP32[$agg$tmp137+4>>2]|0;
     $call138 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp137$byval_copy)|0);
     if ($call138) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp140,23234);
      $241 = $ref$tmp140;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (($241) + 4)|0;
      $245 = $244;
      $246 = HEAP32[$245>>2]|0;
      $247 = $OperatorName;
      $248 = $247;
      HEAP32[$248>>2] = $243;
      $249 = (($247) + 4)|0;
      $250 = $249;
      HEAP32[$250>>2] = $246;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp142,25338);
     ;HEAP32[$agg$tmp142$byval_copy>>2]=HEAP32[$agg$tmp142>>2]|0;HEAP32[$agg$tmp142$byval_copy+4>>2]=HEAP32[$agg$tmp142+4>>2]|0;
     $call143 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp142$byval_copy)|0);
     if ($call143) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp145,23241);
      $251 = $ref$tmp145;
      $252 = $251;
      $253 = HEAP32[$252>>2]|0;
      $254 = (($251) + 4)|0;
      $255 = $254;
      $256 = HEAP32[$255>>2]|0;
      $257 = $OperatorName;
      $258 = $257;
      HEAP32[$258>>2] = $253;
      $259 = (($257) + 4)|0;
      $260 = $259;
      HEAP32[$260>>2] = $256;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp147,25341);
     ;HEAP32[$agg$tmp147$byval_copy>>2]=HEAP32[$agg$tmp147>>2]|0;HEAP32[$agg$tmp147$byval_copy+4>>2]=HEAP32[$agg$tmp147+4>>2]|0;
     $call148 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp147$byval_copy)|0);
     if ($call148) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp150,23243);
      $261 = $ref$tmp150;
      $262 = $261;
      $263 = HEAP32[$262>>2]|0;
      $264 = (($261) + 4)|0;
      $265 = $264;
      $266 = HEAP32[$265>>2]|0;
      $267 = $OperatorName;
      $268 = $267;
      HEAP32[$268>>2] = $263;
      $269 = (($267) + 4)|0;
      $270 = $269;
      HEAP32[$270>>2] = $266;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp152,25344);
     ;HEAP32[$agg$tmp152$byval_copy>>2]=HEAP32[$agg$tmp152>>2]|0;HEAP32[$agg$tmp152$byval_copy+4>>2]=HEAP32[$agg$tmp152+4>>2]|0;
     $call153 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp152$byval_copy)|0);
     if ($call153) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp155,23252);
      $271 = $ref$tmp155;
      $272 = $271;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($271) + 4)|0;
      $275 = $274;
      $276 = HEAP32[$275>>2]|0;
      $277 = $OperatorName;
      $278 = $277;
      HEAP32[$278>>2] = $273;
      $279 = (($277) + 4)|0;
      $280 = $279;
      HEAP32[$280>>2] = $276;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp157,25347);
     ;HEAP32[$agg$tmp157$byval_copy>>2]=HEAP32[$agg$tmp157>>2]|0;HEAP32[$agg$tmp157$byval_copy+4>>2]=HEAP32[$agg$tmp157+4>>2]|0;
     $call158 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp157$byval_copy)|0);
     if ($call158) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp160,23254);
      $281 = $ref$tmp160;
      $282 = $281;
      $283 = HEAP32[$282>>2]|0;
      $284 = (($281) + 4)|0;
      $285 = $284;
      $286 = HEAP32[$285>>2]|0;
      $287 = $OperatorName;
      $288 = $287;
      HEAP32[$288>>2] = $283;
      $289 = (($287) + 4)|0;
      $290 = $289;
      HEAP32[$290>>2] = $286;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp162,25350);
     ;HEAP32[$agg$tmp162$byval_copy>>2]=HEAP32[$agg$tmp162>>2]|0;HEAP32[$agg$tmp162$byval_copy+4>>2]=HEAP32[$agg$tmp162+4>>2]|0;
     $call163 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp162$byval_copy)|0);
     if ($call163) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp165,23257);
      $291 = $ref$tmp165;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = (($291) + 4)|0;
      $295 = $294;
      $296 = HEAP32[$295>>2]|0;
      $297 = $OperatorName;
      $298 = $297;
      HEAP32[$298>>2] = $293;
      $299 = (($297) + 4)|0;
      $300 = $299;
      HEAP32[$300>>2] = $296;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167,25353);
     ;HEAP32[$agg$tmp167$byval_copy>>2]=HEAP32[$agg$tmp167>>2]|0;HEAP32[$agg$tmp167$byval_copy+4>>2]=HEAP32[$agg$tmp167+4>>2]|0;
     $call168 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp167$byval_copy)|0);
     if (!($call168)) {
      $retval$1 = 0;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp170,23260);
     $301 = $ref$tmp170;
     $302 = $301;
     $303 = HEAP32[$302>>2]|0;
     $304 = (($301) + 4)|0;
     $305 = $304;
     $306 = HEAP32[$305>>2]|0;
     $307 = $OperatorName;
     $308 = $307;
     HEAP32[$308>>2] = $303;
     $309 = (($307) + 4)|0;
     $310 = $309;
     HEAP32[$310>>2] = $306;
     label = 66;
    }
   } while(0);
   if ((label|0) == 66) {
    $call203 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call204 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203)|0);
    HEAP32[$Pack>>2] = $call204;
    HEAP32[$Init>>2] = 0;
    $cmp205 = ($call204|0)==(0|0);
    $311 = $call204;
    L100: do {
     if ($cmp205) {
      $retval$0 = 0;
     } else {
      switch ($call2<<24>>24) {
      case 76: case 82:  {
       $call210 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203)|0);
       HEAP32[$Init>>2] = $call210;
       $cmp211 = ($call210|0)==(0|0);
       $312 = $call210;
       if ($cmp211) {
        $retval$0 = 0;
        break L100;
       }
       $tobool215 = ($storemerge<<24>>24)==(0);
       if (!($tobool215)) {
        HEAP32[$Pack>>2] = $312;
        HEAP32[$Init>>2] = $311;
       }
       break;
      }
      default: {
      }
      }
      $call219 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this,$IsLeftFold,$OperatorName,$Pack,$Init)|0);
      $retval$0 = $call219;
     }
    } while(0);
    $retval$1 = $retval$0;
   }
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else {
  $retval$3 = 0;
 }
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($this,$Kind) {
 $this = $this|0;
 $Kind = $Kind|0;
 var $LHS = 0, $RHS = 0, $call = 0, $call2 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cmp5 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $LHS = sp + 4|0;
 $RHS = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call)|0);
 HEAP32[$LHS>>2] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $retval$1 = 0;
 } else {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call)|0);
  HEAP32[$RHS>>2] = $call4;
  $cmp5 = ($call4|0)==(0|0);
  if ($cmp5) {
   $retval$0 = 0;
  } else {
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this,$LHS,$Kind,$RHS)|0);
   $retval$0 = $call8;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($this,$Kind) {
 $this = $this|0;
 $Kind = $Kind|0;
 var $E = 0, $call = 0, $call2 = 0, $call3 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $E = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call)|0);
 HEAP32[$E>>2] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$Kind,$E)|0);
  $retval$0 = $call3;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,$args,$args1,22447)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,25152,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv($this) {
 $this = $this|0;
 var $E = 0, $E21 = 0, $Exprs = 0, $Names = 0, $SaveTemp = 0, $TryToParseTemplateArgs = 0, $Ty = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call12 = 0, $call17 = 0, $call2 = 0, $call23 = 0, $call28 = 0, $call3 = 0, $call6 = 0, $call8 = 0, $call9 = 0;
 var $cmp = 0, $cmp13 = 0, $cmp24 = 0, $ref$tmp = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $Ty = sp + 40|0;
 $SaveTemp = sp + 32|0;
 $E = sp + 24|0;
 $Exprs = sp + 16|0;
 $E21 = sp + 8|0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25051);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  $TryToParseTemplateArgs = ((($this)) + 360|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemp,$TryToParseTemplateArgs,0);
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2)|0);
  HEAP32[$Ty>>2] = $call3;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemp);
  $cmp = ($call3|0)==(0|0);
  do {
   if ($cmp) {
    $retval$4 = 0;
   } else {
    $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if (!($call6)) {
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2)|0);
     HEAP32[$E21>>2] = $call23;
     $cmp24 = ($call23|0)==(0|0);
     if ($cmp24) {
      $retval$3 = 0;
     } else {
      $add$ptr = ((($E21)) + 4|0);
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($ref$tmp,$this,$E21,$add$ptr);
      $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$Ty,$ref$tmp)|0);
      $retval$3 = $call28;
     }
     $retval$4 = $retval$3;
     break;
    }
    $Names = ((($this)) + 8|0);
    $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
    while(1) {
     $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call9) {
      label = 9;
      break;
     }
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2)|0);
     HEAP32[$E>>2] = $call12;
     $cmp13 = ($call12|0)==(0|0);
     if ($cmp13) {
      label = 7;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$E);
    }
    if ((label|0) == 7) {
     $retval$4 = 0;
     break;
    }
    else if ((label|0) == 9) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Exprs,$this,$call8);
     $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this,$Ty,$Exprs)|0);
     $retval$4 = $call17;
     break;
    }
   }
  } while(0);
  $retval$5 = $retval$4;
 } else {
  $retval$5 = 0;
 }
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,24980,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($this) {
 $this = $this|0;
 var $$pre$phiZ2D = 0, $0 = 0, $Base = 0, $Base107 = 0, $Qual = 0, $Qual59 = 0, $SoFar = 0, $TA = 0, $TA92 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp38 = 0, $agg$tmp38$byval_copy = 0, $agg$tmp40 = 0, $agg$tmp40$byval_copy = 0, $brmerge = 0, $call = 0, $call109 = 0, $call113 = 0, $call13 = 0;
 var $call17 = 0, $call19 = 0, $call2 = 0, $call23 = 0, $call3 = 0, $call31 = 0, $call35 = 0, $call39 = 0, $call39$not = 0, $call41 = 0, $call44 = 0, $call45 = 0, $call5 = 0, $call51 = 0, $call54 = 0, $call60 = 0, $call61 = 0, $call67 = 0, $call70 = 0, $call80 = 0;
 var $call83 = 0, $call84 = 0, $call88 = 0, $call9 = 0, $call94 = 0, $call98 = 0, $cmp = 0, $cmp10 = 0, $cmp110 = 0, $cmp20 = 0, $cmp32 = 0, $cmp46 = 0, $cmp6 = 0, $cmp62 = 0, $cmp85 = 0, $cmp90 = 0, $cmp95 = 0, $conv55 = 0, $isdigit = 0, $isdigittmp = 0;
 var $retval$10 = 0, $retval$4 = 0, $retval$8 = 0, $tobool65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp40$byval_copy = sp + 80|0;
 $agg$tmp38$byval_copy = sp + 72|0;
 $agg$tmp$byval_copy = sp + 64|0;
 $SoFar = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $TA = sp + 40|0;
 $Qual = sp + 36|0;
 $Base = sp + 32|0;
 $agg$tmp38 = sp + 24|0;
 $agg$tmp40 = sp + 16|0;
 $Qual59 = sp + 8|0;
 $TA92 = sp + 4|0;
 $Base107 = sp;
 HEAP32[$SoFar>>2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24190);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 L1: do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call2)|0);
   HEAP32[$SoFar>>2] = $call3;
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    $retval$10 = 0;
   } else {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp6 = ($call5<<24>>24)==(73);
    do {
     if ($cmp6) {
      $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call2,0)|0);
      HEAP32[$TA>>2] = $call9;
      $cmp10 = ($call9|0)==(0|0);
      if ($cmp10) {
       $retval$10 = 0;
       break L1;
      } else {
       $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$TA)|0);
       HEAP32[$SoFar>>2] = $call13;
       break;
      }
     }
    } while(0);
    while(1) {
     $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call17) {
      break;
     }
     $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call2)|0);
     HEAP32[$Qual>>2] = $call19;
     $cmp20 = ($call19|0)==(0|0);
     if ($cmp20) {
      label = 35;
      break;
     }
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Qual)|0);
     HEAP32[$SoFar>>2] = $call23;
    }
    if ((label|0) == 35) {
     $retval$10 = 0;
     break;
    }
    $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($call2)|0);
    HEAP32[$Base>>2] = $call31;
    $cmp32 = ($call31|0)==(0|0);
    if ($cmp32) {
     $retval$4 = 0;
    } else {
     $call35 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Base)|0);
     $retval$4 = $call35;
    }
    $retval$10 = $retval$4;
   }
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp38,23164);
   ;HEAP32[$agg$tmp38$byval_copy>>2]=HEAP32[$agg$tmp38>>2]|0;HEAP32[$agg$tmp38$byval_copy+4>>2]=HEAP32[$agg$tmp38+4>>2]|0;
   $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp38$byval_copy)|0);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp40,24194);
   ;HEAP32[$agg$tmp40$byval_copy>>2]=HEAP32[$agg$tmp40>>2]|0;HEAP32[$agg$tmp40$byval_copy+4>>2]=HEAP32[$agg$tmp40+4>>2]|0;
   $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp40$byval_copy)|0);
   if (!($call41)) {
    $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($call44)|0);
    HEAP32[$SoFar>>2] = $call45;
    $cmp46 = ($call45|0)==(0|0);
    $call39$not = $call39 ^ 1;
    $brmerge = $cmp46 | $call39$not;
    if ($brmerge) {
     $retval$10 = $call45;
     break;
    }
    $call51 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$SoFar)|0);
    HEAP32[$SoFar>>2] = $call51;
    $retval$10 = $call51;
    break;
   }
   $call54 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $conv55 = $call54 << 24 >> 24;
   $isdigittmp = (($conv55) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   L25: do {
    if ($isdigit) {
     while(1) {
      $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call61 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call60)|0);
      HEAP32[$Qual59>>2] = $call61;
      $cmp62 = ($call61|0)==(0|0);
      if ($cmp62) {
       break;
      }
      $0 = HEAP32[$SoFar>>2]|0;
      $tobool65 = ($0|0)==(0|0);
      do {
       if ($tobool65) {
        if ($call39) {
         $call70 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$Qual59)|0);
         HEAP32[$SoFar>>2] = $call70;
         break;
        } else {
         HEAP32[$SoFar>>2] = $call61;
         break;
        }
       } else {
        $call67 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Qual59)|0);
        HEAP32[$SoFar>>2] = $call67;
       }
      } while(0);
      $call80 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call80) {
       $$pre$phiZ2D = $call60;
       break L25;
      }
     }
     $retval$10 = 0;
     break L1;
    } else {
     $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call84 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call83)|0);
     HEAP32[$SoFar>>2] = $call84;
     $cmp85 = ($call84|0)==(0|0);
     if ($cmp85) {
      $retval$10 = 0;
      break L1;
     }
     $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     $cmp90 = ($call88<<24>>24)==(73);
     if ($cmp90) {
      $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call83,0)|0);
      HEAP32[$TA92>>2] = $call94;
      $cmp95 = ($call94|0)==(0|0);
      if ($cmp95) {
       $retval$10 = 0;
       break L1;
      } else {
       $call98 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$TA92)|0);
       HEAP32[$SoFar>>2] = $call98;
       $$pre$phiZ2D = $call83;
       break;
      }
     } else {
      $$pre$phiZ2D = $call83;
     }
    }
   } while(0);
   $call109 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($$pre$phiZ2D)|0);
   HEAP32[$Base107>>2] = $call109;
   $cmp110 = ($call109|0)==(0|0);
   if ($cmp110) {
    $retval$8 = 0;
   } else {
    $call113 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Base107)|0);
    $retval$8 = $call113;
   }
   $retval$10 = $retval$8;
  }
 } while(0);
 STACKTOP = sp;return ($retval$10|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this,$args,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($ASTAllocator,$args,24141,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Field = 0, $Index = 0, $Init = 0, $Init23 = 0, $Init46 = 0, $RangeBegin = 0, $RangeEnd = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr35 = 0, $call = 0, $call13 = 0, $call18 = 0, $call19 = 0, $call2 = 0, $call25 = 0, $call30 = 0;
 var $call36 = 0, $call37 = 0, $call4 = 0, $call42 = 0, $call48 = 0, $call5 = 0, $call52 = 0, $call57 = 0, $call58 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp20 = 0, $cmp26 = 0, $cmp38 = 0, $cmp43 = 0, $cmp49 = 0, $cmp6 = 0, $conv3 = 0, $ref$tmp = 0;
 var $ref$tmp29 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Field = sp + 24|0;
 $Init = sp + 20|0;
 $ref$tmp = sp + 29|0;
 $Index = sp + 16|0;
 $Init23 = sp + 12|0;
 $ref$tmp29 = sp + 28|0;
 $RangeBegin = sp + 8|0;
 $RangeEnd = sp + 4|0;
 $Init46 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $cmp = ($call<<24>>24)==(100);
 L1: do {
  if ($cmp) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv3 = $call2 << 24 >> 24;
   switch ($conv3|0) {
   case 105:  {
    $0 = HEAP32[$this>>2]|0;
    $add$ptr = ((($0)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call4)|0);
    HEAP32[$Field>>2] = $call5;
    $cmp6 = ($call5|0)==(0|0);
    if ($cmp6) {
     $retval$1 = 0;
    } else {
     $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call4)|0);
     HEAP32[$Init>>2] = $call9;
     $cmp10 = ($call9|0)==(0|0);
     if ($cmp10) {
      $retval$0 = 0;
     } else {
      HEAP8[$ref$tmp>>0] = 0;
      $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this,$Field,$Init,$ref$tmp)|0);
      $retval$0 = $call13;
     }
     $retval$1 = $retval$0;
    }
    $retval$7 = $retval$1;
    break L1;
    break;
   }
   case 120:  {
    $1 = HEAP32[$this>>2]|0;
    $add$ptr17 = ((($1)) + 2|0);
    HEAP32[$this>>2] = $add$ptr17;
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call18)|0);
    HEAP32[$Index>>2] = $call19;
    $cmp20 = ($call19|0)==(0|0);
    if ($cmp20) {
     $retval$3 = 0;
    } else {
     $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call18)|0);
     HEAP32[$Init23>>2] = $call25;
     $cmp26 = ($call25|0)==(0|0);
     if ($cmp26) {
      $retval$2 = 0;
     } else {
      HEAP8[$ref$tmp29>>0] = 1;
      $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this,$Index,$Init23,$ref$tmp29)|0);
      $retval$2 = $call30;
     }
     $retval$3 = $retval$2;
    }
    $retval$7 = $retval$3;
    break L1;
    break;
   }
   case 88:  {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr35 = ((($2)) + 2|0);
    HEAP32[$this>>2] = $add$ptr35;
    $call36 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36)|0);
    HEAP32[$RangeBegin>>2] = $call37;
    $cmp38 = ($call37|0)==(0|0);
    if ($cmp38) {
     $retval$6 = 0;
    } else {
     $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36)|0);
     HEAP32[$RangeEnd>>2] = $call42;
     $cmp43 = ($call42|0)==(0|0);
     if ($cmp43) {
      $retval$5 = 0;
     } else {
      $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call36)|0);
      HEAP32[$Init46>>2] = $call48;
      $cmp49 = ($call48|0)==(0|0);
      if ($cmp49) {
       $retval$4 = 0;
      } else {
       $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$RangeBegin,$RangeEnd,$Init46)|0);
       $retval$4 = $call52;
      }
      $retval$5 = $retval$4;
     }
     $retval$6 = $retval$5;
    }
    $retval$7 = $retval$6;
    break L1;
    break;
   }
   default: {
    label = 20;
    break L1;
   }
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $call57 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call57)|0);
  $retval$7 = $call58;
 }
 STACKTOP = sp;return ($retval$7|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv($this) {
 $this = $this|0;
 var $Ex = 0, $ExprList = 0, $Global = 0, $Init = 0, $Inits = 0, $IsArray = 0, $Names = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $call = 0, $call11 = 0, $call12 = 0, $call17 = 0;
 var $call18 = 0, $call2 = 0, $call23 = 0, $call26 = 0, $call28 = 0, $call32 = 0, $call41 = 0, $call44 = 0, $call48 = 0, $call5 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp13 = 0, $cmp19 = 0, $cmp33 = 0, $frombool = 0, $frombool3 = 0, $ref$tmp = 0;
 var $retval$5 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp22$byval_copy = sp + 104|0;
 $agg$tmp6$byval_copy = sp + 96|0;
 $agg$tmp4$byval_copy = sp + 88|0;
 $agg$tmp$byval_copy = sp + 80|0;
 $Global = sp + 113|0;
 $agg$tmp = sp + 72|0;
 $IsArray = sp + 112|0;
 $agg$tmp4 = sp + 64|0;
 $agg$tmp6 = sp + 56|0;
 $Ex = sp + 48|0;
 $ExprList = sp + 40|0;
 $Ty = sp + 32|0;
 $agg$tmp22 = sp + 24|0;
 $Init = sp + 16|0;
 $Inits = sp + 8|0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23164);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 $frombool = $call&1;
 HEAP8[$Global>>0] = $frombool;
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
 $cmp = ($call2<<24>>24)==(97);
 $frombool3 = $cmp&1;
 HEAP8[$IsArray>>0] = $frombool3;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23778);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp4$byval_copy)|0);
 if ($call5) {
  label = 3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23781);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp6$byval_copy)|0);
  if ($call7) {
   label = 3;
  } else {
   $retval$7 = 0;
  }
 }
 do {
  if ((label|0) == 3) {
   $Names = ((($this)) + 8|0);
   $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call9) {
     break;
    }
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call11)|0);
    HEAP32[$Ex>>2] = $call12;
    $cmp13 = ($call12|0)==(0|0);
    if ($cmp13) {
     label = 7;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Ex);
   }
   if ((label|0) == 7) {
    $retval$7 = 0;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ExprList,$this,$call8);
   $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call17)|0);
   HEAP32[$Ty>>2] = $call18;
   $cmp19 = ($call18|0)==(0|0);
   do {
    if ($cmp19) {
     $retval$5 = 0;
    } else {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22,23784);
     ;HEAP32[$agg$tmp22$byval_copy>>2]=HEAP32[$agg$tmp22>>2]|0;HEAP32[$agg$tmp22$byval_copy+4>>2]=HEAP32[$agg$tmp22+4>>2]|0;
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp22$byval_copy)|0);
     if (!($call23)) {
      $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if (!($call44)) {
       $retval$5 = 0;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp);
      $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this,$ExprList,$Ty,$ref$tmp,$Global,$IsArray)|0);
      $retval$5 = $call48;
      break;
     }
     $call26 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
     while(1) {
      $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call28) {
       label = 15;
       break;
      }
      $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call17)|0);
      HEAP32[$Init>>2] = $call32;
      $cmp33 = ($call32|0)==(0|0);
      if ($cmp33) {
       label = 13;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Init);
     }
     if ((label|0) == 13) {
      $retval$5 = 0;
      break;
     }
     else if ((label|0) == 15) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Inits,$this,$call26);
      $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this,$ExprList,$Ty,$Inits,$Global,$IsArray)|0);
      $retval$5 = $call41;
      break;
     }
    }
   } while(0);
   $retval$7 = $retval$5;
  }
 } while(0);
 STACKTOP = sp;return ($retval$7|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,23767,$args1,22447)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,23686,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,23627,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,$args,$args1,22447)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,23439,$args1,22447)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($this,$Op_) {
 $this = $this|0;
 $Op_ = $Op_|0;
 var $Op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,58,1,1,1);
 HEAP32[$this>>2] = (4588);
 $Op = ((($this)) + 8|0);
 HEAP32[$Op>>2] = $Op_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Op = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23288);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Op = ((($this)) + 8|0);
 $0 = HEAP32[$Op>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($this,$Ty_,$Inits_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Inits_ = $Inits_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Inits = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,56,1,1,1);
 HEAP32[$this>>2] = (4632);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Inits = ((($this)) + 12|0);
 $0 = $Inits_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Inits;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Inits = 0, $Ty = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,123);
 $Inits = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Inits,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,125);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($this,$Array_) {
 $this = $this|0;
 $Array_ = $Array_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Array = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,0,1,1,1);
 HEAP32[$this>>2] = (4676);
 $Array = ((($this)) + 8|0);
 $0 = $Array_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Array;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Array = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Array = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Array,$S);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($this,$Prefix_,$Infix_,$Postfix_) {
 $this = $this|0;
 $Prefix_ = $Prefix_|0;
 $Infix_ = $Infix_|0;
 $Postfix_ = $Postfix_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Infix = 0, $Postfix = 0, $Prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,47,1,1,1);
 HEAP32[$this>>2] = (4720);
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Prefix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Infix = ((($this)) + 16|0);
 HEAP32[$Infix>>2] = $Infix_;
 $Postfix = ((($this)) + 20|0);
 $10 = $Postfix_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $Postfix;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $Infix = 0, $Postfix = 0, $Prefix = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, $tmpcast3$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast3$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 $Infix = ((($this)) + 16|0);
 $10 = HEAP32[$Infix>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 $Postfix = ((($this)) + 20|0);
 $11 = $Postfix;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $agg$tmp2;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 ;HEAP32[$tmpcast3$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast3$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast3$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($this,$Pack_) {
 $this = $this|0;
 $Pack_ = $Pack_|0;
 var $Pack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,49,1,1,1);
 HEAP32[$this>>2] = (4764);
 $Pack = ((($this)) + 8|0);
 HEAP32[$Pack>>2] = $Pack_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $PPE = 0, $Pack = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp2$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $PPE = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23501);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Pack = ((($this)) + 8|0);
 $0 = HEAP32[$Pack>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($PPE,$0);
 __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($PPE,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($this,$Child_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 var $Child = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,29,1,1,1);
 HEAP32[$this>>2] = (4808);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Child = 0, $CurrentPackIndex = 0, $CurrentPackMax = 0, $I$0 = 0, $SavePackIdx = 0, $SavePackMax = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call = 0, $cmp9 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp10$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $SavePackIdx = sp + 28|0;
 $SavePackMax = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp10 = sp;
 $CurrentPackIndex = ((($S)) + 12|0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackIdx,$CurrentPackIndex);
 $CurrentPackMax = ((($S)) + 16|0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackMax,$CurrentPackMax);
 $call = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 $1 = HEAP32[$CurrentPackMax>>2]|0;
 L1: do {
  switch ($1|0) {
  case -1:  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,21993);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
   break;
  }
  case 0:  {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S,$call);
   break;
  }
  default: {
   $I$0 = 1;
   while(1) {
    $cmp9 = ($I$0>>>0)<($1>>>0);
    if (!($cmp9)) {
     break L1;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,22635);
    ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp10$byval_copy);
    HEAP32[$CurrentPackIndex>>2] = $I$0;
    $2 = HEAP32[$Child>>2]|0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
    $inc = (($I$0) + 1)|0;
    $I$0 = $inc;
   }
  }
  }
 } while(0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackMax);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackIdx);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($this,$Restore_) {
 $this = $this|0;
 $Restore_ = $Restore_|0;
 var $0 = 0, $OriginalValue = 0, $ShouldRestore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $Restore_;
 $OriginalValue = ((($this)) + 4|0);
 $0 = HEAP32[$Restore_>>2]|0;
 HEAP32[$OriginalValue>>2] = $0;
 $ShouldRestore = ((($this)) + 8|0);
 HEAP8[$ShouldRestore>>0] = 1;
 HEAP32[$Restore_>>2] = -1;
 return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $OriginalValue = 0, $ShouldRestore = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ShouldRestore = ((($this)) + 8|0);
 $0 = HEAP8[$ShouldRestore>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $OriginalValue = ((($this)) + 4|0);
  $1 = HEAP32[$OriginalValue>>2]|0;
  $2 = HEAP32[$this>>2]|0;
  HEAP32[$2>>2] = $1;
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($this,$CastKind_,$To_,$From_) {
 $this = $this|0;
 $CastKind_ = $CastKind_|0;
 $To_ = $To_|0;
 $From_ = $From_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CastKind = 0, $From = 0, $To = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,48,1,1,1);
 HEAP32[$this>>2] = (4852);
 $CastKind = ((($this)) + 8|0);
 $0 = $CastKind_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $CastKind;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $To = ((($this)) + 16|0);
 HEAP32[$To>>2] = $To_;
 $From = ((($this)) + 20|0);
 HEAP32[$From>>2] = $From_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CastKind = 0, $From = 0, $To = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0;
 var $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $tmpcast$byval_copy = 0, $vfn = 0, $vfn7 = 0, $vtable = 0, $vtable6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp8$byval_copy = sp + 56|0;
 $agg$tmp4$byval_copy = sp + 48|0;
 $agg$tmp2$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 24|0;
 $agg$tmp4 = sp + 16|0;
 $agg$tmp8 = sp + 8|0;
 $CastKind = ((($this)) + 8|0);
 $0 = $CastKind;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22633);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $To = ((($this)) + 16|0);
 $10 = HEAP32[$To>>2]|0;
 $vtable = HEAP32[$10>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $11 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$11 & 255]($10,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23639);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 $From = ((($this)) + 20|0);
 $12 = HEAP32[$From>>2]|0;
 $vtable6 = HEAP32[$12>>2]|0;
 $vfn7 = ((($vtable6)) + 16|0);
 $13 = HEAP32[$vfn7>>2]|0;
 FUNCTION_TABLE_vii[$13 & 255]($12,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,22447);
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp8$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = HEAP32[$args3>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($call,$0,$1,$2);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($this,$Cond_,$Then_,$Else_) {
 $this = $this|0;
 $Cond_ = $Cond_|0;
 $Then_ = $Then_|0;
 $Else_ = $Else_|0;
 var $Cond = 0, $Else = 0, $Then = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,45,1,1,1);
 HEAP32[$this>>2] = (4896);
 $Cond = ((($this)) + 8|0);
 HEAP32[$Cond>>2] = $Cond_;
 $Then = ((($this)) + 12|0);
 HEAP32[$Then>>2] = $Then_;
 $Else = ((($this)) + 16|0);
 HEAP32[$Else>>2] = $Else_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Cond = 0, $Else = 0, $Then = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp6$byval_copy = sp + 56|0;
 $agg$tmp4$byval_copy = sp + 48|0;
 $agg$tmp2$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp2 = sp + 16|0;
 $agg$tmp4 = sp + 8|0;
 $agg$tmp6 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Cond = ((($this)) + 8|0);
 $0 = HEAP32[$Cond>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23703);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Then = ((($this)) + 12|0);
 $1 = HEAP32[$Then>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23709);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 $Else = ((($this)) + 16|0);
 $2 = HEAP32[$Else>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,22447);
 ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $ASTAllocator = 0, $call14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call14 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7)|0);
 return ($call14|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($this) {
 $this = $this|0;
 var $NumElements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $NumElements = ((($this)) + 4|0);
 HEAP32[$NumElements>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $ASTAllocator = 0, $call14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call14 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7)|0);
 return ($call14|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp12 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,32)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 $11 = $args3;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $agg$tmp12;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = HEAP8[$args5>>0]|0;
 $tobool = ($21<<24>>24)!=(0);
 $22 = HEAP8[$args7>>0]|0;
 $tobool16 = ($22<<24>>24)!=(0);
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call,$tmpcast$byval_copy,$10,$tmpcast1$byval_copy,$tobool,$tobool16);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($this,$ExprList_,$Type_,$InitList_,$IsGlobal_,$IsArray_) {
 $this = $this|0;
 $ExprList_ = $ExprList_|0;
 $Type_ = $Type_|0;
 $InitList_ = $InitList_|0;
 $IsGlobal_ = $IsGlobal_|0;
 $IsArray_ = $IsArray_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ExprList = 0, $InitList = 0, $IsArray = 0, $IsGlobal = 0, $Type = 0, $frombool = 0, $frombool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsGlobal_&1;
 $frombool1 = $IsArray_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,51,1,1,1);
 HEAP32[$this>>2] = (4940);
 $ExprList = ((($this)) + 8|0);
 $0 = $ExprList_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $ExprList;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Type = ((($this)) + 16|0);
 HEAP32[$Type>>2] = $Type_;
 $InitList = ((($this)) + 20|0);
 $10 = $InitList_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $InitList;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $IsGlobal = ((($this)) + 28|0);
 HEAP8[$IsGlobal>>0] = $frombool;
 $IsArray = ((($this)) + 29|0);
 HEAP8[$IsArray>>0] = $frombool1;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $ExprList = 0, $InitList = 0, $IsArray = 0, $IsGlobal = 0, $Type = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp20 = 0, $agg$tmp20$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0;
 var $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $call10 = 0, $call18 = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp23$byval_copy = sp + 104|0;
 $agg$tmp20$byval_copy = sp + 96|0;
 $agg$tmp15$byval_copy = sp + 88|0;
 $agg$tmp12$byval_copy = sp + 80|0;
 $agg$tmp6$byval_copy = sp + 72|0;
 $agg$tmp2$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp2 = sp + 40|0;
 $agg$tmp6 = sp + 32|0;
 $agg$tmp12 = sp + 24|0;
 $agg$tmp15 = sp + 16|0;
 $agg$tmp20 = sp + 8|0;
 $agg$tmp23 = sp;
 $IsGlobal = ((($this)) + 28|0);
 $0 = HEAP8[$IsGlobal>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23787);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23799);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $IsArray = ((($this)) + 29|0);
 $1 = HEAP8[$IsArray>>0]|0;
 $tobool4 = ($1<<24>>24)==(0);
 if (!($tobool4)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23803);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
 $ExprList = ((($this)) + 8|0);
 $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($ExprList)|0);
 if (!($call10)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,22451);
  ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($ExprList,$S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,22447);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp15$byval_copy);
 }
 $Type = ((($this)) + 16|0);
 $2 = HEAP32[$Type>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 $InitList = ((($this)) + 20|0);
 $call18 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($InitList)|0);
 if (!($call18)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp20,22451);
  ;HEAP32[$agg$tmp20$byval_copy>>2]=HEAP32[$agg$tmp20>>2]|0;HEAP32[$agg$tmp20$byval_copy+4>>2]=HEAP32[$agg$tmp20+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp20$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($InitList,$S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23,22447);
  ;HEAP32[$agg$tmp23$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;HEAP32[$agg$tmp23$byval_copy+4>>2]=HEAP32[$agg$tmp23+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp23$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $NumElements = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $NumElements = ((($this)) + 4|0);
 $0 = HEAP32[$NumElements>>2]|0;
 $cmp = ($0|0)==(0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp12 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,32)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 $11 = $args3;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $agg$tmp12;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = HEAP8[$args5>>0]|0;
 $tobool = ($21<<24>>24)!=(0);
 $22 = HEAP8[$args7>>0]|0;
 $tobool16 = ($22<<24>>24)!=(0);
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call,$tmpcast$byval_copy,$10,$tmpcast1$byval_copy,$tobool,$tobool16);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($this,$Child_,$Operator_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 $Operator_ = $Operator_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Operator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,44,1,1,1);
 HEAP32[$this>>2] = (4984);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 $Operator = ((($this)) + 12|0);
 $0 = $Operator_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Operator;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Operator = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Operator = ((($this)) + 12|0);
 $1 = $Operator;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp4;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = $args1;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Length = 0, $Name = 0, $add$ptr = 0, $add$ptr8 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call11 = 0, $call13 = 0, $call2 = 0, $call9 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $Length = sp + 16|0;
 $Name = sp + 8|0;
 $agg$tmp = sp;
 HEAP32[$Length>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Length)|0);
 if ($call) {
  $retval$1 = 0;
 } else {
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
  $0 = HEAP32[$Length>>2]|0;
  $1 = (($0) + -1)|0;
  $2 = ($1>>>0)<($call2>>>0);
  if ($2) {
   $3 = HEAP32[$this>>2]|0;
   $add$ptr = (($3) + ($0)|0);
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Name,$3,$add$ptr);
   $4 = HEAP32[$this>>2]|0;
   $add$ptr8 = (($4) + ($0)|0);
   HEAP32[$this>>2] = $add$ptr8;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24006);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call9 = (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Name,$agg$tmp$byval_copy)|0);
   if ($call9) {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this)|0);
    $retval$0 = $call11;
   } else {
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Name)|0);
    $retval$0 = $call13;
   }
   $retval$1 = $retval$0;
  } else {
   $retval$1 = 0;
  }
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = HEAP32[$args3>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($call,$0,$1,$2);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($this,$First_,$Last_,$Init_) {
 $this = $this|0;
 $First_ = $First_|0;
 $Last_ = $Last_|0;
 $Init_ = $Init_|0;
 var $First = 0, $Init = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,66,1,1,1);
 HEAP32[$this>>2] = (5028);
 $First = ((($this)) + 8|0);
 HEAP32[$First>>2] = $First_;
 $Last = ((($this)) + 12|0);
 HEAP32[$Last>>2] = $Last_;
 $Init = ((($this)) + 16|0);
 HEAP32[$Init>>2] = $Init_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $First = 0, $Init = 0, $Last = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $call4 = 0, $call4$off = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp9$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp9 = sp;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,91);
 $First = ((($this)) + 8|0);
 $0 = HEAP32[$First>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23897);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Last = ((($this)) + 12|0);
 $1 = HEAP32[$Last>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 $Init = ((($this)) + 16|0);
 $2 = HEAP32[$Init>>2]|0;
 $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($2)|0);
 $call4$off = (($call4) + -65)<<24>>24;
 $switch = ($call4$off&255)<(2);
 if ($switch) {
  $3 = $2;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,23903);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp9$byval_copy);
  $$pre = HEAP32[$Init>>2]|0;
  $3 = $$pre;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($3,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = HEAP8[$args3>>0]|0;
 $tobool = ($2<<24>>24)!=(0);
 __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($call,$0,$1,$tobool);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($this,$Elem_,$Init_,$IsArray_) {
 $this = $this|0;
 $Elem_ = $Elem_|0;
 $Init_ = $Init_|0;
 $IsArray_ = $IsArray_|0;
 var $Elem = 0, $Init = 0, $IsArray = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsArray_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,65,1,1,1);
 HEAP32[$this>>2] = (5072);
 $Elem = ((($this)) + 8|0);
 HEAP32[$Elem>>2] = $Elem_;
 $Init = ((($this)) + 12|0);
 HEAP32[$Init>>2] = $Init_;
 $IsArray = ((($this)) + 16|0);
 HEAP8[$IsArray>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Elem = 0, $Elem4 = 0, $Init = 0, $IsArray = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call5 = 0, $call5$off = 0, $switch = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $IsArray = ((($this)) + 16|0);
 $0 = HEAP8[$IsArray>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,46);
  $Elem4 = ((($this)) + 8|0);
  $2 = HEAP32[$Elem4>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 } else {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,91);
  $Elem = ((($this)) + 8|0);
  $1 = HEAP32[$Elem>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 }
 $Init = ((($this)) + 12|0);
 $3 = HEAP32[$Init>>2]|0;
 $call5 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($3)|0);
 $call5$off = (($call5) + -65)<<24>>24;
 $switch = ($call5$off&255)<(2);
 if ($switch) {
  $4 = $3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23903);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  $$pre = HEAP32[$Init>>2]|0;
  $4 = $$pre;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($4,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Out) {
 $this = $this|0;
 $Out = $Out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $call = 0, $call$off = 0, $call11 = 0, $call5 = 0, $call5$off = 0, $conv12 = 0, $mul = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$Out>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $call$off = (($call) + -48)<<24>>24;
 $0 = ($call$off&255)>(9);
 L1: do {
  if ($0) {
   $retval$0 = 1;
  } else {
   $2 = 0;
   while(1) {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $call5$off = (($call5) + -48)<<24>>24;
    $1 = ($call5$off&255)<(10);
    if (!($1)) {
     $retval$0 = 0;
     break L1;
    }
    $mul = ($2*10)|0;
    HEAP32[$Out>>2] = $mul;
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this)|0);
    $conv12 = $call11 << 24 >> 24;
    $sub = (($conv12) + -48)|0;
    $3 = HEAP32[$Out>>2]|0;
    $add = (($sub) + ($3))|0;
    HEAP32[$Out>>2] = $add;
    $2 = $add;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_110StringView10startsWithES0_($this,$Str) {
 $this = $this|0;
 $Str = $Str|0;
 var $0 = 0, $1 = 0, $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($Str)|0);
 $call2 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($this)|0);
 $cmp = ($call>>>0)>($call2>>>0);
 L1: do {
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Str)|0);
   $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Str)|0);
   $call5 = (__ZNK12_GLOBAL__N_110StringView5beginEv($this)|0);
   $__first1$addr$0$i$i = $call3;$__first2$addr$0$i$i = $call5;
   while(1) {
    $cmp$i$i = ($__first1$addr$0$i$i|0)==($call4|0);
    if ($cmp$i$i) {
     $retval$0 = 1;
     break L1;
    }
    $0 = HEAP8[$__first1$addr$0$i$i>>0]|0;
    $1 = HEAP8[$__first2$addr$0$i$i>>0]|0;
    $cmp$i$i$i = ($0<<24>>24)==($1<<24>>24);
    if (!($cmp$i$i$i)) {
     $retval$0 = 0;
     break L1;
    }
    $incdec$ptr$i$i = ((($__first1$addr$0$i$i)) + 1|0);
    $incdec$ptr1$i$i = ((($__first2$addr$0$i$i)) + 1|0);
    $__first1$addr$0$i$i = $incdec$ptr$i$i;$__first2$addr$0$i$i = $incdec$ptr1$i$i;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($ASTAllocator,24017)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($this,$Name_) {
 $this = $this|0;
 $Name_ = $Name_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,7,1,1,1);
 HEAP32[$this>>2] = (5116);
 $Name = ((($this)) + 8|0);
 $0 = $Name_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Name;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Name = ((($this)) + 8|0);
 $0 = $Name;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = $Name;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Last = 0, $cmp = 0, $cond = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $cond = 0;
 } else {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$this>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $cond = $2;
 }
 return ($cond|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($this,$Op1_,$Op2_) {
 $this = $this|0;
 $Op1_ = $Op1_|0;
 $Op2_ = $Op2_|0;
 var $Op1 = 0, $Op2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,43,1,1,1);
 HEAP32[$this>>2] = (5160);
 $Op1 = ((($this)) + 8|0);
 HEAP32[$Op1>>2] = $Op1_;
 $Op2 = ((($this)) + 12|0);
 HEAP32[$Op2>>2] = $Op2_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Op1 = 0, $Op2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Op1 = ((($this)) + 8|0);
 $0 = HEAP32[$Op1>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,24083);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Op2 = ((($this)) + 12|0);
 $1 = HEAP32[$Op2>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22097);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call,$0,$agg$tmp$byval_copy,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($this,$LHS_,$Kind_,$RHS_) {
 $this = $this|0;
 $LHS_ = $LHS_|0;
 $Kind_ = $Kind_|0;
 $RHS_ = $RHS_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Kind = 0, $LHS = 0, $RHS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,46,1,1,1);
 HEAP32[$this>>2] = (5204);
 $LHS = ((($this)) + 8|0);
 HEAP32[$LHS>>2] = $LHS_;
 $Kind = ((($this)) + 12|0);
 $0 = $Kind_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Kind;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $RHS = ((($this)) + 20|0);
 HEAP32[$RHS>>2] = $RHS_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Kind = 0, $LHS = 0, $RHS = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $LHS = ((($this)) + 8|0);
 $0 = HEAP32[$LHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 $Kind = ((($this)) + 12|0);
 $1 = $Kind;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 $RHS = ((($this)) + 20|0);
 $11 = HEAP32[$RHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($11,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call,$0,$agg$tmp$byval_copy,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($this) {
 $this = $this|0;
 var $DT = 0, $Subs = 0, $Subs16 = 0, $TP = 0, $call = 0, $call11 = 0, $call12 = 0, $call19 = 0, $call2 = 0, $call20 = 0, $call3 = 0, $cmp13 = 0, $cmp4 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $TP = sp + 4|0;
 $DT = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 switch ($call<<24>>24) {
 case 84:  {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call2)|0);
  HEAP32[$TP>>2] = $call3;
  $cmp4 = ($call3|0)==(0|0);
  if ($cmp4) {
   $retval$0 = 0;
  } else {
   $Subs = ((($this)) + 148|0);
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$TP);
   $retval$0 = $call3;
  }
  $retval$2 = $retval$0;
  break;
 }
 case 68:  {
  $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($call11)|0);
  HEAP32[$DT>>2] = $call12;
  $cmp13 = ($call12|0)==(0|0);
  if ($cmp13) {
   $retval$1 = 0;
  } else {
   $Subs16 = ((($this)) + 148|0);
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs16,$DT);
   $retval$1 = $call12;
  }
  $retval$2 = $retval$1;
  break;
 }
 default: {
  $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call19)|0);
  $retval$2 = $call20;
 }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($this) {
 $this = $this|0;
 var $SN = 0, $TA = 0, $call = 0, $call11 = 0, $call2 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp4 = 0, $cmp8 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SN = sp + 4|0;
 $TA = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call)|0);
 HEAP32[$SN>>2] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $retval$1 = 0;
 } else {
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
  $cmp4 = ($call3<<24>>24)==(73);
  if ($cmp4) {
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call,0)|0);
   HEAP32[$TA>>2] = $call7;
   $cmp8 = ($call7|0)==(0|0);
   if ($cmp8) {
    $retval$0 = 0;
   } else {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SN,$TA)|0);
    $retval$0 = $call11;
   }
   $retval$1 = $retval$0;
  } else {
   $retval$1 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($this) {
 $this = $this|0;
 var $Oper = 0, $TA = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call = 0, $call12 = 0, $call13 = 0, $call16 = 0, $call21 = 0, $call25 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp18 = 0, $cmp22 = 0;
 var $conv = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp10$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp10 = sp + 8|0;
 $Oper = sp + 4|0;
 $TA = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 $isdigittmp = (($conv) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 do {
  if ($isdigit) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call3)|0);
   $retval$2 = $call4;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24256);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
   if ($call5) {
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv($call7)|0);
    $retval$2 = $call8;
    break;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,24259);
   ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
   (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp10$byval_copy)|0);
   $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($call12,0)|0);
   HEAP32[$Oper>>2] = $call13;
   $cmp = ($call13|0)==(0|0);
   if ($cmp) {
    $retval$1 = 0;
   } else {
    $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp18 = ($call16<<24>>24)==(73);
    if ($cmp18) {
     $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call12,0)|0);
     HEAP32[$TA>>2] = $call21;
     $cmp22 = ($call21|0)==(0|0);
     if ($cmp22) {
      $retval$0 = 0;
     } else {
      $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Oper,$TA)|0);
      $retval$0 = $call25;
     }
     $retval$1 = $retval$0;
    } else {
     $retval$1 = $call13;
    }
   }
   $retval$2 = $retval$1;
  }
 } while(0);
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($this,$Child_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 var $Child = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,33,1,1,1);
 HEAP32[$this>>2] = (5248);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24197);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv($this) {
 $this = $this|0;
 var $Result = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $conv = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Result = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 $isdigittmp = (($conv) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 if ($isdigit) {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call3)|0);
  $storemerge = $call4;
 } else {
  $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call3)|0);
  $storemerge = $call6;
 }
 HEAP32[$Result>>2] = $storemerge;
 $cmp = ($storemerge|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$Result)|0);
  $retval$0 = $call9;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $PermitForwardTemplateReferences = 0, $SN = 0, $SN278 = 0, $SavePermit = 0, $SaveTemplate = 0, $TryToParseTemplateArgs = 0, $Ty = 0, $add$ptr = 0;
 var $add$ptr107 = 0, $add$ptr115 = 0, $add$ptr119 = 0, $add$ptr12 = 0, $add$ptr129 = 0, $add$ptr133 = 0, $add$ptr137 = 0, $add$ptr145 = 0, $add$ptr149 = 0, $add$ptr153 = 0, $add$ptr157 = 0, $add$ptr16 = 0, $add$ptr161 = 0, $add$ptr169 = 0, $add$ptr173 = 0, $add$ptr177 = 0, $add$ptr181 = 0, $add$ptr185 = 0, $add$ptr193 = 0, $add$ptr197 = 0;
 var $add$ptr201 = 0, $add$ptr209 = 0, $add$ptr213 = 0, $add$ptr217 = 0, $add$ptr221 = 0, $add$ptr225 = 0, $add$ptr229 = 0, $add$ptr23 = 0, $add$ptr238 = 0, $add$ptr246 = 0, $add$ptr250 = 0, $add$ptr254 = 0, $add$ptr258 = 0, $add$ptr267 = 0, $add$ptr27 = 0, $add$ptr277 = 0, $add$ptr31 = 0, $add$ptr35 = 0, $add$ptr54 = 0, $add$ptr58 = 0;
 var $add$ptr62 = 0, $add$ptr66 = 0, $add$ptr70 = 0, $add$ptr78 = 0, $add$ptr8 = 0, $add$ptr82 = 0, $add$ptr86 = 0, $add$ptr94 = 0, $add$ptr98 = 0, $call = 0, $call102 = 0, $call108 = 0, $call111 = 0, $call116 = 0, $call120 = 0, $call121 = 0, $call125 = 0, $call13 = 0, $call130 = 0, $call134 = 0;
 var $call138 = 0, $call141 = 0, $call146 = 0, $call150 = 0, $call154 = 0, $call158 = 0, $call162 = 0, $call165 = 0, $call17 = 0, $call170 = 0, $call174 = 0, $call178 = 0, $call182 = 0, $call186 = 0, $call189 = 0, $call19 = 0, $call194 = 0, $call198 = 0, $call2 = 0, $call202 = 0;
 var $call205 = 0, $call210 = 0, $call214 = 0, $call218 = 0, $call222 = 0, $call226 = 0, $call230 = 0, $call233 = 0, $call239 = 0, $call24 = 0, $call242 = 0, $call247 = 0, $call251 = 0, $call255 = 0, $call259 = 0, $call262 = 0, $call268 = 0, $call271 = 0, $call279 = 0, $call28 = 0;
 var $call280 = 0, $call284 = 0, $call32 = 0, $call37 = 0, $call38 = 0, $call43 = 0, $call5 = 0, $call50 = 0, $call55 = 0, $call59 = 0, $call63 = 0, $call67 = 0, $call71 = 0, $call74 = 0, $call79 = 0, $call83 = 0, $call87 = 0, $call9 = 0, $call90 = 0, $call95 = 0;
 var $call99 = 0, $cmp = 0, $cmp104 = 0, $cmp122 = 0, $cmp235 = 0, $cmp264 = 0, $cmp281 = 0, $cmp39 = 0, $conv = 0, $conv112 = 0, $conv142 = 0, $conv166 = 0, $conv190 = 0, $conv20 = 0, $conv206 = 0, $conv243 = 0, $conv272 = 0, $conv3 = 0, $conv51 = 0, $conv75 = 0;
 var $conv91 = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $SaveTemplate = sp + 24|0;
 $SavePermit = sp + 16|0;
 $Ty = sp + 8|0;
 $SN = sp + 4|0;
 $SN278 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 97:  {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv3 = $call2 << 24 >> 24;
   switch ($conv3|0) {
   case 97:  {
    $0 = HEAP32[$this>>2]|0;
    $add$ptr = ((($0)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24262)|0);
    $retval$3 = $call5;
    break L1;
    break;
   }
   case 110: case 100:  {
    $1 = HEAP32[$this>>2]|0;
    $add$ptr8 = ((($1)) + 2|0);
    HEAP32[$this>>2] = $add$ptr8;
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24273)|0);
    $retval$3 = $call9;
    break L1;
    break;
   }
   case 78:  {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr12 = ((($2)) + 2|0);
    HEAP32[$this>>2] = $add$ptr12;
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24283)|0);
    $retval$3 = $call13;
    break L1;
    break;
   }
   case 83:  {
    $3 = HEAP32[$this>>2]|0;
    $add$ptr16 = ((($3)) + 2|0);
    HEAP32[$this>>2] = $add$ptr16;
    $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24294)|0);
    $retval$3 = $call17;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 99:  {
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv20 = $call19 << 24 >> 24;
   switch ($conv20|0) {
   case 108:  {
    $4 = HEAP32[$this>>2]|0;
    $add$ptr23 = ((($4)) + 2|0);
    HEAP32[$this>>2] = $add$ptr23;
    $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24304)|0);
    $retval$3 = $call24;
    break L1;
    break;
   }
   case 109:  {
    $5 = HEAP32[$this>>2]|0;
    $add$ptr27 = ((($5)) + 2|0);
    HEAP32[$this>>2] = $add$ptr27;
    $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24315)|0);
    $retval$3 = $call28;
    break L1;
    break;
   }
   case 111:  {
    $6 = HEAP32[$this>>2]|0;
    $add$ptr31 = ((($6)) + 2|0);
    HEAP32[$this>>2] = $add$ptr31;
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24325)|0);
    $retval$3 = $call32;
    break L1;
    break;
   }
   case 118:  {
    $7 = HEAP32[$this>>2]|0;
    $add$ptr35 = ((($7)) + 2|0);
    HEAP32[$this>>2] = $add$ptr35;
    $TryToParseTemplateArgs = ((($this)) + 360|0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemplate,$TryToParseTemplateArgs,0);
    $PermitForwardTemplateReferences = ((($this)) + 361|0);
    $8 = HEAP8[$PermitForwardTemplateReferences>>0]|0;
    $tobool = ($8<<24>>24)!=(0);
    $cmp = ($State|0)!=(0|0);
    $9 = $cmp | $tobool;
    __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePermit,$PermitForwardTemplateReferences,$9);
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call37)|0);
    HEAP32[$Ty>>2] = $call38;
    $cmp39 = ($call38|0)==(0|0);
    if ($cmp39) {
     $retval$0 = 0;
    } else {
     if ($cmp) {
      HEAP8[$State>>0] = 1;
     }
     $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$Ty)|0);
     $retval$0 = $call43;
    }
    __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePermit);
    __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemplate);
    $retval$3 = $retval$0;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 100:  {
   $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv51 = $call50 << 24 >> 24;
   switch ($conv51|0) {
   case 97:  {
    $10 = HEAP32[$this>>2]|0;
    $add$ptr54 = ((($10)) + 2|0);
    HEAP32[$this>>2] = $add$ptr54;
    $call55 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this,24335)|0);
    $retval$3 = $call55;
    break L1;
    break;
   }
   case 101:  {
    $11 = HEAP32[$this>>2]|0;
    $add$ptr58 = ((($11)) + 2|0);
    HEAP32[$this>>2] = $add$ptr58;
    $call59 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24353)|0);
    $retval$3 = $call59;
    break L1;
    break;
   }
   case 108:  {
    $12 = HEAP32[$this>>2]|0;
    $add$ptr62 = ((($12)) + 2|0);
    HEAP32[$this>>2] = $add$ptr62;
    $call63 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this)|0);
    $retval$3 = $call63;
    break L1;
    break;
   }
   case 118:  {
    $13 = HEAP32[$this>>2]|0;
    $add$ptr66 = ((($13)) + 2|0);
    HEAP32[$this>>2] = $add$ptr66;
    $call67 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24363)|0);
    $retval$3 = $call67;
    break L1;
    break;
   }
   case 86:  {
    $14 = HEAP32[$this>>2]|0;
    $add$ptr70 = ((($14)) + 2|0);
    HEAP32[$this>>2] = $add$ptr70;
    $call71 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24373)|0);
    $retval$3 = $call71;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 101:  {
   $call74 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv75 = $call74 << 24 >> 24;
   switch ($conv75|0) {
   case 111:  {
    $15 = HEAP32[$this>>2]|0;
    $add$ptr78 = ((($15)) + 2|0);
    HEAP32[$this>>2] = $add$ptr78;
    $call79 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24384)|0);
    $retval$3 = $call79;
    break L1;
    break;
   }
   case 79:  {
    $16 = HEAP32[$this>>2]|0;
    $add$ptr82 = ((($16)) + 2|0);
    HEAP32[$this>>2] = $add$ptr82;
    $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24394)|0);
    $retval$3 = $call83;
    break L1;
    break;
   }
   case 113:  {
    $17 = HEAP32[$this>>2]|0;
    $add$ptr86 = ((($17)) + 2|0);
    HEAP32[$this>>2] = $add$ptr86;
    $call87 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24405)|0);
    $retval$3 = $call87;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 103:  {
   $call90 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv91 = $call90 << 24 >> 24;
   switch ($conv91|0) {
   case 101:  {
    $18 = HEAP32[$this>>2]|0;
    $add$ptr94 = ((($18)) + 2|0);
    HEAP32[$this>>2] = $add$ptr94;
    $call95 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24416)|0);
    $retval$3 = $call95;
    break L1;
    break;
   }
   case 116:  {
    $19 = HEAP32[$this>>2]|0;
    $add$ptr98 = ((($19)) + 2|0);
    HEAP32[$this>>2] = $add$ptr98;
    $call99 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24427)|0);
    $retval$3 = $call99;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 105:  {
   $call102 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp104 = ($call102<<24>>24)==(120);
   if ($cmp104) {
    $20 = HEAP32[$this>>2]|0;
    $add$ptr107 = ((($20)) + 2|0);
    HEAP32[$this>>2] = $add$ptr107;
    $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24437)|0);
    $retval$3 = $call108;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  case 108:  {
   $call111 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv112 = $call111 << 24 >> 24;
   switch ($conv112|0) {
   case 101:  {
    $21 = HEAP32[$this>>2]|0;
    $add$ptr115 = ((($21)) + 2|0);
    HEAP32[$this>>2] = $add$ptr115;
    $call116 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24448)|0);
    $retval$3 = $call116;
    break L1;
    break;
   }
   case 105:  {
    $22 = HEAP32[$this>>2]|0;
    $add$ptr119 = ((($22)) + 2|0);
    HEAP32[$this>>2] = $add$ptr119;
    $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call121 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call120)|0);
    HEAP32[$SN>>2] = $call121;
    $cmp122 = ($call121|0)==(0|0);
    if ($cmp122) {
     $retval$1 = 0;
    } else {
     $call125 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this,$SN)|0);
     $retval$1 = $call125;
    }
    $retval$3 = $retval$1;
    break L1;
    break;
   }
   case 115:  {
    $23 = HEAP32[$this>>2]|0;
    $add$ptr129 = ((($23)) + 2|0);
    HEAP32[$this>>2] = $add$ptr129;
    $call130 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24459)|0);
    $retval$3 = $call130;
    break L1;
    break;
   }
   case 83:  {
    $24 = HEAP32[$this>>2]|0;
    $add$ptr133 = ((($24)) + 2|0);
    HEAP32[$this>>2] = $add$ptr133;
    $call134 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,24470)|0);
    $retval$3 = $call134;
    break L1;
    break;
   }
   case 116:  {
    $25 = HEAP32[$this>>2]|0;
    $add$ptr137 = ((($25)) + 2|0);
    HEAP32[$this>>2] = $add$ptr137;
    $call138 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24482)|0);
    $retval$3 = $call138;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 109:  {
   $call141 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv142 = $call141 << 24 >> 24;
   switch ($conv142|0) {
   case 105:  {
    $26 = HEAP32[$this>>2]|0;
    $add$ptr145 = ((($26)) + 2|0);
    HEAP32[$this>>2] = $add$ptr145;
    $call146 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24492)|0);
    $retval$3 = $call146;
    break L1;
    break;
   }
   case 73:  {
    $27 = HEAP32[$this>>2]|0;
    $add$ptr149 = ((($27)) + 2|0);
    HEAP32[$this>>2] = $add$ptr149;
    $call150 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24502)|0);
    $retval$3 = $call150;
    break L1;
    break;
   }
   case 108:  {
    $28 = HEAP32[$this>>2]|0;
    $add$ptr153 = ((($28)) + 2|0);
    HEAP32[$this>>2] = $add$ptr153;
    $call154 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24353)|0);
    $retval$3 = $call154;
    break L1;
    break;
   }
   case 76:  {
    $29 = HEAP32[$this>>2]|0;
    $add$ptr157 = ((($29)) + 2|0);
    HEAP32[$this>>2] = $add$ptr157;
    $call158 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24513)|0);
    $retval$3 = $call158;
    break L1;
    break;
   }
   case 109:  {
    $30 = HEAP32[$this>>2]|0;
    $add$ptr161 = ((($30)) + 2|0);
    HEAP32[$this>>2] = $add$ptr161;
    $call162 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24524)|0);
    $retval$3 = $call162;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 110:  {
   $call165 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv166 = $call165 << 24 >> 24;
   switch ($conv166|0) {
   case 97:  {
    $31 = HEAP32[$this>>2]|0;
    $add$ptr169 = ((($31)) + 2|0);
    HEAP32[$this>>2] = $add$ptr169;
    $call170 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,24535)|0);
    $retval$3 = $call170;
    break L1;
    break;
   }
   case 101:  {
    $32 = HEAP32[$this>>2]|0;
    $add$ptr173 = ((($32)) + 2|0);
    HEAP32[$this>>2] = $add$ptr173;
    $call174 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24550)|0);
    $retval$3 = $call174;
    break L1;
    break;
   }
   case 103:  {
    $33 = HEAP32[$this>>2]|0;
    $add$ptr177 = ((($33)) + 2|0);
    HEAP32[$this>>2] = $add$ptr177;
    $call178 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24492)|0);
    $retval$3 = $call178;
    break L1;
    break;
   }
   case 116:  {
    $34 = HEAP32[$this>>2]|0;
    $add$ptr181 = ((($34)) + 2|0);
    HEAP32[$this>>2] = $add$ptr181;
    $call182 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24561)|0);
    $retval$3 = $call182;
    break L1;
    break;
   }
   case 119:  {
    $35 = HEAP32[$this>>2]|0;
    $add$ptr185 = ((($35)) + 2|0);
    HEAP32[$this>>2] = $add$ptr185;
    $call186 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this,24571)|0);
    $retval$3 = $call186;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 111:  {
   $call189 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv190 = $call189 << 24 >> 24;
   switch ($conv190|0) {
   case 111:  {
    $36 = HEAP32[$this>>2]|0;
    $add$ptr193 = ((($36)) + 2|0);
    HEAP32[$this>>2] = $add$ptr193;
    $call194 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24584)|0);
    $retval$3 = $call194;
    break L1;
    break;
   }
   case 114:  {
    $37 = HEAP32[$this>>2]|0;
    $add$ptr197 = ((($37)) + 2|0);
    HEAP32[$this>>2] = $add$ptr197;
    $call198 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24595)|0);
    $retval$3 = $call198;
    break L1;
    break;
   }
   case 82:  {
    $38 = HEAP32[$this>>2]|0;
    $add$ptr201 = ((($38)) + 2|0);
    HEAP32[$this>>2] = $add$ptr201;
    $call202 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24605)|0);
    $retval$3 = $call202;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 112:  {
   $call205 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv206 = $call205 << 24 >> 24;
   switch ($conv206|0) {
   case 109:  {
    $39 = HEAP32[$this>>2]|0;
    $add$ptr209 = ((($39)) + 2|0);
    HEAP32[$this>>2] = $add$ptr209;
    $call210 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,24616)|0);
    $retval$3 = $call210;
    break L1;
    break;
   }
   case 108:  {
    $40 = HEAP32[$this>>2]|0;
    $add$ptr213 = ((($40)) + 2|0);
    HEAP32[$this>>2] = $add$ptr213;
    $call214 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24628)|0);
    $retval$3 = $call214;
    break L1;
    break;
   }
   case 76:  {
    $41 = HEAP32[$this>>2]|0;
    $add$ptr217 = ((($41)) + 2|0);
    HEAP32[$this>>2] = $add$ptr217;
    $call218 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24638)|0);
    $retval$3 = $call218;
    break L1;
    break;
   }
   case 112:  {
    $42 = HEAP32[$this>>2]|0;
    $add$ptr221 = ((($42)) + 2|0);
    HEAP32[$this>>2] = $add$ptr221;
    $call222 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24649)|0);
    $retval$3 = $call222;
    break L1;
    break;
   }
   case 115:  {
    $43 = HEAP32[$this>>2]|0;
    $add$ptr225 = ((($43)) + 2|0);
    HEAP32[$this>>2] = $add$ptr225;
    $call226 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24628)|0);
    $retval$3 = $call226;
    break L1;
    break;
   }
   case 116:  {
    $44 = HEAP32[$this>>2]|0;
    $add$ptr229 = ((($44)) + 2|0);
    HEAP32[$this>>2] = $add$ptr229;
    $call230 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24660)|0);
    $retval$3 = $call230;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 113:  {
   $call233 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp235 = ($call233<<24>>24)==(117);
   if ($cmp235) {
    $45 = HEAP32[$this>>2]|0;
    $add$ptr238 = ((($45)) + 2|0);
    HEAP32[$this>>2] = $add$ptr238;
    $call239 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24671)|0);
    $retval$3 = $call239;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  case 114:  {
   $call242 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv243 = $call242 << 24 >> 24;
   switch ($conv243|0) {
   case 109:  {
    $46 = HEAP32[$this>>2]|0;
    $add$ptr246 = ((($46)) + 2|0);
    HEAP32[$this>>2] = $add$ptr246;
    $call247 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,24681)|0);
    $retval$3 = $call247;
    break L1;
    break;
   }
   case 77:  {
    $47 = HEAP32[$this>>2]|0;
    $add$ptr250 = ((($47)) + 2|0);
    HEAP32[$this>>2] = $add$ptr250;
    $call251 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24691)|0);
    $retval$3 = $call251;
    break L1;
    break;
   }
   case 115:  {
    $48 = HEAP32[$this>>2]|0;
    $add$ptr254 = ((($48)) + 2|0);
    HEAP32[$this>>2] = $add$ptr254;
    $call255 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,24702)|0);
    $retval$3 = $call255;
    break L1;
    break;
   }
   case 83:  {
    $49 = HEAP32[$this>>2]|0;
    $add$ptr258 = ((($49)) + 2|0);
    HEAP32[$this>>2] = $add$ptr258;
    $call259 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,24713)|0);
    $retval$3 = $call259;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 115:  {
   $call262 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp264 = ($call262<<24>>24)==(115);
   if ($cmp264) {
    $50 = HEAP32[$this>>2]|0;
    $add$ptr267 = ((($50)) + 2|0);
    HEAP32[$this>>2] = $add$ptr267;
    $call268 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,24725)|0);
    $retval$3 = $call268;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  case 118:  {
   $call271 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv272 = $call271 << 24 >> 24;
   $isdigittmp = (($conv272) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $51 = HEAP32[$this>>2]|0;
    $add$ptr277 = ((($51)) + 2|0);
    HEAP32[$this>>2] = $add$ptr277;
    $call279 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call280 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call279)|0);
    HEAP32[$SN278>>2] = $call280;
    $cmp281 = ($call280|0)==(0|0);
    if ($cmp281) {
     $retval$2 = 0;
    } else {
     $call284 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$SN278)|0);
     $retval$2 = $call284;
    }
    $retval$3 = $retval$2;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  default: {
   $retval$3 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($ASTAllocator,24801)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($this,$OpName_) {
 $this = $this|0;
 $OpName_ = $OpName_|0;
 var $OpName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,19,1,1,1);
 HEAP32[$this>>2] = (5292);
 $OpName = ((($this)) + 8|0);
 HEAP32[$OpName>>2] = $OpName_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $OpName = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24737);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $OpName = ((($this)) + 8|0);
 $0 = HEAP32[$OpName>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($this,$Ty_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 var $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,4,1,1,1);
 HEAP32[$this>>2] = (5336);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24817);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($this,$Base_) {
 $this = $this|0;
 $Base_ = $Base_|0;
 var $Base = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,38,1,1,1);
 HEAP32[$this>>2] = (5380);
 $Base = ((($this)) + 8|0);
 HEAP32[$Base>>2] = $Base_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Base = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23184);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($this,$Qualifier_,$Name_) {
 $this = $this|0;
 $Qualifier_ = $Qualifier_|0;
 $Name_ = $Name_|0;
 var $Name = 0, $Qualifier = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,22,1,1,1);
 HEAP32[$this>>2] = (5424);
 $Qualifier = ((($this)) + 8|0);
 HEAP32[$Qualifier>>2] = $Qualifier_;
 $Name = ((($this)) + 12|0);
 HEAP32[$Name>>2] = $Name_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Name = 0, $Qualifier = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Qualifier = ((($this)) + 8|0);
 $0 = HEAP32[$Qualifier>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24197);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Name = ((($this)) + 12|0);
 $1 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Name = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 12|0);
 $0 = HEAP32[$Name>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP8[$args1>>0]|0;
 $tobool = ($1<<24>>24)!=(0);
 $2 = HEAP8[$args3>>0]|0;
 $tobool9 = ($2<<24>>24)!=(0);
 __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($call,$0,$tobool,$tobool9);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($this,$Op_,$IsGlobal_,$IsArray_) {
 $this = $this|0;
 $Op_ = $Op_|0;
 $IsGlobal_ = $IsGlobal_|0;
 $IsArray_ = $IsArray_|0;
 var $IsArray = 0, $IsGlobal = 0, $Op = 0, $frombool = 0, $frombool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsGlobal_&1;
 $frombool1 = $IsArray_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,52,1,1,1);
 HEAP32[$this>>2] = (5468);
 $Op = ((($this)) + 8|0);
 HEAP32[$Op>>2] = $Op_;
 $IsGlobal = ((($this)) + 12|0);
 HEAP8[$IsGlobal>>0] = $frombool;
 $IsArray = ((($this)) + 13|0);
 HEAP8[$IsArray>>0] = $frombool1;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $IsArray = 0, $IsGlobal = 0, $Op = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp6$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp6 = sp;
 $IsGlobal = ((($this)) + 12|0);
 $0 = HEAP8[$IsGlobal>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24197);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,24993);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $IsArray = ((($this)) + 13|0);
 $1 = HEAP8[$IsArray>>0]|0;
 $tobool4 = ($1<<24>>24)==(0);
 if (!($tobool4)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,25000);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 }
 $Op = ((($this)) + 8|0);
 $2 = HEAP32[$Op>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($this,$Type_,$Expressions_) {
 $this = $this|0;
 $Type_ = $Type_|0;
 $Expressions_ = $Expressions_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Expressions = 0, $Type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,55,1,1,1);
 HEAP32[$this>>2] = (5512);
 $Type = ((($this)) + 8|0);
 HEAP32[$Type>>2] = $Type_;
 $Expressions = ((($this)) + 12|0);
 $0 = $Expressions_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Expressions;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Expressions = 0, $Type = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Type = ((($this)) + 8|0);
 $0 = HEAP32[$Type>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,25054);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Expressions = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Expressions,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22447);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($this,$Callee_,$Args_) {
 $this = $this|0;
 $Callee_ = $Callee_|0;
 $Args_ = $Args_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Args = 0, $Callee = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,50,1,1,1);
 HEAP32[$this>>2] = (5556);
 $Callee = ((($this)) + 8|0);
 HEAP32[$Callee>>2] = $Callee_;
 $Args = ((($this)) + 12|0);
 $0 = $Args_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Args;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Args = 0, $Callee = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $Callee = ((($this)) + 8|0);
 $0 = HEAP32[$Callee>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Args = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Args,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($call,$tmpcast$byval_copy,$10);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($this,$Prefix_,$Child_) {
 $this = $this|0;
 $Prefix_ = $Prefix_|0;
 $Child_ = $Child_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,53,1,1,1);
 HEAP32[$this>>2] = (5600);
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Prefix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Child = ((($this)) + 16|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Prefix = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $tmpcast$byval_copy = sp + 24|0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 16|0;
 $agg$tmp4 = sp + 8|0;
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22451);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Child = ((($this)) + 16|0);
 $10 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22447);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[$args3>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($call,$0,$tmpcast$byval_copy,$11);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($this,$LHS_,$InfixOperator_,$RHS_) {
 $this = $this|0;
 $LHS_ = $LHS_|0;
 $InfixOperator_ = $InfixOperator_|0;
 $RHS_ = $RHS_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $InfixOperator = 0, $LHS = 0, $RHS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,42,1,1,1);
 HEAP32[$this>>2] = (5644);
 $LHS = ((($this)) + 8|0);
 HEAP32[$LHS>>2] = $LHS_;
 $InfixOperator = ((($this)) + 12|0);
 $0 = $InfixOperator_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $InfixOperator;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $RHS = ((($this)) + 20|0);
 HEAP32[$RHS>>2] = $RHS_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $InfixOperator = 0, $LHS = 0, $RHS = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $agg$tmp12 = 0;
 var $agg$tmp12$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $agg$tmp7 = 0, $call = 0, $call16 = 0, $ref$tmp = 0, $ref$tmp15 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp18$byval_copy = sp + 120|0;
 $agg$tmp12$byval_copy = sp + 112|0;
 $agg$tmp10$byval_copy = sp + 104|0;
 $tmpcast$byval_copy = sp + 96|0;
 $agg$tmp5$byval_copy = sp + 88|0;
 $agg$tmp3$byval_copy = sp + 80|0;
 $agg$tmp$byval_copy = sp + 72|0;
 $ref$tmp = sp + 64|0;
 $agg$tmp = sp + 56|0;
 $agg$tmp3 = sp + 48|0;
 $agg$tmp5 = sp + 40|0;
 $agg$tmp7 = sp;
 $agg$tmp10 = sp + 32|0;
 $agg$tmp12 = sp + 24|0;
 $ref$tmp15 = sp + 16|0;
 $agg$tmp18 = sp + 8|0;
 $InfixOperator = ((($this)) + 12|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp,22526);
 $call = (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator,$ref$tmp)|0);
 if ($call) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,22451);
 ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
 $LHS = ((($this)) + 8|0);
 $0 = HEAP32[$LHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5,25210);
 ;HEAP32[$agg$tmp5$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$agg$tmp5$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp5$byval_copy);
 $1 = $InfixOperator;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp7;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,25213);
 ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp10$byval_copy);
 $RHS = ((($this)) + 20|0);
 $11 = HEAP32[$RHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($11,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,22447);
 ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp15,22526);
 $call16 = (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator,$ref$tmp15)|0);
 if ($call16) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18,22447);
  ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp18$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this,$args,$args1,$args3,$args5) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 var $ASTAllocator = 0, $call11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call11 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5)|0);
 return ($call11|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 $0 = HEAP8[$args>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[$args3>>2]|0;
 $12 = HEAP32[$args5>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($call,$tobool,$tmpcast$byval_copy,$11,$12);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($this,$IsLeftFold_,$OperatorName_,$Pack_,$Init_) {
 $this = $this|0;
 $IsLeftFold_ = $IsLeftFold_|0;
 $OperatorName_ = $OperatorName_|0;
 $Pack_ = $Pack_|0;
 $Init_ = $Init_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Init = 0, $IsLeftFold = 0, $OperatorName = 0, $Pack = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsLeftFold_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,57,1,1,1);
 HEAP32[$this>>2] = (5688);
 $Pack = ((($this)) + 8|0);
 HEAP32[$Pack>>2] = $Pack_;
 $Init = ((($this)) + 12|0);
 HEAP32[$Init>>2] = $Init_;
 $OperatorName = ((($this)) + 16|0);
 $0 = $OperatorName_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $OperatorName;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $IsLeftFold = ((($this)) + 24|0);
 HEAP8[$IsLeftFold>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Init = 0, $Init19 = 0, $IsLeftFold = 0, $OperatorName = 0, $OperatorName15 = 0, $PrintPack = 0, $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0;
 var $agg$tmp9 = 0, $cmp = 0, $cmp20 = 0, $tmpcast$byval_copy = 0, $tmpcast17$byval_copy = 0, $tmpcast18$byval_copy = 0, $tmpcast19$byval_copy = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $tmpcast17$byval_copy = sp + 96|0;
 $agg$tmp17$byval_copy = sp + 88|0;
 $tmpcast$byval_copy = sp + 80|0;
 $tmpcast18$byval_copy = sp + 72|0;
 $agg$tmp7$byval_copy = sp + 64|0;
 $tmpcast19$byval_copy = sp + 56|0;
 $PrintPack = sp + 48|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp7 = sp + 40|0;
 $agg$tmp9 = sp + 16|0;
 $agg$tmp14 = sp + 8|0;
 $agg$tmp17 = sp + 32|0;
 $agg$tmp23 = sp;
 HEAP32[$PrintPack>>2] = $S;
 $0 = ((($PrintPack)) + 4|0);
 HEAP32[$0>>2] = $this;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,40);
 $IsLeftFold = ((($this)) + 24|0);
 $1 = HEAP8[$IsLeftFold>>0]|0;
 $tobool = ($1<<24>>24)==(0);
 if ($tobool) {
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
  $OperatorName15 = ((($this)) + 16|0);
  $23 = $OperatorName15;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $agg$tmp14;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp14>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp14+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,25361);
  ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp17$byval_copy);
  $Init19 = ((($this)) + 12|0);
  $33 = HEAP32[$Init19>>2]|0;
  $cmp20 = ($33|0)==(0|0);
  if (!($cmp20)) {
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $34 = $OperatorName15;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $agg$tmp23;
   $41 = $40;
   HEAP32[$41>>2] = $36;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = $39;
   ;HEAP32[$tmpcast17$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;HEAP32[$tmpcast17$byval_copy+4>>2]=HEAP32[$agg$tmp23+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast17$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $44 = HEAP32[$Init19>>2]|0;
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($44,$S);
  }
 } else {
  $Init = ((($this)) + 12|0);
  $2 = HEAP32[$Init>>2]|0;
  $cmp = ($2|0)==(0|0);
  if ($cmp) {
   $$pre = ((($this)) + 16|0);
   $$pre$phiZ2D = $$pre;
  } else {
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $OperatorName = ((($this)) + 16|0);
   $3 = $OperatorName;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = $agg$tmp;
   $10 = $9;
   HEAP32[$10>>2] = $5;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = $8;
   ;HEAP32[$tmpcast19$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast19$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast19$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $$pre$phiZ2D = $OperatorName;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,25356);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp7$byval_copy);
  $13 = $$pre$phiZ2D;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = $agg$tmp9;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $18;
  ;HEAP32[$tmpcast18$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$tmpcast18$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast18$byval_copy);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,41);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $Pack = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLEc($2,40);
 $Pack = ((($1)) + 8|0);
 $3 = HEAP32[$Pack>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($ref$tmp,$3);
 $4 = HEAP32[$this>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($ref$tmp,$4);
 $5 = HEAP32[$this>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLEc($5,41);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) {
 $this = $this|0;
 var $0 = 0, $CVR = 0, $call = 0, $call3 = 0, $call7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $CVR = sp;
 HEAP32[$CVR>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,114)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR,4);
 }
 $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,86)|0);
 if ($call3) {
  __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR,2);
 }
 $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,75)|0);
 if ($call7) {
  __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR,1);
 }
 $0 = HEAP32[$CVR>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($this,$Number_) {
 $this = $this|0;
 $Number_ = $Number_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Number = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,54,1,1,1);
 HEAP32[$this>>2] = (5732);
 $Number = ((($this)) + 8|0);
 $0 = $Number_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Number;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Number = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25410);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Number = ((($this)) + 8|0);
 $0 = $Number;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($Q1,$Q2) {
 $Q1 = $Q1|0;
 $Q2 = $Q2|0;
 var $0 = 0, $or = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$Q1>>2]|0;
 $or = $0 | $Q2;
 HEAP32[$Q1>>2] = $or;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $Cap = ((($this)) + 8|0);
 $add$ptr = ((($this)) + 44|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($this,$Elem) {
 $this = $this|0;
 $Elem = $Elem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Cap = 0, $Last = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $Cap = ((($this)) + 8|0);
 $1 = HEAP32[$Cap>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this)|0);
  $mul = $call << 1;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this,$mul);
  $$pre = HEAP32[$Last>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[$Elem>>2]|0;
 $incdec$ptr = ((($3)) + 4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this)|0);
 $add$ptr = (($call) + ($Index<<2)|0);
 return ($add$ptr|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this,$NewCap) {
 $this = $this|0;
 $NewCap = $NewCap|0;
 var $$in = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $Cap = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $add$ptr = 0, $add$ptr19 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i$i = 0, $cmp12 = 0, $mul = 0, $mul8 = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this)|0);
 do {
  if ($call2) {
   $mul = $NewCap << 2;
   $call3 = (_malloc($mul)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    __ZSt9terminatev();
    // unreachable;
   }
   $0 = HEAP32[$this>>2]|0;
   $Last = ((($this)) + 4|0);
   $1 = HEAP32[$Last>>2]|0;
   $sub$ptr$rhs$cast$i$i = $0;
   $sub$ptr$sub$i$i = (($1) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    _memmove(($call3|0),($0|0),($sub$ptr$sub$i$i|0))|0;
   }
   HEAP32[$this>>2] = $call3;
   $$in = $call3;$Last17$pre$phiZ2D = $Last;
  } else {
   $2 = HEAP32[$this>>2]|0;
   $mul8 = $NewCap << 2;
   $call9 = (_realloc($2,$mul8)|0);
   HEAP32[$this>>2] = $call9;
   $cmp12 = ($call9|0)==(0|0);
   if ($cmp12) {
    __ZSt9terminatev();
    // unreachable;
   } else {
    $$pre7 = ((($this)) + 4|0);
    $$in = $call9;$Last17$pre$phiZ2D = $$pre7;
    break;
   }
  }
 } while(0);
 $add$ptr = (($$in) + ($call<<2)|0);
 HEAP32[$Last17$pre$phiZ2D>>2] = $add$ptr;
 $add$ptr19 = (($$in) + ($NewCap<<2)|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr19;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($this,$Index_) {
 $this = $this|0;
 $Index_ = $Index_|0;
 var $Index = 0, $Printing = 0, $Ref = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,31,2,2,2);
 HEAP32[$this>>2] = (5776);
 $Index = ((($this)) + 8|0);
 HEAP32[$Index>>2] = $Index_;
 $Ref = ((($this)) + 12|0);
 HEAP32[$Ref>>2] = 0;
 $Printing = ((($this)) + 16|0);
 HEAP8[$Printing>>0] = 0;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 12|0);
  $2 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$2 & 255]($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = $this;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $EndsWithTemplateArgs = 0, $EndsWithTemplateArgs58 = 0, $N = 0, $S = 0, $Subs = 0, $TA = 0, $TA49 = 0, $call10 = 0, $call15 = 0, $call19 = 0, $call2 = 0, $call20 = 0, $call24 = 0, $call3 = 0, $call31 = 0, $call37 = 0, $call4 = 0, $call40 = 0, $call41 = 0, $call45 = 0;
 var $call52 = 0, $call60 = 0, $call9 = 0, $cmp17 = 0, $cmp21 = 0, $cmp26 = 0, $cmp30 = 0, $cmp32 = 0, $cmp42 = 0, $cmp47 = 0, $cmp51 = 0, $cmp53 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $S = sp + 12|0;
 $TA = sp + 8|0;
 $N = sp + 4|0;
 $TA49 = sp;
 (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,76)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 switch ($call2<<24>>24) {
 case 78:  {
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE($call3,$State)|0);
  $retval$4 = $call4;
  break;
 }
 case 90:  {
  $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE($call9,$State)|0);
  $retval$4 = $call10;
  break;
 }
 case 83:  {
  $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
  $cmp17 = ($call15<<24>>24)==(116);
  if ($cmp17) {
   label = 13;
  } else {
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call19)|0);
   HEAP32[$S>>2] = $call20;
   $cmp21 = ($call20|0)==(0|0);
   if ($cmp21) {
    $retval$1 = 0;
   } else {
    $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp26 = ($call24<<24>>24)==(73);
    if ($cmp26) {
     $cmp30 = ($State|0)!=(0|0);
     $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call19,$cmp30)|0);
     HEAP32[$TA>>2] = $call31;
     $cmp32 = ($call31|0)==(0|0);
     if ($cmp32) {
      $retval$0 = 0;
     } else {
      if ($cmp30) {
       $EndsWithTemplateArgs = ((($State)) + 1|0);
       HEAP8[$EndsWithTemplateArgs>>0] = 1;
      }
      $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$S,$TA)|0);
      $retval$0 = $call37;
     }
     $retval$1 = $retval$0;
    } else {
     $retval$1 = 0;
    }
   }
   $retval$4 = $retval$1;
  }
  break;
 }
 default: {
  label = 13;
 }
 }
 if ((label|0) == 13) {
  $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($call40,$State)|0);
  HEAP32[$N>>2] = $call41;
  $cmp42 = ($call41|0)==(0|0);
  if ($cmp42) {
   $retval$3 = 0;
  } else {
   $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $cmp47 = ($call45<<24>>24)==(73);
   if ($cmp47) {
    $Subs = ((($this)) + 148|0);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$N);
    $cmp51 = ($State|0)!=(0|0);
    $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call40,$cmp51)|0);
    HEAP32[$TA49>>2] = $call52;
    $cmp53 = ($call52|0)==(0|0);
    if ($cmp53) {
     $retval$2 = 0;
    } else {
     if ($cmp51) {
      $EndsWithTemplateArgs58 = ((($State)) + 1|0);
      HEAP8[$EndsWithTemplateArgs58>>0] = 1;
     }
     $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$N,$TA49)|0);
     $retval$2 = $call60;
    }
    $retval$3 = $retval$2;
   } else {
    $retval$3 = $call41;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($call,$tmpcast$byval_copy,$10);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($this,$Kind_,$Child_) {
 $this = $this|0;
 $Kind_ = $Kind_|0;
 $Child_ = $Child_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Kind = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,6,1,1,1);
 HEAP32[$this>>2] = (5820);
 $Kind = ((($this)) + 8|0);
 $0 = $Kind_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Kind;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Child = ((($this)) + 16|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Kind = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Kind = ((($this)) + 8|0);
 $0 = $Kind;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
 $Child = ((($this)) + 16|0);
 $10 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CVQualifiers = 0, $EndsWithTemplateArgs = 0, $PushComponent = 0, $ReferenceQualifier = 0, $ReferenceQualifier14 = 0, $ReferenceQualifier19 = 0, $S = 0;
 var $SoFar = 0, $State$addr = 0, $Subs136 = 0, $TA = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call10 = 0, $call119 = 0, $call120 = 0, $call121 = 0, $call125 = 0, $call131 = 0, $call132 = 0, $call133 = 0, $call140 = 0, $call2 = 0, $call23 = 0, $call25 = 0, $call30 = 0;
 var $call32 = 0, $call37 = 0, $call40 = 0, $call41 = 0, $call42 = 0, $call5 = 0, $call50 = 0, $call52 = 0, $call57 = 0, $call69 = 0, $call77 = 0, $call78 = 0, $call79 = 0, $call88 = 0, $call92 = 0, $call93 = 0, $call94 = 0, $cmp = 0, $cmp116 = 0, $cmp126 = 0;
 var $cmp137 = 0, $cmp51 = 0, $cmp53 = 0, $cmp54 = 0, $cmp90 = 0, $cmp97 = 0, $or$cond = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0, $tobool12 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 40|0;
 $State$addr = sp + 32|0;
 $SoFar = sp + 28|0;
 $PushComponent = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $TA = sp + 4|0;
 $S = sp;
 HEAP32[$State$addr>>2] = $State;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,78)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
  $tobool = ($State|0)==(0|0);
  if (!($tobool)) {
   $CVQualifiers = ((($State)) + 4|0);
   HEAP32[$CVQualifiers>>2] = $call2;
  }
  $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,79)|0);
  do {
   if ($call5) {
    if (!($tobool)) {
     $ReferenceQualifier = ((($State)) + 8|0);
     HEAP8[$ReferenceQualifier>>0] = 2;
    }
   } else {
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,82)|0);
    $tobool12 = ($State|0)!=(0|0);
    if ($call10) {
     if (!($tobool12)) {
      break;
     }
     $ReferenceQualifier14 = ((($State)) + 8|0);
     HEAP8[$ReferenceQualifier14>>0] = 1;
     break;
    } else {
     if (!($tobool12)) {
      break;
     }
     $ReferenceQualifier19 = ((($State)) + 8|0);
     HEAP8[$ReferenceQualifier19>>0] = 0;
     break;
    }
   }
  } while(0);
  HEAP32[$SoFar>>2] = 0;
  HEAP32[$PushComponent>>2] = $this;
  $0 = ((($PushComponent)) + 4|0);
  HEAP32[$0>>2] = $SoFar;
  $1 = ((($PushComponent)) + 8|0);
  HEAP32[$1>>2] = $State$addr;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25617);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
  if ($call23) {
   $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,25935)|0);
   HEAP32[$SoFar>>2] = $call25;
  }
  $Subs136 = ((($this)) + 148|0);
  L19: while(1) {
   $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call30) {
    label = 41;
    break;
   }
   (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,76)|0);
   $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,77)|0);
   L22: do {
    if ($call32) {
     $2 = HEAP32[$SoFar>>2]|0;
     $cmp = ($2|0)==(0|0);
     if ($cmp) {
      $retval$3 = 0;
      break L19;
     }
    } else {
     $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     L25: do {
      switch ($call37<<24>>24) {
      case 84:  {
       $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call40)|0);
       $call42 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call41)|0);
       if (!($call42)) {
        $retval$3 = 0;
        break L19;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
       break L22;
       break;
      }
      case 73:  {
       $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $3 = HEAP32[$State$addr>>2]|0;
       $cmp51 = ($3|0)!=(0|0);
       $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call50,$cmp51)|0);
       HEAP32[$TA>>2] = $call52;
       $cmp53 = ($call52|0)==(0|0);
       $4 = HEAP32[$SoFar>>2]|0;
       $cmp54 = ($4|0)==(0|0);
       $or$cond = $cmp53 | $cmp54;
       if ($or$cond) {
        label = 26;
        break L19;
       }
       $call57 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$TA)|0);
       HEAP32[$SoFar>>2] = $call57;
       $5 = HEAP32[$State$addr>>2]|0;
       $tobool61 = ($5|0)==(0|0);
       if (!($tobool61)) {
        $EndsWithTemplateArgs = ((($5)) + 1|0);
        HEAP8[$EndsWithTemplateArgs>>0] = 1;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
       break L22;
       break;
      }
      case 68:  {
       $call69 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
       switch ($call69<<24>>24) {
       case 67:  {
        label = 39;
        break L25;
        break;
       }
       case 84: case 116:  {
        break;
       }
       default: {
        break L25;
       }
       }
       $call77 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call78 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($call77)|0);
       $call79 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call78)|0);
       if (!($call79)) {
        $retval$3 = 0;
        break L19;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
       break L22;
       break;
      }
      case 83:  {
       $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
       $cmp90 = ($call88<<24>>24)==(116);
       if ($cmp90) {
        label = 39;
       } else {
        $call92 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
        $call93 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call92)|0);
        HEAP32[$S>>2] = $call93;
        $call94 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call93)|0);
        if (!($call94)) {
         label = 44;
         break L19;
        }
        $6 = HEAP32[$SoFar>>2]|0;
        $cmp97 = ($6|0)==($call93|0);
        if (!($cmp97)) {
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$S);
        }
        break L22;
       }
       break;
      }
      case 67:  {
       break;
      }
      default: {
       label = 39;
      }
      }
     } while(0);
     if ((label|0) == 39) {
      label = 0;
      $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $10 = HEAP32[$State$addr>>2]|0;
      $call132 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call131,$10)|0);
      $call133 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call132)|0);
      if (!($call133)) {
       $retval$3 = 0;
       break L19;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
      break;
     }
     $7 = HEAP32[$SoFar>>2]|0;
     $cmp116 = ($7|0)==(0|0);
     if ($cmp116) {
      $retval$3 = 0;
      break L19;
     }
     $call119 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $8 = HEAP32[$State$addr>>2]|0;
     $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($call119,$SoFar,$8)|0);
     $call121 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call120)|0);
     if (!($call121)) {
      $retval$3 = 0;
      break L19;
     }
     $9 = HEAP32[$SoFar>>2]|0;
     $call125 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($call119,$9)|0);
     HEAP32[$SoFar>>2] = $call125;
     $cmp126 = ($call125|0)==(0|0);
     if ($cmp126) {
      $retval$3 = 0;
      break L19;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
    }
   } while(0);
  }
  if ((label|0) == 26) {
   $retval$3 = 0;
  }
  else if ((label|0) == 41) {
   $11 = HEAP32[$SoFar>>2]|0;
   $cmp137 = ($11|0)==(0|0);
   if ($cmp137) {
    $retval$3 = 0;
   } else {
    $call140 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs136)|0);
    if ($call140) {
     $retval$3 = 0;
    } else {
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($Subs136);
     $12 = HEAP32[$SoFar>>2]|0;
     $retval$3 = $12;
    }
   }
  }
  else if ((label|0) == 44) {
   $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 } else {
  $retval$4 = 0;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Encoding = 0, $Entity = 0, $Last = 0, $Last35 = 0, $N = 0, $StringLitName = 0, $call = 0, $call11 = 0, $call14 = 0, $call16 = 0, $call18 = 0, $call2 = 0, $call22 = 0, $call26 = 0, $call3 = 0, $call30 = 0;
 var $call36 = 0, $call38 = 0, $call4 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $cmp23 = 0, $cmp31 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Encoding = sp + 20|0;
 $StringLitName = sp + 16|0;
 $tmp = sp + 8|0;
 $N = sp + 4|0;
 $Entity = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,90)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call2)|0);
  HEAP32[$Encoding>>2] = $call3;
  $cmp = ($call3|0)==(0|0);
  do {
   if ($cmp) {
    $retval$3 = 0;
   } else {
    $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call4) {
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,115)|0);
     if ($call7) {
      $0 = HEAP32[$this>>2]|0;
      $Last = ((($this)) + 4|0);
      $1 = HEAP32[$Last>>2]|0;
      $call9 = (__ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($0,$1)|0);
      HEAP32[$this>>2] = $call9;
      $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,25875)|0);
      HEAP32[$StringLitName>>2] = $call11;
      $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Encoding,$StringLitName)|0);
      $retval$3 = $call14;
      break;
     }
     $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,100)|0);
     if (!($call16)) {
      $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2,$State)|0);
      HEAP32[$Entity>>2] = $call30;
      $cmp31 = ($call30|0)==(0|0);
      if ($cmp31) {
       $retval$2 = 0;
      } else {
       $2 = HEAP32[$this>>2]|0;
       $Last35 = ((($this)) + 4|0);
       $3 = HEAP32[$Last35>>2]|0;
       $call36 = (__ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($2,$3)|0);
       HEAP32[$this>>2] = $call36;
       $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Encoding,$Entity)|0);
       $retval$2 = $call38;
      }
      $retval$3 = $retval$2;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($tmp,$this,1);
     $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call18) {
      $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2,$State)|0);
      HEAP32[$N>>2] = $call22;
      $cmp23 = ($call22|0)==(0|0);
      if ($cmp23) {
       $retval$1 = 0;
      } else {
       $call26 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Encoding,$N)|0);
       $retval$1 = $call26;
      }
      $retval$3 = $retval$1;
     } else {
      $retval$3 = 0;
     }
    } else {
     $retval$3 = 0;
    }
   }
  } while(0);
  $retval$4 = $retval$3;
 } else {
  $retval$4 = 0;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $R = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call10 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $R = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25613);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  label = 3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,25617);
  ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp2$byval_copy)|0);
  if ($call3) {
   label = 3;
  } else {
   $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call9,$State)|0);
   $retval$1 = $call10;
  }
 }
 if ((label|0) == 3) {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call4,$State)|0);
  HEAP32[$R>>2] = $call5;
  $cmp = ($call5|0)==(0|0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$R)|0);
   $retval$0 = $call7;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $Binding = 0, $Names = 0, $Result$1 = 0, $Result$113 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$off = 0, $call11 = 0, $call12 = 0, $call14 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call2 = 0, $call22 = 0, $call23 = 0;
 var $call28 = 0, $call29 = 0, $call3 = 0, $call36 = 0, $cmp = 0, $cmp19 = 0, $cmp33 = 0, $ref$tmp = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $Binding = sp + 8|0;
 $ref$tmp = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $cmp = ($call<<24>>24)==(85);
 do {
  if ($cmp) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE($call2)|0);
   $Result$1 = $call3;
   label = 12;
  } else {
   $call$off = (($call) + -49)<<24>>24;
   $0 = ($call$off&255)<(9);
   if ($0) {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call11)|0);
    $Result$1 = $call12;
    label = 12;
    break;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25679);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
   if (!($call14)) {
    $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($call28,$State)|0);
    $Result$1 = $call29;
    label = 12;
    break;
   }
   $Names = ((($this)) + 8|0);
   $call16 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call17)|0);
    HEAP32[$Binding>>2] = $call18;
    $cmp19 = ($call18|0)==(0|0);
    if ($cmp19) {
     label = 10;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Binding);
    $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call22) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call16);
    $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
    $$pre$phiZ2D = $call17;$Result$113 = $call23;
    label = 14;
    break;
   }
   else if ((label|0) == 10) {
    $retval$2 = 0;
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $cmp33 = ($Result$1|0)==(0|0);
  if ($cmp33) {
   $retval$2 = 0;
  } else {
   $$pre = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $$pre$phiZ2D = $$pre;$Result$113 = $Result$1;
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $call36 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($$pre$phiZ2D,$Result$113)|0);
  $retval$2 = $call36;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($this,$Child_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 var $Child = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,34,1,1,1);
 HEAP32[$this>>2] = (5864);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25620);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE($this) {
 $this = $this|0;
 var $Count = 0, $Count25 = 0, $Names = 0, $P = 0, $Params = 0, $ParsingLambdaParams = 0, $SwapParams = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $call = 0, $call10 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call19 = 0, $call2 = 0;
 var $call26 = 0, $call29 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $retval$0 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp9$byval_copy = sp + 80|0;
 $agg$tmp6$byval_copy = sp + 72|0;
 $agg$tmp$byval_copy = sp + 64|0;
 $agg$tmp = sp + 56|0;
 $Count = sp + 48|0;
 $agg$tmp6 = sp + 40|0;
 $Params = sp;
 $SwapParams = sp + 32|0;
 $agg$tmp9 = sp + 24|0;
 $P = sp + 16|0;
 $Count25 = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25740);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Count,$this,0);
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
  if ($call2) {
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Count)|0);
   $retval$0 = $call4;
  } else {
   $retval$0 = 0;
  }
  $retval$5 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,25743);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp6$byval_copy)|0);
  if ($call7) {
   __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($Params);
   $ParsingLambdaParams = ((($this)) + 362|0);
   __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SwapParams,$ParsingLambdaParams,1);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,25746);
   ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
   $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp9$byval_copy)|0);
   do {
    if ($call10) {
     label = 12;
    } else {
     $Names = ((($this)) + 8|0);
     $call12 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
     while(1) {
      $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call13)|0);
      HEAP32[$P>>2] = $call14;
      $cmp = ($call14|0)==(0|0);
      if ($cmp) {
       label = 11;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$P);
      $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call19) {
       label = 10;
       break;
      }
     }
     if ((label|0) == 10) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Params,$this,$call12);
      label = 12;
      break;
     }
     else if ((label|0) == 11) {
      $retval$4 = 0;
      break;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Count25,$this,0);
    $call26 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call26) {
     $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Params,$Count25)|0);
     $retval$3 = $call29;
    } else {
     $retval$3 = 0;
    }
    $retval$4 = $retval$3;
   }
   __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SwapParams);
   $retval$5 = $retval$4;
  } else {
   $retval$5 = 0;
  }
 }
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($this,$Bindings_) {
 $this = $this|0;
 $Bindings_ = $Bindings_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Bindings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,41,1,1,1);
 HEAP32[$this>>2] = (5908);
 $Bindings = ((($this)) + 8|0);
 $0 = $Bindings_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Bindings;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Bindings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,91);
 $Bindings = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Bindings,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $args1;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $agg$tmp5;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($call,$tmpcast$byval_copy,$tmpcast1$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($this,$Params_,$Count_) {
 $this = $this|0;
 $Params_ = $Params_|0;
 $Count_ = $Count_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Count = 0, $Params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,40,1,1,1);
 HEAP32[$this>>2] = (5952);
 $Params = ((($this)) + 8|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Count = ((($this)) + 16|0);
 $10 = $Count_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $Count;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Count = 0, $Params = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $tmpcast$byval_copy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp6$byval_copy = sp + 56|0;
 $agg$tmp4$byval_copy = sp + 48|0;
 $tmpcast$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 16|0;
 $agg$tmp6 = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25749);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Count = ((($this)) + 16|0);
 $0 = $Count;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,25757);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 $Params = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,22447);
 ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($this,$Count_) {
 $this = $this|0;
 $Count_ = $Count_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,39,1,1,1);
 HEAP32[$this>>2] = (5996);
 $Count = ((($this)) + 8|0);
 $0 = $Count_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Count;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Count = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25812);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Count = ((($this)) + 8|0);
 $0 = $Count;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,25821);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $add$ptr20 = 0, $add$ptr7 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp18 = 0, $cmp3 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv12 = 0, $conv34 = 0, $conv5 = 0, $first$addr$2 = 0, $first$pn = 0;
 var $incdec$ptr = 0, $incdec$ptr15 = 0, $isdigit = 0, $isdigit27 = 0, $isdigit29 = 0, $isdigit31 = 0, $isdigittmp = 0, $isdigittmp26 = 0, $isdigittmp28 = 0, $isdigittmp30 = 0, $spec$select = 0, $t1$0 = 0, $t129$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($first|0)==($last|0);
 L1: do {
  if ($cmp) {
   $first$addr$2 = $first;
  } else {
   $0 = HEAP8[$first>>0]|0;
   $cmp1 = ($0<<24>>24)==(95);
   if (!($cmp1)) {
    $conv = $0 << 24 >> 24;
    $isdigittmp = (($conv) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     $first$addr$2 = $first;
     break;
    }
    $first$pn = $first;
    while(1) {
     $t129$0 = ((($first$pn)) + 1|0);
     $cmp32 = ($t129$0|0)==($last|0);
     if ($cmp32) {
      $first$addr$2 = $last;
      break L1;
     }
     $3 = HEAP8[$t129$0>>0]|0;
     $conv34 = $3 << 24 >> 24;
     $isdigittmp26 = (($conv34) + -48)|0;
     $isdigit27 = ($isdigittmp26>>>0)<(10);
     if ($isdigit27) {
      $first$pn = $t129$0;
     } else {
      $first$addr$2 = $first;
      break L1;
     }
    }
   }
   $add$ptr = ((($first)) + 1|0);
   $cmp3 = ($add$ptr|0)==($last|0);
   if ($cmp3) {
    $first$addr$2 = $first;
   } else {
    $1 = HEAP8[$add$ptr>>0]|0;
    $conv5 = $1 << 24 >> 24;
    $isdigittmp28 = (($conv5) + -48)|0;
    $isdigit29 = ($isdigittmp28>>>0)<(10);
    if ($isdigit29) {
     $add$ptr7 = ((($first)) + 2|0);
     $first$addr$2 = $add$ptr7;
     break;
    }
    $cmp9 = ($1<<24>>24)==(95);
    if ($cmp9) {
     $incdec$ptr = ((($first)) + 2|0);
     $t1$0 = $incdec$ptr;
     while(1) {
      $cmp11 = ($t1$0|0)==($last|0);
      if ($cmp11) {
       $first$addr$2 = $first;
       break L1;
      }
      $2 = HEAP8[$t1$0>>0]|0;
      $conv12 = $2 << 24 >> 24;
      $isdigittmp30 = (($conv12) + -48)|0;
      $isdigit31 = ($isdigittmp30>>>0)<(10);
      if (!($isdigit31)) {
       break;
      }
      $incdec$ptr15 = ((($t1$0)) + 1|0);
      $t1$0 = $incdec$ptr15;
     }
     $cmp18 = ($2<<24>>24)==(95);
     $add$ptr20 = ((($t1$0)) + 1|0);
     $spec$select = $cmp18 ? $add$ptr20 : $first;
     return ($spec$select|0);
    } else {
     $first$addr$2 = $first;
    }
   }
  }
 } while(0);
 return ($first$addr$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($this,$Encoding_,$Entity_) {
 $this = $this|0;
 $Encoding_ = $Encoding_|0;
 $Entity_ = $Entity_|0;
 var $Encoding = 0, $Entity = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,24,1,1,1);
 HEAP32[$this>>2] = (6040);
 $Encoding = ((($this)) + 8|0);
 HEAP32[$Encoding>>2] = $Encoding_;
 $Entity = ((($this)) + 12|0);
 HEAP32[$Entity>>2] = $Entity_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Encoding = 0, $Entity = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Encoding = ((($this)) + 8|0);
 $0 = HEAP32[$Encoding>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24197);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Entity = ((($this)) + 12|0);
 $1 = HEAP32[$Entity>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($this,$Comp) {
 $this = $this|0;
 $Comp = $Comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Comp$addr = 0, $EndsWithTemplateArgs = 0, $call = 0, $cmp = 0, $retval$0 = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Comp$addr = sp;
 HEAP32[$Comp$addr>>2] = $Comp;
 $0 = HEAP32[$this>>2]|0;
 $tobool = ($Comp|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $1 = ((($this)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $tobool2 = ($3|0)==(0|0);
  if ($tobool2) {
   HEAP32[$2>>2] = $Comp;
  } else {
   $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($0,$2,$Comp$addr)|0);
   $4 = HEAP32[$1>>2]|0;
   HEAP32[$4>>2] = $call;
  }
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $tobool5 = ($7|0)==(0|0);
  if (!($tobool5)) {
   $EndsWithTemplateArgs = ((($7)) + 1|0);
   HEAP8[$EndsWithTemplateArgs>>0] = 0;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $cmp = ($9|0)!=(0|0);
  $retval$0 = $cmp;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($this,$SoFar,$State) {
 $this = $this|0;
 $SoFar = $SoFar|0;
 $State = $State|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $SSK = 0, $SSK2 = 0, $Variant = 0, $Variant61 = 0, $add$ptr = 0, $call = 0, $call3 = 0, $call32 = 0, $call33 = 0, $call38 = 0, $call42 = 0, $call46 = 0, $call6 = 0, $call71 = 0, $call8 = 0;
 var $call9 = 0, $cmp = 0, $cmp34 = 0, $cmp44 = 0, $conv26 = 0, $conv63 = 0, $incdec$ptr = 0, $ref$tmp = 0, $ref$tmp70 = 0, $retval$1 = 0, $retval$3 = 0, $sub = 0, $sub64 = 0, $switch = 0, $tobool27 = 0, $tobool66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SSK = sp + 8|0;
 $Variant = sp + 4|0;
 $ref$tmp = sp + 13|0;
 $Variant61 = sp;
 $ref$tmp70 = sp + 12|0;
 $0 = HEAP32[$SoFar>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(36);
 if ($cmp) {
  $SSK2 = ((($0)) + 8|0);
  $1 = HEAP32[$SSK2>>2]|0;
  HEAP32[$SSK>>2] = $1;
  $$off = (($1) + -2)|0;
  $switch = ($$off>>>0)<(4);
  if ($switch) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$SSK)|0);
   HEAP32[$SoFar>>2] = $call3;
  }
 }
 $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,67)|0);
 L7: do {
  if ($call6) {
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,73)|0);
   $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   switch ($call9<<24>>24) {
   case 53: case 51: case 50: case 49:  {
    break;
   }
   default: {
    $retval$3 = 0;
    break L7;
   }
   }
   $conv26 = $call9 << 24 >> 24;
   $sub = (($conv26) + -48)|0;
   HEAP32[$Variant>>2] = $sub;
   $2 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $tobool27 = ($State|0)==(0|0);
   if (!($tobool27)) {
    HEAP8[$State>>0] = 1;
   }
   if ($call8) {
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call32,$State)|0);
    $cmp34 = ($call33|0)==(0|0);
    if ($cmp34) {
     $retval$1 = 0;
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    HEAP8[$ref$tmp>>0] = 0;
    $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this,$SoFar,$ref$tmp,$Variant)|0);
    $retval$1 = $call38;
   }
   $retval$3 = $retval$1;
  } else {
   $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $cmp44 = ($call42<<24>>24)==(68);
   if ($cmp44) {
    $call46 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
    switch ($call46<<24>>24) {
    case 53: case 50: case 49: case 48:  {
     break;
    }
    default: {
     $retval$3 = 0;
     break L7;
    }
    }
    $conv63 = $call46 << 24 >> 24;
    $sub64 = (($conv63) + -48)|0;
    HEAP32[$Variant61>>2] = $sub64;
    $3 = HEAP32[$this>>2]|0;
    $add$ptr = ((($3)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $tobool66 = ($State|0)==(0|0);
    if (!($tobool66)) {
     HEAP8[$State>>0] = 1;
    }
    HEAP8[$ref$tmp70>>0] = 1;
    $call71 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this,$SoFar,$ref$tmp70,$Variant61)|0);
    $retval$3 = $call71;
   } else {
    $retval$3 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $incdec$ptr = ((($0)) + -4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP8[$args1>>0]|0;
 $tobool = ($1<<24>>24)!=(0);
 $2 = HEAP32[$args3>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($call,$0,$tobool,$2);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($this,$Basename_,$IsDtor_,$Variant_) {
 $this = $this|0;
 $Basename_ = $Basename_|0;
 $IsDtor_ = $IsDtor_|0;
 $Variant_ = $Variant_|0;
 var $Basename = 0, $IsDtor = 0, $Variant = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsDtor_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,37,1,1,1);
 HEAP32[$this>>2] = (6084);
 $Basename = ((($this)) + 8|0);
 HEAP32[$Basename>>2] = $Basename_;
 $IsDtor = ((($this)) + 12|0);
 HEAP8[$IsDtor>>0] = $frombool;
 $Variant = ((($this)) + 16|0);
 HEAP32[$Variant>>2] = $Variant_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Basename = 0, $IsDtor = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $IsDtor = ((($this)) + 12|0);
 $0 = HEAP8[$IsDtor>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23184);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 $Basename = ((($this)) + 8|0);
 $1 = HEAP32[$Basename>>2]|0;
 $vtable = HEAP32[$1>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $2 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$2 & 255]($agg$tmp2,$1);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($this,$SSK_) {
 $this = $this|0;
 $SSK_ = $SSK_|0;
 var $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,35,1,1,1);
 HEAP32[$this>>2] = (6128);
 $SSK = ((($this)) + 8|0);
 HEAP32[$SSK>>2] = $SSK_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $SSK = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp15$byval_copy = sp + 88|0;
 $agg$tmp12$byval_copy = sp + 80|0;
 $agg$tmp9$byval_copy = sp + 72|0;
 $agg$tmp6$byval_copy = sp + 64|0;
 $agg$tmp3$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp3 = sp + 32|0;
 $agg$tmp6 = sp + 24|0;
 $agg$tmp9 = sp + 16|0;
 $agg$tmp12 = sp + 8|0;
 $agg$tmp15 = sp;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22241);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,22256);
  ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,26031);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,26102);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp9$byval_copy);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,26152);
  ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,26202);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp15$byval_copy);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22186);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22196);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,22196);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,25988);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,26002);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,26016);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($this,$Qual_,$Name_) {
 $this = $this|0;
 $Qual_ = $Qual_|0;
 $Name_ = $Name_|0;
 var $Name = 0, $Qual = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,23,1,1,1);
 HEAP32[$this>>2] = (6172);
 $Qual = ((($this)) + 8|0);
 HEAP32[$Qual>>2] = $Qual_;
 $Name = ((($this)) + 12|0);
 HEAP32[$Name>>2] = $Name_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Name = 0, $Qual = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Qual = ((($this)) + 8|0);
 $0 = HEAP32[$Qual>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24197);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Name = ((($this)) + 12|0);
 $1 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Name = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 12|0);
 $0 = HEAP32[$Name>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($this,$ClassType_,$MemberType_) {
 $this = $this|0;
 $ClassType_ = $ClassType_|0;
 $MemberType_ = $MemberType_|0;
 var $0 = 0, $ClassType = 0, $MemberType = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($MemberType_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,13,$0,1,1);
 HEAP32[$this>>2] = (6216);
 $ClassType = ((($this)) + 8|0);
 HEAP32[$ClassType>>2] = $ClassType_;
 $MemberType = ((($this)) + 12|0);
 HEAP32[$MemberType>>2] = $MemberType_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $MemberType = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $MemberType = ((($this)) + 12|0);
 $0 = HEAP32[$MemberType>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ClassType = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, $call4 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp8$byval_copy = sp + 40|0;
 $agg$tmp6$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp6 = sp + 8|0;
 $agg$tmp8 = sp;
 $MemberType = ((($this)) + 12|0);
 $0 = HEAP32[$MemberType>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$s);
 $2 = HEAP32[$MemberType>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($2,$s)|0);
 if ($call) {
  label = 3;
 } else {
  $3 = HEAP32[$MemberType>>2]|0;
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($3,$s)|0);
  if ($call4) {
   label = 3;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,22449);
   ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp6$byval_copy);
  }
 }
 if ((label|0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 $ClassType = ((($this)) + 8|0);
 $4 = HEAP32[$ClassType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($4,$s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,26364);
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp8$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $MemberType = ((($this)) + 12|0);
 $0 = HEAP32[$MemberType>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($0,$s)|0);
 if ($call) {
  label = 3;
 } else {
  $1 = HEAP32[$MemberType>>2]|0;
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$s)|0);
  if ($call3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22447);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 $2 = HEAP32[$MemberType>>2]|0;
 $vtable = HEAP32[$2>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $3 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$3 & 255]($2,$s);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($this) {
 $this = $this|0;
 var $Second = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $Second = ((($this)) + 4|0);
 HEAP32[$Second>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($this,$Str) {
 $this = $this|0;
 $Str = $Str|0;
 var $FirstChar$0 = 0, $Second = 0, $SecondChar$0 = 0, $call = 0, $call2 = 0, $cmp = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Str)|0);
 $call2 = (__ZNK12_GLOBAL__N_110StringView3endEv($Str)|0);
 $cmp = ($call2|0)==(0|0);
 $incdec$ptr = ((($call)) + 1|0);
 $incdec$ptr3 = ((($call2)) + 1|0);
 $FirstChar$0 = $cmp ? $incdec$ptr : $call;
 $SecondChar$0 = $cmp ? $incdec$ptr3 : $call2;
 HEAP32[$this>>2] = $FirstChar$0;
 $Second = ((($this)) + 4|0);
 HEAP32[$Second>>2] = $SecondChar$0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $Second = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $N;
 $Second = ((($this)) + 4|0);
 HEAP32[$Second>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this,$Base_,$Dimension_) {
 $this = $this|0;
 $Base_ = $Base_|0;
 $Dimension_ = $Dimension_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Base = 0, $Dimension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,14,0,0,1);
 HEAP32[$this>>2] = (6260);
 $Base = ((($this)) + 8|0);
 HEAP32[$Base>>2] = $Base_;
 $Dimension = ((($this)) + 12|0);
 $0 = $Dimension_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Dimension;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Base = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Base = 0, $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call = 0, $call11 = 0, $call14 = 0, $call5 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp17$byval_copy = sp + 56|0;
 $agg$tmp7$byval_copy = sp + 48|0;
 $agg$tmp3$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp3 = sp + 16|0;
 $agg$tmp7 = sp + 8|0;
 $agg$tmp17 = sp;
 $call = (__ZNK12_GLOBAL__N_112OutputStream4backEv($S)|0);
 $cmp = ($call<<24>>24)==(93);
 if (!($cmp)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22449);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,26424);
 ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
 $Dimension = ((($this)) + 12|0);
 $call5 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension)|0);
 if ($call5) {
  __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp7,$Dimension);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp7$byval_copy);
 } else {
  $call11 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension)|0);
  if ($call11) {
   $call14 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension)|0);
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call14,$S);
  }
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,22097);
 ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp17$byval_copy);
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Second = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Second = ((($this)) + 4|0);
 $0 = HEAP32[$Second>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $2 = 0;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $tobool2 = ($1|0)!=(0|0);
  $2 = $tobool2;
 }
 return ($2|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Second = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Second = ((($this)) + 4|0);
 $1 = HEAP32[$Second>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result,$0,$1);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Second = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $2 = 0;
 } else {
  $Second = ((($this)) + 4|0);
  $1 = HEAP32[$Second>>2]|0;
  $tobool2 = ($1|0)==(0|0);
  $2 = $tobool2;
 }
 return ($2|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp5;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp,$tmpcast$byval_copy);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this,$BaseType_,$Dimension_) {
 $this = $this|0;
 $BaseType_ = $BaseType_|0;
 $Dimension_ = $Dimension_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BaseType = 0, $Dimension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,25,1,1,1);
 HEAP32[$this>>2] = (6304);
 $BaseType = ((($this)) + 8|0);
 HEAP32[$BaseType>>2] = $BaseType_;
 $Dimension = ((($this)) + 12|0);
 $0 = $Dimension_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Dimension;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $BaseType = 0, $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call2 = 0, $call4 = 0, $call6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp12$byval_copy = sp + 40|0;
 $agg$tmp8$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp8 = sp + 8|0;
 $agg$tmp12 = sp;
 $BaseType = ((($this)) + 8|0);
 $0 = HEAP32[$BaseType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26474);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Dimension = ((($this)) + 12|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension)|0);
 if ($call2) {
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension)|0);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call4,$S);
 } else {
  $call6 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension)|0);
  if ($call6) {
   __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp8,$Dimension);
   ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp8$byval_copy);
  }
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,22097);
 ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($agg$tmp,$1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp5;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp,$tmpcast$byval_copy);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp,$tmpcast$byval_copy);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($this,$Dimension_) {
 $this = $this|0;
 $Dimension_ = $Dimension_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Dimension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,26,1,1,1);
 HEAP32[$this>>2] = (6348);
 $Dimension = ((($this)) + 8|0);
 $0 = $Dimension_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Dimension;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26530);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Dimension = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp2,$Dimension);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22097);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($this,$Restore_,$NewVal) {
 $this = $this|0;
 $Restore_ = $Restore_|0;
 $NewVal = $NewVal|0;
 var $0 = 0, $1 = 0, $OriginalValue = 0, $ShouldRestore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $NewVal;
 HEAP32[$this>>2] = $Restore_;
 $OriginalValue = ((($this)) + 4|0);
 $1 = HEAP32[$Restore_>>2]|0;
 HEAP32[$OriginalValue>>2] = $1;
 $ShouldRestore = ((($this)) + 8|0);
 HEAP8[$ShouldRestore>>0] = 1;
 HEAP32[$Restore_>>2] = $0;
 return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $OriginalValue = 0, $ShouldRestore = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ShouldRestore = ((($this)) + 8|0);
 $0 = HEAP8[$ShouldRestore>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $OriginalValue = ((($this)) + 4|0);
  $1 = HEAP32[$OriginalValue>>2]|0;
  $2 = HEAP32[$this>>2]|0;
  HEAP32[$2>>2] = $1;
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($this,$Child_,$Quals_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 $Quals_ = $Quals_|0;
 var $0 = 0, $1 = 0, $2 = 0, $ArrayCache = 0, $Child = 0, $FunctionCache = 0, $Quals = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Child_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $ArrayCache = ((($Child_)) + 6|0);
 $1 = HEAP8[$ArrayCache>>0]|0;
 $FunctionCache = ((($Child_)) + 7|0);
 $2 = HEAP8[$FunctionCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,3,$0,$1,$2);
 HEAP32[$this>>2] = (6392);
 $Quals = ((($this)) + 8|0);
 HEAP32[$Quals>>2] = $Quals_;
 $Child = ((($this)) + 12|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this,$S);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $2 = 0, $Quals = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp13 = 0, $agg$tmp13$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $and = 0, $and10 = 0, $and3 = 0, $tobool = 0, $tobool11 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp13$byval_copy = sp + 40|0;
 $agg$tmp6$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp6 = sp + 8|0;
 $agg$tmp13 = sp;
 $Quals = ((($this)) + 8|0);
 $0 = HEAP32[$Quals>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $1 = $0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26635);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  $$pre = HEAP32[$Quals>>2]|0;
  $1 = $$pre;
 }
 $and3 = $1 & 2;
 $tobool4 = ($and3|0)==(0);
 if ($tobool4) {
  $2 = $1;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,26642);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
  $$pre3 = HEAP32[$Quals>>2]|0;
  $2 = $$pre3;
 }
 $and10 = $2 & 4;
 $tobool11 = ($and10|0)==(0);
 if (!($tobool11)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp13,26652);
  ;HEAP32[$agg$tmp13$byval_copy>>2]=HEAP32[$agg$tmp13>>2]|0;HEAP32[$agg$tmp13$byval_copy+4>>2]=HEAP32[$agg$tmp13+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp13$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($this,$Ty_,$Ext_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Ext_ = $Ext_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ext = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,2,1,1,1);
 HEAP32[$this>>2] = (6436);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Ext = ((($this)) + 12|0);
 $0 = $Ext_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Ext;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ext = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22449);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Ext = ((($this)) + 12|0);
 $1 = $Ext;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp2;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($this,$Ty_,$Protocol_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Protocol_ = $Protocol_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Protocol = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,10,1,1,1);
 HEAP32[$this>>2] = (6480);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Protocol = ((($this)) + 12|0);
 $0 = $Protocol_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Protocol;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Protocol = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22633);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Protocol = ((($this)) + 12|0);
 $1 = $Protocol;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp2;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22526);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $ASTAllocator = 0, $call14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call14 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7)|0);
 return ($call14|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,32)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[$args3>>2]|0;
 $12 = HEAP8[$args5>>0]|0;
 $13 = HEAP32[$args7>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($call,$0,$tmpcast$byval_copy,$11,$12,$13);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($this,$Ret_,$Params_,$CVQuals_,$RefQual_,$ExceptionSpec_) {
 $this = $this|0;
 $Ret_ = $Ret_|0;
 $Params_ = $Params_|0;
 $CVQuals_ = $CVQuals_|0;
 $RefQual_ = $RefQual_|0;
 $ExceptionSpec_ = $ExceptionSpec_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CVQuals = 0, $ExceptionSpec = 0, $Params = 0, $RefQual = 0, $Ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,15,0,1,0);
 HEAP32[$this>>2] = (6524);
 $Ret = ((($this)) + 8|0);
 HEAP32[$Ret>>2] = $Ret_;
 $Params = ((($this)) + 12|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $CVQuals = ((($this)) + 20|0);
 HEAP32[$CVQuals>>2] = $CVQuals_;
 $RefQual = ((($this)) + 24|0);
 HEAP8[$RefQual>>0] = $RefQual_;
 $ExceptionSpec = ((($this)) + 28|0);
 HEAP32[$ExceptionSpec>>2] = $ExceptionSpec_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22449);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $CVQuals = 0, $ExceptionSpec = 0, $Params = 0, $RefQual = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $agg$tmp17 = 0;
 var $agg$tmp17$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $and = 0, $and14 = 0, $and7 = 0, $cmp31 = 0, $tobool = 0, $tobool15 = 0, $tobool8 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp27$byval_copy = sp + 104|0;
 $agg$tmp21$byval_copy = sp + 96|0;
 $agg$tmp17$byval_copy = sp + 88|0;
 $agg$tmp10$byval_copy = sp + 80|0;
 $agg$tmp4$byval_copy = sp + 72|0;
 $agg$tmp2$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp2 = sp + 40|0;
 $agg$tmp4 = sp + 32|0;
 $agg$tmp10 = sp + 24|0;
 $agg$tmp17 = sp + 16|0;
 $agg$tmp21 = sp + 8|0;
 $agg$tmp27 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Params = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 $CVQuals = ((($this)) + 20|0);
 $2 = HEAP32[$CVQuals>>2]|0;
 $and = $2 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $3 = $2;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,26635);
  ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
  $$pre = HEAP32[$CVQuals>>2]|0;
  $3 = $$pre;
 }
 $and7 = $3 & 2;
 $tobool8 = ($and7|0)==(0);
 if ($tobool8) {
  $4 = $3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,26642);
  ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp10$byval_copy);
  $$pre11 = HEAP32[$CVQuals>>2]|0;
  $4 = $$pre11;
 }
 $and14 = $4 & 4;
 $tobool15 = ($and14|0)==(0);
 if (!($tobool15)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,26652);
  ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp17$byval_copy);
 }
 $RefQual = ((($this)) + 24|0);
 $5 = HEAP8[$RefQual>>0]|0;
 switch ($5<<24>>24) {
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,26837);
  ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp21$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27,26840);
  ;HEAP32[$agg$tmp27$byval_copy>>2]=HEAP32[$agg$tmp27>>2]|0;HEAP32[$agg$tmp27$byval_copy+4>>2]=HEAP32[$agg$tmp27+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp27$byval_copy);
  break;
 }
 default: {
 }
 }
 $ExceptionSpec = ((($this)) + 28|0);
 $6 = HEAP32[$ExceptionSpec>>2]|0;
 $cmp31 = ($6|0)==(0|0);
 if (!($cmp31)) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
  $7 = HEAP32[$ExceptionSpec>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($7,$S);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($this,$Types_) {
 $this = $this|0;
 $Types_ = $Types_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Types = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,17,1,1,1);
 HEAP32[$this>>2] = (6568);
 $Types = ((($this)) + 8|0);
 $0 = $Types_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Types;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Types = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26893);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Types = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Types,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,41);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($this,$E_) {
 $this = $this|0;
 $E_ = $E_|0;
 var $E = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,16,1,1,1);
 HEAP32[$this>>2] = (6612);
 $E = ((($this)) + 8|0);
 HEAP32[$E>>2] = $E_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $E = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26957);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $E = ((($this)) + 8|0);
 $0 = HEAP32[$E>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($this,$Special_,$Child_) {
 $this = $this|0;
 $Special_ = $Special_|0;
 $Child_ = $Child_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,20,1,1,1);
 HEAP32[$this>>2] = (6656);
 $Special = ((($this)) + 8|0);
 $0 = $Special_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Special;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Child = ((($this)) + 16|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Special = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Special = ((($this)) + 8|0);
 $0 = $Special;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 $Child = ((($this)) + 16|0);
 $10 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($this,$Prefix_,$Suffix_) {
 $this = $this|0;
 $Prefix_ = $Prefix_|0;
 $Suffix_ = $Suffix_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Prefix = 0, $Suffix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,1,1,1,1);
 HEAP32[$this>>2] = (6700);
 $Prefix = ((($this)) + 8|0);
 HEAP32[$Prefix>>2] = $Prefix_;
 $Suffix = ((($this)) + 12|0);
 $0 = $Suffix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Suffix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Prefix = 0, $Suffix = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 $Prefix = ((($this)) + 8|0);
 $0 = HEAP32[$Prefix>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25213);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 $Suffix = ((($this)) + 12|0);
 $1 = $Suffix;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp2;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,22447);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BaseEncoding = 0, $Count = 0, $Encoding = 0, $FirstType = 0, $Name = 0, $Name119 = 0, $Name130 = 0, $Name88 = 0, $SecondType = 0;
 var $Ty = 0, $Ty11 = 0, $Ty22 = 0, $Ty33 = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr118 = 0, $add$ptr129 = 0, $add$ptr21 = 0, $add$ptr32 = 0, $add$ptr43 = 0, $add$ptr57 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $brmerge = 0, $call = 0, $call100 = 0, $call103 = 0, $call104 = 0, $call109 = 0;
 var $call110 = 0, $call114 = 0, $call12 = 0, $call120 = 0, $call121 = 0, $call125 = 0, $call13 = 0, $call131 = 0, $call132 = 0, $call136 = 0, $call139 = 0, $call143 = 0, $call17 = 0, $call2 = 0, $call23 = 0, $call24 = 0, $call28 = 0, $call34 = 0, $call35 = 0, $call39 = 0;
 var $call44 = 0, $call45 = 0, $call48 = 0, $call49 = 0, $call5 = 0, $call53 = 0, $call58 = 0, $call59 = 0, $call6 = 0, $call63 = 0, $call64 = 0, $call68 = 0, $call7 = 0, $call72 = 0, $call78 = 0, $call79 = 0, $call83 = 0, $call89 = 0, $call90 = 0, $call94 = 0;
 var $call97 = 0, $cmp = 0, $cmp105 = 0, $cmp122 = 0, $cmp133 = 0, $cmp14 = 0, $cmp25 = 0, $cmp36 = 0, $cmp50 = 0, $cmp60 = 0, $cmp69 = 0, $cmp80 = 0, $cmp91 = 0, $cmp99 = 0, $conv = 0, $conv115 = 0, $conv3 = 0, $incdec$ptr = 0, $ref$tmp = 0, $retval$0 = 0;
 var $retval$1 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $Ty = sp + 60|0;
 $Ty11 = sp + 56|0;
 $Ty22 = sp + 52|0;
 $Ty33 = sp + 48|0;
 $Encoding = sp + 44|0;
 $FirstType = sp + 40|0;
 $ref$tmp = sp + 32|0;
 $SecondType = sp + 24|0;
 $Name = sp + 20|0;
 $Name88 = sp + 16|0;
 $BaseEncoding = sp + 12|0;
 $Name119 = sp + 8|0;
 $Name130 = sp + 4|0;
 $Count = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 84:  {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv3 = $call2 << 24 >> 24;
   switch ($conv3|0) {
   case 86:  {
    $0 = HEAP32[$this>>2]|0;
    $add$ptr = ((($0)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call5)|0);
    HEAP32[$Ty>>2] = $call6;
    $cmp = ($call6|0)==(0|0);
    if ($cmp) {
     $retval$0 = 0;
    } else {
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty)|0);
     $retval$0 = $call7;
    }
    $retval$14 = $retval$0;
    break L1;
    break;
   }
   case 84:  {
    $1 = HEAP32[$this>>2]|0;
    $add$ptr10 = ((($1)) + 2|0);
    HEAP32[$this>>2] = $add$ptr10;
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call12)|0);
    HEAP32[$Ty11>>2] = $call13;
    $cmp14 = ($call13|0)==(0|0);
    if ($cmp14) {
     $retval$1 = 0;
    } else {
     $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty11)|0);
     $retval$1 = $call17;
    }
    $retval$14 = $retval$1;
    break L1;
    break;
   }
   case 73:  {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr21 = ((($2)) + 2|0);
    HEAP32[$this>>2] = $add$ptr21;
    $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call23)|0);
    HEAP32[$Ty22>>2] = $call24;
    $cmp25 = ($call24|0)==(0|0);
    if ($cmp25) {
     $retval$2 = 0;
    } else {
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty22)|0);
     $retval$2 = $call28;
    }
    $retval$14 = $retval$2;
    break L1;
    break;
   }
   case 83:  {
    $3 = HEAP32[$this>>2]|0;
    $add$ptr32 = ((($3)) + 2|0);
    HEAP32[$this>>2] = $add$ptr32;
    $call34 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call35 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call34)|0);
    HEAP32[$Ty33>>2] = $call35;
    $cmp36 = ($call35|0)==(0|0);
    if ($cmp36) {
     $retval$3 = 0;
    } else {
     $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty33)|0);
     $retval$3 = $call39;
    }
    $retval$14 = $retval$3;
    break L1;
    break;
   }
   case 99:  {
    $4 = HEAP32[$this>>2]|0;
    $add$ptr43 = ((($4)) + 2|0);
    HEAP32[$this>>2] = $add$ptr43;
    $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this)|0);
    if ($call44) {
     $retval$14 = 0;
     break L1;
    }
    $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this)|0);
    if ($call45) {
     $retval$14 = 0;
     break L1;
    }
    $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call48)|0);
    HEAP32[$Encoding>>2] = $call49;
    $cmp50 = ($call49|0)==(0|0);
    if ($cmp50) {
     $retval$4 = 0;
    } else {
     $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Encoding)|0);
     $retval$4 = $call53;
    }
    $retval$14 = $retval$4;
    break L1;
    break;
   }
   case 67:  {
    $5 = HEAP32[$this>>2]|0;
    $add$ptr57 = ((($5)) + 2|0);
    HEAP32[$this>>2] = $add$ptr57;
    $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call59 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58)|0);
    HEAP32[$FirstType>>2] = $call59;
    $cmp60 = ($call59|0)==(0|0);
    do {
     if ($cmp60) {
      $retval$6 = 0;
     } else {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp,$this,1);
      $call63 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp)|0);
      if ($call63) {
       $retval$6 = 0;
       break;
      }
      $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      if ($call64) {
       $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58)|0);
       HEAP32[$SecondType>>2] = $call68;
       $cmp69 = ($call68|0)==(0|0);
       if ($cmp69) {
        $retval$5 = 0;
       } else {
        $call72 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SecondType,$FirstType)|0);
        $retval$5 = $call72;
       }
       $retval$6 = $retval$5;
      } else {
       $retval$6 = 0;
      }
     }
    } while(0);
    $retval$14 = $retval$6;
    break L1;
    break;
   }
   case 87:  {
    $6 = HEAP32[$this>>2]|0;
    $add$ptr77 = ((($6)) + 2|0);
    HEAP32[$this>>2] = $add$ptr77;
    $call78 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call79 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call78,0)|0);
    HEAP32[$Name>>2] = $call79;
    $cmp80 = ($call79|0)==(0|0);
    if ($cmp80) {
     $retval$7 = 0;
    } else {
     $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this,27238,$Name)|0);
     $retval$7 = $call83;
    }
    $retval$14 = $retval$7;
    break L1;
    break;
   }
   case 72:  {
    $7 = HEAP32[$this>>2]|0;
    $add$ptr87 = ((($7)) + 2|0);
    HEAP32[$this>>2] = $add$ptr87;
    $call89 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call90 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call89,0)|0);
    HEAP32[$Name88>>2] = $call90;
    $cmp91 = ($call90|0)==(0|0);
    if ($cmp91) {
     $retval$8 = 0;
    } else {
     $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Name88)|0);
     $retval$8 = $call94;
    }
    $retval$14 = $retval$8;
    break L1;
    break;
   }
   default: {
    $8 = HEAP32[$this>>2]|0;
    $incdec$ptr = ((($8)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    $call97 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp99 = ($call97<<24>>24)==(118);
    $call100 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this)|0);
    if ($call100) {
     $retval$14 = 0;
     break L1;
    }
    $call103 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call104 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call103)|0);
    HEAP32[$BaseEncoding>>2] = $call104;
    $cmp105 = ($call104|0)==(0|0);
    do {
     if ($cmp105) {
      $retval$9 = 0;
     } else {
      if ($cmp99) {
       $call109 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this,$BaseEncoding)|0);
       $retval$9 = $call109;
       break;
      } else {
       $call110 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this,$BaseEncoding)|0);
       $retval$9 = $call110;
       break;
      }
     }
    } while(0);
    $retval$14 = $retval$9;
    break L1;
   }
   }
   break;
  }
  case 71:  {
   $call114 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv115 = $call114 << 24 >> 24;
   switch ($conv115|0) {
   case 86:  {
    $9 = HEAP32[$this>>2]|0;
    $add$ptr118 = ((($9)) + 2|0);
    HEAP32[$this>>2] = $add$ptr118;
    $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call121 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call120,0)|0);
    HEAP32[$Name119>>2] = $call121;
    $cmp122 = ($call121|0)==(0|0);
    if ($cmp122) {
     $retval$11 = 0;
    } else {
     $call125 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Name119)|0);
     $retval$11 = $call125;
    }
    $retval$14 = $retval$11;
    break L1;
    break;
   }
   case 82:  {
    break;
   }
   default: {
    $retval$14 = 0;
    break L1;
   }
   }
   $10 = HEAP32[$this>>2]|0;
   $add$ptr129 = ((($10)) + 2|0);
   HEAP32[$this>>2] = $add$ptr129;
   $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call132 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call131,0)|0);
   HEAP32[$Name130>>2] = $call132;
   $cmp133 = ($call132|0)==(0|0);
   if ($cmp133) {
    $retval$13 = 0;
   } else {
    $call136 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this,$Count)|0);
    $call139 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    $brmerge = $call136 | $call139;
    if ($brmerge) {
     $call143 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Name130)|0);
     $retval$12 = $call143;
    } else {
     $retval$12 = 0;
    }
    $retval$13 = $retval$12;
   }
   $retval$14 = $retval$13;
   break;
  }
  default: {
   $retval$14 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$14|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($this,$Enclosing) {
 $this = $this|0;
 $Enclosing = $Enclosing|0;
 var $CVQualifiers = 0, $EndsWithTemplateArgs = 0, $ForwardTemplateRefs = 0, $ForwardTemplateRefsBegin = 0, $ReferenceQualifier = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $EndsWithTemplateArgs = ((($this)) + 1|0);
 HEAP8[$EndsWithTemplateArgs>>0] = 0;
 $CVQualifiers = ((($this)) + 4|0);
 HEAP32[$CVQualifiers>>2] = 0;
 $ReferenceQualifier = ((($this)) + 8|0);
 HEAP8[$ReferenceQualifier>>0] = 0;
 $ForwardTemplateRefsBegin = ((($this)) + 12|0);
 $ForwardTemplateRefs = ((($Enclosing)) + 332|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($ForwardTemplateRefs)|0);
 HEAP32[$ForwardTemplateRefsBegin>>2] = $call;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ForwardTemplateRefs = 0, $ForwardTemplateRefsBegin = 0, $I$0 = 0, $Index = 0, $Ref = 0, $TemplateParams = 0, $call = 0, $call3 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp5 = 0, $inc = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ForwardTemplateRefsBegin = ((($State)) + 12|0);
 $0 = HEAP32[$ForwardTemplateRefsBegin>>2]|0;
 $ForwardTemplateRefs = ((($this)) + 332|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($ForwardTemplateRefs)|0);
 $TemplateParams = ((($this)) + 288|0);
 $I$0 = $0;
 while(1) {
  $cmp = ($I$0>>>0)<($call>>>0);
  if (!($cmp)) {
   label = 5;
   break;
  }
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($ForwardTemplateRefs,$I$0)|0);
  $1 = HEAP32[$call3>>2]|0;
  $Index = ((($1)) + 8|0);
  $2 = HEAP32[$Index>>2]|0;
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams)|0);
  $cmp5 = ($2>>>0)<($call4>>>0);
  if (!($cmp5)) {
   $retval$2 = 1;
   break;
  }
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams,$2)|0);
  $3 = HEAP32[$call7>>2]|0;
  $Ref = ((($1)) + 12|0);
  HEAP32[$Ref>>2] = $3;
  $inc = (($I$0) + 1)|0;
  $I$0 = $inc;
 }
 if ((label|0) == 5) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($ForwardTemplateRefs,$0);
  $retval$2 = 0;
 }
 return ($retval$2|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp10 = 0, $cmp3 = 0, $cmp7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($0)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($0,0)|0);
  $cmp3 = ($call2<<24>>24)==(69);
  if (!($cmp3)) {
   $cmp7 = ($call2<<24>>24)==(46);
   $cmp10 = ($call2<<24>>24)==(95);
   $spec$select = $cmp7 | $cmp10;
   return ($spec$select|0);
  }
 }
 return 1;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this,$args,$args1,$args3,$args5,$args7,$args9) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 $args9 = $args9|0;
 var $ASTAllocator = 0, $call17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call17 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7,$args9)|0);
 return ($call17|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7,$args9) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 $args9 = $args9|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,36)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = $args3;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = HEAP32[$args5>>2]|0;
 $13 = HEAP32[$args7>>2]|0;
 $14 = HEAP8[$args9>>0]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($call,$0,$1,$tmpcast$byval_copy,$12,$13,$14);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($this,$Ret_,$Name_,$Params_,$Attrs_,$CVQuals_,$RefQual_) {
 $this = $this|0;
 $Ret_ = $Ret_|0;
 $Name_ = $Name_|0;
 $Params_ = $Params_|0;
 $Attrs_ = $Attrs_|0;
 $CVQuals_ = $CVQuals_|0;
 $RefQual_ = $RefQual_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Attrs = 0, $CVQuals = 0, $Name = 0, $Params = 0, $RefQual = 0, $Ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,18,0,1,0);
 HEAP32[$this>>2] = (6744);
 $Ret = ((($this)) + 8|0);
 HEAP32[$Ret>>2] = $Ret_;
 $Name = ((($this)) + 12|0);
 HEAP32[$Name>>2] = $Name_;
 $Params = ((($this)) + 16|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Attrs = ((($this)) + 24|0);
 HEAP32[$Attrs>>2] = $Attrs_;
 $CVQuals = ((($this)) + 28|0);
 HEAP32[$CVQuals>>2] = $CVQuals_;
 $RefQual = ((($this)) + 32|0);
 HEAP8[$RefQual>>0] = $RefQual_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Name = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $vtable = HEAP32[$0>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($0,$S);
  $2 = HEAP32[$Ret>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($2,$S)|0);
  if (!($call)) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22449);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  }
 }
 $Name = ((($this)) + 12|0);
 $3 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($3,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $Attrs = 0, $CVQuals = 0, $Params = 0, $RefQual = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0;
 var $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $agg$tmp31 = 0, $agg$tmp31$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $and = 0, $and11 = 0, $and18 = 0, $cmp35 = 0, $tobool = 0, $tobool12 = 0, $tobool19 = 0, $tobool5 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp31$byval_copy = sp + 104|0;
 $agg$tmp25$byval_copy = sp + 96|0;
 $agg$tmp21$byval_copy = sp + 88|0;
 $agg$tmp14$byval_copy = sp + 80|0;
 $agg$tmp7$byval_copy = sp + 72|0;
 $agg$tmp2$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp2 = sp + 40|0;
 $agg$tmp7 = sp + 32|0;
 $agg$tmp14 = sp + 24|0;
 $agg$tmp21 = sp + 16|0;
 $agg$tmp25 = sp + 8|0;
 $agg$tmp31 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,22451);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Params = ((($this)) + 16|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,22447);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $vtable = HEAP32[$0>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 }
 $CVQuals = ((($this)) + 28|0);
 $2 = HEAP32[$CVQuals>>2]|0;
 $and = $2 & 1;
 $tobool5 = ($and|0)==(0);
 if ($tobool5) {
  $3 = $2;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,26635);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp7$byval_copy);
  $$pre = HEAP32[$CVQuals>>2]|0;
  $3 = $$pre;
 }
 $and11 = $3 & 2;
 $tobool12 = ($and11|0)==(0);
 if ($tobool12) {
  $4 = $3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp14,26642);
  ;HEAP32[$agg$tmp14$byval_copy>>2]=HEAP32[$agg$tmp14>>2]|0;HEAP32[$agg$tmp14$byval_copy+4>>2]=HEAP32[$agg$tmp14+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp14$byval_copy);
  $$pre10 = HEAP32[$CVQuals>>2]|0;
  $4 = $$pre10;
 }
 $and18 = $4 & 4;
 $tobool19 = ($and18|0)==(0);
 if (!($tobool19)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,26652);
  ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp21$byval_copy);
 }
 $RefQual = ((($this)) + 32|0);
 $5 = HEAP8[$RefQual>>0]|0;
 switch ($5<<24>>24) {
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25,26837);
  ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;HEAP32[$agg$tmp25$byval_copy+4>>2]=HEAP32[$agg$tmp25+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp25$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp31,26840);
  ;HEAP32[$agg$tmp31$byval_copy>>2]=HEAP32[$agg$tmp31>>2]|0;HEAP32[$agg$tmp31$byval_copy+4>>2]=HEAP32[$agg$tmp31+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp31$byval_copy);
  break;
 }
 default: {
 }
 }
 $Attrs = ((($this)) + 24|0);
 $6 = HEAP32[$Attrs>>2]|0;
 $cmp35 = ($6|0)==(0|0);
 if (!($cmp35)) {
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($6,$S);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($this,$Conditions_) {
 $this = $this|0;
 $Conditions_ = $Conditions_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Conditions = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,9,1,1,1);
 HEAP32[$this>>2] = (6788);
 $Conditions = ((($this)) + 8|0);
 $0 = $Conditions_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Conditions;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Conditions = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27176);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Conditions = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Conditions,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this)|0);
 $add$ptr = (($call) + ($Index<<2)|0);
 return ($add$ptr|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $0 = 0, $Last = 0, $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $add$ptr = (($0) + ($Index<<2)|0);
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27555,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27546,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27532,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27513,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) {
 $this = $this|0;
 var $$ph = 0, $0 = 0, $1 = 0, $call = 0, $call11 = 0, $call13 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call7 = 0, $call8 = 0, $lnot = 0, $lnot14 = 0, $ref$tmp = 0, $ref$tmp10 = 0, $ref$tmp6 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 16|0;
 $ref$tmp6 = sp + 8|0;
 $ref$tmp10 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,104)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp,$this,1);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp)|0);
  if ($call2) {
   $0 = 1;
  } else {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   $lnot = $call3 ^ 1;
   $0 = $lnot;
  }
  $retval$0 = $0;
 } else {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,118)|0);
  if ($call4) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp6,$this,1);
   $call7 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp6)|0);
   if ($call7) {
    $1 = 1;
   } else {
    $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call8) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp10,$this,1);
     $call11 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp10)|0);
     if ($call11) {
      $$ph = 1;
     } else {
      $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      $lnot14 = $call13 ^ 1;
      $$ph = $lnot14;
     }
     $1 = $$ph;
    } else {
     $1 = 1;
    }
   }
   $retval$0 = $1;
  } else {
   $retval$0 = 1;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27486,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27357,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27339,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27317,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27297,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,27272,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($this,$FirstType_,$SecondType_) {
 $this = $this|0;
 $FirstType_ = $FirstType_|0;
 $SecondType_ = $SecondType_|0;
 var $FirstType = 0, $SecondType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,21,1,1,1);
 HEAP32[$this>>2] = (6832);
 $FirstType = ((($this)) + 8|0);
 HEAP32[$FirstType>>2] = $FirstType_;
 $SecondType = ((($this)) + 12|0);
 HEAP32[$SecondType>>2] = $SecondType_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $FirstType = 0, $SecondType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27398);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $FirstType = ((($this)) + 8|0);
 $0 = HEAP32[$FirstType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,27423);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $SecondType = ((($this)) + 12|0);
 $1 = HEAP32[$SecondType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this,$First_,$Last_) {
 $this = $this|0;
 $First_ = $First_|0;
 $Last_ = $Last_|0;
 var $ASTAllocator = 0, $ForwardTemplateRefs = 0, $Last = 0, $Names = 0, $ParsingLambdaParams = 0, $PermitForwardTemplateReferences = 0, $Subs = 0, $TemplateParams = 0, $TryToParseTemplateArgs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $First_;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $Last_;
 $Names = ((($this)) + 8|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($Names);
 $Subs = ((($this)) + 148|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($Subs);
 $TemplateParams = ((($this)) + 288|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($TemplateParams);
 $ForwardTemplateRefs = ((($this)) + 332|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($ForwardTemplateRefs);
 $TryToParseTemplateArgs = ((($this)) + 360|0);
 HEAP8[$TryToParseTemplateArgs>>0] = 1;
 $PermitForwardTemplateReferences = ((($this)) + 361|0);
 HEAP8[$PermitForwardTemplateReferences>>0] = 0;
 $ParsingLambdaParams = ((($this)) + 362|0);
 HEAP8[$ParsingLambdaParams>>0] = 0;
 $ASTAllocator = ((($this)) + 368|0);
 __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($ASTAllocator);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $Cap = ((($this)) + 8|0);
 $add$ptr = ((($this)) + 140|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $Cap = ((($this)) + 8|0);
 $add$ptr = ((($this)) + 28|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this);
 return;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this) {
 $this = $this|0;
 var $BlockList = 0, $Current = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $BlockList = ((($this)) + 4096|0);
 HEAP32[$this>>2] = 0;
 $Current = ((($this)) + 4|0);
 HEAP32[$Current>>2] = 0;
 HEAP32[$BlockList>>2] = $this;
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(31873);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 ___embind_register_native_and_builtin_types();
 STACKTOP = sp;return;
}
function ___embind_register_native_and_builtin_types() {
 var $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal6TypeIDIvvE3getEv()|0);
 __embind_register_void(($call|0),(27567|0));
 $call1 = (__ZN10emscripten8internal6TypeIDIbvE3getEv()|0);
 __embind_register_bool(($call1|0),(27572|0),1,1,0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc(27577);
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc(27582);
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc(27594);
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc(27608);
 __ZN12_GLOBAL__N_116register_integerItEEvPKc(27614);
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc(27629);
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc(27633);
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc(27646);
 __ZN12_GLOBAL__N_116register_integerImEEvPKc(27651);
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc(27665);
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc(27671);
 $call2 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv()|0);
 __embind_register_std_string(($call2|0),(27678|0));
 $call3 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv()|0);
 __embind_register_std_string(($call3|0),(27690|0));
 $call4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv()|0);
 __embind_register_std_wstring(($call4|0),4,(27723|0));
 $call5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEvE3getEv()|0);
 __embind_register_std_wstring(($call5|0),2,(27736|0));
 $call6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIDiNS2_11char_traitsIDiEENS2_9allocatorIDiEEEEvE3getEv()|0);
 __embind_register_std_wstring(($call6|0),4,(27751|0));
 $call7 = (__ZN10emscripten8internal6TypeIDINS_3valEvE3getEv()|0);
 __embind_register_emval(($call7|0),(27766|0));
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(27782);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(27812);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(27849);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(27888);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(27919);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(27959);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(27988);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(28026);
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(28056);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(28095);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(28127);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(28160);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(28193);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(28227);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(28260);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(28294);
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(28325);
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(28357);
 return;
}
function __ZN10emscripten8internal6TypeIDIvvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDIbvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIcvE3getEv()|0);
 $0 = $name$addr;
 $conv = -128 << 24 >> 24;
 $conv3 = 127 << 24 >> 24;
 __embind_register_integer(($call|0),($0|0),1,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIavE3getEv()|0);
 $0 = $name$addr;
 $conv = -128 << 24 >> 24;
 $conv3 = 127 << 24 >> 24;
 __embind_register_integer(($call|0),($0|0),1,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIhvE3getEv()|0);
 $0 = $name$addr;
 $conv = 0;
 $conv3 = 255;
 __embind_register_integer(($call|0),($0|0),1,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIsvE3getEv()|0);
 $0 = $name$addr;
 $conv = -32768 << 16 >> 16;
 $conv3 = 32767 << 16 >> 16;
 __embind_register_integer(($call|0),($0|0),2,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDItvE3getEv()|0);
 $0 = $name$addr;
 $conv = 0;
 $conv3 = 65535;
 __embind_register_integer(($call|0),($0|0),2,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIivE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIjvE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIlvE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDImvE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIfvE3getEv()|0);
 $0 = $name$addr;
 __embind_register_float(($call|0),($0|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIdvE3getEv()|0);
 $0 = $name$addr;
 __embind_register_float(($call|0),($0|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIDiNS2_11char_traitsIDiEENS2_9allocatorIDiEEEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIDiNS2_11char_traitsIDiEENS2_9allocatorIDiEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2960|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2968|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2976|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2984|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2992|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3000|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3008|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3016|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3024|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3032|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3040|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3048|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3056|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIDiNS2_11char_traitsIDiEENS2_9allocatorIDiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3064|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3096|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3120|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3144|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3168|0);
}
function __ZN10emscripten8internal6TypeIDIdvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1856|0);
}
function __ZN10emscripten8internal6TypeIDIfvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1848|0);
}
function __ZN10emscripten8internal6TypeIDImvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1840|0);
}
function __ZN10emscripten8internal6TypeIDIlvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1832|0);
}
function __ZN10emscripten8internal6TypeIDIjvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1824|0);
}
function __ZN10emscripten8internal6TypeIDIivE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1816|0);
}
function __ZN10emscripten8internal6TypeIDItvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1808|0);
}
function __ZN10emscripten8internal6TypeIDIsvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1800|0);
}
function __ZN10emscripten8internal6TypeIDIhvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1784|0);
}
function __ZN10emscripten8internal6TypeIDIavE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1792|0);
}
function __ZN10emscripten8internal6TypeIDIcvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1776|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1768|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1760|0);
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $__type_name$i = 0, $call1 = 0, $this$addr$i = 0, $this1$i = 0, $ti$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ti$addr = $ti;
 $0 = $ti$addr;
 $this$addr$i = $0;
 $this1$i = $this$addr$i;
 $__type_name$i = ((($this1$i)) + 4|0);
 $1 = HEAP32[$__type_name$i>>2]|0;
 $call1 = (___strdup($1)|0);
 STACKTOP = sp;return ($call1|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i184 = 0, $$pre$i187 = 0, $$pre$i47$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i185Z2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre14$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$011$i$i = 0, $K305$010$i$i = 0;
 var $K373$017$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i173 = 0, $R$1$i173$be = 0, $R$1$i173$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i177 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i172 = 0;
 var $RP$1$i172$be = 0, $RP$1$i172$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i50$i = 0, $T$010$i$i = 0, $T$016$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i148 = 0, $add$i188 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i16$i = 0, $add$ptr$i164 = 0, $add$ptr$i201 = 0, $add$ptr$i22$i = 0;
 var $add$ptr$i3$i$i = 0, $add$ptr$i51$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0, $add$ptr227$i = 0;
 var $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i57$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i61$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0;
 var $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i191 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0, $add22$i = 0;
 var $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0, $add62 = 0;
 var $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i145 = 0, $and$i17$i = 0;
 var $and$i23$i = 0, $and$i52$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1198$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i214 = 0, $and199$i = 0, $and209$i$i = 0;
 var $and21$i = 0, $and21$i151 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i26$i = 0, $and3$i55$i = 0, $and30$i = 0, $and318$i$i = 0, $and3187$i$i = 0, $and32$i = 0;
 var $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38714$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0, $and53 = 0;
 var $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i29$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and87$i$i = 0;
 var $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i152 = 0, $arrayidx$i39$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i162 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i174 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i158 = 0, $arrayidx96$i$i = 0, $bk = 0, $bk$i = 0, $bk$i$i = 0, $bk$i166 = 0, $bk$i37$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk136$i = 0, $bk139$i$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk43$i$i = 0, $bk432$i = 0, $bk47$i = 0, $bk55$i$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0;
 var $call275$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i14$i = 0, $cmp$i142 = 0, $cmp$i18$i = 0, $cmp$i186 = 0, $cmp$i24$i = 0, $cmp$i4$i$i = 0, $cmp$i53$i = 0, $cmp1 = 0;
 var $cmp1$i = 0, $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp107$i160 = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp112$i$i = 0, $cmp113 = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i44$i = 0;
 var $cmp1209$i$i = 0, $cmp121$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp130$i = 0, $cmp133$i = 0, $cmp133$i$i = 0, $cmp133$i204 = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp137$i$i = 0, $cmp137$i205 = 0, $cmp138$i = 0, $cmp139 = 0, $cmp140$i = 0;
 var $cmp141$i = 0, $cmp142$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp147103$i = 0, $cmp15 = 0, $cmp15$i = 0, $cmp150$i$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp153$i$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0, $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp159$i207 = 0, $cmp16 = 0;
 var $cmp160$i$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i208 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp171$i = 0, $cmp172$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp189$i$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp198$i = 0, $cmp2$i$i = 0;
 var $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp203$i = 0, $cmp205$i = 0, $cmp208$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp221$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp233$i = 0, $cmp236$i$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp250$i = 0;
 var $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp301$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3198$i$i = 0, $cmp32$i = 0, $cmp32$i192 = 0, $cmp323$i = 0;
 var $cmp327$i$i = 0, $cmp33$i = 0, $cmp332$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp346$i$i = 0, $cmp35$i = 0, $cmp350$i$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0, $cmp38$i$i = 0, $cmp388$i = 0, $cmp38815$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp401$i = 0, $cmp41$i$i = 0, $cmp418$i = 0;
 var $cmp42$i$i = 0, $cmp422$i = 0, $cmp43$i = 0, $cmp44$i$i = 0, $cmp45$i = 0, $cmp45$i157 = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp46$i40$i = 0, $cmp48$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp51$i = 0, $cmp54$i$i = 0, $cmp55$i = 0, $cmp55$i193 = 0, $cmp57$i = 0, $cmp57$i$i = 0, $cmp57$i194 = 0, $cmp59$i$i = 0;
 var $cmp60$i = 0, $cmp60$i$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp65$i = 0, $cmp66$i = 0, $cmp66$i197 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76 = 0, $cmp76$i = 0, $cmp79 = 0, $cmp81$i = 0, $cmp81$i$i = 0, $cmp81$i199 = 0, $cmp83$i$i = 0;
 var $cmp85$i = 0, $cmp86$i$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0, $cmp9718$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i20$i = 0, $cond$i27$i = 0, $cond$i56$i = 0;
 var $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond3$i = 0, $cond3$i$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond5$i = 0, $cond5$i179 = 0, $fd$i = 0, $fd$i$i = 0, $fd$i167 = 0, $fd103$i$i = 0, $fd123 = 0, $fd139$i = 0, $fd140$i$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0;
 var $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd50$i = 0, $fd54$i$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd78$i$i = 0, $fd85$i$i = 0, $fd9 = 0, $head = 0, $head$i = 0;
 var $head$i$i = 0, $head$i$i$i = 0, $head$i156 = 0, $head$i21$i = 0, $head$i33$i = 0, $head$i60$i = 0, $head118$i$i = 0, $head1187$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0, $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0;
 var $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0, $head3176$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38613$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i62$i = 0;
 var $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i178 = 0, $index$i45$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i180 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0;
 var $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i195 = 0, $or$cond1$i = 0, $or$cond101$i = 0, $or$cond102$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i198 = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0;
 var $or$cond8$not$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i203 = 0, $or$i59$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0, $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0;
 var $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0, $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0;
 var $parent$i = 0, $parent$i$i = 0, $parent$i165 = 0, $parent$i42$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0;
 var $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i154 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$420$i = 0, $rsize$420$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i146 = 0, $shl$i38$i = 0, $shl102 = 0;
 var $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0;
 var $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0, $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0;
 var $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i141 = 0, $shr$i36$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i149 = 0, $shr110$i$i = 0, $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i150 = 0, $shr19$i = 0, $shr194$i = 0;
 var $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0, $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0;
 var $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i144 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i147 = 0, $shr72$i = 0;
 var $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0, $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0;
 var $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0116$i = 0, $sp$1115$i = 0, $spec$select$i = 0, $spec$select$i159 = 0, $spec$select1$i = 0, $spec$select100$i = 0, $spec$select3$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, $ssize$2$ph$i = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i140 = 0, $sub$i189 = 0, $sub$i19$i = 0;
 var $sub$i25$i = 0, $sub$i54$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i30$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i31$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i32$i = 0, $sub10$i = 0, $sub101$i = 0, $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0;
 var $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0, $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0;
 var $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i58$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0, $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i153 = 0, $t$2$i = 0;
 var $t$4$i = 0, $t$519$i = 0, $t$519$i$ph = 0, $tbase$799$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0, $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2687886$i = 0, $tsize$4$i = 0, $tsize$798$i = 0, $v$0$i = 0, $v$0$i155 = 0;
 var $v$1$i = 0, $v$3$i = 0, $v$3$i222 = 0, $v$4$lcssa$i = 0, $v$421$i = 0, $v$421$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[7841]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (31404 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    do {
     if ($cmp10) {
      $shl12 = 1 << $add8;
      $neg13 = $shl12 ^ -1;
      $and14 = $0 & $neg13;
      HEAP32[7841] = $and14;
     } else {
      $4 = HEAP32[(31380)>>2]|0;
      $cmp15 = ($4>>>0)>($3>>>0);
      if ($cmp15) {
       _abort();
       // unreachable;
      }
      $bk = ((($3)) + 12|0);
      $5 = HEAP32[$bk>>2]|0;
      $cmp16 = ($5|0)==($2|0);
      if ($cmp16) {
       HEAP32[$bk>>2] = $arrayidx;
       HEAP32[$1>>2] = $3;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $6 = HEAP32[$head25>>2]|0;
    $or26 = $6 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $7 = HEAP32[(31372)>>2]|0;
   $cmp29 = ($cond>>>0)>($7>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (31404 + ($shl65<<2)|0);
     $8 = ((($arrayidx66)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $fd69 = ((($9)) + 8|0);
     $10 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($10|0)==($arrayidx66|0);
     do {
      if ($cmp70) {
       $shl72 = 1 << $add64;
       $neg73 = $shl72 ^ -1;
       $and74 = $0 & $neg73;
       HEAP32[7841] = $and74;
       $14 = $and74;
      } else {
       $11 = HEAP32[(31380)>>2]|0;
       $cmp76 = ($11>>>0)>($10>>>0);
       if ($cmp76) {
        _abort();
        // unreachable;
       }
       $bk78 = ((($10)) + 12|0);
       $12 = HEAP32[$bk78>>2]|0;
       $cmp79 = ($12|0)==($9|0);
       if ($cmp79) {
        HEAP32[$bk78>>2] = $arrayidx66;
        HEAP32[$8>>2] = $10;
        $14 = $0;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($9)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($9) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($9) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($7|0)==(0);
     if (!($cmp99)) {
      $13 = HEAP32[(31384)>>2]|0;
      $shr101 = $7 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (31404 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $14 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $14 | $shl105;
       HEAP32[7841] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $15 = ((($arrayidx103)) + 8|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[(31380)>>2]|0;
       $cmp113 = ($17>>>0)>($16>>>0);
       if ($cmp113) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $15;$F104$0 = $16;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $13;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $13;
      $fd123 = ((($13)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($13)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(31372)>>2] = $sub91;
     HEAP32[(31384)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $18 = HEAP32[(31368)>>2]|0;
    $cmp128 = ($18|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($18))|0;
     $and$i = $18 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (31668 + ($add20$i<<2)|0);
     $19 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($19)) + 4|0);
     $20 = HEAP32[$head$i>>2]|0;
     $and21$i = $20 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $19;$v$0$i = $19;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $21 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($21|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $22 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($22|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond5$i = $22;
       }
      } else {
       $cond5$i = $21;
      }
      $head29$i = ((($cond5$i)) + 4|0);
      $23 = HEAP32[$head29$i>>2]|0;
      $and30$i = $23 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond5$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond5$i;$v$0$i = $spec$select1$i;
     }
     $24 = HEAP32[(31380)>>2]|0;
     $cmp33$i = ($24>>>0)>($v$0$i>>>0);
     if ($cmp33$i) {
      _abort();
      // unreachable;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if (!($cmp35$i)) {
      _abort();
      // unreachable;
     }
     $parent$i = ((($v$0$i)) + 24|0);
     $25 = HEAP32[$parent$i>>2]|0;
     $bk$i = ((($v$0$i)) + 12|0);
     $26 = HEAP32[$bk$i>>2]|0;
     $cmp40$i = ($26|0)==($v$0$i|0);
     do {
      if ($cmp40$i) {
       $arrayidx61$i = ((($v$0$i)) + 20|0);
       $30 = HEAP32[$arrayidx61$i>>2]|0;
       $cmp62$i = ($30|0)==(0|0);
       if ($cmp62$i) {
        $arrayidx65$i = ((($v$0$i)) + 16|0);
        $31 = HEAP32[$arrayidx65$i>>2]|0;
        $cmp66$i = ($31|0)==(0|0);
        if ($cmp66$i) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i$ph = $31;$RP$1$i$ph = $arrayidx65$i;
        }
       } else {
        $R$1$i$ph = $30;$RP$1$i$ph = $arrayidx61$i;
       }
       $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
       while(1) {
        $arrayidx71$i = ((($R$1$i)) + 20|0);
        $32 = HEAP32[$arrayidx71$i>>2]|0;
        $cmp72$i = ($32|0)==(0|0);
        if ($cmp72$i) {
         $arrayidx75$i = ((($R$1$i)) + 16|0);
         $33 = HEAP32[$arrayidx75$i>>2]|0;
         $cmp76$i = ($33|0)==(0|0);
         if ($cmp76$i) {
          break;
         } else {
          $R$1$i$be = $33;$RP$1$i$be = $arrayidx75$i;
         }
        } else {
         $R$1$i$be = $32;$RP$1$i$be = $arrayidx71$i;
        }
        $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
       }
       $cmp81$i = ($24>>>0)>($RP$1$i>>>0);
       if ($cmp81$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
        break;
       }
      } else {
       $fd$i = ((($v$0$i)) + 8|0);
       $27 = HEAP32[$fd$i>>2]|0;
       $cmp45$i = ($24>>>0)>($27>>>0);
       if ($cmp45$i) {
        _abort();
        // unreachable;
       }
       $bk47$i = ((($27)) + 12|0);
       $28 = HEAP32[$bk47$i>>2]|0;
       $cmp48$i = ($28|0)==($v$0$i|0);
       if (!($cmp48$i)) {
        _abort();
        // unreachable;
       }
       $fd50$i = ((($26)) + 8|0);
       $29 = HEAP32[$fd50$i>>2]|0;
       $cmp51$i = ($29|0)==($v$0$i|0);
       if ($cmp51$i) {
        HEAP32[$bk47$i>>2] = $26;
        HEAP32[$fd50$i>>2] = $27;
        $R$3$i = $26;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $cmp90$i = ($25|0)==(0|0);
     L78: do {
      if (!($cmp90$i)) {
       $index$i = ((($v$0$i)) + 28|0);
       $34 = HEAP32[$index$i>>2]|0;
       $arrayidx94$i = (31668 + ($34<<2)|0);
       $35 = HEAP32[$arrayidx94$i>>2]|0;
       $cmp95$i = ($v$0$i|0)==($35|0);
       do {
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond3$i = ($R$3$i|0)==(0|0);
         if ($cond3$i) {
          $shl$i = 1 << $34;
          $neg$i = $shl$i ^ -1;
          $and103$i = $18 & $neg$i;
          HEAP32[(31368)>>2] = $and103$i;
          break L78;
         }
        } else {
         $36 = HEAP32[(31380)>>2]|0;
         $cmp107$i = ($36>>>0)>($25>>>0);
         if ($cmp107$i) {
          _abort();
          // unreachable;
         } else {
          $arrayidx113$i = ((($25)) + 16|0);
          $37 = HEAP32[$arrayidx113$i>>2]|0;
          $cmp114$i = ($37|0)==($v$0$i|0);
          $arrayidx121$i = ((($25)) + 20|0);
          $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
          HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
          $cmp126$i = ($R$3$i|0)==(0|0);
          if ($cmp126$i) {
           break L78;
          } else {
           break;
          }
         }
        }
       } while(0);
       $38 = HEAP32[(31380)>>2]|0;
       $cmp130$i = ($38>>>0)>($R$3$i>>>0);
       if ($cmp130$i) {
        _abort();
        // unreachable;
       }
       $parent135$i = ((($R$3$i)) + 24|0);
       HEAP32[$parent135$i>>2] = $25;
       $arrayidx137$i = ((($v$0$i)) + 16|0);
       $39 = HEAP32[$arrayidx137$i>>2]|0;
       $cmp138$i = ($39|0)==(0|0);
       do {
        if (!($cmp138$i)) {
         $cmp142$i = ($38>>>0)>($39>>>0);
         if ($cmp142$i) {
          _abort();
          // unreachable;
         } else {
          $arrayidx148$i = ((($R$3$i)) + 16|0);
          HEAP32[$arrayidx148$i>>2] = $39;
          $parent149$i = ((($39)) + 24|0);
          HEAP32[$parent149$i>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $arrayidx154$i = ((($v$0$i)) + 20|0);
       $40 = HEAP32[$arrayidx154$i>>2]|0;
       $cmp155$i = ($40|0)==(0|0);
       if (!($cmp155$i)) {
        $41 = HEAP32[(31380)>>2]|0;
        $cmp159$i = ($41>>>0)>($40>>>0);
        if ($cmp159$i) {
         _abort();
         // unreachable;
        } else {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $40;
         $parent166$i = ((($40)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $cmp174$i = ($rsize$0$i>>>0)<(16);
     if ($cmp174$i) {
      $add177$i = (($rsize$0$i) + ($cond))|0;
      $or178$i = $add177$i | 3;
      $head179$i = ((($v$0$i)) + 4|0);
      HEAP32[$head179$i>>2] = $or178$i;
      $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
      $head182$i = ((($add$ptr181$i)) + 4|0);
      $42 = HEAP32[$head182$i>>2]|0;
      $or183$i = $42 | 1;
      HEAP32[$head182$i>>2] = $or183$i;
     } else {
      $or186$i = $cond | 3;
      $head187$i = ((($v$0$i)) + 4|0);
      HEAP32[$head187$i>>2] = $or186$i;
      $or188$i = $rsize$0$i | 1;
      $head189$i = ((($add$ptr$i)) + 4|0);
      HEAP32[$head189$i>>2] = $or188$i;
      $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
      HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
      $cmp191$i = ($7|0)==(0);
      if (!($cmp191$i)) {
       $43 = HEAP32[(31384)>>2]|0;
       $shr194$i = $7 >>> 3;
       $shl195$i = $shr194$i << 1;
       $arrayidx196$i = (31404 + ($shl195$i<<2)|0);
       $shl198$i = 1 << $shr194$i;
       $and199$i = $shl198$i & $0;
       $tobool200$i = ($and199$i|0)==(0);
       if ($tobool200$i) {
        $or204$i = $shl198$i | $0;
        HEAP32[7841] = $or204$i;
        $$pre$i = ((($arrayidx196$i)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
       } else {
        $44 = ((($arrayidx196$i)) + 8|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = HEAP32[(31380)>>2]|0;
        $cmp208$i = ($46>>>0)>($45>>>0);
        if ($cmp208$i) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $44;$F197$0$i = $45;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $43;
       $bk218$i = ((($F197$0$i)) + 12|0);
       HEAP32[$bk218$i>>2] = $43;
       $fd219$i = ((($43)) + 8|0);
       HEAP32[$fd219$i>>2] = $F197$0$i;
       $bk220$i = ((($43)) + 12|0);
       HEAP32[$bk220$i>>2] = $arrayidx196$i;
      }
      HEAP32[(31372)>>2] = $rsize$0$i;
      HEAP32[(31384)>>2] = $add$ptr$i;
     }
     $add$ptr225$i = ((($v$0$i)) + 8|0);
     $retval$0 = $add$ptr225$i;
     STACKTOP = sp;return ($retval$0|0);
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $47 = HEAP32[(31368)>>2]|0;
    $cmp146 = ($47|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i140 = (0 - ($and145))|0;
     $shr$i141 = $add144 >>> 8;
     $cmp$i142 = ($shr$i141|0)==(0);
     if ($cmp$i142) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i141) + 1048320)|0;
       $shr5$i144 = $sub4$i >>> 16;
       $and$i145 = $shr5$i144 & 8;
       $shl$i146 = $shr$i141 << $and$i145;
       $sub6$i = (($shl$i146) + 520192)|0;
       $shr7$i147 = $sub6$i >>> 16;
       $and8$i = $shr7$i147 & 4;
       $add$i148 = $and8$i | $and$i145;
       $shl9$i = $shl$i146 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i149 = $sub10$i >>> 16;
       $and12$i = $shr11$i149 & 2;
       $add13$i = $add$i148 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i150 = $shl15$i >>> 15;
       $add17$i = (($sub14$i) + ($shr16$i150))|0;
       $shl18$i = $add17$i << 1;
       $add19$i = (($add17$i) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i151 = $shr20$i & 1;
       $add22$i = $and21$i151 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i152 = (31668 + ($idx$0$i<<2)|0);
     $48 = HEAP32[$arrayidx$i152>>2]|0;
     $cmp24$i = ($48|0)==(0|0);
     L122: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i140;$t$2$i = 0;$v$3$i = 0;
       label = 85;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i154 = $sub$i140;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i153 = $48;$v$0$i155 = 0;
       while(1) {
        $head$i156 = ((($t$0$i153)) + 4|0);
        $49 = HEAP32[$head$i156>>2]|0;
        $and32$i = $49 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i154>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$420$i$ph = 0;$t$519$i$ph = $t$0$i153;$v$421$i$ph = $t$0$i153;
          label = 89;
          break L122;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i153;
         }
        } else {
         $rsize$1$i = $rsize$0$i154;$v$1$i = $v$0$i155;
        }
        $arrayidx40$i = ((($t$0$i153)) + 20|0);
        $50 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i153)) + 16|0) + ($shr42$i<<2)|0);
        $51 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i157 = ($50|0)==(0|0);
        $cmp46$i = ($50|0)==($51|0);
        $or$cond2$i = $cmp45$i157 | $cmp46$i;
        $rst$1$i = $or$cond2$i ? $rst$0$i : $50;
        $cmp49$i = ($51|0)==(0|0);
        $spec$select7$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 85;
         break;
        } else {
         $rsize$0$i154 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select7$i;$t$0$i153 = $51;$v$0$i155 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      $cmp55$i = ($t$2$i|0)==(0|0);
      $cmp57$i = ($v$3$i|0)==(0|0);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i = $shl60$i | $sub63$i;
       $and64$i = $or$i & $47;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i158 = (31668 + ($add92$i<<2)|0);
       $52 = HEAP32[$arrayidx94$i158>>2]|0;
       $t$4$i = $52;$v$3$i222 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i222 = $v$3$i;
      }
      $cmp9718$i = ($t$4$i|0)==(0|0);
      if ($cmp9718$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i222;
      } else {
       $rsize$420$i$ph = $rsize$3$i;$t$519$i$ph = $t$4$i;$v$421$i$ph = $v$3$i222;
       label = 89;
      }
     }
     if ((label|0) == 89) {
      $rsize$420$i = $rsize$420$i$ph;$t$519$i = $t$519$i$ph;$v$421$i = $v$421$i$ph;
      while(1) {
       $head99$i = ((($t$519$i)) + 4|0);
       $53 = HEAP32[$head99$i>>2]|0;
       $and100$i = $53 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$420$i>>>0);
       $spec$select$i159 = $cmp102$i ? $sub101$i : $rsize$420$i;
       $spec$select3$i = $cmp102$i ? $t$519$i : $v$421$i;
       $arrayidx106$i = ((($t$519$i)) + 16|0);
       $54 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i160 = ($54|0)==(0|0);
       if ($cmp107$i160) {
        $arrayidx113$i162 = ((($t$519$i)) + 20|0);
        $55 = HEAP32[$arrayidx113$i162>>2]|0;
        $cond115$i = $55;
       } else {
        $cond115$i = $54;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i159;$v$4$lcssa$i = $spec$select3$i;
        break;
       } else {
        $rsize$420$i = $spec$select$i159;$t$519$i = $cond115$i;$v$421$i = $spec$select3$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $56 = HEAP32[(31372)>>2]|0;
      $sub118$i = (($56) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $57 = HEAP32[(31380)>>2]|0;
       $cmp121$i = ($57>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp121$i) {
        _abort();
        // unreachable;
       }
       $add$ptr$i164 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i164>>>0)>($v$4$lcssa$i>>>0);
       if (!($cmp123$i)) {
        _abort();
        // unreachable;
       }
       $parent$i165 = ((($v$4$lcssa$i)) + 24|0);
       $58 = HEAP32[$parent$i165>>2]|0;
       $bk$i166 = ((($v$4$lcssa$i)) + 12|0);
       $59 = HEAP32[$bk$i166>>2]|0;
       $cmp128$i = ($59|0)==($v$4$lcssa$i|0);
       do {
        if ($cmp128$i) {
         $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
         $63 = HEAP32[$arrayidx151$i>>2]|0;
         $cmp152$i = ($63|0)==(0|0);
         if ($cmp152$i) {
          $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
          $64 = HEAP32[$arrayidx155$i>>2]|0;
          $cmp156$i = ($64|0)==(0|0);
          if ($cmp156$i) {
           $R$3$i177 = 0;
           break;
          } else {
           $R$1$i173$ph = $64;$RP$1$i172$ph = $arrayidx155$i;
          }
         } else {
          $R$1$i173$ph = $63;$RP$1$i172$ph = $arrayidx151$i;
         }
         $R$1$i173 = $R$1$i173$ph;$RP$1$i172 = $RP$1$i172$ph;
         while(1) {
          $arrayidx161$i = ((($R$1$i173)) + 20|0);
          $65 = HEAP32[$arrayidx161$i>>2]|0;
          $cmp162$i = ($65|0)==(0|0);
          if ($cmp162$i) {
           $arrayidx165$i174 = ((($R$1$i173)) + 16|0);
           $66 = HEAP32[$arrayidx165$i174>>2]|0;
           $cmp166$i = ($66|0)==(0|0);
           if ($cmp166$i) {
            break;
           } else {
            $R$1$i173$be = $66;$RP$1$i172$be = $arrayidx165$i174;
           }
          } else {
           $R$1$i173$be = $65;$RP$1$i172$be = $arrayidx161$i;
          }
          $R$1$i173 = $R$1$i173$be;$RP$1$i172 = $RP$1$i172$be;
         }
         $cmp171$i = ($57>>>0)>($RP$1$i172>>>0);
         if ($cmp171$i) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i172>>2] = 0;
          $R$3$i177 = $R$1$i173;
          break;
         }
        } else {
         $fd$i167 = ((($v$4$lcssa$i)) + 8|0);
         $60 = HEAP32[$fd$i167>>2]|0;
         $cmp133$i = ($57>>>0)>($60>>>0);
         if ($cmp133$i) {
          _abort();
          // unreachable;
         }
         $bk136$i = ((($60)) + 12|0);
         $61 = HEAP32[$bk136$i>>2]|0;
         $cmp137$i = ($61|0)==($v$4$lcssa$i|0);
         if (!($cmp137$i)) {
          _abort();
          // unreachable;
         }
         $fd139$i = ((($59)) + 8|0);
         $62 = HEAP32[$fd139$i>>2]|0;
         $cmp140$i = ($62|0)==($v$4$lcssa$i|0);
         if ($cmp140$i) {
          HEAP32[$bk136$i>>2] = $59;
          HEAP32[$fd139$i>>2] = $60;
          $R$3$i177 = $59;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $cmp180$i = ($58|0)==(0|0);
       L176: do {
        if ($cmp180$i) {
         $80 = $47;
        } else {
         $index$i178 = ((($v$4$lcssa$i)) + 28|0);
         $67 = HEAP32[$index$i178>>2]|0;
         $arrayidx184$i = (31668 + ($67<<2)|0);
         $68 = HEAP32[$arrayidx184$i>>2]|0;
         $cmp185$i = ($v$4$lcssa$i|0)==($68|0);
         do {
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i177;
           $cond5$i179 = ($R$3$i177|0)==(0|0);
           if ($cond5$i179) {
            $shl192$i = 1 << $67;
            $neg$i180 = $shl192$i ^ -1;
            $and194$i = $47 & $neg$i180;
            HEAP32[(31368)>>2] = $and194$i;
            $80 = $and194$i;
            break L176;
           }
          } else {
           $69 = HEAP32[(31380)>>2]|0;
           $cmp198$i = ($69>>>0)>($58>>>0);
           if ($cmp198$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx204$i = ((($58)) + 16|0);
            $70 = HEAP32[$arrayidx204$i>>2]|0;
            $cmp205$i = ($70|0)==($v$4$lcssa$i|0);
            $arrayidx212$i = ((($58)) + 20|0);
            $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
            HEAP32[$arrayidx212$i$sink>>2] = $R$3$i177;
            $cmp217$i = ($R$3$i177|0)==(0|0);
            if ($cmp217$i) {
             $80 = $47;
             break L176;
            } else {
             break;
            }
           }
          }
         } while(0);
         $71 = HEAP32[(31380)>>2]|0;
         $cmp221$i = ($71>>>0)>($R$3$i177>>>0);
         if ($cmp221$i) {
          _abort();
          // unreachable;
         }
         $parent226$i = ((($R$3$i177)) + 24|0);
         HEAP32[$parent226$i>>2] = $58;
         $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
         $72 = HEAP32[$arrayidx228$i>>2]|0;
         $cmp229$i = ($72|0)==(0|0);
         do {
          if (!($cmp229$i)) {
           $cmp233$i = ($71>>>0)>($72>>>0);
           if ($cmp233$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx239$i = ((($R$3$i177)) + 16|0);
            HEAP32[$arrayidx239$i>>2] = $72;
            $parent240$i = ((($72)) + 24|0);
            HEAP32[$parent240$i>>2] = $R$3$i177;
            break;
           }
          }
         } while(0);
         $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
         $73 = HEAP32[$arrayidx245$i>>2]|0;
         $cmp246$i = ($73|0)==(0|0);
         if ($cmp246$i) {
          $80 = $47;
         } else {
          $74 = HEAP32[(31380)>>2]|0;
          $cmp250$i = ($74>>>0)>($73>>>0);
          if ($cmp250$i) {
           _abort();
           // unreachable;
          } else {
           $arrayidx256$i = ((($R$3$i177)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $73;
           $parent257$i = ((($73)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i177;
           $80 = $47;
           break;
          }
         }
        }
       } while(0);
       $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
       L200: do {
        if ($cmp265$i) {
         $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
         $or270$i = $add268$i | 3;
         $head271$i = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$head271$i>>2] = $or270$i;
         $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
         $head274$i = ((($add$ptr273$i)) + 4|0);
         $75 = HEAP32[$head274$i>>2]|0;
         $or275$i = $75 | 1;
         HEAP32[$head274$i>>2] = $or275$i;
        } else {
         $or278$i = $and145 | 3;
         $head279$i = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$head279$i>>2] = $or278$i;
         $or280$i = $rsize$4$lcssa$i | 1;
         $head281$i = ((($add$ptr$i164)) + 4|0);
         HEAP32[$head281$i>>2] = $or280$i;
         $add$ptr282$i = (($add$ptr$i164) + ($rsize$4$lcssa$i)|0);
         HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
         $shr283$i = $rsize$4$lcssa$i >>> 3;
         $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
         if ($cmp284$i) {
          $shl288$i = $shr283$i << 1;
          $arrayidx289$i = (31404 + ($shl288$i<<2)|0);
          $76 = HEAP32[7841]|0;
          $shl291$i = 1 << $shr283$i;
          $and292$i = $76 & $shl291$i;
          $tobool293$i = ($and292$i|0)==(0);
          if ($tobool293$i) {
           $or297$i = $76 | $shl291$i;
           HEAP32[7841] = $or297$i;
           $$pre$i184 = ((($arrayidx289$i)) + 8|0);
           $$pre$phi$i185Z2D = $$pre$i184;$F290$0$i = $arrayidx289$i;
          } else {
           $77 = ((($arrayidx289$i)) + 8|0);
           $78 = HEAP32[$77>>2]|0;
           $79 = HEAP32[(31380)>>2]|0;
           $cmp301$i = ($79>>>0)>($78>>>0);
           if ($cmp301$i) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i185Z2D = $77;$F290$0$i = $78;
           }
          }
          HEAP32[$$pre$phi$i185Z2D>>2] = $add$ptr$i164;
          $bk311$i = ((($F290$0$i)) + 12|0);
          HEAP32[$bk311$i>>2] = $add$ptr$i164;
          $fd312$i = ((($add$ptr$i164)) + 8|0);
          HEAP32[$fd312$i>>2] = $F290$0$i;
          $bk313$i = ((($add$ptr$i164)) + 12|0);
          HEAP32[$bk313$i>>2] = $arrayidx289$i;
          break;
         }
         $shr318$i = $rsize$4$lcssa$i >>> 8;
         $cmp319$i = ($shr318$i|0)==(0);
         if ($cmp319$i) {
          $I316$0$i = 0;
         } else {
          $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($cmp323$i) {
           $I316$0$i = 31;
          } else {
           $sub329$i = (($shr318$i) + 1048320)|0;
           $shr330$i = $sub329$i >>> 16;
           $and331$i = $shr330$i & 8;
           $shl333$i = $shr318$i << $and331$i;
           $sub334$i = (($shl333$i) + 520192)|0;
           $shr335$i = $sub334$i >>> 16;
           $and336$i = $shr335$i & 4;
           $add337$i = $and336$i | $and331$i;
           $shl338$i = $shl333$i << $and336$i;
           $sub339$i = (($shl338$i) + 245760)|0;
           $shr340$i = $sub339$i >>> 16;
           $and341$i = $shr340$i & 2;
           $add342$i = $add337$i | $and341$i;
           $sub343$i = (14 - ($add342$i))|0;
           $shl344$i = $shl338$i << $and341$i;
           $shr345$i = $shl344$i >>> 15;
           $add346$i = (($sub343$i) + ($shr345$i))|0;
           $shl347$i = $add346$i << 1;
           $add348$i = (($add346$i) + 7)|0;
           $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
           $and350$i = $shr349$i & 1;
           $add351$i = $and350$i | $shl347$i;
           $I316$0$i = $add351$i;
          }
         }
         $arrayidx355$i = (31668 + ($I316$0$i<<2)|0);
         $index356$i = ((($add$ptr$i164)) + 28|0);
         HEAP32[$index356$i>>2] = $I316$0$i;
         $child357$i = ((($add$ptr$i164)) + 16|0);
         $arrayidx358$i = ((($child357$i)) + 4|0);
         HEAP32[$arrayidx358$i>>2] = 0;
         HEAP32[$child357$i>>2] = 0;
         $shl362$i = 1 << $I316$0$i;
         $and363$i = $80 & $shl362$i;
         $tobool364$i = ($and363$i|0)==(0);
         if ($tobool364$i) {
          $or368$i = $80 | $shl362$i;
          HEAP32[(31368)>>2] = $or368$i;
          HEAP32[$arrayidx355$i>>2] = $add$ptr$i164;
          $parent369$i = ((($add$ptr$i164)) + 24|0);
          HEAP32[$parent369$i>>2] = $arrayidx355$i;
          $bk370$i = ((($add$ptr$i164)) + 12|0);
          HEAP32[$bk370$i>>2] = $add$ptr$i164;
          $fd371$i = ((($add$ptr$i164)) + 8|0);
          HEAP32[$fd371$i>>2] = $add$ptr$i164;
          break;
         }
         $81 = HEAP32[$arrayidx355$i>>2]|0;
         $head38613$i = ((($81)) + 4|0);
         $82 = HEAP32[$head38613$i>>2]|0;
         $and38714$i = $82 & -8;
         $cmp38815$i = ($and38714$i|0)==($rsize$4$lcssa$i|0);
         L218: do {
          if ($cmp38815$i) {
           $T$0$lcssa$i = $81;
          } else {
           $cmp374$i = ($I316$0$i|0)==(31);
           $shr378$i = $I316$0$i >>> 1;
           $sub381$i = (25 - ($shr378$i))|0;
           $cond383$i = $cmp374$i ? 0 : $sub381$i;
           $shl384$i = $rsize$4$lcssa$i << $cond383$i;
           $K373$017$i = $shl384$i;$T$016$i = $81;
           while(1) {
            $shr392$i = $K373$017$i >>> 31;
            $arrayidx394$i = (((($T$016$i)) + 16|0) + ($shr392$i<<2)|0);
            $83 = HEAP32[$arrayidx394$i>>2]|0;
            $cmp396$i = ($83|0)==(0|0);
            if ($cmp396$i) {
             break;
            }
            $shl395$i = $K373$017$i << 1;
            $head386$i = ((($83)) + 4|0);
            $84 = HEAP32[$head386$i>>2]|0;
            $and387$i = $84 & -8;
            $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
            if ($cmp388$i) {
             $T$0$lcssa$i = $83;
             break L218;
            } else {
             $K373$017$i = $shl395$i;$T$016$i = $83;
            }
           }
           $85 = HEAP32[(31380)>>2]|0;
           $cmp401$i = ($85>>>0)>($arrayidx394$i>>>0);
           if ($cmp401$i) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i164;
            $parent406$i = ((($add$ptr$i164)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$016$i;
            $bk407$i = ((($add$ptr$i164)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i164;
            $fd408$i = ((($add$ptr$i164)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i164;
            break L200;
           }
          }
         } while(0);
         $fd416$i = ((($T$0$lcssa$i)) + 8|0);
         $86 = HEAP32[$fd416$i>>2]|0;
         $87 = HEAP32[(31380)>>2]|0;
         $cmp418$i = ($87>>>0)<=($T$0$lcssa$i>>>0);
         $cmp422$i = ($87>>>0)<=($86>>>0);
         $88 = $cmp422$i & $cmp418$i;
         if ($88) {
          $bk429$i = ((($86)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i164;
          HEAP32[$fd416$i>>2] = $add$ptr$i164;
          $fd431$i = ((($add$ptr$i164)) + 8|0);
          HEAP32[$fd431$i>>2] = $86;
          $bk432$i = ((($add$ptr$i164)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i164)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
       $retval$0 = $add$ptr441$i;
       STACKTOP = sp;return ($retval$0|0);
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $89 = HEAP32[(31372)>>2]|0;
 $cmp156 = ($89>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($89) - ($nb$0))|0;
  $90 = HEAP32[(31384)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($90) + ($nb$0)|0);
   HEAP32[(31384)>>2] = $add$ptr166;
   HEAP32[(31372)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($90) + ($89)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($90)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(31372)>>2] = 0;
   HEAP32[(31384)>>2] = 0;
   $or176 = $89 | 3;
   $head177 = ((($90)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($90) + ($89)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $91 = HEAP32[$head179>>2]|0;
   $or180 = $91 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($90)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $92 = HEAP32[(31376)>>2]|0;
 $cmp186 = ($92>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($92) - ($nb$0))|0;
  HEAP32[(31376)>>2] = $sub190;
  $93 = HEAP32[(31388)>>2]|0;
  $add$ptr193 = (($93) + ($nb$0)|0);
  HEAP32[(31388)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($93)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($93)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $94 = HEAP32[7959]|0;
 $cmp$i186 = ($94|0)==(0);
 if ($cmp$i186) {
  HEAP32[(31844)>>2] = 4096;
  HEAP32[(31840)>>2] = 4096;
  HEAP32[(31848)>>2] = -1;
  HEAP32[(31852)>>2] = -1;
  HEAP32[(31856)>>2] = 0;
  HEAP32[(31808)>>2] = 0;
  $95 = $magic$i$i;
  $xor$i$i = $95 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[7959] = $and6$i$i;
  $96 = 4096;
 } else {
  $$pre$i187 = HEAP32[(31844)>>2]|0;
  $96 = $$pre$i187;
 }
 $add$i188 = (($nb$0) + 48)|0;
 $sub$i189 = (($nb$0) + 47)|0;
 $add9$i = (($96) + ($sub$i189))|0;
 $neg$i190 = (0 - ($96))|0;
 $and11$i = $add9$i & $neg$i190;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $97 = HEAP32[(31804)>>2]|0;
 $cmp15$i = ($97|0)==(0);
 if (!($cmp15$i)) {
  $98 = HEAP32[(31796)>>2]|0;
  $add17$i191 = (($98) + ($and11$i))|0;
  $cmp19$i = ($add17$i191>>>0)<=($98>>>0);
  $cmp21$i = ($add17$i191>>>0)>($97>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $99 = HEAP32[(31808)>>2]|0;
 $and29$i = $99 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L257: do {
  if ($tobool30$i) {
   $100 = HEAP32[(31388)>>2]|0;
   $cmp32$i192 = ($100|0)==(0|0);
   L259: do {
    if ($cmp32$i192) {
     label = 173;
    } else {
     $sp$0$i$i = (31812);
     while(1) {
      $101 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i14$i = ($101>>>0)>($100>>>0);
      if (!($cmp$i14$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $102 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i$i = (($101) + ($102)|0);
       $cmp2$i$i = ($add$ptr$i$i>>>0)>($100>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $103 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($103|0)==(0|0);
      if ($cmp3$i$i) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $103;
      }
     }
     $add77$i = (($add9$i) - ($92))|0;
     $and80$i = $add77$i & $neg$i190;
     $cmp81$i199 = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i199) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk($and80$i)|0);
      $108 = HEAP32[$sp$0$i$i>>2]|0;
      $109 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i201 = (($108) + ($109)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i201|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2687886$i = $and80$i;
       } else {
        $tbase$799$i = $call83$i;$tsize$798$i = $and80$i;
        label = 190;
        break L257;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 181;
      }
     } else {
      $tsize$2687886$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2687886$i = 0;
     } else {
      $104 = $call37$i;
      $105 = HEAP32[(31840)>>2]|0;
      $sub41$i = (($105) + -1)|0;
      $and42$i = $sub41$i & $104;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($104))|0;
      $neg48$i = (0 - ($105))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($104))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select100$i = (($add51$i) + ($and11$i))|0;
      $106 = HEAP32[(31796)>>2]|0;
      $add54$i = (($spec$select100$i) + ($106))|0;
      $cmp55$i193 = ($spec$select100$i>>>0)>($nb$0>>>0);
      $cmp57$i194 = ($spec$select100$i>>>0)<(2147483647);
      $or$cond$i195 = $cmp55$i193 & $cmp57$i194;
      if ($or$cond$i195) {
       $107 = HEAP32[(31804)>>2]|0;
       $cmp60$i = ($107|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($106>>>0);
        $cmp66$i197 = ($add54$i>>>0)>($107>>>0);
        $or$cond2$i198 = $cmp63$i | $cmp66$i197;
        if ($or$cond2$i198) {
         $tsize$2687886$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk($spec$select100$i)|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$799$i = $call37$i;$tsize$798$i = $spec$select100$i;
        label = 190;
        break L257;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select100$i;
        label = 181;
       }
      } else {
       $tsize$2687886$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i188>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2687886$i = 0;
       break;
      } else {
       $tbase$799$i = $br$2$ph$i;$tsize$798$i = $ssize$2$ph$i;
       label = 190;
       break L257;
      }
     }
     $110 = HEAP32[(31844)>>2]|0;
     $sub99$i = (($sub$i189) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($110))|0;
     $neg103$i = (0 - ($110))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$799$i = $br$2$ph$i;$tsize$798$i = $ssize$2$ph$i;
      label = 190;
      break L257;
     }
     $call107$i = (_sbrk($and104$i)|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk($sub112$i)|0);
      $tsize$2687886$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$799$i = $br$2$ph$i;$tsize$798$i = $add110$i;
      label = 190;
      break L257;
     }
    }
   } while(0);
   $111 = HEAP32[(31808)>>2]|0;
   $or$i203 = $111 | 4;
   HEAP32[(31808)>>2] = $or$i203;
   $tsize$4$i = $tsize$2687886$i;
   label = 188;
  } else {
   $tsize$4$i = 0;
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk($and11$i)|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i204 = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i204 & $cmp135$i;
   $cmp137$i205 = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i205 & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp147103$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp147103$i | $not$cmp141$i;
   $or$cond101$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond101$i)) {
    $tbase$799$i = $call131$i;$tsize$798$i = $spec$select9$i;
    label = 190;
   }
  }
 }
 if ((label|0) == 190) {
  $112 = HEAP32[(31796)>>2]|0;
  $add150$i = (($112) + ($tsize$798$i))|0;
  HEAP32[(31796)>>2] = $add150$i;
  $113 = HEAP32[(31800)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($113>>>0);
  if ($cmp151$i) {
   HEAP32[(31800)>>2] = $add150$i;
  }
  $114 = HEAP32[(31388)>>2]|0;
  $cmp157$i = ($114|0)==(0|0);
  L294: do {
   if ($cmp157$i) {
    $115 = HEAP32[(31380)>>2]|0;
    $cmp159$i207 = ($115|0)==(0|0);
    $cmp162$i208 = ($tbase$799$i>>>0)<($115>>>0);
    $or$cond11$i = $cmp159$i207 | $cmp162$i208;
    if ($or$cond11$i) {
     HEAP32[(31380)>>2] = $tbase$799$i;
    }
    HEAP32[(31812)>>2] = $tbase$799$i;
    HEAP32[(31816)>>2] = $tsize$798$i;
    HEAP32[(31824)>>2] = 0;
    $116 = HEAP32[7959]|0;
    HEAP32[(31400)>>2] = $116;
    HEAP32[(31396)>>2] = -1;
    HEAP32[(31416)>>2] = (31404);
    HEAP32[(31412)>>2] = (31404);
    HEAP32[(31424)>>2] = (31412);
    HEAP32[(31420)>>2] = (31412);
    HEAP32[(31432)>>2] = (31420);
    HEAP32[(31428)>>2] = (31420);
    HEAP32[(31440)>>2] = (31428);
    HEAP32[(31436)>>2] = (31428);
    HEAP32[(31448)>>2] = (31436);
    HEAP32[(31444)>>2] = (31436);
    HEAP32[(31456)>>2] = (31444);
    HEAP32[(31452)>>2] = (31444);
    HEAP32[(31464)>>2] = (31452);
    HEAP32[(31460)>>2] = (31452);
    HEAP32[(31472)>>2] = (31460);
    HEAP32[(31468)>>2] = (31460);
    HEAP32[(31480)>>2] = (31468);
    HEAP32[(31476)>>2] = (31468);
    HEAP32[(31488)>>2] = (31476);
    HEAP32[(31484)>>2] = (31476);
    HEAP32[(31496)>>2] = (31484);
    HEAP32[(31492)>>2] = (31484);
    HEAP32[(31504)>>2] = (31492);
    HEAP32[(31500)>>2] = (31492);
    HEAP32[(31512)>>2] = (31500);
    HEAP32[(31508)>>2] = (31500);
    HEAP32[(31520)>>2] = (31508);
    HEAP32[(31516)>>2] = (31508);
    HEAP32[(31528)>>2] = (31516);
    HEAP32[(31524)>>2] = (31516);
    HEAP32[(31536)>>2] = (31524);
    HEAP32[(31532)>>2] = (31524);
    HEAP32[(31544)>>2] = (31532);
    HEAP32[(31540)>>2] = (31532);
    HEAP32[(31552)>>2] = (31540);
    HEAP32[(31548)>>2] = (31540);
    HEAP32[(31560)>>2] = (31548);
    HEAP32[(31556)>>2] = (31548);
    HEAP32[(31568)>>2] = (31556);
    HEAP32[(31564)>>2] = (31556);
    HEAP32[(31576)>>2] = (31564);
    HEAP32[(31572)>>2] = (31564);
    HEAP32[(31584)>>2] = (31572);
    HEAP32[(31580)>>2] = (31572);
    HEAP32[(31592)>>2] = (31580);
    HEAP32[(31588)>>2] = (31580);
    HEAP32[(31600)>>2] = (31588);
    HEAP32[(31596)>>2] = (31588);
    HEAP32[(31608)>>2] = (31596);
    HEAP32[(31604)>>2] = (31596);
    HEAP32[(31616)>>2] = (31604);
    HEAP32[(31612)>>2] = (31604);
    HEAP32[(31624)>>2] = (31612);
    HEAP32[(31620)>>2] = (31612);
    HEAP32[(31632)>>2] = (31620);
    HEAP32[(31628)>>2] = (31620);
    HEAP32[(31640)>>2] = (31628);
    HEAP32[(31636)>>2] = (31628);
    HEAP32[(31648)>>2] = (31636);
    HEAP32[(31644)>>2] = (31636);
    HEAP32[(31656)>>2] = (31644);
    HEAP32[(31652)>>2] = (31644);
    HEAP32[(31664)>>2] = (31652);
    HEAP32[(31660)>>2] = (31652);
    $sub172$i = (($tsize$798$i) + -40)|0;
    $add$ptr$i16$i = ((($tbase$799$i)) + 8|0);
    $117 = $add$ptr$i16$i;
    $and$i17$i = $117 & 7;
    $cmp$i18$i = ($and$i17$i|0)==(0);
    $sub$i19$i = (0 - ($117))|0;
    $and3$i$i = $sub$i19$i & 7;
    $cond$i20$i = $cmp$i18$i ? 0 : $and3$i$i;
    $add$ptr4$i$i = (($tbase$799$i) + ($cond$i20$i)|0);
    $sub5$i$i = (($sub172$i) - ($cond$i20$i))|0;
    HEAP32[(31388)>>2] = $add$ptr4$i$i;
    HEAP32[(31376)>>2] = $sub5$i$i;
    $or$i$i = $sub5$i$i | 1;
    $head$i21$i = ((($add$ptr4$i$i)) + 4|0);
    HEAP32[$head$i21$i>>2] = $or$i$i;
    $add$ptr6$i$i = (($tbase$799$i) + ($sub172$i)|0);
    $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
    HEAP32[$head7$i$i>>2] = 40;
    $118 = HEAP32[(31852)>>2]|0;
    HEAP32[(31392)>>2] = $118;
   } else {
    $sp$0116$i = (31812);
    while(1) {
     $119 = HEAP32[$sp$0116$i>>2]|0;
     $size188$i = ((($sp$0116$i)) + 4|0);
     $120 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($119) + ($120)|0);
     $cmp190$i = ($tbase$799$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 199;
      break;
     }
     $next$i = ((($sp$0116$i)) + 8|0);
     $121 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($121|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0116$i = $121;
     }
    }
    if ((label|0) == 199) {
     $size188$i$le = ((($sp$0116$i)) + 4|0);
     $sflags193$i = ((($sp$0116$i)) + 12|0);
     $122 = HEAP32[$sflags193$i>>2]|0;
     $and194$i214 = $122 & 8;
     $tobool195$i = ($and194$i214|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($119>>>0)<=($114>>>0);
      $cmp209$i = ($tbase$799$i>>>0)>($114>>>0);
      $or$cond102$i = $cmp209$i & $cmp203$i;
      if ($or$cond102$i) {
       $add212$i = (($120) + ($tsize$798$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $123 = HEAP32[(31376)>>2]|0;
       $add215$i = (($123) + ($tsize$798$i))|0;
       $add$ptr$i51$i = ((($114)) + 8|0);
       $124 = $add$ptr$i51$i;
       $and$i52$i = $124 & 7;
       $cmp$i53$i = ($and$i52$i|0)==(0);
       $sub$i54$i = (0 - ($124))|0;
       $and3$i55$i = $sub$i54$i & 7;
       $cond$i56$i = $cmp$i53$i ? 0 : $and3$i55$i;
       $add$ptr4$i57$i = (($114) + ($cond$i56$i)|0);
       $sub5$i58$i = (($add215$i) - ($cond$i56$i))|0;
       HEAP32[(31388)>>2] = $add$ptr4$i57$i;
       HEAP32[(31376)>>2] = $sub5$i58$i;
       $or$i59$i = $sub5$i58$i | 1;
       $head$i60$i = ((($add$ptr4$i57$i)) + 4|0);
       HEAP32[$head$i60$i>>2] = $or$i59$i;
       $add$ptr6$i61$i = (($114) + ($add215$i)|0);
       $head7$i62$i = ((($add$ptr6$i61$i)) + 4|0);
       HEAP32[$head7$i62$i>>2] = 40;
       $125 = HEAP32[(31852)>>2]|0;
       HEAP32[(31392)>>2] = $125;
       break;
      }
     }
    }
    $126 = HEAP32[(31380)>>2]|0;
    $cmp218$i = ($tbase$799$i>>>0)<($126>>>0);
    if ($cmp218$i) {
     HEAP32[(31380)>>2] = $tbase$799$i;
     $139 = $tbase$799$i;
    } else {
     $139 = $126;
    }
    $add$ptr227$i = (($tbase$799$i) + ($tsize$798$i)|0);
    $sp$1115$i = (31812);
    while(1) {
     $127 = HEAP32[$sp$1115$i>>2]|0;
     $cmp228$i = ($127|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 207;
      break;
     }
     $next231$i = ((($sp$1115$i)) + 8|0);
     $128 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($128|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1115$i = $128;
     }
    }
    if ((label|0) == 207) {
     $sflags235$i = ((($sp$1115$i)) + 12|0);
     $129 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $129 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1115$i>>2] = $tbase$799$i;
      $size245$i = ((($sp$1115$i)) + 4|0);
      $130 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($130) + ($tsize$798$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i22$i = ((($tbase$799$i)) + 8|0);
      $131 = $add$ptr$i22$i;
      $and$i23$i = $131 & 7;
      $cmp$i24$i = ($and$i23$i|0)==(0);
      $sub$i25$i = (0 - ($131))|0;
      $and3$i26$i = $sub$i25$i & 7;
      $cond$i27$i = $cmp$i24$i ? 0 : $and3$i26$i;
      $add$ptr4$i28$i = (($tbase$799$i) + ($cond$i27$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $132 = $add$ptr5$i$i;
      $and6$i29$i = $132 & 7;
      $cmp7$i$i = ($and6$i29$i|0)==(0);
      $sub12$i$i = (0 - ($132))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i30$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i31$i = $add$ptr4$i28$i;
      $sub$ptr$sub$i32$i = (($sub$ptr$lhs$cast$i30$i) - ($sub$ptr$rhs$cast$i31$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i28$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i32$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i33$i = ((($add$ptr4$i28$i)) + 4|0);
      HEAP32[$head$i33$i>>2] = $or19$i$i;
      $cmp20$i$i = ($114|0)==($add$ptr16$i$i|0);
      L317: do {
       if ($cmp20$i$i) {
        $133 = HEAP32[(31376)>>2]|0;
        $add$i$i = (($133) + ($sub18$i$i))|0;
        HEAP32[(31376)>>2] = $add$i$i;
        HEAP32[(31388)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $134 = HEAP32[(31384)>>2]|0;
        $cmp24$i$i = ($134|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $135 = HEAP32[(31372)>>2]|0;
         $add26$i$i = (($135) + ($sub18$i$i))|0;
         HEAP32[(31372)>>2] = $add26$i$i;
         HEAP32[(31384)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $136 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $136 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $136 & -8;
         $shr$i36$i = $136 >>> 3;
         $cmp38$i$i = ($136>>>0)<(256);
         L325: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $137 = HEAP32[$fd$i$i>>2]|0;
           $bk$i37$i = ((($add$ptr16$i$i)) + 12|0);
           $138 = HEAP32[$bk$i37$i>>2]|0;
           $shl$i38$i = $shr$i36$i << 1;
           $arrayidx$i39$i = (31404 + ($shl$i38$i<<2)|0);
           $cmp41$i$i = ($137|0)==($arrayidx$i39$i|0);
           do {
            if (!($cmp41$i$i)) {
             $cmp42$i$i = ($139>>>0)>($137>>>0);
             if ($cmp42$i$i) {
              _abort();
              // unreachable;
             }
             $bk43$i$i = ((($137)) + 12|0);
             $140 = HEAP32[$bk43$i$i>>2]|0;
             $cmp44$i$i = ($140|0)==($add$ptr16$i$i|0);
             if ($cmp44$i$i) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $cmp46$i40$i = ($138|0)==($137|0);
           if ($cmp46$i40$i) {
            $shl48$i$i = 1 << $shr$i36$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $141 = HEAP32[7841]|0;
            $and49$i$i = $141 & $neg$i$i;
            HEAP32[7841] = $and49$i$i;
            break;
           }
           $cmp54$i$i = ($138|0)==($arrayidx$i39$i|0);
           do {
            if ($cmp54$i$i) {
             $$pre14$i$i = ((($138)) + 8|0);
             $fd68$pre$phi$i$iZ2D = $$pre14$i$i;
            } else {
             $cmp57$i$i = ($139>>>0)>($138>>>0);
             if ($cmp57$i$i) {
              _abort();
              // unreachable;
             }
             $fd59$i$i = ((($138)) + 8|0);
             $142 = HEAP32[$fd59$i$i>>2]|0;
             $cmp60$i$i = ($142|0)==($add$ptr16$i$i|0);
             if ($cmp60$i$i) {
              $fd68$pre$phi$i$iZ2D = $fd59$i$i;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $bk67$i$i = ((($137)) + 12|0);
           HEAP32[$bk67$i$i>>2] = $138;
           HEAP32[$fd68$pre$phi$i$iZ2D>>2] = $137;
          } else {
           $parent$i42$i = ((($add$ptr16$i$i)) + 24|0);
           $143 = HEAP32[$parent$i42$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $144 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($144|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $148 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($148|0)==(0|0);
             if ($cmp97$i$i) {
              $149 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($149|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $149;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $148;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $150 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($150|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $151 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($151|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $151;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $150;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             $cmp112$i$i = ($139>>>0)>($RP$1$i$i>>>0);
             if ($cmp112$i$i) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i>>2] = 0;
              $R$3$i$i = $R$1$i$i;
              break;
             }
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $145 = HEAP32[$fd78$i$i>>2]|0;
             $cmp81$i$i = ($139>>>0)>($145>>>0);
             if ($cmp81$i$i) {
              _abort();
              // unreachable;
             }
             $bk82$i$i = ((($145)) + 12|0);
             $146 = HEAP32[$bk82$i$i>>2]|0;
             $cmp83$i$i = ($146|0)==($add$ptr16$i$i|0);
             if (!($cmp83$i$i)) {
              _abort();
              // unreachable;
             }
             $fd85$i$i = ((($144)) + 8|0);
             $147 = HEAP32[$fd85$i$i>>2]|0;
             $cmp86$i$i = ($147|0)==($add$ptr16$i$i|0);
             if ($cmp86$i$i) {
              HEAP32[$bk82$i$i>>2] = $144;
              HEAP32[$fd85$i$i>>2] = $145;
              $R$3$i$i = $144;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $cmp120$i44$i = ($143|0)==(0|0);
           if ($cmp120$i44$i) {
            break;
           }
           $index$i45$i = ((($add$ptr16$i$i)) + 28|0);
           $152 = HEAP32[$index$i45$i>>2]|0;
           $arrayidx123$i$i = (31668 + ($152<<2)|0);
           $153 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($153|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond3$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond3$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $152;
             $neg132$i$i = $shl131$i$i ^ -1;
             $154 = HEAP32[(31368)>>2]|0;
             $and133$i$i = $154 & $neg132$i$i;
             HEAP32[(31368)>>2] = $and133$i$i;
             break L325;
            } else {
             $155 = HEAP32[(31380)>>2]|0;
             $cmp137$i$i = ($155>>>0)>($143>>>0);
             if ($cmp137$i$i) {
              _abort();
              // unreachable;
             } else {
              $arrayidx143$i$i = ((($143)) + 16|0);
              $156 = HEAP32[$arrayidx143$i$i>>2]|0;
              $cmp144$i$i = ($156|0)==($add$ptr16$i$i|0);
              $arrayidx151$i$i = ((($143)) + 20|0);
              $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
              HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
              $cmp156$i$i = ($R$3$i$i|0)==(0|0);
              if ($cmp156$i$i) {
               break L325;
              } else {
               break;
              }
             }
            }
           } while(0);
           $157 = HEAP32[(31380)>>2]|0;
           $cmp160$i$i = ($157>>>0)>($R$3$i$i>>>0);
           if ($cmp160$i$i) {
            _abort();
            // unreachable;
           }
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $143;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $158 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($158|0)==(0|0);
           do {
            if (!($cmp168$i$i)) {
             $cmp172$i$i = ($157>>>0)>($158>>>0);
             if ($cmp172$i$i) {
              _abort();
              // unreachable;
             } else {
              $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
              HEAP32[$arrayidx178$i$i>>2] = $158;
              $parent179$i$i = ((($158)) + 24|0);
              HEAP32[$parent179$i$i>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $159 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($159|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $160 = HEAP32[(31380)>>2]|0;
           $cmp189$i$i = ($160>>>0)>($159>>>0);
           if ($cmp189$i$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
            HEAP32[$arrayidx195$i$i>>2] = $159;
            $parent196$i$i = ((($159)) + 24|0);
            HEAP32[$parent196$i$i>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $161 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $161 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (31404 + ($shl222$i$i<<2)|0);
         $162 = HEAP32[7841]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $162 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         do {
          if ($tobool228$i$i) {
           $or232$i$i = $162 | $shl226$i$i;
           HEAP32[7841] = $or232$i$i;
           $$pre$i47$i = ((($arrayidx223$i$i)) + 8|0);
           $$pre$phi$i48$iZ2D = $$pre$i47$i;$F224$0$i$i = $arrayidx223$i$i;
          } else {
           $163 = ((($arrayidx223$i$i)) + 8|0);
           $164 = HEAP32[$163>>2]|0;
           $165 = HEAP32[(31380)>>2]|0;
           $cmp236$i$i = ($165>>>0)>($164>>>0);
           if (!($cmp236$i$i)) {
            $$pre$phi$i48$iZ2D = $163;$F224$0$i$i = $164;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i48$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (31668 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $166 = HEAP32[(31368)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $166 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $166 | $shl294$i$i;
         HEAP32[(31368)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $167 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3176$i$i = ((($167)) + 4|0);
        $168 = HEAP32[$head3176$i$i>>2]|0;
        $and3187$i$i = $168 & -8;
        $cmp3198$i$i = ($and3187$i$i|0)==($qsize$0$i$i|0);
        L410: do {
         if ($cmp3198$i$i) {
          $T$0$lcssa$i50$i = $167;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$010$i$i = $shl316$i$i;$T$09$i$i = $167;
          while(1) {
           $shr323$i$i = $K305$010$i$i >>> 31;
           $arrayidx325$i$i = (((($T$09$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $169 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($169|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$010$i$i << 1;
           $head317$i$i = ((($169)) + 4|0);
           $170 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $170 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i50$i = $169;
            break L410;
           } else {
            $K305$010$i$i = $shl326$i$i;$T$09$i$i = $169;
           }
          }
          $171 = HEAP32[(31380)>>2]|0;
          $cmp332$i$i = ($171>>>0)>($arrayidx325$i$i>>>0);
          if ($cmp332$i$i) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
           $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
           HEAP32[$parent337$i$i>>2] = $T$09$i$i;
           $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
           HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
           $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
           HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
           break L317;
          }
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i50$i)) + 8|0);
        $172 = HEAP32[$fd344$i$i>>2]|0;
        $173 = HEAP32[(31380)>>2]|0;
        $cmp346$i$i = ($173>>>0)<=($T$0$lcssa$i50$i>>>0);
        $cmp350$i$i = ($173>>>0)<=($172>>>0);
        $174 = $cmp350$i$i & $cmp346$i$i;
        if ($174) {
         $bk357$i$i = ((($172)) + 12|0);
         HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
         HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
         $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd359$i$i>>2] = $172;
         $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i50$i;
         $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent361$i$i>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i28$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (31812);
    while(1) {
     $175 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($175>>>0)>($114>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $176 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($175) + ($176)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($114>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $177 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $177;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $178 = $add$ptr3$i$i;
    $and$i$i = $178 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($178))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($114)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $114 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$798$i) + -40)|0;
    $add$ptr$i3$i$i = ((($tbase$799$i)) + 8|0);
    $179 = $add$ptr$i3$i$i;
    $and$i$i$i = $179 & 7;
    $cmp$i4$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($179))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i4$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$799$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(31388)>>2] = $add$ptr4$i$i$i;
    HEAP32[(31376)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$799$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $180 = HEAP32[(31852)>>2]|0;
    HEAP32[(31392)>>2] = $180;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(31812)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(31812)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(31812)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(31812)+12>>2]|0;
    HEAP32[(31812)>>2] = $tbase$799$i;
    HEAP32[(31816)>>2] = $tsize$798$i;
    HEAP32[(31824)>>2] = 0;
    HEAP32[(31820)>>2] = $add$ptr14$i$i;
    $181 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($181)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($181)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $181 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($114|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $114;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $182 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $182 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($114)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (31404 + ($shl$i$i<<2)|0);
      $183 = HEAP32[7841]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $183 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $183 | $shl39$i$i;
       HEAP32[7841] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $184 = ((($arrayidx$i$i)) + 8|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = HEAP32[(31380)>>2]|0;
       $cmp46$i$i = ($186>>>0)>($185>>>0);
       if ($cmp46$i$i) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $184;$F$0$i$i = $185;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $114;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $114;
      $fd54$i$i = ((($114)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($114)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (31668 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($114)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($114)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $187 = HEAP32[(31368)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $187 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $187 | $shl95$i$i;
      HEAP32[(31368)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $114;
      $parent$i$i = ((($114)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($114)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $114;
      $fd103$i$i = ((($114)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $114;
      break;
     }
     $188 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1187$i$i = ((($188)) + 4|0);
     $189 = HEAP32[$head1187$i$i>>2]|0;
     $and1198$i$i = $189 & -8;
     $cmp1209$i$i = ($and1198$i$i|0)==($sub$ptr$sub$i$i|0);
     L451: do {
      if ($cmp1209$i$i) {
       $T$0$lcssa$i$i = $188;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$011$i$i = $shl116$i$i;$T$010$i$i = $188;
       while(1) {
        $shr124$i$i = $K105$011$i$i >>> 31;
        $arrayidx126$i$i = (((($T$010$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $190 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($190|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$011$i$i << 1;
        $head118$i$i = ((($190)) + 4|0);
        $191 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $191 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $190;
         break L451;
        } else {
         $K105$011$i$i = $shl127$i$i;$T$010$i$i = $190;
        }
       }
       $192 = HEAP32[(31380)>>2]|0;
       $cmp133$i$i = ($192>>>0)>($arrayidx126$i$i>>>0);
       if ($cmp133$i$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$arrayidx126$i$i>>2] = $114;
        $parent138$i$i = ((($114)) + 24|0);
        HEAP32[$parent138$i$i>>2] = $T$010$i$i;
        $bk139$i$i = ((($114)) + 12|0);
        HEAP32[$bk139$i$i>>2] = $114;
        $fd140$i$i = ((($114)) + 8|0);
        HEAP32[$fd140$i$i>>2] = $114;
        break L294;
       }
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $193 = HEAP32[$fd148$i$i>>2]|0;
     $194 = HEAP32[(31380)>>2]|0;
     $cmp150$i$i = ($194>>>0)<=($T$0$lcssa$i$i>>>0);
     $cmp153$i$i = ($194>>>0)<=($193>>>0);
     $195 = $cmp153$i$i & $cmp150$i$i;
     if ($195) {
      $bk158$i$i = ((($193)) + 12|0);
      HEAP32[$bk158$i$i>>2] = $114;
      HEAP32[$fd148$i$i>>2] = $114;
      $fd160$i$i = ((($114)) + 8|0);
      HEAP32[$fd160$i$i>>2] = $193;
      $bk161$i$i = ((($114)) + 12|0);
      HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
      $parent162$i$i = ((($114)) + 24|0);
      HEAP32[$parent162$i$i>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $196 = HEAP32[(31376)>>2]|0;
  $cmp257$i = ($196>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($196) - ($nb$0))|0;
   HEAP32[(31376)>>2] = $sub260$i;
   $197 = HEAP32[(31388)>>2]|0;
   $add$ptr262$i = (($197) + ($nb$0)|0);
   HEAP32[(31388)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($197)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($197)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre316 = 0, $$pre317 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0312 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0311 = 0;
 var $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0, $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and = 0, $and140 = 0, $and210 = 0, $and215 = 0;
 var $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0, $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592309 = 0, $and8 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0;
 var $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0, $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0;
 var $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk286 = 0, $bk321 = 0, $bk333 = 0, $bk34 = 0, $bk343 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk82 = 0, $child = 0;
 var $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp100 = 0, $cmp104 = 0, $cmp109 = 0, $cmp114 = 0, $cmp118 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp143 = 0, $cmp150 = 0, $cmp162 = 0, $cmp165 = 0, $cmp173 = 0;
 var $cmp176 = 0, $cmp18 = 0, $cmp189 = 0, $cmp192 = 0, $cmp2 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp280 = 0, $cmp283 = 0, $cmp287 = 0, $cmp29 = 0, $cmp296 = 0, $cmp305 = 0, $cmp308 = 0;
 var $cmp31 = 0, $cmp312 = 0, $cmp334 = 0, $cmp340 = 0, $cmp344 = 0, $cmp348 = 0, $cmp35 = 0, $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp386 = 0, $cmp395 = 0, $cmp401 = 0, $cmp413 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp435 = 0, $cmp445 = 0;
 var $cmp448 = 0, $cmp461 = 0, $cmp464 = 0, $cmp484 = 0, $cmp50 = 0, $cmp502 = 0, $cmp519 = 0, $cmp53 = 0, $cmp536 = 0, $cmp540 = 0, $cmp57 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593310 = 0, $cmp601 = 0, $cmp605 = 0, $cmp621 = 0, $cmp624 = 0, $cmp640 = 0, $cmp74 = 0;
 var $cmp80 = 0, $cmp83 = 0, $cmp87 = 0, $cond = 0, $cond292 = 0, $cond293 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd338 = 0, $fd347 = 0, $fd530 = 0, $fd56 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67$pre$phiZ2D = 0;
 var $fd78 = 0, $fd86 = 0, $head = 0, $head209 = 0, $head216 = 0, $head231 = 0, $head248 = 0, $head260 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591308 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0;
 var $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0, $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0;
 var $psize$1 = 0, $psize$2 = 0, $shl = 0, $shl138 = 0, $shl278 = 0, $shl299 = 0, $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0;
 var $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0, $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(31380)>>2]|0;
 $cmp1 = ($add$ptr>>>0)<($0>>>0);
 if ($cmp1) {
  _abort();
  // unreachable;
 }
 $head = ((($mem)) + -4|0);
 $1 = HEAP32[$head>>2]|0;
 $and = $1 & 3;
 $cmp2 = ($and|0)==(1);
 if ($cmp2) {
  _abort();
  // unreachable;
 }
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 L10: do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $cmp13 = ($and|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[(31384)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $27 = HEAP32[$head209>>2]|0;
    $and210 = $27 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $27 & -2;
    HEAP32[(31372)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = (31404 + ($shl<<2)|0);
    $cmp29 = ($4|0)==($arrayidx|0);
    if (!($cmp29)) {
     $cmp31 = ($0>>>0)>($4>>>0);
     if ($cmp31) {
      _abort();
      // unreachable;
     }
     $bk34 = ((($4)) + 12|0);
     $6 = HEAP32[$bk34>>2]|0;
     $cmp35 = ($6|0)==($add$ptr16|0);
     if (!($cmp35)) {
      _abort();
      // unreachable;
     }
    }
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $7 = HEAP32[7841]|0;
     $and46 = $7 & $neg;
     HEAP32[7841] = $and46;
     $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $cmp50 = ($5|0)==($arrayidx|0);
    if ($cmp50) {
     $$pre317 = ((($5)) + 8|0);
     $fd67$pre$phiZ2D = $$pre317;
    } else {
     $cmp53 = ($0>>>0)>($5>>>0);
     if ($cmp53) {
      _abort();
      // unreachable;
     }
     $fd56 = ((($5)) + 8|0);
     $8 = HEAP32[$fd56>>2]|0;
     $cmp57 = ($8|0)==($add$ptr16|0);
     if ($cmp57) {
      $fd67$pre$phiZ2D = $fd56;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk66 = ((($4)) + 12|0);
    HEAP32[$bk66>>2] = $5;
    HEAP32[$fd67$pre$phiZ2D>>2] = $4;
    $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    break;
   }
   $parent = ((($add$ptr16)) + 24|0);
   $9 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $10 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($10|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $14 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($14|0)==(0|0);
     if ($cmp100) {
      $15 = HEAP32[$child>>2]|0;
      $cmp104 = ($15|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $15;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $14;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $16 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($16|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $17 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($17|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $17;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $16;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     $cmp118 = ($0>>>0)>($RP$1>>>0);
     if ($cmp118) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $11 = HEAP32[$fd78>>2]|0;
     $cmp80 = ($0>>>0)>($11>>>0);
     if ($cmp80) {
      _abort();
      // unreachable;
     }
     $bk82 = ((($11)) + 12|0);
     $12 = HEAP32[$bk82>>2]|0;
     $cmp83 = ($12|0)==($add$ptr16|0);
     if (!($cmp83)) {
      _abort();
      // unreachable;
     }
     $fd86 = ((($10)) + 8|0);
     $13 = HEAP32[$fd86>>2]|0;
     $cmp87 = ($13|0)==($add$ptr16|0);
     if ($cmp87) {
      HEAP32[$bk82>>2] = $10;
      HEAP32[$fd86>>2] = $11;
      $R$3 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp127 = ($9|0)==(0|0);
   if ($cmp127) {
    $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx130 = (31668 + ($18<<2)|0);
    $19 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($19|0)==($add$ptr16|0);
    do {
     if ($cmp131) {
      HEAP32[$arrayidx130>>2] = $R$3;
      $cond292 = ($R$3|0)==(0|0);
      if ($cond292) {
       $shl138 = 1 << $18;
       $neg139 = $shl138 ^ -1;
       $20 = HEAP32[(31368)>>2]|0;
       $and140 = $20 & $neg139;
       HEAP32[(31368)>>2] = $and140;
       $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
       break L10;
      }
     } else {
      $21 = HEAP32[(31380)>>2]|0;
      $cmp143 = ($21>>>0)>($9>>>0);
      if ($cmp143) {
       _abort();
       // unreachable;
      } else {
       $arrayidx149 = ((($9)) + 16|0);
       $22 = HEAP32[$arrayidx149>>2]|0;
       $cmp150 = ($22|0)==($add$ptr16|0);
       $arrayidx157 = ((($9)) + 20|0);
       $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
       HEAP32[$arrayidx157$sink>>2] = $R$3;
       $cmp162 = ($R$3|0)==(0|0);
       if ($cmp162) {
        $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $23 = HEAP32[(31380)>>2]|0;
    $cmp165 = ($23>>>0)>($R$3>>>0);
    if ($cmp165) {
     _abort();
     // unreachable;
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $9;
    $child171 = ((($add$ptr16)) + 16|0);
    $24 = HEAP32[$child171>>2]|0;
    $cmp173 = ($24|0)==(0|0);
    do {
     if (!($cmp173)) {
      $cmp176 = ($23>>>0)>($24>>>0);
      if ($cmp176) {
       _abort();
       // unreachable;
      } else {
       $arrayidx182 = ((($R$3)) + 16|0);
       HEAP32[$arrayidx182>>2] = $24;
       $parent183 = ((($24)) + 24|0);
       HEAP32[$parent183>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $arrayidx188 = ((($child171)) + 4|0);
    $25 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($25|0)==(0|0);
    if ($cmp189) {
     $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $26 = HEAP32[(31380)>>2]|0;
     $cmp192 = ($26>>>0)>($25>>>0);
     if ($cmp192) {
      _abort();
      // unreachable;
     } else {
      $arrayidx198 = ((($R$3)) + 20|0);
      HEAP32[$arrayidx198>>2] = $25;
      $parent199 = ((($25)) + 24|0);
      HEAP32[$parent199>>2] = $R$3;
      $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
   }
  } else {
   $28 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($28>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  _abort();
  // unreachable;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $29 = HEAP32[$head231>>2]|0;
 $and232 = $29 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  _abort();
  // unreachable;
 }
 $and240 = $29 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $30 = HEAP32[(31388)>>2]|0;
  $cmp243 = ($30|0)==($add$ptr6|0);
  if ($cmp243) {
   $31 = HEAP32[(31376)>>2]|0;
   $add246 = (($31) + ($psize$1))|0;
   HEAP32[(31376)>>2] = $add246;
   HEAP32[(31388)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $32 = HEAP32[(31384)>>2]|0;
   $cmp249 = ($p$1|0)==($32|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(31384)>>2] = 0;
   HEAP32[(31372)>>2] = 0;
   return;
  }
  $33 = HEAP32[(31384)>>2]|0;
  $cmp255 = ($33|0)==($add$ptr6|0);
  if ($cmp255) {
   $34 = HEAP32[(31372)>>2]|0;
   $add258 = (($34) + ($psize$1))|0;
   HEAP32[(31372)>>2] = $add258;
   HEAP32[(31384)>>2] = $28;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($28) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $29 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $29 >>> 3;
  $cmp269 = ($29>>>0)<(256);
  L111: do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $35 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $36 = HEAP32[$bk275>>2]|0;
    $shl278 = $shr268 << 1;
    $arrayidx279 = (31404 + ($shl278<<2)|0);
    $cmp280 = ($35|0)==($arrayidx279|0);
    if (!($cmp280)) {
     $37 = HEAP32[(31380)>>2]|0;
     $cmp283 = ($37>>>0)>($35>>>0);
     if ($cmp283) {
      _abort();
      // unreachable;
     }
     $bk286 = ((($35)) + 12|0);
     $38 = HEAP32[$bk286>>2]|0;
     $cmp287 = ($38|0)==($add$ptr6|0);
     if (!($cmp287)) {
      _abort();
      // unreachable;
     }
    }
    $cmp296 = ($36|0)==($35|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $39 = HEAP32[7841]|0;
     $and301 = $39 & $neg300;
     HEAP32[7841] = $and301;
     break;
    }
    $cmp305 = ($36|0)==($arrayidx279|0);
    if ($cmp305) {
     $$pre316 = ((($36)) + 8|0);
     $fd322$pre$phiZ2D = $$pre316;
    } else {
     $40 = HEAP32[(31380)>>2]|0;
     $cmp308 = ($40>>>0)>($36>>>0);
     if ($cmp308) {
      _abort();
      // unreachable;
     }
     $fd311 = ((($36)) + 8|0);
     $41 = HEAP32[$fd311>>2]|0;
     $cmp312 = ($41|0)==($add$ptr6|0);
     if ($cmp312) {
      $fd322$pre$phiZ2D = $fd311;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk321 = ((($35)) + 12|0);
    HEAP32[$bk321>>2] = $36;
    HEAP32[$fd322$pre$phiZ2D>>2] = $35;
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $42 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $43 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($43|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $48 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($48|0)==(0|0);
      if ($cmp363) {
       $49 = HEAP32[$child361>>2]|0;
       $cmp368 = ($49|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $49;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $48;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $50 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($50|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $51 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($51|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $51;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $50;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      $52 = HEAP32[(31380)>>2]|0;
      $cmp386 = ($52>>>0)>($RP360$1>>>0);
      if ($cmp386) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP360$1>>2] = 0;
       $R332$3 = $R332$1;
       break;
      }
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $44 = HEAP32[$fd338>>2]|0;
      $45 = HEAP32[(31380)>>2]|0;
      $cmp340 = ($45>>>0)>($44>>>0);
      if ($cmp340) {
       _abort();
       // unreachable;
      }
      $bk343 = ((($44)) + 12|0);
      $46 = HEAP32[$bk343>>2]|0;
      $cmp344 = ($46|0)==($add$ptr6|0);
      if (!($cmp344)) {
       _abort();
       // unreachable;
      }
      $fd347 = ((($43)) + 8|0);
      $47 = HEAP32[$fd347>>2]|0;
      $cmp348 = ($47|0)==($add$ptr6|0);
      if ($cmp348) {
       HEAP32[$bk343>>2] = $43;
       HEAP32[$fd347>>2] = $44;
       $R332$3 = $43;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp395 = ($42|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $53 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (31668 + ($53<<2)|0);
     $54 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($54|0)==($add$ptr6|0);
     do {
      if ($cmp401) {
       HEAP32[$arrayidx400>>2] = $R332$3;
       $cond293 = ($R332$3|0)==(0|0);
       if ($cond293) {
        $shl408 = 1 << $53;
        $neg409 = $shl408 ^ -1;
        $55 = HEAP32[(31368)>>2]|0;
        $and410 = $55 & $neg409;
        HEAP32[(31368)>>2] = $and410;
        break L111;
       }
      } else {
       $56 = HEAP32[(31380)>>2]|0;
       $cmp413 = ($56>>>0)>($42>>>0);
       if ($cmp413) {
        _abort();
        // unreachable;
       } else {
        $arrayidx419 = ((($42)) + 16|0);
        $57 = HEAP32[$arrayidx419>>2]|0;
        $cmp420 = ($57|0)==($add$ptr6|0);
        $arrayidx427 = ((($42)) + 20|0);
        $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
        HEAP32[$arrayidx427$sink>>2] = $R332$3;
        $cmp432 = ($R332$3|0)==(0|0);
        if ($cmp432) {
         break L111;
        } else {
         break;
        }
       }
      }
     } while(0);
     $58 = HEAP32[(31380)>>2]|0;
     $cmp435 = ($58>>>0)>($R332$3>>>0);
     if ($cmp435) {
      _abort();
      // unreachable;
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $42;
     $child443 = ((($add$ptr6)) + 16|0);
     $59 = HEAP32[$child443>>2]|0;
     $cmp445 = ($59|0)==(0|0);
     do {
      if (!($cmp445)) {
       $cmp448 = ($58>>>0)>($59>>>0);
       if ($cmp448) {
        _abort();
        // unreachable;
       } else {
        $arrayidx454 = ((($R332$3)) + 16|0);
        HEAP32[$arrayidx454>>2] = $59;
        $parent455 = ((($59)) + 24|0);
        HEAP32[$parent455>>2] = $R332$3;
        break;
       }
      }
     } while(0);
     $arrayidx460 = ((($child443)) + 4|0);
     $60 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($60|0)==(0|0);
     if (!($cmp461)) {
      $61 = HEAP32[(31380)>>2]|0;
      $cmp464 = ($61>>>0)>($60>>>0);
      if ($cmp464) {
       _abort();
       // unreachable;
      } else {
       $arrayidx470 = ((($R332$3)) + 20|0);
       HEAP32[$arrayidx470>>2] = $60;
       $parent471 = ((($60)) + 24|0);
       HEAP32[$parent471>>2] = $R332$3;
       break;
      }
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($28) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $62 = HEAP32[(31384)>>2]|0;
  $cmp484 = ($p$1|0)==($62|0);
  if ($cmp484) {
   HEAP32[(31372)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $29 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($28) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (31404 + ($shl508<<2)|0);
  $63 = HEAP32[7841]|0;
  $shl511 = 1 << $shr501;
  $and512 = $63 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $63 | $shl511;
   HEAP32[7841] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $64 = ((($arrayidx509)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[(31380)>>2]|0;
   $cmp519 = ($66>>>0)>($65>>>0);
   if ($cmp519) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $64;$F510$0 = $65;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (31668 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $67 = HEAP32[(31368)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $67 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L197: do {
  if ($tobool575) {
   $or578 = $67 | $shl573;
   HEAP32[(31368)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $68 = HEAP32[$arrayidx567>>2]|0;
   $head591308 = ((($68)) + 4|0);
   $69 = HEAP32[$head591308>>2]|0;
   $and592309 = $69 & -8;
   $cmp593310 = ($and592309|0)==($psize$2|0);
   L200: do {
    if ($cmp593310) {
     $T$0$lcssa = $68;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0312 = $shl590;$T$0311 = $68;
     while(1) {
      $shr597 = $K583$0312 >>> 31;
      $arrayidx599 = (((($T$0311)) + 16|0) + ($shr597<<2)|0);
      $70 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($70|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0312 << 1;
      $head591 = ((($70)) + 4|0);
      $71 = HEAP32[$head591>>2]|0;
      $and592 = $71 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $70;
       break L200;
      } else {
       $K583$0312 = $shl600;$T$0311 = $70;
      }
     }
     $72 = HEAP32[(31380)>>2]|0;
     $cmp605 = ($72>>>0)>($arrayidx599>>>0);
     if ($cmp605) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$arrayidx599>>2] = $p$1;
      $parent610 = ((($p$1)) + 24|0);
      HEAP32[$parent610>>2] = $T$0311;
      $bk611 = ((($p$1)) + 12|0);
      HEAP32[$bk611>>2] = $p$1;
      $fd612 = ((($p$1)) + 8|0);
      HEAP32[$fd612>>2] = $p$1;
      break L197;
     }
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $73 = HEAP32[$fd620>>2]|0;
   $74 = HEAP32[(31380)>>2]|0;
   $cmp621 = ($74>>>0)<=($T$0$lcssa>>>0);
   $cmp624 = ($74>>>0)<=($73>>>0);
   $75 = $cmp624 & $cmp621;
   if ($75) {
    $bk631 = ((($73)) + 12|0);
    HEAP32[$bk631>>2] = $p$1;
    HEAP32[$fd620>>2] = $p$1;
    $fd633 = ((($p$1)) + 8|0);
    HEAP32[$fd633>>2] = $73;
    $bk634 = ((($p$1)) + 12|0);
    HEAP32[$bk634>>2] = $T$0$lcssa;
    $parent635 = ((($p$1)) + 24|0);
    HEAP32[$parent635>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $76 = HEAP32[(31396)>>2]|0;
 $dec = (($76) + -1)|0;
 HEAP32[(31396)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (31820);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(31396)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 48;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0, $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and100 = 0, $and104 = 0;
 var $and128 = 0, $and19 = 0, $and2 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and7 = 0, $and80 = 0, $and87 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0;
 var $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk118 = 0, $bk147 = 0, $bk155 = 0, $bk164 = 0, $child = 0, $child249 = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp111 = 0, $cmp114 = 0, $cmp116 = 0, $cmp119 = 0, $cmp125 = 0, $cmp13 = 0;
 var $cmp133 = 0, $cmp136 = 0, $cmp139 = 0, $cmp15 = 0, $cmp156 = 0, $cmp162 = 0, $cmp165 = 0, $cmp168 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp195 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp220 = 0, $cmp227 = 0, $cmp239 = 0, $cmp243 = 0;
 var $cmp251 = 0, $cmp255 = 0, $cmp268 = 0, $cmp272 = 0, $cmp288 = 0, $cmp3 = 0, $cmp34 = 0, $cmp36 = 0, $cmp5 = 0, $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd159 = 0, $fd167 = 0, $head = 0, $head23 = 0;
 var $head299 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head6 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $index = 0, $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or$cond$not = 0, $or$cond4 = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0;
 var $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0, $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl = 0, $shl$i = 0;
 var $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge3 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool = 0, $tobool101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $1 = HEAP32[(31380)>>2]|0;
 $cmp = ($1>>>0)<=($p>>>0);
 $and2 = $0 & 3;
 $cmp3 = ($and2|0)!=(1);
 $or$cond$not = $cmp3 & $cmp;
 $cmp5 = ($add$ptr>>>0)>($p>>>0);
 $or$cond4 = $or$cond$not & $cmp5;
 if (!($or$cond4)) {
  _abort();
  // unreachable;
 }
 $head6 = ((($add$ptr)) + 4|0);
 $2 = HEAP32[$head6>>2]|0;
 $and7 = $2 & 1;
 $tobool = ($and7|0)==(0);
 if ($tobool) {
  _abort();
  // unreachable;
 }
 $cmp11 = ($and2|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $3 = HEAP32[(31844)>>2]|0;
   $shl$i = $3 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $4 = HEAP32[$head6>>2]|0;
  $or32 = $4 | 1;
  HEAP32[$head6>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(31388)>>2]|0;
 $cmp34 = ($5|0)==($add$ptr|0);
 if ($cmp34) {
  $6 = HEAP32[(31376)>>2]|0;
  $add = (($6) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(31388)>>2] = $add$ptr41;
  HEAP32[(31376)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $7 = HEAP32[(31384)>>2]|0;
 $cmp56 = ($7|0)==($add$ptr|0);
 if ($cmp56) {
  $8 = HEAP32[(31372)>>2]|0;
  $add58 = (($8) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $9 = HEAP32[$head79>>2]|0;
   $and80 = $9 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge3 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $10 = HEAP32[$head92>>2]|0;
   $or93 = $10 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge3 = 0;
  }
  HEAP32[(31372)>>2] = $storemerge3;
  HEAP32[(31384)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $and100 = $2 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $2 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $2 >>> 3;
 $cmp111 = ($2>>>0)<(256);
 L49: do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $11 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $12 = HEAP32[$bk>>2]|0;
   $shl = $shr << 1;
   $arrayidx = (31404 + ($shl<<2)|0);
   $cmp114 = ($11|0)==($arrayidx|0);
   if (!($cmp114)) {
    $cmp116 = ($1>>>0)>($11>>>0);
    if ($cmp116) {
     _abort();
     // unreachable;
    }
    $bk118 = ((($11)) + 12|0);
    $13 = HEAP32[$bk118>>2]|0;
    $cmp119 = ($13|0)==($add$ptr|0);
    if (!($cmp119)) {
     _abort();
     // unreachable;
    }
   }
   $cmp125 = ($12|0)==($11|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $14 = HEAP32[7841]|0;
    $and128 = $14 & $neg;
    HEAP32[7841] = $and128;
    break;
   }
   $cmp133 = ($12|0)==($arrayidx|0);
   if ($cmp133) {
    $$pre = ((($12)) + 8|0);
    $fd148$pre$phiZ2D = $$pre;
   } else {
    $cmp136 = ($1>>>0)>($12>>>0);
    if ($cmp136) {
     _abort();
     // unreachable;
    }
    $fd138 = ((($12)) + 8|0);
    $15 = HEAP32[$fd138>>2]|0;
    $cmp139 = ($15|0)==($add$ptr|0);
    if ($cmp139) {
     $fd148$pre$phiZ2D = $fd138;
    } else {
     _abort();
     // unreachable;
    }
   }
   $bk147 = ((($11)) + 12|0);
   HEAP32[$bk147>>2] = $12;
   HEAP32[$fd148$pre$phiZ2D>>2] = $11;
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $16 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $17 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($17|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $21 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($21|0)==(0|0);
     if ($cmp180) {
      $22 = HEAP32[$child>>2]|0;
      $cmp183 = ($22|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $22;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $21;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $23 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($23|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $24 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($24|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $24;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $23;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     $cmp195 = ($1>>>0)>($RP$1>>>0);
     if ($cmp195) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $18 = HEAP32[$fd159>>2]|0;
     $cmp162 = ($1>>>0)>($18>>>0);
     if ($cmp162) {
      _abort();
      // unreachable;
     }
     $bk164 = ((($18)) + 12|0);
     $19 = HEAP32[$bk164>>2]|0;
     $cmp165 = ($19|0)==($add$ptr|0);
     if (!($cmp165)) {
      _abort();
      // unreachable;
     }
     $fd167 = ((($17)) + 8|0);
     $20 = HEAP32[$fd167>>2]|0;
     $cmp168 = ($20|0)==($add$ptr|0);
     if ($cmp168) {
      HEAP32[$bk164>>2] = $17;
      HEAP32[$fd167>>2] = $18;
      $R$3 = $17;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp203 = ($16|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $25 = HEAP32[$index>>2]|0;
    $arrayidx206 = (31668 + ($25<<2)|0);
    $26 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($26|0)==($add$ptr|0);
    do {
     if ($cmp207) {
      HEAP32[$arrayidx206>>2] = $R$3;
      $cond = ($R$3|0)==(0|0);
      if ($cond) {
       $shl214 = 1 << $25;
       $neg215 = $shl214 ^ -1;
       $27 = HEAP32[(31368)>>2]|0;
       $and216 = $27 & $neg215;
       HEAP32[(31368)>>2] = $and216;
       break L49;
      }
     } else {
      $28 = HEAP32[(31380)>>2]|0;
      $cmp220 = ($28>>>0)>($16>>>0);
      if ($cmp220) {
       _abort();
       // unreachable;
      } else {
       $arrayidx226 = ((($16)) + 16|0);
       $29 = HEAP32[$arrayidx226>>2]|0;
       $cmp227 = ($29|0)==($add$ptr|0);
       $arrayidx234 = ((($16)) + 20|0);
       $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
       HEAP32[$arrayidx234$sink>>2] = $R$3;
       $cmp239 = ($R$3|0)==(0|0);
       if ($cmp239) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $30 = HEAP32[(31380)>>2]|0;
    $cmp243 = ($30>>>0)>($R$3>>>0);
    if ($cmp243) {
     _abort();
     // unreachable;
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $16;
    $child249 = ((($add$ptr)) + 16|0);
    $31 = HEAP32[$child249>>2]|0;
    $cmp251 = ($31|0)==(0|0);
    do {
     if (!($cmp251)) {
      $cmp255 = ($30>>>0)>($31>>>0);
      if ($cmp255) {
       _abort();
       // unreachable;
      } else {
       $arrayidx261 = ((($R$3)) + 16|0);
       HEAP32[$arrayidx261>>2] = $31;
       $parent262 = ((($31)) + 24|0);
       HEAP32[$parent262>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $arrayidx267 = ((($child249)) + 4|0);
    $32 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($32|0)==(0|0);
    if (!($cmp268)) {
     $33 = HEAP32[(31380)>>2]|0;
     $cmp272 = ($33>>>0)>($32>>>0);
     if ($cmp272) {
      _abort();
      // unreachable;
     } else {
      $arrayidx278 = ((($R$3)) + 20|0);
      HEAP32[$arrayidx278>>2] = $32;
      $parent279 = ((($32)) + 24|0);
      HEAP32[$parent279>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $34 = HEAP32[$head299>>2]|0;
  $or300 = $34 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $35 = HEAP32[$head318>>2]|0;
  $or319 = $35 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$013 = 0, $R$1 = 0;
 var $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$012 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0;
 var $add230 = 0, $add248 = 0, $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0;
 var $and520 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and60610 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0;
 var $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0, $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk22 = 0, $bk266 = 0, $bk279 = 0, $bk317 = 0, $bk329 = 0;
 var $bk340 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0, $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp106 = 0, $cmp115 = 0;
 var $cmp119 = 0, $cmp13 = 0, $cmp132 = 0, $cmp139 = 0, $cmp151 = 0, $cmp155 = 0, $cmp163 = 0, $cmp167 = 0, $cmp17 = 0, $cmp180 = 0, $cmp184 = 0, $cmp20 = 0, $cmp203 = 0, $cmp218 = 0, $cmp227 = 0, $cmp23 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp272 = 0;
 var $cmp276 = 0, $cmp28 = 0, $cmp280 = 0, $cmp289 = 0, $cmp300 = 0, $cmp304 = 0, $cmp308 = 0, $cmp330 = 0, $cmp337 = 0, $cmp341 = 0, $cmp345 = 0, $cmp36 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp384 = 0, $cmp393 = 0, $cmp40 = 0, $cmp400 = 0;
 var $cmp414 = 0, $cmp421 = 0, $cmp433 = 0, $cmp437 = 0, $cmp44 = 0, $cmp447 = 0, $cmp451 = 0, $cmp464 = 0, $cmp468 = 0, $cmp489 = 0, $cmp508 = 0, $cmp529 = 0, $cmp547 = 0, $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp60711 = 0, $cmp61 = 0, $cmp615 = 0, $cmp620 = 0;
 var $cmp637 = 0, $cmp641 = 0, $cmp68 = 0, $cmp7 = 0, $cmp71 = 0, $cmp75 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond5 = 0, $cond6 = 0, $fd = 0, $fd264 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd334 = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0;
 var $fd540 = 0, $fd595 = 0, $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd74 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6059 = 0, $idx$neg = 0, $index = 0, $index398 = 0;
 var $index580 = 0, $neg = 0, $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0;
 var $parent475 = 0, $parent593 = 0, $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl = 0, $shl126 = 0, $shl270 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0;
 var $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0;
 var $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 L1: do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(31380)>>2]|0;
   $cmp7 = ($add$ptr5>>>0)<($2>>>0);
   if ($cmp7) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[(31384)>>2]|0;
   $cmp10 = ($3|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $27 = HEAP32[$head201>>2]|0;
    $and202 = $27 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $27 & -2;
    HEAP32[(31372)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = (31404 + ($shl<<2)|0);
    $cmp17 = ($4|0)==($arrayidx|0);
    if (!($cmp17)) {
     $cmp20 = ($2>>>0)>($4>>>0);
     if ($cmp20) {
      _abort();
      // unreachable;
     }
     $bk22 = ((($4)) + 12|0);
     $6 = HEAP32[$bk22>>2]|0;
     $cmp23 = ($6|0)==($add$ptr5|0);
     if (!($cmp23)) {
      _abort();
      // unreachable;
     }
    }
    $cmp28 = ($5|0)==($4|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $7 = HEAP32[7841]|0;
     $and32 = $7 & $neg;
     HEAP32[7841] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $cmp36 = ($5|0)==($arrayidx|0);
    if ($cmp36) {
     $$pre18 = ((($5)) + 8|0);
     $fd53$pre$phiZ2D = $$pre18;
    } else {
     $cmp40 = ($2>>>0)>($5>>>0);
     if ($cmp40) {
      _abort();
      // unreachable;
     }
     $fd43 = ((($5)) + 8|0);
     $8 = HEAP32[$fd43>>2]|0;
     $cmp44 = ($8|0)==($add$ptr5|0);
     if ($cmp44) {
      $fd53$pre$phiZ2D = $fd43;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk52 = ((($4)) + 12|0);
    HEAP32[$bk52>>2] = $5;
    HEAP32[$fd53$pre$phiZ2D>>2] = $4;
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    break;
   }
   $parent = ((($add$ptr5)) + 24|0);
   $9 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $10 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($10|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $14 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($14|0)==(0|0);
     if ($cmp87) {
      $15 = HEAP32[$child>>2]|0;
      $cmp91 = ($15|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $15;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $14;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $16 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($16|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $17 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($17|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $17;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $16;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     $cmp106 = ($2>>>0)>($RP$1>>>0);
     if ($cmp106) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $11 = HEAP32[$fd65>>2]|0;
     $cmp68 = ($2>>>0)>($11>>>0);
     if ($cmp68) {
      _abort();
      // unreachable;
     }
     $bk70 = ((($11)) + 12|0);
     $12 = HEAP32[$bk70>>2]|0;
     $cmp71 = ($12|0)==($add$ptr5|0);
     if (!($cmp71)) {
      _abort();
      // unreachable;
     }
     $fd74 = ((($10)) + 8|0);
     $13 = HEAP32[$fd74>>2]|0;
     $cmp75 = ($13|0)==($add$ptr5|0);
     if ($cmp75) {
      HEAP32[$bk70>>2] = $10;
      HEAP32[$fd74>>2] = $11;
      $R$3 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp115 = ($9|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx118 = (31668 + ($18<<2)|0);
    $19 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($19|0)==($add$ptr5|0);
    do {
     if ($cmp119) {
      HEAP32[$arrayidx118>>2] = $R$3;
      $cond5 = ($R$3|0)==(0|0);
      if ($cond5) {
       $shl126 = 1 << $18;
       $neg127 = $shl126 ^ -1;
       $20 = HEAP32[(31368)>>2]|0;
       $and128 = $20 & $neg127;
       HEAP32[(31368)>>2] = $and128;
       $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
       break L1;
      }
     } else {
      $21 = HEAP32[(31380)>>2]|0;
      $cmp132 = ($21>>>0)>($9>>>0);
      if ($cmp132) {
       _abort();
       // unreachable;
      } else {
       $arrayidx138 = ((($9)) + 16|0);
       $22 = HEAP32[$arrayidx138>>2]|0;
       $cmp139 = ($22|0)==($add$ptr5|0);
       $arrayidx146 = ((($9)) + 20|0);
       $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
       HEAP32[$arrayidx146$sink>>2] = $R$3;
       $cmp151 = ($R$3|0)==(0|0);
       if ($cmp151) {
        $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $23 = HEAP32[(31380)>>2]|0;
    $cmp155 = ($23>>>0)>($R$3>>>0);
    if ($cmp155) {
     _abort();
     // unreachable;
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $9;
    $child161 = ((($add$ptr5)) + 16|0);
    $24 = HEAP32[$child161>>2]|0;
    $cmp163 = ($24|0)==(0|0);
    do {
     if (!($cmp163)) {
      $cmp167 = ($23>>>0)>($24>>>0);
      if ($cmp167) {
       _abort();
       // unreachable;
      } else {
       $arrayidx173 = ((($R$3)) + 16|0);
       HEAP32[$arrayidx173>>2] = $24;
       $parent174 = ((($24)) + 24|0);
       HEAP32[$parent174>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $arrayidx179 = ((($child161)) + 4|0);
    $25 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($25|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $26 = HEAP32[(31380)>>2]|0;
     $cmp184 = ($26>>>0)>($25>>>0);
     if ($cmp184) {
      _abort();
      // unreachable;
     } else {
      $arrayidx190 = ((($R$3)) + 20|0);
      HEAP32[$arrayidx190>>2] = $25;
      $parent191 = ((($25)) + 24|0);
      HEAP32[$parent191>>2] = $R$3;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $28 = HEAP32[(31380)>>2]|0;
 $cmp218 = ($add$ptr>>>0)<($28>>>0);
 if ($cmp218) {
  _abort();
  // unreachable;
 }
 $head223 = ((($add$ptr)) + 4|0);
 $29 = HEAP32[$head223>>2]|0;
 $and224 = $29 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $30 = HEAP32[(31388)>>2]|0;
  $cmp227 = ($30|0)==($add$ptr|0);
  if ($cmp227) {
   $31 = HEAP32[(31376)>>2]|0;
   $add230 = (($31) + ($psize$addr$1))|0;
   HEAP32[(31376)>>2] = $add230;
   HEAP32[(31388)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $32 = HEAP32[(31384)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($32|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(31384)>>2] = 0;
   HEAP32[(31372)>>2] = 0;
   return;
  }
  $33 = HEAP32[(31384)>>2]|0;
  $cmp244 = ($33|0)==($add$ptr|0);
  if ($cmp244) {
   $34 = HEAP32[(31372)>>2]|0;
   $add248 = (($34) + ($psize$addr$1))|0;
   HEAP32[(31372)>>2] = $add248;
   HEAP32[(31384)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $29 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $29 >>> 3;
  $cmp260 = ($29>>>0)<(256);
  L99: do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $35 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $36 = HEAP32[$bk266>>2]|0;
    $shl270 = $shr259 << 1;
    $arrayidx271 = (31404 + ($shl270<<2)|0);
    $cmp272 = ($35|0)==($arrayidx271|0);
    if (!($cmp272)) {
     $cmp276 = ($28>>>0)>($35>>>0);
     if ($cmp276) {
      _abort();
      // unreachable;
     }
     $bk279 = ((($35)) + 12|0);
     $37 = HEAP32[$bk279>>2]|0;
     $cmp280 = ($37|0)==($add$ptr|0);
     if (!($cmp280)) {
      _abort();
      // unreachable;
     }
    }
    $cmp289 = ($36|0)==($35|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $38 = HEAP32[7841]|0;
     $and295 = $38 & $neg293;
     HEAP32[7841] = $and295;
     break;
    }
    $cmp300 = ($36|0)==($arrayidx271|0);
    if ($cmp300) {
     $$pre17 = ((($36)) + 8|0);
     $fd318$pre$phiZ2D = $$pre17;
    } else {
     $cmp304 = ($28>>>0)>($36>>>0);
     if ($cmp304) {
      _abort();
      // unreachable;
     }
     $fd307 = ((($36)) + 8|0);
     $39 = HEAP32[$fd307>>2]|0;
     $cmp308 = ($39|0)==($add$ptr|0);
     if ($cmp308) {
      $fd318$pre$phiZ2D = $fd307;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk317 = ((($35)) + 12|0);
    HEAP32[$bk317>>2] = $36;
    HEAP32[$fd318$pre$phiZ2D>>2] = $35;
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $40 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $41 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($41|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $45 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($45|0)==(0|0);
      if ($cmp360) {
       $46 = HEAP32[$child358>>2]|0;
       $cmp365 = ($46|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $46;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $45;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $47 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($47|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $48 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($48|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $48;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $47;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      $cmp384 = ($28>>>0)>($RP357$1>>>0);
      if ($cmp384) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP357$1>>2] = 0;
       $R328$3 = $R328$1;
       break;
      }
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $42 = HEAP32[$fd334>>2]|0;
      $cmp337 = ($28>>>0)>($42>>>0);
      if ($cmp337) {
       _abort();
       // unreachable;
      }
      $bk340 = ((($42)) + 12|0);
      $43 = HEAP32[$bk340>>2]|0;
      $cmp341 = ($43|0)==($add$ptr|0);
      if (!($cmp341)) {
       _abort();
       // unreachable;
      }
      $fd344 = ((($41)) + 8|0);
      $44 = HEAP32[$fd344>>2]|0;
      $cmp345 = ($44|0)==($add$ptr|0);
      if ($cmp345) {
       HEAP32[$bk340>>2] = $41;
       HEAP32[$fd344>>2] = $42;
       $R328$3 = $41;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp393 = ($40|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $49 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (31668 + ($49<<2)|0);
     $50 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($50|0)==($add$ptr|0);
     do {
      if ($cmp400) {
       HEAP32[$arrayidx399>>2] = $R328$3;
       $cond6 = ($R328$3|0)==(0|0);
       if ($cond6) {
        $shl407 = 1 << $49;
        $neg408 = $shl407 ^ -1;
        $51 = HEAP32[(31368)>>2]|0;
        $and410 = $51 & $neg408;
        HEAP32[(31368)>>2] = $and410;
        break L99;
       }
      } else {
       $52 = HEAP32[(31380)>>2]|0;
       $cmp414 = ($52>>>0)>($40>>>0);
       if ($cmp414) {
        _abort();
        // unreachable;
       } else {
        $arrayidx420 = ((($40)) + 16|0);
        $53 = HEAP32[$arrayidx420>>2]|0;
        $cmp421 = ($53|0)==($add$ptr|0);
        $arrayidx428 = ((($40)) + 20|0);
        $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
        HEAP32[$arrayidx428$sink>>2] = $R328$3;
        $cmp433 = ($R328$3|0)==(0|0);
        if ($cmp433) {
         break L99;
        } else {
         break;
        }
       }
      }
     } while(0);
     $54 = HEAP32[(31380)>>2]|0;
     $cmp437 = ($54>>>0)>($R328$3>>>0);
     if ($cmp437) {
      _abort();
      // unreachable;
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $40;
     $child445 = ((($add$ptr)) + 16|0);
     $55 = HEAP32[$child445>>2]|0;
     $cmp447 = ($55|0)==(0|0);
     do {
      if (!($cmp447)) {
       $cmp451 = ($54>>>0)>($55>>>0);
       if ($cmp451) {
        _abort();
        // unreachable;
       } else {
        $arrayidx457 = ((($R328$3)) + 16|0);
        HEAP32[$arrayidx457>>2] = $55;
        $parent458 = ((($55)) + 24|0);
        HEAP32[$parent458>>2] = $R328$3;
        break;
       }
      }
     } while(0);
     $arrayidx463 = ((($child445)) + 4|0);
     $56 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($56|0)==(0|0);
     if (!($cmp464)) {
      $57 = HEAP32[(31380)>>2]|0;
      $cmp468 = ($57>>>0)>($56>>>0);
      if ($cmp468) {
       _abort();
       // unreachable;
      } else {
       $arrayidx474 = ((($R328$3)) + 20|0);
       HEAP32[$arrayidx474>>2] = $56;
       $parent475 = ((($56)) + 24|0);
       HEAP32[$parent475>>2] = $R328$3;
       break;
      }
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $58 = HEAP32[(31384)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($58|0);
  if ($cmp489) {
   HEAP32[(31372)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $29 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (31404 + ($shl515<<2)|0);
  $59 = HEAP32[7841]|0;
  $shl519 = 1 << $shr507;
  $and520 = $59 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $59 | $shl519;
   HEAP32[7841] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $60 = ((($arrayidx516)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = HEAP32[(31380)>>2]|0;
   $cmp529 = ($62>>>0)>($61>>>0);
   if ($cmp529) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $60;$F517$0 = $61;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (31668 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $63 = HEAP32[(31368)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $63 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $63 | $shl586;
  HEAP32[(31368)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $64 = HEAP32[$arrayidx579>>2]|0;
 $head6059 = ((($64)) + 4|0);
 $65 = HEAP32[$head6059>>2]|0;
 $and60610 = $65 & -8;
 $cmp60711 = ($and60610|0)==($psize$addr$2|0);
 L189: do {
  if ($cmp60711) {
   $T$0$lcssa = $64;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$013 = $shl604;$T$012 = $64;
   while(1) {
    $shr611 = $K597$013 >>> 31;
    $arrayidx613 = (((($T$012)) + 16|0) + ($shr611<<2)|0);
    $66 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($66|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$013 << 1;
    $head605 = ((($66)) + 4|0);
    $67 = HEAP32[$head605>>2]|0;
    $and606 = $67 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $66;
     break L189;
    } else {
     $K597$013 = $shl614;$T$012 = $66;
    }
   }
   $68 = HEAP32[(31380)>>2]|0;
   $cmp620 = ($68>>>0)>($arrayidx613>>>0);
   if ($cmp620) {
    _abort();
    // unreachable;
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$012;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $69 = HEAP32[$fd635>>2]|0;
 $70 = HEAP32[(31380)>>2]|0;
 $cmp637 = ($70>>>0)<=($T$0$lcssa>>>0);
 $cmp641 = ($70>>>0)<=($69>>>0);
 $71 = $cmp641 & $cmp637;
 if (!($71)) {
  _abort();
  // unreachable;
 }
 $bk648 = ((($69)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $69;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function _sbrk($increment) {
 $increment = $increment|0;
 var $0 = 0, $1 = 0, $add = 0, $add1 = 0, $and = 0, $call = 0, $call2 = 0, $call3 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $cmp4 = 0, $retval$2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($increment) + 3)|0;
 $and = $add & -4;
 $call = (_emscripten_get_sbrk_ptr()|0);
 $0 = HEAP32[$call>>2]|0;
 $add1 = (($0) + ($and))|0;
 $cmp = ($add1|0)<(0);
 if ($cmp) {
  $call2 = (___errno_location()|0);
  HEAP32[$call2>>2] = 48;
  $retval$2 = (-1);
  return ($retval$2|0);
 }
 $call3 = (_emscripten_get_heap_size()|0);
 $cmp4 = ($add1>>>0)>($call3>>>0);
 if ($cmp4) {
  $call6 = (_emscripten_resize_heap(($add1|0))|0);
  $tobool = ($call6|0)==(0);
  if ($tobool) {
   $call8 = (___errno_location()|0);
   HEAP32[$call8>>2] = 48;
   $retval$2 = (-1);
   return ($retval$2|0);
  }
 }
 HEAP32[$call>>2] = $add1;
 $1 = $0;
 $retval$2 = $1;
 return ($retval$2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 31904;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&0]()|0;
}


function dynCall_idi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return FUNCTION_TABLE_idi[index&255](+a1,a2|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&255](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b1() {
 ; nullFunc_i(0);return 0;
}
function b3(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(0);return 0;
}
function b4(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(1);return 0;
}
function b5(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(2);return 0;
}
function b6(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(3);return 0;
}
function b7(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(4);return 0;
}
function b8(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(5);return 0;
}
function b9(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(6);return 0;
}
function b10(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(7);return 0;
}
function b11(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(8);return 0;
}
function b12(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(9);return 0;
}
function b13(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(10);return 0;
}
function b14(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(11);return 0;
}
function b15(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(12);return 0;
}
function b16(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(13);return 0;
}
function b17(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(14);return 0;
}
function b18(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(15);return 0;
}
function b19(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(16);return 0;
}
function b20(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(17);return 0;
}
function b21(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(18);return 0;
}
function b22(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(19);return 0;
}
function b23(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(20);return 0;
}
function b24(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(21);return 0;
}
function b25(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(22);return 0;
}
function b26(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(23);return 0;
}
function b27(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(24);return 0;
}
function b28(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(25);return 0;
}
function b29(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(26);return 0;
}
function b30(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(27);return 0;
}
function b31(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(28);return 0;
}
function b32(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(29);return 0;
}
function b33(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(30);return 0;
}
function b34(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(31);return 0;
}
function b35(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(32);return 0;
}
function b36(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(33);return 0;
}
function b37(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(34);return 0;
}
function b38(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(35);return 0;
}
function b39(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(36);return 0;
}
function b40(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(37);return 0;
}
function b41(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(38);return 0;
}
function b42(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(39);return 0;
}
function b43(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(40);return 0;
}
function b44(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(41);return 0;
}
function b45(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(42);return 0;
}
function b46(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(43);return 0;
}
function b47(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(44);return 0;
}
function b48(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(45);return 0;
}
function b49(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(46);return 0;
}
function b50(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(47);return 0;
}
function b51(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(48);return 0;
}
function b52(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(49);return 0;
}
function b53(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(50);return 0;
}
function b54(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(51);return 0;
}
function b55(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(52);return 0;
}
function b56(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(53);return 0;
}
function b57(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(54);return 0;
}
function b58(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(55);return 0;
}
function b59(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(56);return 0;
}
function b60(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(57);return 0;
}
function b61(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(58);return 0;
}
function b62(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(59);return 0;
}
function b63(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(60);return 0;
}
function b64(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(61);return 0;
}
function b65(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(62);return 0;
}
function b66(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(63);return 0;
}
function b67(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(64);return 0;
}
function b68(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(65);return 0;
}
function b69(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(66);return 0;
}
function b70(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(67);return 0;
}
function b71(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(68);return 0;
}
function b72(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(69);return 0;
}
function b73(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(70);return 0;
}
function b74(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(71);return 0;
}
function b75(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(72);return 0;
}
function b76(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(73);return 0;
}
function b77(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(74);return 0;
}
function b78(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(75);return 0;
}
function b79(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(76);return 0;
}
function b80(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(77);return 0;
}
function b81(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(78);return 0;
}
function b82(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(79);return 0;
}
function b83(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(80);return 0;
}
function b84(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(81);return 0;
}
function b85(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(82);return 0;
}
function b86(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(83);return 0;
}
function b87(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(84);return 0;
}
function b88(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(85);return 0;
}
function b89(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(86);return 0;
}
function b90(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(87);return 0;
}
function b91(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(88);return 0;
}
function b92(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(89);return 0;
}
function b93(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(90);return 0;
}
function b94(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(91);return 0;
}
function b95(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(92);return 0;
}
function b96(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(93);return 0;
}
function b97(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(94);return 0;
}
function b98(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(95);return 0;
}
function b99(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(96);return 0;
}
function b100(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(97);return 0;
}
function b101(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(98);return 0;
}
function b102(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(99);return 0;
}
function b103(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(100);return 0;
}
function b104(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(101);return 0;
}
function b105(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(102);return 0;
}
function b106(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(103);return 0;
}
function b107(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(104);return 0;
}
function b108(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(105);return 0;
}
function b109(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(106);return 0;
}
function b110(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(107);return 0;
}
function b111(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(108);return 0;
}
function b112(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(109);return 0;
}
function b113(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(110);return 0;
}
function b114(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(111);return 0;
}
function b115(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(112);return 0;
}
function b116(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(113);return 0;
}
function b117(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(114);return 0;
}
function b118(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(115);return 0;
}
function b119(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(116);return 0;
}
function b120(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(117);return 0;
}
function b121(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(118);return 0;
}
function b122(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(119);return 0;
}
function b123(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(120);return 0;
}
function b124(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(121);return 0;
}
function b125(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(122);return 0;
}
function b126(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(123);return 0;
}
function b127(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(124);return 0;
}
function b128(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(125);return 0;
}
function b129(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(126);return 0;
}
function b130(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(127);return 0;
}
function b131(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(128);return 0;
}
function b132(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(129);return 0;
}
function b133(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(130);return 0;
}
function b134(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(131);return 0;
}
function b135(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(132);return 0;
}
function b136(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(133);return 0;
}
function b137(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(134);return 0;
}
function b138(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(135);return 0;
}
function b139(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(136);return 0;
}
function b140(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(137);return 0;
}
function b141(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(138);return 0;
}
function b142(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(139);return 0;
}
function b143(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(140);return 0;
}
function b144(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(141);return 0;
}
function b145(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(142);return 0;
}
function b146(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(143);return 0;
}
function b147(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(144);return 0;
}
function b148(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(145);return 0;
}
function b149(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(146);return 0;
}
function b150(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(147);return 0;
}
function b151(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(148);return 0;
}
function b152(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(149);return 0;
}
function b153(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(150);return 0;
}
function b154(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(151);return 0;
}
function b155(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(152);return 0;
}
function b156(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(153);return 0;
}
function b157(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(154);return 0;
}
function b158(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(155);return 0;
}
function b159(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(156);return 0;
}
function b160(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(157);return 0;
}
function b161(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(158);return 0;
}
function b162(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(159);return 0;
}
function b163(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(160);return 0;
}
function b164(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(161);return 0;
}
function b165(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(162);return 0;
}
function b166(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(163);return 0;
}
function b167(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(164);return 0;
}
function b168(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(165);return 0;
}
function b169(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(166);return 0;
}
function b170(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(167);return 0;
}
function b171(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(168);return 0;
}
function b172(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(169);return 0;
}
function b173(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(170);return 0;
}
function b174(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(171);return 0;
}
function b175(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(172);return 0;
}
function b176(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(173);return 0;
}
function b177(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(174);return 0;
}
function b178(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(175);return 0;
}
function b179(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(176);return 0;
}
function b180(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(177);return 0;
}
function b181(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(178);return 0;
}
function b182(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(179);return 0;
}
function b183(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(180);return 0;
}
function b184(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(181);return 0;
}
function b185(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(182);return 0;
}
function b186(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(183);return 0;
}
function b187(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(184);return 0;
}
function b188(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(185);return 0;
}
function b189(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(186);return 0;
}
function b190(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(187);return 0;
}
function b191(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(188);return 0;
}
function b192(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(189);return 0;
}
function b193(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(190);return 0;
}
function b194(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(191);return 0;
}
function b195(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(192);return 0;
}
function b196(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(193);return 0;
}
function b197(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(194);return 0;
}
function b198(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(195);return 0;
}
function b199(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(196);return 0;
}
function b200(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(197);return 0;
}
function b201(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(198);return 0;
}
function b202(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(199);return 0;
}
function b203(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(200);return 0;
}
function b204(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(201);return 0;
}
function b205(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(202);return 0;
}
function b206(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(203);return 0;
}
function b207(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(204);return 0;
}
function b208(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(205);return 0;
}
function b209(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(206);return 0;
}
function b210(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(207);return 0;
}
function b211(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(208);return 0;
}
function b212(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(209);return 0;
}
function b213(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(210);return 0;
}
function b214(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(211);return 0;
}
function b215(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(212);return 0;
}
function b216(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(213);return 0;
}
function b217(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(215);return 0;
}
function b218(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(216);return 0;
}
function b219(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(217);return 0;
}
function b220(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(218);return 0;
}
function b221(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(219);return 0;
}
function b222(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(220);return 0;
}
function b223(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(221);return 0;
}
function b224(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(222);return 0;
}
function b225(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(223);return 0;
}
function b226(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(224);return 0;
}
function b227(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(225);return 0;
}
function b228(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(226);return 0;
}
function b229(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(227);return 0;
}
function b230(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(228);return 0;
}
function b231(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(229);return 0;
}
function b232(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(230);return 0;
}
function b233(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(231);return 0;
}
function b234(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(232);return 0;
}
function b235(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(233);return 0;
}
function b236(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(234);return 0;
}
function b237(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(235);return 0;
}
function b238(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(236);return 0;
}
function b239(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(237);return 0;
}
function b240(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(238);return 0;
}
function b241(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(239);return 0;
}
function b242(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(240);return 0;
}
function b243(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(241);return 0;
}
function b244(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(242);return 0;
}
function b245(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(243);return 0;
}
function b246(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(244);return 0;
}
function b247(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(245);return 0;
}
function b248(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(246);return 0;
}
function b249(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(247);return 0;
}
function b250(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(248);return 0;
}
function b251(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(249);return 0;
}
function b252(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(250);return 0;
}
function b253(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(251);return 0;
}
function b254(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(252);return 0;
}
function b255(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(253);return 0;
}
function b256(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(254);return 0;
}
function b257(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(255);return 0;
}
function b259(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b260(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b261(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b262(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b263(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b264(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function b265(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function b266(p0) {
 p0 = p0|0; nullFunc_ii(9);return 0;
}
function b267(p0) {
 p0 = p0|0; nullFunc_ii(10);return 0;
}
function b268(p0) {
 p0 = p0|0; nullFunc_ii(11);return 0;
}
function b269(p0) {
 p0 = p0|0; nullFunc_ii(12);return 0;
}
function b270(p0) {
 p0 = p0|0; nullFunc_ii(13);return 0;
}
function b271(p0) {
 p0 = p0|0; nullFunc_ii(14);return 0;
}
function b272(p0) {
 p0 = p0|0; nullFunc_ii(15);return 0;
}
function b273(p0) {
 p0 = p0|0; nullFunc_ii(16);return 0;
}
function b274(p0) {
 p0 = p0|0; nullFunc_ii(17);return 0;
}
function b275(p0) {
 p0 = p0|0; nullFunc_ii(18);return 0;
}
function b276(p0) {
 p0 = p0|0; nullFunc_ii(19);return 0;
}
function b277(p0) {
 p0 = p0|0; nullFunc_ii(20);return 0;
}
function b278(p0) {
 p0 = p0|0; nullFunc_ii(21);return 0;
}
function b279(p0) {
 p0 = p0|0; nullFunc_ii(22);return 0;
}
function b280(p0) {
 p0 = p0|0; nullFunc_ii(23);return 0;
}
function b281(p0) {
 p0 = p0|0; nullFunc_ii(24);return 0;
}
function b282(p0) {
 p0 = p0|0; nullFunc_ii(25);return 0;
}
function b283(p0) {
 p0 = p0|0; nullFunc_ii(26);return 0;
}
function b284(p0) {
 p0 = p0|0; nullFunc_ii(27);return 0;
}
function b285(p0) {
 p0 = p0|0; nullFunc_ii(28);return 0;
}
function b286(p0) {
 p0 = p0|0; nullFunc_ii(29);return 0;
}
function b287(p0) {
 p0 = p0|0; nullFunc_ii(30);return 0;
}
function b288(p0) {
 p0 = p0|0; nullFunc_ii(31);return 0;
}
function b289(p0) {
 p0 = p0|0; nullFunc_ii(32);return 0;
}
function b290(p0) {
 p0 = p0|0; nullFunc_ii(33);return 0;
}
function b291(p0) {
 p0 = p0|0; nullFunc_ii(34);return 0;
}
function b292(p0) {
 p0 = p0|0; nullFunc_ii(35);return 0;
}
function b293(p0) {
 p0 = p0|0; nullFunc_ii(36);return 0;
}
function b294(p0) {
 p0 = p0|0; nullFunc_ii(37);return 0;
}
function b295(p0) {
 p0 = p0|0; nullFunc_ii(38);return 0;
}
function b296(p0) {
 p0 = p0|0; nullFunc_ii(39);return 0;
}
function b297(p0) {
 p0 = p0|0; nullFunc_ii(40);return 0;
}
function b298(p0) {
 p0 = p0|0; nullFunc_ii(41);return 0;
}
function b299(p0) {
 p0 = p0|0; nullFunc_ii(42);return 0;
}
function b300(p0) {
 p0 = p0|0; nullFunc_ii(43);return 0;
}
function b301(p0) {
 p0 = p0|0; nullFunc_ii(44);return 0;
}
function b302(p0) {
 p0 = p0|0; nullFunc_ii(45);return 0;
}
function b303(p0) {
 p0 = p0|0; nullFunc_ii(46);return 0;
}
function b304(p0) {
 p0 = p0|0; nullFunc_ii(47);return 0;
}
function b305(p0) {
 p0 = p0|0; nullFunc_ii(48);return 0;
}
function b306(p0) {
 p0 = p0|0; nullFunc_ii(49);return 0;
}
function b307(p0) {
 p0 = p0|0; nullFunc_ii(50);return 0;
}
function b308(p0) {
 p0 = p0|0; nullFunc_ii(51);return 0;
}
function b309(p0) {
 p0 = p0|0; nullFunc_ii(52);return 0;
}
function b310(p0) {
 p0 = p0|0; nullFunc_ii(53);return 0;
}
function b311(p0) {
 p0 = p0|0; nullFunc_ii(54);return 0;
}
function b312(p0) {
 p0 = p0|0; nullFunc_ii(55);return 0;
}
function b313(p0) {
 p0 = p0|0; nullFunc_ii(56);return 0;
}
function b314(p0) {
 p0 = p0|0; nullFunc_ii(57);return 0;
}
function b315(p0) {
 p0 = p0|0; nullFunc_ii(58);return 0;
}
function b316(p0) {
 p0 = p0|0; nullFunc_ii(59);return 0;
}
function b317(p0) {
 p0 = p0|0; nullFunc_ii(60);return 0;
}
function b318(p0) {
 p0 = p0|0; nullFunc_ii(61);return 0;
}
function b319(p0) {
 p0 = p0|0; nullFunc_ii(62);return 0;
}
function b320(p0) {
 p0 = p0|0; nullFunc_ii(63);return 0;
}
function b321(p0) {
 p0 = p0|0; nullFunc_ii(64);return 0;
}
function b322(p0) {
 p0 = p0|0; nullFunc_ii(65);return 0;
}
function b323(p0) {
 p0 = p0|0; nullFunc_ii(66);return 0;
}
function b324(p0) {
 p0 = p0|0; nullFunc_ii(67);return 0;
}
function b325(p0) {
 p0 = p0|0; nullFunc_ii(68);return 0;
}
function b326(p0) {
 p0 = p0|0; nullFunc_ii(69);return 0;
}
function b327(p0) {
 p0 = p0|0; nullFunc_ii(70);return 0;
}
function b328(p0) {
 p0 = p0|0; nullFunc_ii(71);return 0;
}
function b329(p0) {
 p0 = p0|0; nullFunc_ii(72);return 0;
}
function b330(p0) {
 p0 = p0|0; nullFunc_ii(73);return 0;
}
function b331(p0) {
 p0 = p0|0; nullFunc_ii(74);return 0;
}
function b332(p0) {
 p0 = p0|0; nullFunc_ii(75);return 0;
}
function b333(p0) {
 p0 = p0|0; nullFunc_ii(76);return 0;
}
function b334(p0) {
 p0 = p0|0; nullFunc_ii(77);return 0;
}
function b335(p0) {
 p0 = p0|0; nullFunc_ii(78);return 0;
}
function b336(p0) {
 p0 = p0|0; nullFunc_ii(79);return 0;
}
function b337(p0) {
 p0 = p0|0; nullFunc_ii(80);return 0;
}
function b338(p0) {
 p0 = p0|0; nullFunc_ii(81);return 0;
}
function b339(p0) {
 p0 = p0|0; nullFunc_ii(82);return 0;
}
function b340(p0) {
 p0 = p0|0; nullFunc_ii(83);return 0;
}
function b341(p0) {
 p0 = p0|0; nullFunc_ii(84);return 0;
}
function b342(p0) {
 p0 = p0|0; nullFunc_ii(85);return 0;
}
function b343(p0) {
 p0 = p0|0; nullFunc_ii(86);return 0;
}
function b344(p0) {
 p0 = p0|0; nullFunc_ii(87);return 0;
}
function b345(p0) {
 p0 = p0|0; nullFunc_ii(88);return 0;
}
function b346(p0) {
 p0 = p0|0; nullFunc_ii(89);return 0;
}
function b347(p0) {
 p0 = p0|0; nullFunc_ii(90);return 0;
}
function b348(p0) {
 p0 = p0|0; nullFunc_ii(91);return 0;
}
function b349(p0) {
 p0 = p0|0; nullFunc_ii(92);return 0;
}
function b350(p0) {
 p0 = p0|0; nullFunc_ii(93);return 0;
}
function b351(p0) {
 p0 = p0|0; nullFunc_ii(94);return 0;
}
function b352(p0) {
 p0 = p0|0; nullFunc_ii(95);return 0;
}
function b353(p0) {
 p0 = p0|0; nullFunc_ii(96);return 0;
}
function b354(p0) {
 p0 = p0|0; nullFunc_ii(97);return 0;
}
function b355(p0) {
 p0 = p0|0; nullFunc_ii(98);return 0;
}
function b356(p0) {
 p0 = p0|0; nullFunc_ii(99);return 0;
}
function b357(p0) {
 p0 = p0|0; nullFunc_ii(100);return 0;
}
function b358(p0) {
 p0 = p0|0; nullFunc_ii(101);return 0;
}
function b359(p0) {
 p0 = p0|0; nullFunc_ii(102);return 0;
}
function b360(p0) {
 p0 = p0|0; nullFunc_ii(103);return 0;
}
function b361(p0) {
 p0 = p0|0; nullFunc_ii(104);return 0;
}
function b362(p0) {
 p0 = p0|0; nullFunc_ii(105);return 0;
}
function b363(p0) {
 p0 = p0|0; nullFunc_ii(106);return 0;
}
function b364(p0) {
 p0 = p0|0; nullFunc_ii(107);return 0;
}
function b365(p0) {
 p0 = p0|0; nullFunc_ii(108);return 0;
}
function b366(p0) {
 p0 = p0|0; nullFunc_ii(109);return 0;
}
function b367(p0) {
 p0 = p0|0; nullFunc_ii(110);return 0;
}
function b368(p0) {
 p0 = p0|0; nullFunc_ii(111);return 0;
}
function b369(p0) {
 p0 = p0|0; nullFunc_ii(112);return 0;
}
function b370(p0) {
 p0 = p0|0; nullFunc_ii(113);return 0;
}
function b371(p0) {
 p0 = p0|0; nullFunc_ii(114);return 0;
}
function b372(p0) {
 p0 = p0|0; nullFunc_ii(115);return 0;
}
function b373(p0) {
 p0 = p0|0; nullFunc_ii(116);return 0;
}
function b374(p0) {
 p0 = p0|0; nullFunc_ii(117);return 0;
}
function b375(p0) {
 p0 = p0|0; nullFunc_ii(118);return 0;
}
function b376(p0) {
 p0 = p0|0; nullFunc_ii(119);return 0;
}
function b377(p0) {
 p0 = p0|0; nullFunc_ii(120);return 0;
}
function b378(p0) {
 p0 = p0|0; nullFunc_ii(121);return 0;
}
function b379(p0) {
 p0 = p0|0; nullFunc_ii(122);return 0;
}
function b380(p0) {
 p0 = p0|0; nullFunc_ii(123);return 0;
}
function b381(p0) {
 p0 = p0|0; nullFunc_ii(124);return 0;
}
function b382(p0) {
 p0 = p0|0; nullFunc_ii(125);return 0;
}
function b383(p0) {
 p0 = p0|0; nullFunc_ii(126);return 0;
}
function b384(p0) {
 p0 = p0|0; nullFunc_ii(127);return 0;
}
function b385(p0) {
 p0 = p0|0; nullFunc_ii(128);return 0;
}
function b386(p0) {
 p0 = p0|0; nullFunc_ii(129);return 0;
}
function b387(p0) {
 p0 = p0|0; nullFunc_ii(130);return 0;
}
function b388(p0) {
 p0 = p0|0; nullFunc_ii(131);return 0;
}
function b389(p0) {
 p0 = p0|0; nullFunc_ii(132);return 0;
}
function b390(p0) {
 p0 = p0|0; nullFunc_ii(133);return 0;
}
function b391(p0) {
 p0 = p0|0; nullFunc_ii(134);return 0;
}
function b392(p0) {
 p0 = p0|0; nullFunc_ii(135);return 0;
}
function b393(p0) {
 p0 = p0|0; nullFunc_ii(136);return 0;
}
function b394(p0) {
 p0 = p0|0; nullFunc_ii(137);return 0;
}
function b395(p0) {
 p0 = p0|0; nullFunc_ii(138);return 0;
}
function b396(p0) {
 p0 = p0|0; nullFunc_ii(139);return 0;
}
function b397(p0) {
 p0 = p0|0; nullFunc_ii(140);return 0;
}
function b398(p0) {
 p0 = p0|0; nullFunc_ii(141);return 0;
}
function b399(p0) {
 p0 = p0|0; nullFunc_ii(142);return 0;
}
function b400(p0) {
 p0 = p0|0; nullFunc_ii(143);return 0;
}
function b401(p0) {
 p0 = p0|0; nullFunc_ii(144);return 0;
}
function b402(p0) {
 p0 = p0|0; nullFunc_ii(145);return 0;
}
function b403(p0) {
 p0 = p0|0; nullFunc_ii(146);return 0;
}
function b404(p0) {
 p0 = p0|0; nullFunc_ii(147);return 0;
}
function b405(p0) {
 p0 = p0|0; nullFunc_ii(148);return 0;
}
function b406(p0) {
 p0 = p0|0; nullFunc_ii(149);return 0;
}
function b407(p0) {
 p0 = p0|0; nullFunc_ii(150);return 0;
}
function b408(p0) {
 p0 = p0|0; nullFunc_ii(151);return 0;
}
function b409(p0) {
 p0 = p0|0; nullFunc_ii(152);return 0;
}
function b410(p0) {
 p0 = p0|0; nullFunc_ii(153);return 0;
}
function b411(p0) {
 p0 = p0|0; nullFunc_ii(154);return 0;
}
function b412(p0) {
 p0 = p0|0; nullFunc_ii(155);return 0;
}
function b413(p0) {
 p0 = p0|0; nullFunc_ii(156);return 0;
}
function b414(p0) {
 p0 = p0|0; nullFunc_ii(157);return 0;
}
function b415(p0) {
 p0 = p0|0; nullFunc_ii(158);return 0;
}
function b416(p0) {
 p0 = p0|0; nullFunc_ii(159);return 0;
}
function b417(p0) {
 p0 = p0|0; nullFunc_ii(160);return 0;
}
function b418(p0) {
 p0 = p0|0; nullFunc_ii(161);return 0;
}
function b419(p0) {
 p0 = p0|0; nullFunc_ii(162);return 0;
}
function b420(p0) {
 p0 = p0|0; nullFunc_ii(163);return 0;
}
function b421(p0) {
 p0 = p0|0; nullFunc_ii(164);return 0;
}
function b422(p0) {
 p0 = p0|0; nullFunc_ii(165);return 0;
}
function b423(p0) {
 p0 = p0|0; nullFunc_ii(166);return 0;
}
function b424(p0) {
 p0 = p0|0; nullFunc_ii(167);return 0;
}
function b425(p0) {
 p0 = p0|0; nullFunc_ii(168);return 0;
}
function b426(p0) {
 p0 = p0|0; nullFunc_ii(169);return 0;
}
function b427(p0) {
 p0 = p0|0; nullFunc_ii(170);return 0;
}
function b428(p0) {
 p0 = p0|0; nullFunc_ii(171);return 0;
}
function b429(p0) {
 p0 = p0|0; nullFunc_ii(172);return 0;
}
function b430(p0) {
 p0 = p0|0; nullFunc_ii(173);return 0;
}
function b431(p0) {
 p0 = p0|0; nullFunc_ii(174);return 0;
}
function b432(p0) {
 p0 = p0|0; nullFunc_ii(175);return 0;
}
function b433(p0) {
 p0 = p0|0; nullFunc_ii(176);return 0;
}
function b434(p0) {
 p0 = p0|0; nullFunc_ii(177);return 0;
}
function b435(p0) {
 p0 = p0|0; nullFunc_ii(178);return 0;
}
function b436(p0) {
 p0 = p0|0; nullFunc_ii(179);return 0;
}
function b437(p0) {
 p0 = p0|0; nullFunc_ii(180);return 0;
}
function b438(p0) {
 p0 = p0|0; nullFunc_ii(181);return 0;
}
function b439(p0) {
 p0 = p0|0; nullFunc_ii(182);return 0;
}
function b440(p0) {
 p0 = p0|0; nullFunc_ii(183);return 0;
}
function b441(p0) {
 p0 = p0|0; nullFunc_ii(184);return 0;
}
function b442(p0) {
 p0 = p0|0; nullFunc_ii(185);return 0;
}
function b443(p0) {
 p0 = p0|0; nullFunc_ii(186);return 0;
}
function b444(p0) {
 p0 = p0|0; nullFunc_ii(187);return 0;
}
function b445(p0) {
 p0 = p0|0; nullFunc_ii(188);return 0;
}
function b446(p0) {
 p0 = p0|0; nullFunc_ii(189);return 0;
}
function b447(p0) {
 p0 = p0|0; nullFunc_ii(190);return 0;
}
function b448(p0) {
 p0 = p0|0; nullFunc_ii(191);return 0;
}
function b449(p0) {
 p0 = p0|0; nullFunc_ii(192);return 0;
}
function b450(p0) {
 p0 = p0|0; nullFunc_ii(193);return 0;
}
function b451(p0) {
 p0 = p0|0; nullFunc_ii(194);return 0;
}
function b452(p0) {
 p0 = p0|0; nullFunc_ii(195);return 0;
}
function b453(p0) {
 p0 = p0|0; nullFunc_ii(196);return 0;
}
function b454(p0) {
 p0 = p0|0; nullFunc_ii(197);return 0;
}
function b455(p0) {
 p0 = p0|0; nullFunc_ii(198);return 0;
}
function b456(p0) {
 p0 = p0|0; nullFunc_ii(199);return 0;
}
function b457(p0) {
 p0 = p0|0; nullFunc_ii(200);return 0;
}
function b458(p0) {
 p0 = p0|0; nullFunc_ii(201);return 0;
}
function b459(p0) {
 p0 = p0|0; nullFunc_ii(202);return 0;
}
function b460(p0) {
 p0 = p0|0; nullFunc_ii(203);return 0;
}
function b461(p0) {
 p0 = p0|0; nullFunc_ii(204);return 0;
}
function b462(p0) {
 p0 = p0|0; nullFunc_ii(205);return 0;
}
function b463(p0) {
 p0 = p0|0; nullFunc_ii(206);return 0;
}
function b464(p0) {
 p0 = p0|0; nullFunc_ii(207);return 0;
}
function b465(p0) {
 p0 = p0|0; nullFunc_ii(208);return 0;
}
function b466(p0) {
 p0 = p0|0; nullFunc_ii(209);return 0;
}
function b467(p0) {
 p0 = p0|0; nullFunc_ii(213);return 0;
}
function b468(p0) {
 p0 = p0|0; nullFunc_ii(214);return 0;
}
function b469(p0) {
 p0 = p0|0; nullFunc_ii(215);return 0;
}
function b470(p0) {
 p0 = p0|0; nullFunc_ii(216);return 0;
}
function b471(p0) {
 p0 = p0|0; nullFunc_ii(217);return 0;
}
function b472(p0) {
 p0 = p0|0; nullFunc_ii(218);return 0;
}
function b473(p0) {
 p0 = p0|0; nullFunc_ii(219);return 0;
}
function b474(p0) {
 p0 = p0|0; nullFunc_ii(220);return 0;
}
function b475(p0) {
 p0 = p0|0; nullFunc_ii(221);return 0;
}
function b476(p0) {
 p0 = p0|0; nullFunc_ii(222);return 0;
}
function b477(p0) {
 p0 = p0|0; nullFunc_ii(223);return 0;
}
function b478(p0) {
 p0 = p0|0; nullFunc_ii(224);return 0;
}
function b479(p0) {
 p0 = p0|0; nullFunc_ii(225);return 0;
}
function b480(p0) {
 p0 = p0|0; nullFunc_ii(226);return 0;
}
function b481(p0) {
 p0 = p0|0; nullFunc_ii(227);return 0;
}
function b482(p0) {
 p0 = p0|0; nullFunc_ii(228);return 0;
}
function b483(p0) {
 p0 = p0|0; nullFunc_ii(229);return 0;
}
function b484(p0) {
 p0 = p0|0; nullFunc_ii(230);return 0;
}
function b485(p0) {
 p0 = p0|0; nullFunc_ii(231);return 0;
}
function b486(p0) {
 p0 = p0|0; nullFunc_ii(232);return 0;
}
function b487(p0) {
 p0 = p0|0; nullFunc_ii(233);return 0;
}
function b488(p0) {
 p0 = p0|0; nullFunc_ii(234);return 0;
}
function b489(p0) {
 p0 = p0|0; nullFunc_ii(235);return 0;
}
function b490(p0) {
 p0 = p0|0; nullFunc_ii(236);return 0;
}
function b491(p0) {
 p0 = p0|0; nullFunc_ii(237);return 0;
}
function b492(p0) {
 p0 = p0|0; nullFunc_ii(238);return 0;
}
function b493(p0) {
 p0 = p0|0; nullFunc_ii(239);return 0;
}
function b494(p0) {
 p0 = p0|0; nullFunc_ii(240);return 0;
}
function b495(p0) {
 p0 = p0|0; nullFunc_ii(241);return 0;
}
function b496(p0) {
 p0 = p0|0; nullFunc_ii(242);return 0;
}
function b497(p0) {
 p0 = p0|0; nullFunc_ii(243);return 0;
}
function b498(p0) {
 p0 = p0|0; nullFunc_ii(244);return 0;
}
function b499(p0) {
 p0 = p0|0; nullFunc_ii(245);return 0;
}
function b500(p0) {
 p0 = p0|0; nullFunc_ii(246);return 0;
}
function b501(p0) {
 p0 = p0|0; nullFunc_ii(247);return 0;
}
function b502(p0) {
 p0 = p0|0; nullFunc_ii(248);return 0;
}
function b503(p0) {
 p0 = p0|0; nullFunc_ii(249);return 0;
}
function b504(p0) {
 p0 = p0|0; nullFunc_ii(250);return 0;
}
function b505(p0) {
 p0 = p0|0; nullFunc_ii(251);return 0;
}
function b506(p0) {
 p0 = p0|0; nullFunc_ii(252);return 0;
}
function b507(p0) {
 p0 = p0|0; nullFunc_ii(253);return 0;
}
function b508(p0) {
 p0 = p0|0; nullFunc_ii(254);return 0;
}
function b509(p0) {
 p0 = p0|0; nullFunc_ii(255);return 0;
}
function b511(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(0);return 0;
}
function b512(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(1);return 0;
}
function b513(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b514(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(3);return 0;
}
function b515(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(4);return 0;
}
function b516(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(5);return 0;
}
function b517(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(6);return 0;
}
function b518(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(7);return 0;
}
function b519(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(8);return 0;
}
function b520(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(9);return 0;
}
function b521(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(10);return 0;
}
function b522(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(11);return 0;
}
function b523(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(12);return 0;
}
function b524(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(13);return 0;
}
function b525(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(14);return 0;
}
function b526(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(15);return 0;
}
function b527(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(16);return 0;
}
function b528(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(17);return 0;
}
function b529(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(18);return 0;
}
function b530(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(19);return 0;
}
function b531(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(20);return 0;
}
function b532(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(21);return 0;
}
function b533(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(22);return 0;
}
function b534(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(23);return 0;
}
function b535(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(24);return 0;
}
function b536(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(25);return 0;
}
function b537(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(26);return 0;
}
function b538(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(27);return 0;
}
function b539(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(28);return 0;
}
function b540(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(29);return 0;
}
function b541(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(30);return 0;
}
function b542(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(31);return 0;
}
function b543(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(32);return 0;
}
function b544(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(33);return 0;
}
function b545(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(34);return 0;
}
function b546(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(35);return 0;
}
function b547(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(36);return 0;
}
function b548(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(37);return 0;
}
function b549(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(38);return 0;
}
function b550(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(39);return 0;
}
function b551(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(40);return 0;
}
function b552(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(41);return 0;
}
function b553(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(42);return 0;
}
function b554(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(43);return 0;
}
function b555(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(44);return 0;
}
function b556(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(45);return 0;
}
function b557(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(46);return 0;
}
function b558(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(47);return 0;
}
function b559(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(48);return 0;
}
function b560(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(49);return 0;
}
function b561(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(50);return 0;
}
function b562(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(51);return 0;
}
function b563(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(52);return 0;
}
function b564(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(53);return 0;
}
function b565(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(54);return 0;
}
function b566(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(55);return 0;
}
function b567(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(56);return 0;
}
function b568(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(57);return 0;
}
function b569(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(58);return 0;
}
function b570(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(59);return 0;
}
function b571(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(60);return 0;
}
function b572(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(61);return 0;
}
function b573(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(62);return 0;
}
function b574(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(63);return 0;
}
function b575(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(64);return 0;
}
function b576(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(65);return 0;
}
function b577(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(66);return 0;
}
function b578(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(67);return 0;
}
function b579(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(68);return 0;
}
function b580(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(69);return 0;
}
function b581(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(70);return 0;
}
function b582(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(71);return 0;
}
function b583(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(72);return 0;
}
function b584(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(73);return 0;
}
function b585(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(74);return 0;
}
function b586(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(75);return 0;
}
function b587(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(76);return 0;
}
function b588(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(77);return 0;
}
function b589(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(78);return 0;
}
function b590(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(79);return 0;
}
function b591(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(80);return 0;
}
function b592(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(81);return 0;
}
function b593(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(82);return 0;
}
function b594(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(83);return 0;
}
function b595(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(84);return 0;
}
function b596(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(85);return 0;
}
function b597(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(86);return 0;
}
function b598(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(87);return 0;
}
function b599(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(88);return 0;
}
function b600(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(89);return 0;
}
function b601(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(90);return 0;
}
function b602(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(91);return 0;
}
function b603(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(92);return 0;
}
function b604(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(93);return 0;
}
function b605(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(94);return 0;
}
function b606(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(95);return 0;
}
function b607(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(96);return 0;
}
function b608(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(97);return 0;
}
function b609(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(98);return 0;
}
function b610(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(99);return 0;
}
function b611(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(100);return 0;
}
function b612(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(101);return 0;
}
function b613(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(102);return 0;
}
function b614(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(103);return 0;
}
function b615(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(104);return 0;
}
function b616(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(105);return 0;
}
function b617(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(106);return 0;
}
function b618(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(107);return 0;
}
function b619(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(108);return 0;
}
function b620(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(109);return 0;
}
function b621(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(110);return 0;
}
function b622(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(111);return 0;
}
function b623(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(112);return 0;
}
function b624(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(113);return 0;
}
function b625(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(114);return 0;
}
function b626(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(115);return 0;
}
function b627(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(116);return 0;
}
function b628(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(117);return 0;
}
function b629(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(118);return 0;
}
function b630(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(119);return 0;
}
function b631(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(120);return 0;
}
function b632(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(121);return 0;
}
function b633(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(122);return 0;
}
function b634(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(123);return 0;
}
function b635(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(124);return 0;
}
function b636(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(125);return 0;
}
function b637(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(126);return 0;
}
function b638(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(127);return 0;
}
function b639(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(128);return 0;
}
function b640(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(129);return 0;
}
function b641(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(130);return 0;
}
function b642(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(131);return 0;
}
function b643(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(132);return 0;
}
function b644(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(133);return 0;
}
function b645(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(134);return 0;
}
function b646(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(135);return 0;
}
function b647(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(136);return 0;
}
function b648(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(137);return 0;
}
function b649(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(138);return 0;
}
function b650(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(139);return 0;
}
function b651(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(140);return 0;
}
function b652(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(141);return 0;
}
function b653(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(142);return 0;
}
function b654(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(143);return 0;
}
function b655(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(144);return 0;
}
function b656(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(145);return 0;
}
function b657(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(146);return 0;
}
function b658(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(147);return 0;
}
function b659(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(148);return 0;
}
function b660(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(149);return 0;
}
function b661(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(150);return 0;
}
function b662(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(151);return 0;
}
function b663(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(152);return 0;
}
function b664(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(153);return 0;
}
function b665(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(154);return 0;
}
function b666(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(155);return 0;
}
function b667(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(156);return 0;
}
function b668(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(157);return 0;
}
function b669(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(158);return 0;
}
function b670(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(159);return 0;
}
function b671(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(160);return 0;
}
function b672(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(161);return 0;
}
function b673(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(162);return 0;
}
function b674(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(163);return 0;
}
function b675(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(164);return 0;
}
function b676(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(165);return 0;
}
function b677(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(166);return 0;
}
function b678(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(167);return 0;
}
function b679(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(168);return 0;
}
function b680(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(169);return 0;
}
function b681(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(170);return 0;
}
function b682(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(171);return 0;
}
function b683(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(172);return 0;
}
function b684(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(173);return 0;
}
function b685(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(174);return 0;
}
function b686(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(175);return 0;
}
function b687(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(176);return 0;
}
function b688(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(177);return 0;
}
function b689(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(178);return 0;
}
function b690(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(179);return 0;
}
function b691(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(180);return 0;
}
function b692(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(181);return 0;
}
function b693(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(182);return 0;
}
function b694(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(183);return 0;
}
function b695(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(184);return 0;
}
function b696(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(185);return 0;
}
function b697(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(186);return 0;
}
function b698(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(187);return 0;
}
function b699(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(188);return 0;
}
function b700(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(189);return 0;
}
function b701(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(190);return 0;
}
function b702(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(191);return 0;
}
function b703(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(192);return 0;
}
function b704(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(193);return 0;
}
function b705(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(194);return 0;
}
function b706(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(195);return 0;
}
function b707(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(196);return 0;
}
function b708(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(197);return 0;
}
function b709(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(198);return 0;
}
function b710(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(199);return 0;
}
function b711(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(200);return 0;
}
function b712(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(201);return 0;
}
function b713(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(202);return 0;
}
function b714(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(203);return 0;
}
function b715(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(204);return 0;
}
function b716(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(205);return 0;
}
function b717(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(206);return 0;
}
function b718(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(207);return 0;
}
function b719(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(208);return 0;
}
function b720(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(209);return 0;
}
function b721(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(210);return 0;
}
function b722(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(211);return 0;
}
function b723(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(212);return 0;
}
function b724(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(213);return 0;
}
function b725(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(214);return 0;
}
function b726(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(216);return 0;
}
function b727(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(217);return 0;
}
function b728(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(218);return 0;
}
function b729(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(219);return 0;
}
function b730(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(220);return 0;
}
function b731(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(221);return 0;
}
function b732(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(222);return 0;
}
function b733(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(223);return 0;
}
function b734(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(224);return 0;
}
function b735(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(225);return 0;
}
function b736(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(226);return 0;
}
function b737(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(227);return 0;
}
function b738(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(228);return 0;
}
function b739(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(229);return 0;
}
function b740(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(230);return 0;
}
function b741(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(231);return 0;
}
function b742(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(232);return 0;
}
function b743(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(233);return 0;
}
function b744(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(234);return 0;
}
function b745(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(235);return 0;
}
function b746(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(236);return 0;
}
function b747(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(237);return 0;
}
function b748(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(238);return 0;
}
function b749(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(239);return 0;
}
function b750(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(240);return 0;
}
function b751(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(241);return 0;
}
function b752(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(242);return 0;
}
function b753(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(243);return 0;
}
function b754(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(244);return 0;
}
function b755(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(245);return 0;
}
function b756(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(246);return 0;
}
function b757(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(247);return 0;
}
function b758(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(248);return 0;
}
function b759(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(249);return 0;
}
function b760(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(250);return 0;
}
function b761(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(251);return 0;
}
function b762(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(252);return 0;
}
function b763(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(253);return 0;
}
function b764(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(254);return 0;
}
function b765(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(255);return 0;
}
function b767(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(0);return 0;
}
function b768(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b769(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b770(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b771(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(4);return 0;
}
function b772(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}
function b773(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b774(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0;
}
function b775(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function b776(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b777(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0;
}
function b778(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function b779(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(12);return 0;
}
function b780(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0;
}
function b781(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(14);return 0;
}
function b782(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0;
}
function b783(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function b784(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0;
}
function b785(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0;
}
function b786(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(19);return 0;
}
function b787(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(20);return 0;
}
function b788(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(21);return 0;
}
function b789(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(22);return 0;
}
function b790(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(23);return 0;
}
function b791(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(24);return 0;
}
function b792(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(29);return 0;
}
function b793(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(30);return 0;
}
function b794(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(31);return 0;
}
function b795(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(32);return 0;
}
function b796(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(33);return 0;
}
function b797(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(34);return 0;
}
function b798(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(35);return 0;
}
function b799(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(36);return 0;
}
function b800(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(37);return 0;
}
function b801(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(38);return 0;
}
function b802(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(39);return 0;
}
function b803(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(40);return 0;
}
function b804(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(42);return 0;
}
function b805(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(43);return 0;
}
function b806(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(44);return 0;
}
function b807(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(46);return 0;
}
function b808(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(47);return 0;
}
function b809(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(48);return 0;
}
function b810(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(49);return 0;
}
function b811(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(50);return 0;
}
function b812(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(51);return 0;
}
function b813(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(52);return 0;
}
function b814(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(53);return 0;
}
function b815(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(58);return 0;
}
function b816(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(59);return 0;
}
function b817(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(60);return 0;
}
function b818(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(61);return 0;
}
function b819(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(62);return 0;
}
function b820(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(63);return 0;
}
function b821(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(64);return 0;
}
function b822(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(65);return 0;
}
function b823(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(66);return 0;
}
function b824(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(67);return 0;
}
function b825(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(68);return 0;
}
function b826(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(69);return 0;
}
function b827(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(70);return 0;
}
function b828(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(71);return 0;
}
function b829(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(72);return 0;
}
function b830(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(73);return 0;
}
function b831(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(74);return 0;
}
function b832(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(75);return 0;
}
function b833(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(76);return 0;
}
function b834(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(77);return 0;
}
function b835(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(78);return 0;
}
function b836(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(79);return 0;
}
function b837(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(80);return 0;
}
function b838(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(81);return 0;
}
function b839(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(82);return 0;
}
function b840(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(83);return 0;
}
function b841(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(84);return 0;
}
function b842(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(85);return 0;
}
function b843(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(86);return 0;
}
function b844(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(87);return 0;
}
function b845(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(88);return 0;
}
function b846(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(89);return 0;
}
function b847(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(90);return 0;
}
function b848(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(91);return 0;
}
function b849(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(92);return 0;
}
function b850(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(93);return 0;
}
function b851(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(94);return 0;
}
function b852(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(95);return 0;
}
function b853(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(96);return 0;
}
function b854(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(97);return 0;
}
function b855(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(98);return 0;
}
function b856(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(99);return 0;
}
function b857(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(100);return 0;
}
function b858(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(101);return 0;
}
function b859(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(102);return 0;
}
function b860(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(103);return 0;
}
function b861(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(104);return 0;
}
function b862(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(105);return 0;
}
function b863(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(106);return 0;
}
function b864(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(107);return 0;
}
function b865(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(108);return 0;
}
function b866(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(109);return 0;
}
function b867(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(110);return 0;
}
function b868(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(111);return 0;
}
function b869(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(112);return 0;
}
function b870(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(113);return 0;
}
function b871(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(114);return 0;
}
function b872(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(115);return 0;
}
function b873(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(116);return 0;
}
function b874(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(117);return 0;
}
function b875(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(118);return 0;
}
function b876(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(119);return 0;
}
function b877(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(120);return 0;
}
function b878(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(121);return 0;
}
function b879(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(122);return 0;
}
function b880(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(123);return 0;
}
function b881(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(124);return 0;
}
function b882(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(125);return 0;
}
function b883(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(126);return 0;
}
function b884(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(127);return 0;
}
function b885(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(128);return 0;
}
function b886(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(129);return 0;
}
function b887(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(130);return 0;
}
function b888(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(131);return 0;
}
function b889(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(136);return 0;
}
function b890(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(137);return 0;
}
function b891(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(138);return 0;
}
function b892(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(139);return 0;
}
function b893(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(140);return 0;
}
function b894(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(141);return 0;
}
function b895(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(142);return 0;
}
function b896(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(143);return 0;
}
function b897(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(144);return 0;
}
function b898(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(145);return 0;
}
function b899(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(146);return 0;
}
function b900(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(147);return 0;
}
function b901(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(148);return 0;
}
function b902(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(149);return 0;
}
function b903(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(150);return 0;
}
function b904(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(151);return 0;
}
function b905(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(152);return 0;
}
function b906(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(153);return 0;
}
function b907(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(154);return 0;
}
function b908(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(155);return 0;
}
function b909(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(156);return 0;
}
function b910(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(157);return 0;
}
function b911(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(158);return 0;
}
function b912(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(159);return 0;
}
function b913(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(161);return 0;
}
function b914(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(162);return 0;
}
function b915(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(163);return 0;
}
function b916(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(166);return 0;
}
function b917(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(167);return 0;
}
function b918(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(168);return 0;
}
function b919(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(169);return 0;
}
function b920(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(170);return 0;
}
function b921(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(171);return 0;
}
function b922(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(172);return 0;
}
function b923(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(176);return 0;
}
function b924(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(177);return 0;
}
function b925(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(178);return 0;
}
function b926(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(179);return 0;
}
function b927(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(180);return 0;
}
function b928(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(181);return 0;
}
function b929(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(182);return 0;
}
function b930(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(185);return 0;
}
function b931(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(186);return 0;
}
function b932(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(187);return 0;
}
function b933(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(188);return 0;
}
function b934(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(189);return 0;
}
function b935(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(190);return 0;
}
function b936(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(191);return 0;
}
function b937(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(192);return 0;
}
function b938(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(193);return 0;
}
function b939(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(194);return 0;
}
function b940(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(195);return 0;
}
function b941(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(198);return 0;
}
function b942(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(199);return 0;
}
function b943(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(200);return 0;
}
function b944(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(201);return 0;
}
function b945(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(202);return 0;
}
function b946(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(203);return 0;
}
function b947(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(204);return 0;
}
function b948(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(205);return 0;
}
function b949(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(206);return 0;
}
function b950(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(207);return 0;
}
function b951(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(208);return 0;
}
function b952(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(209);return 0;
}
function b953(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(210);return 0;
}
function b954(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(211);return 0;
}
function b955(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(212);return 0;
}
function b956(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(213);return 0;
}
function b957(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(214);return 0;
}
function b958(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(215);return 0;
}
function b959(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(216);return 0;
}
function b960(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(217);return 0;
}
function b961(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(218);return 0;
}
function b962(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(219);return 0;
}
function b963(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(220);return 0;
}
function b964(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(221);return 0;
}
function b965(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(222);return 0;
}
function b966(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(223);return 0;
}
function b967(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(224);return 0;
}
function b968(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(225);return 0;
}
function b969(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(226);return 0;
}
function b970(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(227);return 0;
}
function b971(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(228);return 0;
}
function b972(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(229);return 0;
}
function b973(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(230);return 0;
}
function b974(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(231);return 0;
}
function b975(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(232);return 0;
}
function b976(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(233);return 0;
}
function b977(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(234);return 0;
}
function b978(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(235);return 0;
}
function b979(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(236);return 0;
}
function b980(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(237);return 0;
}
function b981(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(238);return 0;
}
function b982(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(239);return 0;
}
function b983(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(240);return 0;
}
function b984(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(241);return 0;
}
function b985(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(242);return 0;
}
function b986(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(243);return 0;
}
function b987(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(244);return 0;
}
function b988(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(245);return 0;
}
function b989(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(246);return 0;
}
function b990(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(247);return 0;
}
function b991(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(248);return 0;
}
function b992(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(249);return 0;
}
function b993(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(250);return 0;
}
function b994(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(251);return 0;
}
function b995(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(252);return 0;
}
function b996(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(253);return 0;
}
function b997(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(254);return 0;
}
function b998(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(255);return 0;
}
function b1000(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1001(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b1002(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b1003(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b1004(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(5);return 0;
}
function b1005(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0;
}
function b1006(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b1007(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0;
}
function b1008(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b1009(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b1010(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(13);return 0;
}
function b1011(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(14);return 0;
}
function b1012(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0;
}
function b1013(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(16);return 0;
}
function b1014(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(17);return 0;
}
function b1015(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(18);return 0;
}
function b1016(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(19);return 0;
}
function b1017(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(21);return 0;
}
function b1018(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(22);return 0;
}
function b1019(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(23);return 0;
}
function b1020(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(24);return 0;
}
function b1021(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(25);return 0;
}
function b1022(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(26);return 0;
}
function b1023(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(27);return 0;
}
function b1024(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(28);return 0;
}
function b1025(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(29);return 0;
}
function b1026(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(30);return 0;
}
function b1027(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(31);return 0;
}
function b1028(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(32);return 0;
}
function b1029(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0;
}
function b1030(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(34);return 0;
}
function b1031(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(35);return 0;
}
function b1032(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(36);return 0;
}
function b1033(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(37);return 0;
}
function b1034(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(38);return 0;
}
function b1035(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(39);return 0;
}
function b1036(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(40);return 0;
}
function b1037(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(41);return 0;
}
function b1038(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(42);return 0;
}
function b1039(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(43);return 0;
}
function b1040(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(44);return 0;
}
function b1041(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(45);return 0;
}
function b1042(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(46);return 0;
}
function b1043(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(47);return 0;
}
function b1044(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(48);return 0;
}
function b1045(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(49);return 0;
}
function b1046(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(50);return 0;
}
function b1047(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(51);return 0;
}
function b1048(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(52);return 0;
}
function b1049(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(53);return 0;
}
function b1050(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(54);return 0;
}
function b1051(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(55);return 0;
}
function b1052(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(56);return 0;
}
function b1053(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(57);return 0;
}
function b1054(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(58);return 0;
}
function b1055(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(59);return 0;
}
function b1056(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(60);return 0;
}
function b1057(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(61);return 0;
}
function b1058(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(62);return 0;
}
function b1059(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(63);return 0;
}
function b1060(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(64);return 0;
}
function b1061(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(65);return 0;
}
function b1062(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(66);return 0;
}
function b1063(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(67);return 0;
}
function b1064(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(68);return 0;
}
function b1065(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(69);return 0;
}
function b1066(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(70);return 0;
}
function b1067(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(71);return 0;
}
function b1068(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(72);return 0;
}
function b1069(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(73);return 0;
}
function b1070(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(74);return 0;
}
function b1071(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(75);return 0;
}
function b1072(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(76);return 0;
}
function b1073(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(77);return 0;
}
function b1074(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(78);return 0;
}
function b1075(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(79);return 0;
}
function b1076(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(80);return 0;
}
function b1077(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(81);return 0;
}
function b1078(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(82);return 0;
}
function b1079(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(83);return 0;
}
function b1080(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(84);return 0;
}
function b1081(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(85);return 0;
}
function b1082(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(86);return 0;
}
function b1083(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(87);return 0;
}
function b1084(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(88);return 0;
}
function b1085(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(89);return 0;
}
function b1086(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(90);return 0;
}
function b1087(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(91);return 0;
}
function b1088(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(92);return 0;
}
function b1089(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(93);return 0;
}
function b1090(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(94);return 0;
}
function b1091(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(95);return 0;
}
function b1092(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(96);return 0;
}
function b1093(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(97);return 0;
}
function b1094(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(98);return 0;
}
function b1095(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(99);return 0;
}
function b1096(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(100);return 0;
}
function b1097(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(101);return 0;
}
function b1098(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(102);return 0;
}
function b1099(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(103);return 0;
}
function b1100(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(104);return 0;
}
function b1101(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(105);return 0;
}
function b1102(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(106);return 0;
}
function b1103(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(107);return 0;
}
function b1104(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(108);return 0;
}
function b1105(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(109);return 0;
}
function b1106(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(110);return 0;
}
function b1107(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(111);return 0;
}
function b1108(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(112);return 0;
}
function b1109(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(113);return 0;
}
function b1110(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(114);return 0;
}
function b1111(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(115);return 0;
}
function b1112(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(116);return 0;
}
function b1113(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(117);return 0;
}
function b1114(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(118);return 0;
}
function b1115(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(119);return 0;
}
function b1116(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(120);return 0;
}
function b1117(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(121);return 0;
}
function b1118(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(122);return 0;
}
function b1119(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(123);return 0;
}
function b1120(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(124);return 0;
}
function b1121(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(125);return 0;
}
function b1122(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(126);return 0;
}
function b1123(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(127);return 0;
}
function b1124(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(128);return 0;
}
function b1125(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(129);return 0;
}
function b1126(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(130);return 0;
}
function b1127(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(131);return 0;
}
function b1128(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(132);return 0;
}
function b1129(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(133);return 0;
}
function b1130(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(134);return 0;
}
function b1131(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(135);return 0;
}
function b1132(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(136);return 0;
}
function b1133(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(137);return 0;
}
function b1134(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(138);return 0;
}
function b1135(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(139);return 0;
}
function b1136(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(140);return 0;
}
function b1137(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(141);return 0;
}
function b1138(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(142);return 0;
}
function b1139(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(143);return 0;
}
function b1140(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(144);return 0;
}
function b1141(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(145);return 0;
}
function b1142(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(146);return 0;
}
function b1143(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(147);return 0;
}
function b1144(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(148);return 0;
}
function b1145(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(149);return 0;
}
function b1146(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(150);return 0;
}
function b1147(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(151);return 0;
}
function b1148(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(152);return 0;
}
function b1149(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(153);return 0;
}
function b1150(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(154);return 0;
}
function b1151(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(155);return 0;
}
function b1152(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(156);return 0;
}
function b1153(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(157);return 0;
}
function b1154(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(158);return 0;
}
function b1155(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(159);return 0;
}
function b1156(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(160);return 0;
}
function b1157(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(161);return 0;
}
function b1158(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(162);return 0;
}
function b1159(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(163);return 0;
}
function b1160(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(164);return 0;
}
function b1161(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(165);return 0;
}
function b1162(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(166);return 0;
}
function b1163(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(167);return 0;
}
function b1164(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(168);return 0;
}
function b1165(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(169);return 0;
}
function b1166(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(170);return 0;
}
function b1167(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(171);return 0;
}
function b1168(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(172);return 0;
}
function b1169(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(173);return 0;
}
function b1170(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(174);return 0;
}
function b1171(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(175);return 0;
}
function b1172(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(176);return 0;
}
function b1173(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(177);return 0;
}
function b1174(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(178);return 0;
}
function b1175(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(179);return 0;
}
function b1176(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(180);return 0;
}
function b1177(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(181);return 0;
}
function b1178(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(182);return 0;
}
function b1179(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(183);return 0;
}
function b1180(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(184);return 0;
}
function b1181(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(185);return 0;
}
function b1182(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(186);return 0;
}
function b1183(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(187);return 0;
}
function b1184(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(188);return 0;
}
function b1185(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(189);return 0;
}
function b1186(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(190);return 0;
}
function b1187(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(191);return 0;
}
function b1188(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(192);return 0;
}
function b1189(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(193);return 0;
}
function b1190(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(194);return 0;
}
function b1191(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(195);return 0;
}
function b1192(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(196);return 0;
}
function b1193(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(197);return 0;
}
function b1194(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(198);return 0;
}
function b1195(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(199);return 0;
}
function b1196(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(200);return 0;
}
function b1197(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(201);return 0;
}
function b1198(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(202);return 0;
}
function b1199(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(203);return 0;
}
function b1200(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(204);return 0;
}
function b1201(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(205);return 0;
}
function b1202(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(206);return 0;
}
function b1203(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(207);return 0;
}
function b1204(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(208);return 0;
}
function b1205(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(209);return 0;
}
function b1206(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(210);return 0;
}
function b1207(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(211);return 0;
}
function b1208(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(212);return 0;
}
function b1209(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(214);return 0;
}
function b1210(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(215);return 0;
}
function b1211(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(216);return 0;
}
function b1212(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(217);return 0;
}
function b1213(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(218);return 0;
}
function b1214(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(219);return 0;
}
function b1215(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(220);return 0;
}
function b1216(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(221);return 0;
}
function b1217(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(222);return 0;
}
function b1218(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(223);return 0;
}
function b1219(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(224);return 0;
}
function b1220(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(225);return 0;
}
function b1221(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(226);return 0;
}
function b1222(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(227);return 0;
}
function b1223(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(228);return 0;
}
function b1224(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(229);return 0;
}
function b1225(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(230);return 0;
}
function b1226(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(231);return 0;
}
function b1227(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(232);return 0;
}
function b1228(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(233);return 0;
}
function b1229(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(234);return 0;
}
function b1230(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(235);return 0;
}
function b1231(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(236);return 0;
}
function b1232(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(237);return 0;
}
function b1233(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(238);return 0;
}
function b1234(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(239);return 0;
}
function b1235(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(240);return 0;
}
function b1236(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(241);return 0;
}
function b1237(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(242);return 0;
}
function b1238(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(243);return 0;
}
function b1239(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(244);return 0;
}
function b1240(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(245);return 0;
}
function b1241(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(246);return 0;
}
function b1242(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(247);return 0;
}
function b1243(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(248);return 0;
}
function b1244(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(249);return 0;
}
function b1245(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(250);return 0;
}
function b1246(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(251);return 0;
}
function b1247(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(252);return 0;
}
function b1248(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(253);return 0;
}
function b1249(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(254);return 0;
}
function b1250(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(255);return 0;
}
function b1252(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(0);return 0;
}
function b1253(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(1);return 0;
}
function b1254(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(2);return 0;
}
function b1255(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b1256(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0;
}
function b1257(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0;
}
function b1259() {
 ; nullFunc_v(0);
}
function b1260() {
 ; nullFunc_v(1);
}
function b1261() {
 ; nullFunc_v(2);
}
function b1262() {
 ; nullFunc_v(3);
}
function b1263() {
 ; nullFunc_v(4);
}
function b1264() {
 ; nullFunc_v(5);
}
function b1265() {
 ; nullFunc_v(6);
}
function b1266() {
 ; nullFunc_v(7);
}
function b1267() {
 ; nullFunc_v(8);
}
function b1268() {
 ; nullFunc_v(9);
}
function b1269() {
 ; nullFunc_v(10);
}
function b1270() {
 ; nullFunc_v(11);
}
function b1271() {
 ; nullFunc_v(12);
}
function b1272() {
 ; nullFunc_v(13);
}
function b1273() {
 ; nullFunc_v(14);
}
function b1274() {
 ; nullFunc_v(15);
}
function b1275() {
 ; nullFunc_v(16);
}
function b1276() {
 ; nullFunc_v(17);
}
function b1277() {
 ; nullFunc_v(18);
}
function b1278() {
 ; nullFunc_v(19);
}
function b1279() {
 ; nullFunc_v(20);
}
function b1280() {
 ; nullFunc_v(21);
}
function b1281() {
 ; nullFunc_v(22);
}
function b1282() {
 ; nullFunc_v(23);
}
function b1283() {
 ; nullFunc_v(24);
}
function b1284() {
 ; nullFunc_v(25);
}
function b1285() {
 ; nullFunc_v(26);
}
function b1286() {
 ; nullFunc_v(27);
}
function b1287() {
 ; nullFunc_v(28);
}
function b1288() {
 ; nullFunc_v(29);
}
function b1289() {
 ; nullFunc_v(30);
}
function b1290() {
 ; nullFunc_v(31);
}
function b1291() {
 ; nullFunc_v(32);
}
function b1292() {
 ; nullFunc_v(33);
}
function b1293() {
 ; nullFunc_v(35);
}
function b1294() {
 ; nullFunc_v(36);
}
function b1295() {
 ; nullFunc_v(37);
}
function b1296() {
 ; nullFunc_v(38);
}
function b1297() {
 ; nullFunc_v(39);
}
function b1298() {
 ; nullFunc_v(40);
}
function b1299() {
 ; nullFunc_v(41);
}
function b1300() {
 ; nullFunc_v(42);
}
function b1301() {
 ; nullFunc_v(43);
}
function b1302() {
 ; nullFunc_v(44);
}
function b1303() {
 ; nullFunc_v(45);
}
function b1304() {
 ; nullFunc_v(46);
}
function b1305() {
 ; nullFunc_v(47);
}
function b1306() {
 ; nullFunc_v(48);
}
function b1307() {
 ; nullFunc_v(49);
}
function b1308() {
 ; nullFunc_v(50);
}
function b1309() {
 ; nullFunc_v(51);
}
function b1310() {
 ; nullFunc_v(52);
}
function b1311() {
 ; nullFunc_v(53);
}
function b1312() {
 ; nullFunc_v(54);
}
function b1313() {
 ; nullFunc_v(55);
}
function b1314() {
 ; nullFunc_v(56);
}
function b1315() {
 ; nullFunc_v(57);
}
function b1316() {
 ; nullFunc_v(58);
}
function b1317() {
 ; nullFunc_v(59);
}
function b1318() {
 ; nullFunc_v(60);
}
function b1319() {
 ; nullFunc_v(61);
}
function b1320() {
 ; nullFunc_v(62);
}
function b1321() {
 ; nullFunc_v(63);
}
function b1322() {
 ; nullFunc_v(64);
}
function b1323() {
 ; nullFunc_v(65);
}
function b1324() {
 ; nullFunc_v(66);
}
function b1325() {
 ; nullFunc_v(67);
}
function b1326() {
 ; nullFunc_v(68);
}
function b1327() {
 ; nullFunc_v(69);
}
function b1328() {
 ; nullFunc_v(70);
}
function b1329() {
 ; nullFunc_v(71);
}
function b1330() {
 ; nullFunc_v(72);
}
function b1331() {
 ; nullFunc_v(73);
}
function b1332() {
 ; nullFunc_v(74);
}
function b1333() {
 ; nullFunc_v(75);
}
function b1334() {
 ; nullFunc_v(76);
}
function b1335() {
 ; nullFunc_v(77);
}
function b1336() {
 ; nullFunc_v(78);
}
function b1337() {
 ; nullFunc_v(79);
}
function b1338() {
 ; nullFunc_v(80);
}
function b1339() {
 ; nullFunc_v(81);
}
function b1340() {
 ; nullFunc_v(82);
}
function b1341() {
 ; nullFunc_v(83);
}
function b1342() {
 ; nullFunc_v(84);
}
function b1343() {
 ; nullFunc_v(85);
}
function b1344() {
 ; nullFunc_v(86);
}
function b1345() {
 ; nullFunc_v(87);
}
function b1346() {
 ; nullFunc_v(88);
}
function b1347() {
 ; nullFunc_v(89);
}
function b1348() {
 ; nullFunc_v(90);
}
function b1349() {
 ; nullFunc_v(91);
}
function b1350() {
 ; nullFunc_v(92);
}
function b1351() {
 ; nullFunc_v(93);
}
function b1352() {
 ; nullFunc_v(94);
}
function b1353() {
 ; nullFunc_v(95);
}
function b1354() {
 ; nullFunc_v(96);
}
function b1355() {
 ; nullFunc_v(97);
}
function b1356() {
 ; nullFunc_v(98);
}
function b1357() {
 ; nullFunc_v(99);
}
function b1358() {
 ; nullFunc_v(100);
}
function b1359() {
 ; nullFunc_v(101);
}
function b1360() {
 ; nullFunc_v(102);
}
function b1361() {
 ; nullFunc_v(103);
}
function b1362() {
 ; nullFunc_v(104);
}
function b1363() {
 ; nullFunc_v(105);
}
function b1364() {
 ; nullFunc_v(106);
}
function b1365() {
 ; nullFunc_v(107);
}
function b1366() {
 ; nullFunc_v(108);
}
function b1367() {
 ; nullFunc_v(109);
}
function b1368() {
 ; nullFunc_v(110);
}
function b1369() {
 ; nullFunc_v(111);
}
function b1370() {
 ; nullFunc_v(112);
}
function b1371() {
 ; nullFunc_v(113);
}
function b1372() {
 ; nullFunc_v(114);
}
function b1373() {
 ; nullFunc_v(115);
}
function b1374() {
 ; nullFunc_v(116);
}
function b1375() {
 ; nullFunc_v(117);
}
function b1376() {
 ; nullFunc_v(118);
}
function b1377() {
 ; nullFunc_v(119);
}
function b1378() {
 ; nullFunc_v(120);
}
function b1379() {
 ; nullFunc_v(121);
}
function b1380() {
 ; nullFunc_v(122);
}
function b1381() {
 ; nullFunc_v(123);
}
function b1382() {
 ; nullFunc_v(124);
}
function b1383() {
 ; nullFunc_v(125);
}
function b1384() {
 ; nullFunc_v(126);
}
function b1385() {
 ; nullFunc_v(127);
}
function b1386() {
 ; nullFunc_v(128);
}
function b1387() {
 ; nullFunc_v(129);
}
function b1388() {
 ; nullFunc_v(130);
}
function b1389() {
 ; nullFunc_v(131);
}
function b1390() {
 ; nullFunc_v(132);
}
function b1391() {
 ; nullFunc_v(133);
}
function b1392() {
 ; nullFunc_v(134);
}
function b1393() {
 ; nullFunc_v(135);
}
function b1394() {
 ; nullFunc_v(136);
}
function b1395() {
 ; nullFunc_v(137);
}
function b1396() {
 ; nullFunc_v(138);
}
function b1397() {
 ; nullFunc_v(139);
}
function b1398() {
 ; nullFunc_v(140);
}
function b1399() {
 ; nullFunc_v(141);
}
function b1400() {
 ; nullFunc_v(142);
}
function b1401() {
 ; nullFunc_v(143);
}
function b1402() {
 ; nullFunc_v(144);
}
function b1403() {
 ; nullFunc_v(145);
}
function b1404() {
 ; nullFunc_v(146);
}
function b1405() {
 ; nullFunc_v(147);
}
function b1406() {
 ; nullFunc_v(148);
}
function b1407() {
 ; nullFunc_v(149);
}
function b1408() {
 ; nullFunc_v(150);
}
function b1409() {
 ; nullFunc_v(151);
}
function b1410() {
 ; nullFunc_v(152);
}
function b1411() {
 ; nullFunc_v(153);
}
function b1412() {
 ; nullFunc_v(154);
}
function b1413() {
 ; nullFunc_v(155);
}
function b1414() {
 ; nullFunc_v(156);
}
function b1415() {
 ; nullFunc_v(157);
}
function b1416() {
 ; nullFunc_v(158);
}
function b1417() {
 ; nullFunc_v(159);
}
function b1418() {
 ; nullFunc_v(160);
}
function b1419() {
 ; nullFunc_v(161);
}
function b1420() {
 ; nullFunc_v(162);
}
function b1421() {
 ; nullFunc_v(163);
}
function b1422() {
 ; nullFunc_v(164);
}
function b1423() {
 ; nullFunc_v(165);
}
function b1424() {
 ; nullFunc_v(166);
}
function b1425() {
 ; nullFunc_v(167);
}
function b1426() {
 ; nullFunc_v(168);
}
function b1427() {
 ; nullFunc_v(169);
}
function b1428() {
 ; nullFunc_v(170);
}
function b1429() {
 ; nullFunc_v(171);
}
function b1430() {
 ; nullFunc_v(172);
}
function b1431() {
 ; nullFunc_v(173);
}
function b1432() {
 ; nullFunc_v(174);
}
function b1433() {
 ; nullFunc_v(175);
}
function b1434() {
 ; nullFunc_v(176);
}
function b1435() {
 ; nullFunc_v(177);
}
function b1436() {
 ; nullFunc_v(178);
}
function b1437() {
 ; nullFunc_v(179);
}
function b1438() {
 ; nullFunc_v(180);
}
function b1439() {
 ; nullFunc_v(181);
}
function b1440() {
 ; nullFunc_v(182);
}
function b1441() {
 ; nullFunc_v(183);
}
function b1442() {
 ; nullFunc_v(184);
}
function b1443() {
 ; nullFunc_v(185);
}
function b1444() {
 ; nullFunc_v(186);
}
function b1445() {
 ; nullFunc_v(187);
}
function b1446() {
 ; nullFunc_v(188);
}
function b1447() {
 ; nullFunc_v(189);
}
function b1448() {
 ; nullFunc_v(190);
}
function b1449() {
 ; nullFunc_v(191);
}
function b1450() {
 ; nullFunc_v(192);
}
function b1451() {
 ; nullFunc_v(193);
}
function b1452() {
 ; nullFunc_v(194);
}
function b1453() {
 ; nullFunc_v(195);
}
function b1454() {
 ; nullFunc_v(196);
}
function b1455() {
 ; nullFunc_v(197);
}
function b1456() {
 ; nullFunc_v(198);
}
function b1457() {
 ; nullFunc_v(199);
}
function b1458() {
 ; nullFunc_v(200);
}
function b1459() {
 ; nullFunc_v(201);
}
function b1460() {
 ; nullFunc_v(202);
}
function b1461() {
 ; nullFunc_v(203);
}
function b1462() {
 ; nullFunc_v(204);
}
function b1463() {
 ; nullFunc_v(208);
}
function b1464() {
 ; nullFunc_v(209);
}
function b1465() {
 ; nullFunc_v(210);
}
function b1466() {
 ; nullFunc_v(211);
}
function b1467() {
 ; nullFunc_v(212);
}
function b1468() {
 ; nullFunc_v(213);
}
function b1469() {
 ; nullFunc_v(214);
}
function b1470() {
 ; nullFunc_v(215);
}
function b1471() {
 ; nullFunc_v(216);
}
function b1472() {
 ; nullFunc_v(218);
}
function b1473() {
 ; nullFunc_v(219);
}
function b1474() {
 ; nullFunc_v(220);
}
function b1475() {
 ; nullFunc_v(221);
}
function b1476() {
 ; nullFunc_v(222);
}
function b1477() {
 ; nullFunc_v(223);
}
function b1478() {
 ; nullFunc_v(224);
}
function b1479() {
 ; nullFunc_v(225);
}
function b1480() {
 ; nullFunc_v(226);
}
function b1481() {
 ; nullFunc_v(227);
}
function b1482() {
 ; nullFunc_v(228);
}
function b1483() {
 ; nullFunc_v(229);
}
function b1484() {
 ; nullFunc_v(230);
}
function b1485() {
 ; nullFunc_v(231);
}
function b1486() {
 ; nullFunc_v(232);
}
function b1487() {
 ; nullFunc_v(233);
}
function b1488() {
 ; nullFunc_v(234);
}
function b1489() {
 ; nullFunc_v(235);
}
function b1490() {
 ; nullFunc_v(236);
}
function b1491() {
 ; nullFunc_v(237);
}
function b1492() {
 ; nullFunc_v(238);
}
function b1493() {
 ; nullFunc_v(239);
}
function b1494() {
 ; nullFunc_v(240);
}
function b1495() {
 ; nullFunc_v(241);
}
function b1496() {
 ; nullFunc_v(242);
}
function b1497() {
 ; nullFunc_v(243);
}
function b1498() {
 ; nullFunc_v(244);
}
function b1499() {
 ; nullFunc_v(245);
}
function b1500() {
 ; nullFunc_v(246);
}
function b1501() {
 ; nullFunc_v(247);
}
function b1502() {
 ; nullFunc_v(248);
}
function b1503() {
 ; nullFunc_v(249);
}
function b1504() {
 ; nullFunc_v(250);
}
function b1505() {
 ; nullFunc_v(251);
}
function b1506() {
 ; nullFunc_v(252);
}
function b1507() {
 ; nullFunc_v(253);
}
function b1508() {
 ; nullFunc_v(254);
}
function b1509() {
 ; nullFunc_v(255);
}
function b1511(p0) {
 p0 = p0|0; nullFunc_vi(0);
}
function b1512(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b1513(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b1514(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b1515(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function b1516(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function b1517(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b1518(p0) {
 p0 = p0|0; nullFunc_vi(11);
}
function b1519(p0) {
 p0 = p0|0; nullFunc_vi(12);
}
function b1520(p0) {
 p0 = p0|0; nullFunc_vi(13);
}
function b1521(p0) {
 p0 = p0|0; nullFunc_vi(14);
}
function b1522(p0) {
 p0 = p0|0; nullFunc_vi(16);
}
function b1523(p0) {
 p0 = p0|0; nullFunc_vi(17);
}
function b1524(p0) {
 p0 = p0|0; nullFunc_vi(18);
}
function b1525(p0) {
 p0 = p0|0; nullFunc_vi(20);
}
function b1526(p0) {
 p0 = p0|0; nullFunc_vi(22);
}
function b1527(p0) {
 p0 = p0|0; nullFunc_vi(23);
}
function b1528(p0) {
 p0 = p0|0; nullFunc_vi(24);
}
function b1529(p0) {
 p0 = p0|0; nullFunc_vi(25);
}
function b1530(p0) {
 p0 = p0|0; nullFunc_vi(26);
}
function b1531(p0) {
 p0 = p0|0; nullFunc_vi(27);
}
function b1532(p0) {
 p0 = p0|0; nullFunc_vi(28);
}
function b1533(p0) {
 p0 = p0|0; nullFunc_vi(29);
}
function b1534(p0) {
 p0 = p0|0; nullFunc_vi(30);
}
function b1535(p0) {
 p0 = p0|0; nullFunc_vi(31);
}
function b1536(p0) {
 p0 = p0|0; nullFunc_vi(34);
}
function b1537(p0) {
 p0 = p0|0; nullFunc_vi(36);
}
function b1538(p0) {
 p0 = p0|0; nullFunc_vi(37);
}
function b1539(p0) {
 p0 = p0|0; nullFunc_vi(39);
}
function b1540(p0) {
 p0 = p0|0; nullFunc_vi(41);
}
function b1541(p0) {
 p0 = p0|0; nullFunc_vi(42);
}
function b1542(p0) {
 p0 = p0|0; nullFunc_vi(43);
}
function b1543(p0) {
 p0 = p0|0; nullFunc_vi(45);
}
function b1544(p0) {
 p0 = p0|0; nullFunc_vi(46);
}
function b1545(p0) {
 p0 = p0|0; nullFunc_vi(47);
}
function b1546(p0) {
 p0 = p0|0; nullFunc_vi(49);
}
function b1547(p0) {
 p0 = p0|0; nullFunc_vi(50);
}
function b1548(p0) {
 p0 = p0|0; nullFunc_vi(52);
}
function b1549(p0) {
 p0 = p0|0; nullFunc_vi(54);
}
function b1550(p0) {
 p0 = p0|0; nullFunc_vi(55);
}
function b1551(p0) {
 p0 = p0|0; nullFunc_vi(56);
}
function b1552(p0) {
 p0 = p0|0; nullFunc_vi(57);
}
function b1553(p0) {
 p0 = p0|0; nullFunc_vi(58);
}
function b1554(p0) {
 p0 = p0|0; nullFunc_vi(59);
}
function b1555(p0) {
 p0 = p0|0; nullFunc_vi(61);
}
function b1556(p0) {
 p0 = p0|0; nullFunc_vi(63);
}
function b1557(p0) {
 p0 = p0|0; nullFunc_vi(65);
}
function b1558(p0) {
 p0 = p0|0; nullFunc_vi(67);
}
function b1559(p0) {
 p0 = p0|0; nullFunc_vi(69);
}
function b1560(p0) {
 p0 = p0|0; nullFunc_vi(71);
}
function b1561(p0) {
 p0 = p0|0; nullFunc_vi(73);
}
function b1562(p0) {
 p0 = p0|0; nullFunc_vi(75);
}
function b1563(p0) {
 p0 = p0|0; nullFunc_vi(77);
}
function b1564(p0) {
 p0 = p0|0; nullFunc_vi(79);
}
function b1565(p0) {
 p0 = p0|0; nullFunc_vi(81);
}
function b1566(p0) {
 p0 = p0|0; nullFunc_vi(83);
}
function b1567(p0) {
 p0 = p0|0; nullFunc_vi(85);
}
function b1568(p0) {
 p0 = p0|0; nullFunc_vi(87);
}
function b1569(p0) {
 p0 = p0|0; nullFunc_vi(89);
}
function b1570(p0) {
 p0 = p0|0; nullFunc_vi(91);
}
function b1571(p0) {
 p0 = p0|0; nullFunc_vi(93);
}
function b1572(p0) {
 p0 = p0|0; nullFunc_vi(95);
}
function b1573(p0) {
 p0 = p0|0; nullFunc_vi(97);
}
function b1574(p0) {
 p0 = p0|0; nullFunc_vi(99);
}
function b1575(p0) {
 p0 = p0|0; nullFunc_vi(100);
}
function b1576(p0) {
 p0 = p0|0; nullFunc_vi(102);
}
function b1577(p0) {
 p0 = p0|0; nullFunc_vi(104);
}
function b1578(p0) {
 p0 = p0|0; nullFunc_vi(106);
}
function b1579(p0) {
 p0 = p0|0; nullFunc_vi(107);
}
function b1580(p0) {
 p0 = p0|0; nullFunc_vi(109);
}
function b1581(p0) {
 p0 = p0|0; nullFunc_vi(111);
}
function b1582(p0) {
 p0 = p0|0; nullFunc_vi(113);
}
function b1583(p0) {
 p0 = p0|0; nullFunc_vi(115);
}
function b1584(p0) {
 p0 = p0|0; nullFunc_vi(116);
}
function b1585(p0) {
 p0 = p0|0; nullFunc_vi(118);
}
function b1586(p0) {
 p0 = p0|0; nullFunc_vi(120);
}
function b1587(p0) {
 p0 = p0|0; nullFunc_vi(122);
}
function b1588(p0) {
 p0 = p0|0; nullFunc_vi(124);
}
function b1589(p0) {
 p0 = p0|0; nullFunc_vi(126);
}
function b1590(p0) {
 p0 = p0|0; nullFunc_vi(128);
}
function b1591(p0) {
 p0 = p0|0; nullFunc_vi(130);
}
function b1592(p0) {
 p0 = p0|0; nullFunc_vi(132);
}
function b1593(p0) {
 p0 = p0|0; nullFunc_vi(133);
}
function b1594(p0) {
 p0 = p0|0; nullFunc_vi(134);
}
function b1595(p0) {
 p0 = p0|0; nullFunc_vi(135);
}
function b1596(p0) {
 p0 = p0|0; nullFunc_vi(136);
}
function b1597(p0) {
 p0 = p0|0; nullFunc_vi(137);
}
function b1598(p0) {
 p0 = p0|0; nullFunc_vi(139);
}
function b1599(p0) {
 p0 = p0|0; nullFunc_vi(141);
}
function b1600(p0) {
 p0 = p0|0; nullFunc_vi(142);
}
function b1601(p0) {
 p0 = p0|0; nullFunc_vi(144);
}
function b1602(p0) {
 p0 = p0|0; nullFunc_vi(146);
}
function b1603(p0) {
 p0 = p0|0; nullFunc_vi(148);
}
function b1604(p0) {
 p0 = p0|0; nullFunc_vi(150);
}
function b1605(p0) {
 p0 = p0|0; nullFunc_vi(152);
}
function b1606(p0) {
 p0 = p0|0; nullFunc_vi(154);
}
function b1607(p0) {
 p0 = p0|0; nullFunc_vi(155);
}
function b1608(p0) {
 p0 = p0|0; nullFunc_vi(157);
}
function b1609(p0) {
 p0 = p0|0; nullFunc_vi(158);
}
function b1610(p0) {
 p0 = p0|0; nullFunc_vi(160);
}
function b1611(p0) {
 p0 = p0|0; nullFunc_vi(161);
}
function b1612(p0) {
 p0 = p0|0; nullFunc_vi(162);
}
function b1613(p0) {
 p0 = p0|0; nullFunc_vi(164);
}
function b1614(p0) {
 p0 = p0|0; nullFunc_vi(165);
}
function b1615(p0) {
 p0 = p0|0; nullFunc_vi(166);
}
function b1616(p0) {
 p0 = p0|0; nullFunc_vi(167);
}
function b1617(p0) {
 p0 = p0|0; nullFunc_vi(169);
}
function b1618(p0) {
 p0 = p0|0; nullFunc_vi(171);
}
function b1619(p0) {
 p0 = p0|0; nullFunc_vi(173);
}
function b1620(p0) {
 p0 = p0|0; nullFunc_vi(174);
}
function b1621(p0) {
 p0 = p0|0; nullFunc_vi(175);
}
function b1622(p0) {
 p0 = p0|0; nullFunc_vi(176);
}
function b1623(p0) {
 p0 = p0|0; nullFunc_vi(177);
}
function b1624(p0) {
 p0 = p0|0; nullFunc_vi(179);
}
function b1625(p0) {
 p0 = p0|0; nullFunc_vi(181);
}
function b1626(p0) {
 p0 = p0|0; nullFunc_vi(183);
}
function b1627(p0) {
 p0 = p0|0; nullFunc_vi(184);
}
function b1628(p0) {
 p0 = p0|0; nullFunc_vi(185);
}
function b1629(p0) {
 p0 = p0|0; nullFunc_vi(186);
}
function b1630(p0) {
 p0 = p0|0; nullFunc_vi(188);
}
function b1631(p0) {
 p0 = p0|0; nullFunc_vi(190);
}
function b1632(p0) {
 p0 = p0|0; nullFunc_vi(192);
}
function b1633(p0) {
 p0 = p0|0; nullFunc_vi(194);
}
function b1634(p0) {
 p0 = p0|0; nullFunc_vi(196);
}
function b1635(p0) {
 p0 = p0|0; nullFunc_vi(197);
}
function b1636(p0) {
 p0 = p0|0; nullFunc_vi(198);
}
function b1637(p0) {
 p0 = p0|0; nullFunc_vi(199);
}
function b1638(p0) {
 p0 = p0|0; nullFunc_vi(201);
}
function b1639(p0) {
 p0 = p0|0; nullFunc_vi(203);
}
function b1640(p0) {
 p0 = p0|0; nullFunc_vi(205);
}
function b1641(p0) {
 p0 = p0|0; nullFunc_vi(206);
}
function b1642(p0) {
 p0 = p0|0; nullFunc_vi(207);
}
function b1643(p0) {
 p0 = p0|0; nullFunc_vi(208);
}
function b1644(p0) {
 p0 = p0|0; nullFunc_vi(209);
}
function b1645(p0) {
 p0 = p0|0; nullFunc_vi(210);
}
function b1646(p0) {
 p0 = p0|0; nullFunc_vi(211);
}
function b1647(p0) {
 p0 = p0|0; nullFunc_vi(212);
}
function b1648(p0) {
 p0 = p0|0; nullFunc_vi(213);
}
function b1649(p0) {
 p0 = p0|0; nullFunc_vi(214);
}
function b1650(p0) {
 p0 = p0|0; nullFunc_vi(215);
}
function b1651(p0) {
 p0 = p0|0; nullFunc_vi(216);
}
function b1652(p0) {
 p0 = p0|0; nullFunc_vi(217);
}
function b1653(p0) {
 p0 = p0|0; nullFunc_vi(218);
}
function b1654(p0) {
 p0 = p0|0; nullFunc_vi(219);
}
function b1655(p0) {
 p0 = p0|0; nullFunc_vi(220);
}
function b1656(p0) {
 p0 = p0|0; nullFunc_vi(221);
}
function b1657(p0) {
 p0 = p0|0; nullFunc_vi(222);
}
function b1658(p0) {
 p0 = p0|0; nullFunc_vi(223);
}
function b1659(p0) {
 p0 = p0|0; nullFunc_vi(224);
}
function b1660(p0) {
 p0 = p0|0; nullFunc_vi(225);
}
function b1661(p0) {
 p0 = p0|0; nullFunc_vi(226);
}
function b1662(p0) {
 p0 = p0|0; nullFunc_vi(227);
}
function b1663(p0) {
 p0 = p0|0; nullFunc_vi(228);
}
function b1664(p0) {
 p0 = p0|0; nullFunc_vi(229);
}
function b1665(p0) {
 p0 = p0|0; nullFunc_vi(230);
}
function b1666(p0) {
 p0 = p0|0; nullFunc_vi(231);
}
function b1667(p0) {
 p0 = p0|0; nullFunc_vi(232);
}
function b1668(p0) {
 p0 = p0|0; nullFunc_vi(233);
}
function b1669(p0) {
 p0 = p0|0; nullFunc_vi(234);
}
function b1670(p0) {
 p0 = p0|0; nullFunc_vi(235);
}
function b1671(p0) {
 p0 = p0|0; nullFunc_vi(236);
}
function b1672(p0) {
 p0 = p0|0; nullFunc_vi(237);
}
function b1673(p0) {
 p0 = p0|0; nullFunc_vi(238);
}
function b1674(p0) {
 p0 = p0|0; nullFunc_vi(239);
}
function b1675(p0) {
 p0 = p0|0; nullFunc_vi(240);
}
function b1676(p0) {
 p0 = p0|0; nullFunc_vi(241);
}
function b1677(p0) {
 p0 = p0|0; nullFunc_vi(242);
}
function b1678(p0) {
 p0 = p0|0; nullFunc_vi(243);
}
function b1679(p0) {
 p0 = p0|0; nullFunc_vi(244);
}
function b1680(p0) {
 p0 = p0|0; nullFunc_vi(245);
}
function b1681(p0) {
 p0 = p0|0; nullFunc_vi(246);
}
function b1682(p0) {
 p0 = p0|0; nullFunc_vi(247);
}
function b1683(p0) {
 p0 = p0|0; nullFunc_vi(248);
}
function b1684(p0) {
 p0 = p0|0; nullFunc_vi(249);
}
function b1685(p0) {
 p0 = p0|0; nullFunc_vi(250);
}
function b1686(p0) {
 p0 = p0|0; nullFunc_vi(251);
}
function b1687(p0) {
 p0 = p0|0; nullFunc_vi(252);
}
function b1688(p0) {
 p0 = p0|0; nullFunc_vi(253);
}
function b1689(p0) {
 p0 = p0|0; nullFunc_vi(254);
}
function b1690(p0) {
 p0 = p0|0; nullFunc_vi(255);
}
function b1692(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(0);
}
function b1693(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(1);
}
function b1694(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b1695(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b1696(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b1697(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b1698(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function b1699(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function b1700(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b1701(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(9);
}
function b1702(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(10);
}
function b1703(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(11);
}
function b1704(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(12);
}
function b1705(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(13);
}
function b1706(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(14);
}
function b1707(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(15);
}
function b1708(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(16);
}
function b1709(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(17);
}
function b1710(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(18);
}
function b1711(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(19);
}
function b1712(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(20);
}
function b1713(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(21);
}
function b1714(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(22);
}
function b1715(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(23);
}
function b1716(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(24);
}
function b1717(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(25);
}
function b1718(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(26);
}
function b1719(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(27);
}
function b1720(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(28);
}
function b1721(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(32);
}
function b1722(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(33);
}
function b1723(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(34);
}
function b1724(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(35);
}
function b1725(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(38);
}
function b1726(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(40);
}
function b1727(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(41);
}
function b1728(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(44);
}
function b1729(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(45);
}
function b1730(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(48);
}
function b1731(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(51);
}
function b1732(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(53);
}
function b1733(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(54);
}
function b1734(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(55);
}
function b1735(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(56);
}
function b1736(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(57);
}
function b1737(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(60);
}
function b1738(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(62);
}
function b1739(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(64);
}
function b1740(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(66);
}
function b1741(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(68);
}
function b1742(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(70);
}
function b1743(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(72);
}
function b1744(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(74);
}
function b1745(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(76);
}
function b1746(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(78);
}
function b1747(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(80);
}
function b1748(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(82);
}
function b1749(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(84);
}
function b1750(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(86);
}
function b1751(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(88);
}
function b1752(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(90);
}
function b1753(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(92);
}
function b1754(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(94);
}
function b1755(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(96);
}
function b1756(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(98);
}
function b1757(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(101);
}
function b1758(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(103);
}
function b1759(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(105);
}
function b1760(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(108);
}
function b1761(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(110);
}
function b1762(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(112);
}
function b1763(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(114);
}
function b1764(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(117);
}
function b1765(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(119);
}
function b1766(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(121);
}
function b1767(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(123);
}
function b1768(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(125);
}
function b1769(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(127);
}
function b1770(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(129);
}
function b1771(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(131);
}
function b1772(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(132);
}
function b1773(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(133);
}
function b1774(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(134);
}
function b1775(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(135);
}
function b1776(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(138);
}
function b1777(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(140);
}
function b1778(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(143);
}
function b1779(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(145);
}
function b1780(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(147);
}
function b1781(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(149);
}
function b1782(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(151);
}
function b1783(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(153);
}
function b1784(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(156);
}
function b1785(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(159);
}
function b1786(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(160);
}
function b1787(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(163);
}
function b1788(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(164);
}
function b1789(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(165);
}
function b1790(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(168);
}
function b1791(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(170);
}
function b1792(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(172);
}
function b1793(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(173);
}
function b1794(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(174);
}
function b1795(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(175);
}
function b1796(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(178);
}
function b1797(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(180);
}
function b1798(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(182);
}
function b1799(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(183);
}
function b1800(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(184);
}
function b1801(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(187);
}
function b1802(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(189);
}
function b1803(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(191);
}
function b1804(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(193);
}
function b1805(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(195);
}
function b1806(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(196);
}
function b1807(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(197);
}
function b1808(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(200);
}
function b1809(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(202);
}
function b1810(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(204);
}
function b1811(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(205);
}
function b1812(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(206);
}
function b1813(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(207);
}
function b1814(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(208);
}
function b1815(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(209);
}
function b1816(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(210);
}
function b1817(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(211);
}
function b1818(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(212);
}
function b1819(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(213);
}
function b1820(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(214);
}
function b1821(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(215);
}
function b1822(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(217);
}
function b1823(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(218);
}
function b1824(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(219);
}
function b1825(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(220);
}
function b1826(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(221);
}
function b1827(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(222);
}
function b1828(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(223);
}
function b1829(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(224);
}
function b1830(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(225);
}
function b1831(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(226);
}
function b1832(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(227);
}
function b1833(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(228);
}
function b1834(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(229);
}
function b1835(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(230);
}
function b1836(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(231);
}
function b1837(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(232);
}
function b1838(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(233);
}
function b1839(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(234);
}
function b1840(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(235);
}
function b1841(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(236);
}
function b1842(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(237);
}
function b1843(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(238);
}
function b1844(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(239);
}
function b1845(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(240);
}
function b1846(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(241);
}
function b1847(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(242);
}
function b1848(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(243);
}
function b1849(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(244);
}
function b1850(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(245);
}
function b1851(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(246);
}
function b1852(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(247);
}
function b1853(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(248);
}
function b1854(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(249);
}
function b1855(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(250);
}
function b1856(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(251);
}
function b1857(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(252);
}
function b1858(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(253);
}
function b1859(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(254);
}
function b1860(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(255);
}
function b1862(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0);
}
function b1863(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(1);
}
function b1864(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(2);
}
function b1865(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(3);
}
function b1866(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(4);
}
function b1867(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(5);
}
function b1868(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(6);
}
function b1869(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}
function b1870(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function b1871(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}
function b1872(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}
function b1873(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}
function b1874(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}
function b1875(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}
function b1876(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15);
}
function b1877(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(16);
}
function b1878(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(17);
}
function b1879(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(19);
}
function b1880(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(20);
}
function b1881(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(21);
}
function b1882(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(22);
}
function b1883(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23);
}
function b1884(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25);
}
function b1885(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(26);
}
function b1886(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27);
}
function b1887(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(28);
}
function b1888(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(29);
}
function b1889(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(30);
}
function b1890(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(31);
}
function b1892(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function b1893(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b1894(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b1895(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3);
}
function b1896(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(4);
}
function b1897(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(5);
}
function b1898(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(6);
}
function b1899(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(7);
}
function b1900(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(8);
}
function b1901(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9);
}
function b1902(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(10);
}
function b1903(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(11);
}
function b1904(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(12);
}
function b1905(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(14);
}
function b1906(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(15);
}
function b1907(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(16);
}
function b1908(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(18);
}
function b1909(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(19);
}
function b1910(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(20);
}
function b1911(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(21);
}
function b1912(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(22);
}
function b1913(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(24);
}
function b1914(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(25);
}
function b1915(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(26);
}
function b1916(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(27);
}
function b1917(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(28);
}
function b1918(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(29);
}
function b1919(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(30);
}
function b1920(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(31);
}
function b1921(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(32);
}
function b1922(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(33);
}
function b1923(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(34);
}
function b1924(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(35);
}
function b1925(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(36);
}
function b1926(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(37);
}
function b1927(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(38);
}
function b1928(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(39);
}
function b1929(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(40);
}
function b1930(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(41);
}
function b1931(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(42);
}
function b1932(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(43);
}
function b1933(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(44);
}
function b1934(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(45);
}
function b1935(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(46);
}
function b1936(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(47);
}
function b1937(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(48);
}
function b1938(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(49);
}
function b1939(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(50);
}
function b1940(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(51);
}
function b1941(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(52);
}
function b1942(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(53);
}
function b1943(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(54);
}
function b1944(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(55);
}
function b1945(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(56);
}
function b1946(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(57);
}
function b1947(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(58);
}
function b1948(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(59);
}
function b1949(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(60);
}
function b1950(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(61);
}
function b1951(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(62);
}
function b1952(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(63);
}
function b1953(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(64);
}
function b1954(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(65);
}
function b1955(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(66);
}
function b1956(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(67);
}
function b1957(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(68);
}
function b1958(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(69);
}
function b1959(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(70);
}
function b1960(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(71);
}
function b1961(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(72);
}
function b1962(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(73);
}
function b1963(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(74);
}
function b1964(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(75);
}
function b1965(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(76);
}
function b1966(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(77);
}
function b1967(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(78);
}
function b1968(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(79);
}
function b1969(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(80);
}
function b1970(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(81);
}
function b1971(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(82);
}
function b1972(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(83);
}
function b1973(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(84);
}
function b1974(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(85);
}
function b1975(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(86);
}
function b1976(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(87);
}
function b1977(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(88);
}
function b1978(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(89);
}
function b1979(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(90);
}
function b1980(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(91);
}
function b1981(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(92);
}
function b1982(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(93);
}
function b1983(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(94);
}
function b1984(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(95);
}
function b1985(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(96);
}
function b1986(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(97);
}
function b1987(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(98);
}
function b1988(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(99);
}
function b1989(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(100);
}
function b1990(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(101);
}
function b1991(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(102);
}
function b1992(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(103);
}
function b1993(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(104);
}
function b1994(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(105);
}
function b1995(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(106);
}
function b1996(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(107);
}
function b1997(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(108);
}
function b1998(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(109);
}
function b1999(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(110);
}
function b2000(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(111);
}
function b2001(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(112);
}
function b2002(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(113);
}
function b2003(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(114);
}
function b2004(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(115);
}
function b2005(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(116);
}
function b2006(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(117);
}
function b2007(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(118);
}
function b2008(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(119);
}
function b2009(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(120);
}
function b2010(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(121);
}
function b2011(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(122);
}
function b2012(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(123);
}
function b2013(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(124);
}
function b2014(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(125);
}
function b2015(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(126);
}
function b2016(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(127);
}
function b2017(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(128);
}
function b2018(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(129);
}
function b2019(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(130);
}
function b2020(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(131);
}
function b2021(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(132);
}
function b2022(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(133);
}
function b2023(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(134);
}
function b2024(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(135);
}
function b2025(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(136);
}
function b2026(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(137);
}
function b2027(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(138);
}
function b2028(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(139);
}
function b2029(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(140);
}
function b2030(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(141);
}
function b2031(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(142);
}
function b2032(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(143);
}
function b2033(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(144);
}
function b2034(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(145);
}
function b2035(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(146);
}
function b2036(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(147);
}
function b2037(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(148);
}
function b2038(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(149);
}
function b2039(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(150);
}
function b2040(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(151);
}
function b2041(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(152);
}
function b2042(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(153);
}
function b2043(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(154);
}
function b2044(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(155);
}
function b2045(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(156);
}
function b2046(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(157);
}
function b2047(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(158);
}
function b2048(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(159);
}
function b2049(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(160);
}
function b2050(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(161);
}
function b2051(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(162);
}
function b2052(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(163);
}
function b2053(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(164);
}
function b2054(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(165);
}
function b2055(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(166);
}
function b2056(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(167);
}
function b2057(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(168);
}
function b2058(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(169);
}
function b2059(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(170);
}
function b2060(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(171);
}
function b2061(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(172);
}
function b2062(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(173);
}
function b2063(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(174);
}
function b2064(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(175);
}
function b2065(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(176);
}
function b2066(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(177);
}
function b2067(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(178);
}
function b2068(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(179);
}
function b2069(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(180);
}
function b2070(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(181);
}
function b2071(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(182);
}
function b2072(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(183);
}
function b2073(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(184);
}
function b2074(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(185);
}
function b2075(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(186);
}
function b2076(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(187);
}
function b2077(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(188);
}
function b2078(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(189);
}
function b2079(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(190);
}
function b2080(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(191);
}
function b2081(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(192);
}
function b2082(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(193);
}
function b2083(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(194);
}
function b2084(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(195);
}
function b2085(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(196);
}
function b2086(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(197);
}
function b2087(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(198);
}
function b2088(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(199);
}
function b2089(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(200);
}
function b2090(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(201);
}
function b2091(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(202);
}
function b2092(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(203);
}
function b2093(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(204);
}
function b2094(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(205);
}
function b2095(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(206);
}
function b2096(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(207);
}
function b2097(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(210);
}
function b2098(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(211);
}
function b2099(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(212);
}
function b2100(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(213);
}
function b2101(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(214);
}
function b2102(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(215);
}
function b2103(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(216);
}
function b2104(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(217);
}
function b2105(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(218);
}
function b2106(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(219);
}
function b2107(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(220);
}
function b2108(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(221);
}
function b2109(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(222);
}
function b2110(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(223);
}
function b2111(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(224);
}
function b2112(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(225);
}
function b2113(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(226);
}
function b2114(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(227);
}
function b2115(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(228);
}
function b2116(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(229);
}
function b2117(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(230);
}
function b2118(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(231);
}
function b2119(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(232);
}
function b2120(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(233);
}
function b2121(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(234);
}
function b2122(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(235);
}
function b2123(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(236);
}
function b2124(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(237);
}
function b2125(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(238);
}
function b2126(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(239);
}
function b2127(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(240);
}
function b2128(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(241);
}
function b2129(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(242);
}
function b2130(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(243);
}
function b2131(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(244);
}
function b2132(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(245);
}
function b2133(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(246);
}
function b2134(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(247);
}
function b2135(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(248);
}
function b2136(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(249);
}
function b2137(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(250);
}
function b2138(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(251);
}
function b2139(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(252);
}
function b2140(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(253);
}
function b2141(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(254);
}
function b2142(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(255);
}
function b2144(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(0);
}
function b2145(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(1);
}
function b2146(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(2);
}
function b2147(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(3);
}
function b2148(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(4);
}
function b2149(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}
function b2150(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(6);
}
function b2151(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7);
}
function b2152(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b2153(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9);
}
function b2154(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b2155(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11);
}
function b2156(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13);
}
function b2157(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14);
}
function b2158(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function b2159(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(17);
}
function b2160(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(18);
}
function b2161(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(19);
}
function b2162(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(20);
}
function b2163(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(21);
}
function b2164(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(23);
}
function b2165(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(24);
}
function b2166(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(25);
}
function b2167(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(26);
}
function b2168(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(27);
}
function b2169(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(28);
}
function b2170(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(29);
}
function b2171(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(30);
}
function b2172(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(31);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_idi = [b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31
,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61
,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91
,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121
,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151
,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181
,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211
,b212,b213,b214,b215,b216,_emsc_frame,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240
,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257];
var FUNCTION_TABLE_ii = [b259,___stdio_close,b260,b261,___emscripten_stdout_close,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285
,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315
,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345
,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375
,b376,b377,b378,b379,b380,b381,b382,b383,b384,b385,b386,b387,b388,b389,b390,b391,b392,b393,b394,b395,b396,b397,b398,b399,b400,b401,b402,b403,b404,b405
,b406,b407,b408,b409,b410,b411,b412,b413,b414,b415,b416,b417,b418,b419,b420,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,b431,b432,b433,b434,b435
,b436,b437,b438,b439,b440,b441,b442,b443,b444,b445,b446,b447,b448,b449,b450,b451,b452,b453,b454,b455,b456,b457,b458,b459,b460,b461,b462,b463,b464,b465
,b466,_wgpu_get_render_view,_wgpu_get_resolve_view,_wgpu_get_depth_stencil_view,b467,b468,b469,b470,b471,b472,b473,b474,b475,b476,b477,b478,b479,b480,b481,b482,b483,b484,b485,b486,b487,b488,b489,b490,b491,b492
,b493,b494,b495,b496,b497,b498,b499,b500,b501,b502,b503,b504,b505,b506,b507,b508,b509];
var FUNCTION_TABLE_iidiiii = [b511,b512,b513,b514,b515,b516,b517,b518,b519,b520,b521,b522,b523,b524,b525,b526,b527,b528,b529,b530,b531,b532,b533,b534,b535,b536,b537,b538,b539
,b540,b541,b542,b543,b544,b545,b546,b547,b548,b549,b550,b551,b552,b553,b554,b555,b556,b557,b558,b559,b560,b561,b562,b563,b564,b565,b566,b567,b568,b569
,b570,b571,b572,b573,b574,b575,b576,b577,b578,b579,b580,b581,b582,b583,b584,b585,b586,b587,b588,b589,b590,b591,b592,b593,b594,b595,b596,b597,b598,b599
,b600,b601,b602,b603,b604,b605,b606,b607,b608,b609,b610,b611,b612,b613,b614,b615,b616,b617,b618,b619,b620,b621,b622,b623,b624,b625,b626,b627,b628,b629
,b630,b631,b632,b633,b634,b635,b636,b637,b638,b639,b640,b641,b642,b643,b644,b645,b646,b647,b648,b649,b650,b651,b652,b653,b654,b655,b656,b657,b658,b659
,b660,b661,b662,b663,b664,b665,b666,b667,b668,b669,b670,b671,b672,b673,b674,b675,b676,b677,b678,b679,b680,b681,b682,b683,b684,b685,b686,b687,b688,b689
,b690,b691,b692,b693,b694,b695,b696,b697,b698,b699,b700,b701,b702,b703,b704,b705,b706,b707,b708,b709,b710,b711,b712,b713,b714,b715,b716,b717,b718,b719
,b720,b721,b722,b723,b724,b725,_fmt_fp,b726,b727,b728,b729,b730,b731,b732,b733,b734,b735,b736,b737,b738,b739,b740,b741,b742,b743,b744,b745,b746,b747,b748
,b749,b750,b751,b752,b753,b754,b755,b756,b757,b758,b759,b760,b761,b762,b763,b764,b765];
var FUNCTION_TABLE_iii = [b767,b768,b769,b770,b771,b772,b773,b774,b775,b776,b777,b778,b779,b780,b781,b782,b783,b784,b785,b786,b787,b788,b789,b790,b791,__ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE
,b792,b793,b794,b795,b796,b797,b798,b799,b800,b801,b802,b803,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE,b804,b805,b806,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE,b807,b808,b809,b810,b811,b812,b813,b814,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE,b815
,b816,b817,b818,b819,b820,b821,b822,b823,b824,b825,b826,b827,b828,b829,b830,b831,b832,b833,b834,b835,b836,b837,b838,b839,b840,b841,b842,b843,b844,b845
,b846,b847,b848,b849,b850,b851,b852,b853,b854,b855,b856,b857,b858,b859,b860,b861,b862,b863,b864,b865,b866,b867,b868,b869,b870,b871,b872,b873,b874,b875
,b876,b877,b878,b879,b880,b881,b882,b883,b884,b885,b886,b887,b888,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE,b889,b890,b891,b892,b893,b894,b895,b896,b897,b898,b899,b900,b901
,b902,b903,b904,b905,b906,b907,b908,b909,b910,b911,b912,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE,b913,b914,b915,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE,b916,b917,b918,b919,b920,b921,b922,__ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE,b923,b924,b925
,b926,b927,b928,b929,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE,b930,b931,b932,b933,b934,b935,b936,b937,b938,b939,b940,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE,b941,b942,b943,b944,b945,b946,b947,b948,b949,b950,b951
,b952,b953,b954,b955,b956,b957,b958,b959,b960,b961,b962,b963,b964,b965,b966,b967,b968,b969,b970,b971,b972,b973,b974,b975,b976,b977,b978,b979,b980,b981
,b982,b983,b984,b985,b986,b987,b988,b989,b990,b991,b992,b993,b994,b995,b996,b997,b998];
var FUNCTION_TABLE_iiii = [b1000,b1001,___stdio_write,b1002,b1003,b1004,_sn_write,b1005,b1006,b1007,b1008,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1009,b1010,b1011,b1012,b1013,b1014,b1015,b1016,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1017,b1018,b1019,b1020,b1021,b1022,b1023,b1024
,b1025,b1026,b1027,b1028,b1029,b1030,b1031,b1032,b1033,b1034,b1035,b1036,b1037,b1038,b1039,b1040,b1041,b1042,b1043,b1044,b1045,b1046,b1047,b1048,b1049,b1050,b1051,b1052,b1053,b1054
,b1055,b1056,b1057,b1058,b1059,b1060,b1061,b1062,b1063,b1064,b1065,b1066,b1067,b1068,b1069,b1070,b1071,b1072,b1073,b1074,b1075,b1076,b1077,b1078,b1079,b1080,b1081,b1082,b1083,b1084
,b1085,b1086,b1087,b1088,b1089,b1090,b1091,b1092,b1093,b1094,b1095,b1096,b1097,b1098,b1099,b1100,b1101,b1102,b1103,b1104,b1105,b1106,b1107,b1108,b1109,b1110,b1111,b1112,b1113,b1114
,b1115,b1116,b1117,b1118,b1119,b1120,b1121,b1122,b1123,b1124,b1125,b1126,b1127,b1128,b1129,b1130,b1131,b1132,b1133,b1134,b1135,b1136,b1137,b1138,b1139,b1140,b1141,b1142,b1143,b1144
,b1145,b1146,b1147,b1148,b1149,b1150,b1151,b1152,b1153,b1154,b1155,b1156,b1157,b1158,b1159,b1160,b1161,b1162,b1163,b1164,b1165,b1166,b1167,b1168,b1169,b1170,b1171,b1172,b1173,b1174
,b1175,b1176,b1177,b1178,b1179,b1180,b1181,b1182,b1183,b1184,b1185,b1186,b1187,b1188,b1189,b1190,b1191,b1192,b1193,b1194,b1195,b1196,b1197,b1198,b1199,b1200,b1201,b1202,b1203,b1204
,b1205,b1206,b1207,b1208,_emsc_size_changed,b1209,b1210,b1211,b1212,b1213,b1214,b1215,b1216,b1217,b1218,b1219,b1220,b1221,b1222,b1223,b1224,b1225,b1226,b1227,b1228,b1229,b1230,b1231,b1232,b1233
,b1234,b1235,b1236,b1237,b1238,b1239,b1240,b1241,b1242,b1243,b1244,b1245,b1246,b1247,b1248,b1249,b1250];
var FUNCTION_TABLE_iiiii = [b1252,b1253,b1254,___stdio_seek,b1255,___emscripten_stdout_seek,b1256,b1257];
var FUNCTION_TABLE_v = [b1259,b1260,b1261,b1262,b1263,b1264,b1265,b1266,b1267,b1268,b1269,b1270,b1271,b1272,b1273,b1274,b1275,b1276,b1277,b1278,b1279,b1280,b1281,b1282,b1283,b1284,b1285,b1286,b1287
,b1288,b1289,b1290,b1291,b1292,___cxa_pure_virtual,b1293,b1294,b1295,b1296,b1297,b1298,b1299,b1300,b1301,b1302,b1303,b1304,b1305,b1306,b1307,b1308,b1309,b1310,b1311,b1312,b1313,b1314,b1315,b1316
,b1317,b1318,b1319,b1320,b1321,b1322,b1323,b1324,b1325,b1326,b1327,b1328,b1329,b1330,b1331,b1332,b1333,b1334,b1335,b1336,b1337,b1338,b1339,b1340,b1341,b1342,b1343,b1344,b1345,b1346
,b1347,b1348,b1349,b1350,b1351,b1352,b1353,b1354,b1355,b1356,b1357,b1358,b1359,b1360,b1361,b1362,b1363,b1364,b1365,b1366,b1367,b1368,b1369,b1370,b1371,b1372,b1373,b1374,b1375,b1376
,b1377,b1378,b1379,b1380,b1381,b1382,b1383,b1384,b1385,b1386,b1387,b1388,b1389,b1390,b1391,b1392,b1393,b1394,b1395,b1396,b1397,b1398,b1399,b1400,b1401,b1402,b1403,b1404,b1405,b1406
,b1407,b1408,b1409,b1410,b1411,b1412,b1413,b1414,b1415,b1416,b1417,b1418,b1419,b1420,b1421,b1422,b1423,b1424,b1425,b1426,b1427,b1428,b1429,b1430,b1431,b1432,b1433,b1434,b1435,b1436
,b1437,b1438,b1439,b1440,b1441,b1442,b1443,b1444,b1445,b1446,b1447,b1448,b1449,b1450,b1451,b1452,b1453,b1454,b1455,b1456,b1457,b1458,b1459,b1460,b1461,b1462,_init,_frame,_shutdown_,b1463
,b1464,b1465,b1466,b1467,b1468,b1469,b1470,b1471,__ZL28demangling_terminate_handlerv,b1472,b1473,b1474,b1475,b1476,b1477,b1478,b1479,b1480,b1481,b1482,b1483,b1484,b1485,b1486,b1487,b1488,b1489,b1490,b1491,b1492
,b1493,b1494,b1495,b1496,b1497,b1498,b1499,b1500,b1501,b1502,b1503,b1504,b1505,b1506,b1507,b1508,b1509];
var FUNCTION_TABLE_vi = [b1511,b1512,b1513,b1514,b1515,b1516,b1517,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b1518,b1519,b1520,b1521,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b1522,b1523,b1524,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b1525,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b1526,b1527,b1528,b1529,b1530,b1531,b1532
,b1533,b1534,b1535,__ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev,__ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev,b1536,__ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev,b1537,b1538,__ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev,b1539,__ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev,b1540,b1541,b1542,__ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev,b1543,b1544,b1545,__ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev,b1546,b1547,__ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev,b1548,__ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev,b1549,b1550,b1551,b1552,b1553
,b1554,__ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev,b1555,__ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev,b1556,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev,b1557,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev,b1558,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev,b1559,__ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev,b1560,__ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev,b1561,__ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev,b1562,__ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev,b1563,__ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev,b1564,__ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev,b1565,__ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev,b1566,__ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev,b1567,__ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev,b1568,__ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev
,b1569,__ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev,b1570,__ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev,b1571,__ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev,b1572,__ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev,b1573,__ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev,b1574,b1575,__ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev,b1576,__ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev,b1577,__ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev,b1578,b1579,__ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev,b1580,__ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev,b1581,__ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev,b1582,__ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev,b1583,b1584,__ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev,b1585
,__ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev,b1586,__ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev,b1587,__ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev,b1588,__ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev,b1589,__ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev,b1590,__ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev,b1591,__ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev,b1592,b1593,b1594,b1595,b1596,b1597,__ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev,b1598,__ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev,b1599,b1600,__ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev,b1601,__ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev,b1602,__ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev,b1603
,__ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev,b1604,__ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev,b1605,__ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev,b1606,b1607,__ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev,b1608,b1609,__ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev,b1610,b1611,b1612,__ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev,b1613,b1614,b1615,b1616,__ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev,b1617,__ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev,b1618,__ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev,b1619,b1620,b1621,b1622,b1623,__ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev
,b1624,__ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev,b1625,__ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev,b1626,b1627,b1628,b1629,__ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev,b1630,__ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev,b1631,__ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev,b1632,__ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev,b1633,__ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev,b1634,b1635,b1636,b1637,__ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev,b1638,__ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev,b1639,__ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev,b1640,b1641,b1642,b1643
,b1644,b1645,b1646,b1647,b1648,b1649,b1650,b1651,b1652,b1653,b1654,b1655,b1656,b1657,b1658,b1659,b1660,b1661,b1662,b1663,b1664,b1665,b1666,b1667,b1668,b1669,b1670,b1671,b1672,b1673
,b1674,b1675,b1676,b1677,b1678,b1679,b1680,b1681,b1682,b1683,b1684,b1685,b1686,b1687,b1688,b1689,b1690];
var FUNCTION_TABLE_vii = [b1692,b1693,b1694,b1695,b1696,b1697,b1698,b1699,b1700,b1701,b1702,b1703,b1704,b1705,b1706,b1707,b1708,b1709,b1710,b1711,b1712,b1713,b1714,b1715,b1716,b1717,b1718,b1719,b1720
,__ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv,b1721,b1722,b1723,b1724,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv,b1725,__ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE,b1726,b1727,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE,b1728,b1729,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE,b1730,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv,b1731,__ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE,b1732,b1733,b1734,b1735,b1736,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE,b1737,__ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE,b1738,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE,b1739,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE,b1740,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE,b1741,__ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE,b1742,__ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE,b1743,__ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE,b1744,__ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE,b1745,__ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE,b1746,__ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE,b1747,__ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE,b1748,__ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE,b1749,__ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE,b1750,__ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE,b1751
,__ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE,b1752,__ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE,b1753,__ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE,b1754,__ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE,b1755,__ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE,b1756,__ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv,b1757,__ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE,b1758,__ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE,b1759,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv,b1760,__ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE,b1761,__ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE,b1762,__ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE,b1763,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv,b1764,__ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE
,b1765,__ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE,b1766,__ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE,b1767,__ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE,b1768,__ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE,b1769,__ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE,b1770,__ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE,b1771,b1772,b1773,b1774,b1775,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE,b1776,__ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE,b1777,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv,b1778,__ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE,b1779,__ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE,b1780,__ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE
,b1781,__ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE,b1782,__ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE,b1783,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv,b1784,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv,b1785,b1786,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE,b1787,b1788,b1789,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE,b1790,__ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE,b1791,__ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE,b1792,b1793,b1794,b1795,__ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE,b1796
,__ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE,b1797,__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE,b1798,b1799,b1800,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE,b1801,__ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE,b1802,__ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE,b1803,__ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE,b1804,__ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE,b1805,b1806,b1807,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE,b1808,__ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE,b1809,__ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE,b1810,b1811,b1812,b1813,b1814
,b1815,b1816,b1817,b1818,b1819,b1820,b1821,_pop_arg_long_double,b1822,b1823,b1824,b1825,b1826,b1827,b1828,b1829,b1830,b1831,b1832,b1833,b1834,b1835,b1836,b1837,b1838,b1839,b1840,b1841,b1842,b1843
,b1844,b1845,b1846,b1847,b1848,b1849,b1850,b1851,b1852,b1853,b1854,b1855,b1856,b1857,b1858,b1859,b1860];
var FUNCTION_TABLE_viiii = [b1862,b1863,b1864,b1865,b1866,b1867,b1868,b1869,b1870,b1871,b1872,b1873,b1874,b1875,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b1876,b1877,b1878,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b1879,b1880,b1881,b1882,b1883,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b1884,b1885,b1886,b1887
,b1888,b1889,b1890];
var FUNCTION_TABLE_viiiii = [b1892,b1893,b1894,b1895,b1896,b1897,b1898,b1899,b1900,b1901,b1902,b1903,b1904,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1905,b1906,b1907,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1908,b1909,b1910,b1911,b1912,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1913,b1914,b1915,b1916,b1917
,b1918,b1919,b1920,b1921,b1922,b1923,b1924,b1925,b1926,b1927,b1928,b1929,b1930,b1931,b1932,b1933,b1934,b1935,b1936,b1937,b1938,b1939,b1940,b1941,b1942,b1943,b1944,b1945,b1946,b1947
,b1948,b1949,b1950,b1951,b1952,b1953,b1954,b1955,b1956,b1957,b1958,b1959,b1960,b1961,b1962,b1963,b1964,b1965,b1966,b1967,b1968,b1969,b1970,b1971,b1972,b1973,b1974,b1975,b1976,b1977
,b1978,b1979,b1980,b1981,b1982,b1983,b1984,b1985,b1986,b1987,b1988,b1989,b1990,b1991,b1992,b1993,b1994,b1995,b1996,b1997,b1998,b1999,b2000,b2001,b2002,b2003,b2004,b2005,b2006,b2007
,b2008,b2009,b2010,b2011,b2012,b2013,b2014,b2015,b2016,b2017,b2018,b2019,b2020,b2021,b2022,b2023,b2024,b2025,b2026,b2027,b2028,b2029,b2030,b2031,b2032,b2033,b2034,b2035,b2036,b2037
,b2038,b2039,b2040,b2041,b2042,b2043,b2044,b2045,b2046,b2047,b2048,b2049,b2050,b2051,b2052,b2053,b2054,b2055,b2056,b2057,b2058,b2059,b2060,b2061,b2062,b2063,b2064,b2065,b2066,b2067
,b2068,b2069,b2070,b2071,b2072,b2073,b2074,b2075,b2076,b2077,b2078,b2079,b2080,b2081,b2082,b2083,b2084,b2085,b2086,b2087,b2088,b2089,b2090,b2091,b2092,b2093,b2094,b2095,b2096,__sg_wgpu_ubpool_mapped_callback
,__sg_wgpu_staging_mapped_callback,b2097,b2098,b2099,b2100,b2101,b2102,b2103,b2104,b2105,b2106,b2107,b2108,b2109,b2110,b2111,b2112,b2113,b2114,b2115,b2116,b2117,b2118,b2119,b2120,b2121,b2122,b2123,b2124,b2125
,b2126,b2127,b2128,b2129,b2130,b2131,b2132,b2133,b2134,b2135,b2136,b2137,b2138,b2139,b2140,b2141,b2142];
var FUNCTION_TABLE_viiiiii = [b2144,b2145,b2146,b2147,b2148,b2149,b2150,b2151,b2152,b2153,b2154,b2155,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b2156,b2157,b2158,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b2159,b2160,b2161,b2162,b2163,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b2164,b2165,b2166,b2167,b2168,b2169
,b2170,b2171,b2172];

  return { __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___cxa_demangle: ___cxa_demangle, ___em_js__emsc_async_js_setup: ___em_js__emsc_async_js_setup, ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emsc_device_ready: _emsc_device_ready, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, dynCall_i: dynCall_i, dynCall_idi: dynCall_idi, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

  var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"];
  asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
  };
  
  var real____cxa_demangle = asm["___cxa_demangle"];
  asm["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____cxa_demangle.apply(null, arguments);
  };
  
  var real____em_js__emsc_async_js_setup = asm["___em_js__emsc_async_js_setup"];
  asm["___em_js__emsc_async_js_setup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____em_js__emsc_async_js_setup.apply(null, arguments);
  };
  
  var real____embind_register_native_and_builtin_types = asm["___embind_register_native_and_builtin_types"];
  asm["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____embind_register_native_and_builtin_types.apply(null, arguments);
  };
  
  var real____errno_location = asm["___errno_location"];
  asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____errno_location.apply(null, arguments);
  };
  
  var real____getTypeName = asm["___getTypeName"];
  asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____getTypeName.apply(null, arguments);
  };
  
  var real____muldi3 = asm["___muldi3"];
  asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____muldi3.apply(null, arguments);
  };
  
  var real____udivdi3 = asm["___udivdi3"];
  asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real____udivdi3.apply(null, arguments);
  };
  
  var real__bitshift64Lshr = asm["_bitshift64Lshr"];
  asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__bitshift64Lshr.apply(null, arguments);
  };
  
  var real__bitshift64Shl = asm["_bitshift64Shl"];
  asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__bitshift64Shl.apply(null, arguments);
  };
  
  var real__emsc_device_ready = asm["_emsc_device_ready"];
  asm["_emsc_device_ready"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__emsc_device_ready.apply(null, arguments);
  };
  
  var real__emscripten_get_sbrk_ptr = asm["_emscripten_get_sbrk_ptr"];
  asm["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__emscripten_get_sbrk_ptr.apply(null, arguments);
  };
  
  var real__fflush = asm["_fflush"];
  asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__fflush.apply(null, arguments);
  };
  
  var real__free = asm["_free"];
  asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__free.apply(null, arguments);
  };
  
  var real__i64Add = asm["_i64Add"];
  asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__i64Add.apply(null, arguments);
  };
  
  var real__i64Subtract = asm["_i64Subtract"];
  asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__i64Subtract.apply(null, arguments);
  };
  
  var real__main = asm["_main"];
  asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__main.apply(null, arguments);
  };
  
  var real__malloc = asm["_malloc"];
  asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__malloc.apply(null, arguments);
  };
  
  var real__memmove = asm["_memmove"];
  asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real__memmove.apply(null, arguments);
  };
  
  var real_stackAlloc = asm["stackAlloc"];
  asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real_stackAlloc.apply(null, arguments);
  };
  
  var real_stackRestore = asm["stackRestore"];
  asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real_stackRestore.apply(null, arguments);
  };
  
  var real_stackSave = asm["stackSave"];
  asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    return real_stackSave.apply(null, arguments);
  };
  var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___em_js__emsc_async_js_setup = Module["___em_js__emsc_async_js_setup"] = asm["___em_js__emsc_async_js_setup"];
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = asm["___embind_register_native_and_builtin_types"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emsc_device_ready = Module["_emsc_device_ready"] = asm["_emsc_device_ready"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PROCINFO")) Module["PROCINFO"] = function() { abort("'PROCINFO' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS__deps")) Module["DNS__deps"] = function() { abort("'DNS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets__deps")) Module["Sockets__deps"] = function() { abort("'Sockets__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS__deps")) Module["PATH_FS__deps"] = function() { abort("'PATH_FS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS__deps")) Module["SYSCALLS__deps"] = function() { abort("'SYSCALLS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle__deps")) Module["demangle__deps"] = function() { abort("'demangle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64__deps")) Module["writeI53ToI64__deps"] = function() { abort("'writeI53ToI64__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser__deps")) Module["Browser__deps"] = function() { abort("'Browser__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser__postset")) Module["Browser__postset"] = function() { abort("'Browser__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser__postset__deps")) Module["Browser__postset__deps"] = function() { abort("'Browser__postset__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS__deps")) Module["FS__deps"] = function() { abort("'FS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS__postset")) Module["FS__postset"] = function() { abort("'FS__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS__deps")) Module["MEMFS__deps"] = function() { abort("'MEMFS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY__deps")) Module["TTY__deps"] = function() { abort("'TTY__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY__postset")) Module["TTY__postset"] = function() { abort("'TTY__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS__postset")) Module["PIPEFS__postset"] = function() { abort("'PIPEFS__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS__deps")) Module["PIPEFS__deps"] = function() { abort("'PIPEFS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS__postset")) Module["SOCKFS__postset"] = function() { abort("'SOCKFS__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS__deps")) Module["SOCKFS__deps"] = function() { abort("'SOCKFS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL__postset")) Module["GL__postset"] = function() { abort("'GL__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL__deps")) Module["GL__deps"] = function() { abort("'GL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet__deps")) Module["emscriptenWebGLGet__deps"] = function() { abort("'emscriptenWebGLGet__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData__deps")) Module["emscriptenWebGLGetTexPixelData__deps"] = function() { abort("'emscriptenWebGLGetTexPixelData__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL__postset__deps")) Module["GL__postset__deps"] = function() { abort("'GL__postset__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform__deps")) Module["emscriptenWebGLGetUniform__deps"] = function() { abort("'emscriptenWebGLGetUniform__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib__deps")) Module["emscriptenWebGLGetVertexAttrib__deps"] = function() { abort("'emscriptenWebGLGetVertexAttrib__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL__deps")) Module["AL__deps"] = function() { abort("'AL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "WebVR")) Module["WebVR"] = function() { abort("'WebVR' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "WebVR__deps")) Module["WebVR__deps"] = function() { abort("'WebVR__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL__deps")) Module["SDL__deps"] = function() { abort("'SDL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx__deps")) Module["SDL_gfx__deps"] = function() { abort("'SDL_gfx__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT__deps")) Module["GLUT__deps"] = function() { abort("'GLUT__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL__deps")) Module["EGL__deps"] = function() { abort("'EGL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW__deps")) Module["GLFW__deps"] = function() { abort("'GLFW__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW__deps")) Module["GLEW__deps"] = function() { abort("'GLEW__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore__deps")) Module["IDBStore__deps"] = function() { abort("'IDBStore__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval__deps")) Module["init_emval__deps"] = function() { abort("'init_emval__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval__postset")) Module["init_emval__postset"] = function() { abort("'init_emval__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles__deps")) Module["count_emval_handles__deps"] = function() { abort("'count_emval_handles__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval__deps")) Module["get_first_emval__deps"] = function() { abort("'get_first_emval__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol__deps")) Module["getStringOrSymbol__deps"] = function() { abort("'getStringOrSymbol__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle__deps")) Module["requireHandle__deps"] = function() { abort("'requireHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator__deps")) Module["craftEmvalAllocator__deps"] = function() { abort("'craftEmvalAllocator__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError__postset")) Module["InternalError__postset"] = function() { abort("'InternalError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError__deps")) Module["InternalError__deps"] = function() { abort("'InternalError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError__postset")) Module["BindingError__postset"] = function() { abort("'BindingError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError__deps")) Module["BindingError__deps"] = function() { abort("'BindingError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError__postset")) Module["UnboundTypeError__postset"] = function() { abort("'UnboundTypeError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError__deps")) Module["UnboundTypeError__deps"] = function() { abort("'UnboundTypeError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError__postset")) Module["PureVirtualError__postset"] = function() { abort("'PureVirtualError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError__deps")) Module["PureVirtualError__deps"] = function() { abort("'PureVirtualError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind__deps")) Module["init_embind__deps"] = function() { abort("'init_embind__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind__postset")) Module["init_embind__postset"] = function() { abort("'init_embind__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError__deps")) Module["throwInternalError__deps"] = function() { abort("'throwInternalError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError__deps")) Module["throwBindingError__deps"] = function() { abort("'throwBindingError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError__deps")) Module["throwUnboundTypeError__deps"] = function() { abort("'throwUnboundTypeError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable__deps")) Module["ensureOverloadTable__deps"] = function() { abort("'ensureOverloadTable__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol__deps")) Module["exposePublicSymbol__deps"] = function() { abort("'exposePublicSymbol__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol__deps")) Module["replacePublicSymbol__deps"] = function() { abort("'replacePublicSymbol__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError__deps")) Module["extendError__deps"] = function() { abort("'extendError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction__deps")) Module["createNamedFunction__deps"] = function() { abort("'createNamedFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances__deps")) Module["registeredInstances__deps"] = function() { abort("'registeredInstances__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer__deps")) Module["getBasestPointer__deps"] = function() { abort("'getBasestPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance__deps")) Module["registerInheritedInstance__deps"] = function() { abort("'registerInheritedInstance__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance__deps")) Module["unregisterInheritedInstance__deps"] = function() { abort("'unregisterInheritedInstance__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance__deps")) Module["getInheritedInstance__deps"] = function() { abort("'getInheritedInstance__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount__deps")) Module["getInheritedInstanceCount__deps"] = function() { abort("'getInheritedInstanceCount__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances__deps")) Module["getLiveInheritedInstances__deps"] = function() { abort("'getLiveInheritedInstances__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType__deps")) Module["registerType__deps"] = function() { abort("'registerType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved__deps")) Module["whenDependentTypesAreResolved__deps"] = function() { abort("'whenDependentTypesAreResolved__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes__deps")) Module["embind_charCodes__deps"] = function() { abort("'embind_charCodes__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes__postset")) Module["embind_charCodes__postset"] = function() { abort("'embind_charCodes__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String__deps")) Module["readLatin1String__deps"] = function() { abort("'readLatin1String__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName__deps")) Module["getTypeName__deps"] = function() { abort("'getTypeName__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType__deps")) Module["requireRegisteredType__deps"] = function() { abort("'requireRegisteredType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize__deps")) Module["getShiftFromSize__deps"] = function() { abort("'getShiftFromSize__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer__deps")) Module["integerReadValueFromPointer__deps"] = function() { abort("'integerReadValueFromPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer__deps")) Module["enumReadValueFromPointer__deps"] = function() { abort("'enumReadValueFromPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer__deps")) Module["floatReadValueFromPointer__deps"] = function() { abort("'floatReadValueFromPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new___deps")) Module["new___deps"] = function() { abort("'new___deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction__deps")) Module["craftInvokerFunction__deps"] = function() { abort("'craftInvokerFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction__deps")) Module["embind__requireFunction__deps"] = function() { abort("'embind__requireFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType__deps")) Module["genericPointerToWireType__deps"] = function() { abort("'genericPointerToWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType__deps")) Module["constNoSmartPtrRawPointerToWireType__deps"] = function() { abort("'constNoSmartPtrRawPointerToWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType__deps")) Module["nonConstNoSmartPtrRawPointerToWireType__deps"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer__deps")) Module["init_RegisteredPointer__deps"] = function() { abort("'init_RegisteredPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer__deps")) Module["RegisteredPointer__deps"] = function() { abort("'RegisteredPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer__postset")) Module["RegisteredPointer__postset"] = function() { abort("'RegisteredPointer__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType__deps")) Module["RegisteredPointer_fromWireType__deps"] = function() { abort("'RegisteredPointer_fromWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle__deps")) Module["releaseClassHandle__deps"] = function() { abort("'releaseClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer__deps")) Module["attachFinalizer__deps"] = function() { abort("'attachFinalizer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle__deps")) Module["makeClassHandle__deps"] = function() { abort("'makeClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle__deps")) Module["init_ClassHandle__deps"] = function() { abort("'init_ClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle__deps")) Module["ClassHandle__deps"] = function() { abort("'ClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle__postset")) Module["ClassHandle__postset"] = function() { abort("'ClassHandle__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted__deps")) Module["throwInstanceAlreadyDeleted__deps"] = function() { abort("'throwInstanceAlreadyDeleted__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone__deps")) Module["ClassHandle_clone__deps"] = function() { abort("'ClassHandle_clone__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete__deps")) Module["ClassHandle_delete__deps"] = function() { abort("'ClassHandle_delete__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater__deps")) Module["ClassHandle_deleteLater__deps"] = function() { abort("'ClassHandle_deleteLater__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes__deps")) Module["flushPendingDeletes__deps"] = function() { abort("'flushPendingDeletes__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction__deps")) Module["setDelayFunction__deps"] = function() { abort("'setDelayFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer__deps")) Module["upcastPointer__deps"] = function() { abort("'upcastPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis__deps")) Module["validateThis__deps"] = function() { abort("'validateThis__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName__deps")) Module["makeLegalFunctionName__deps"] = function() { abort("'makeLegalFunctionName__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "WebGPU")) Module["WebGPU"] = function() { abort("'WebGPU' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "WebGPU__deps")) Module["WebGPU__deps"] = function() { abort("'WebGPU__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "calledRun")) Object.defineProperty(Module, "calledRun", { configurable: true, get: function() { abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



//# sourceMappingURL=App.html.map